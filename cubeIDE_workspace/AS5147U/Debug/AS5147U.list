
AS5147U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b48  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08006d18  08006d18  00007d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070f8  080070f8  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  080070f8  080070f8  000080f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007100  08007100  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007100  08007100  00008100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007104  08007104  00008104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007108  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d4  080072dc  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  080072dc  000093e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae90  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d96  00000000  00000000  00014094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00015e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000756  00000000  00000000  000167c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024718  00000000  00000000  00016f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c93a  00000000  00000000  0003b636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc62e  00000000  00000000  00047f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011459e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f8  00000000  00000000  001145e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00117ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d00 	.word	0x08006d00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08006d00 	.word	0x08006d00

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <_Z15AS5x47_CalcCRC8t>:
#include "AS5147U.hpp"


// AS5147U CRC8 calculation (AMS polynomial 0x1D)
uint8_t AS5x47_CalcCRC8(uint16_t data)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
    uint8_t crc = 0xC4;
 8000ee2:	23c4      	movs	r3, #196	@ 0xc4
 8000ee4:	75fb      	strb	r3, [r7, #23]
    uint8_t bytes[2] = { (uint8_t)(data >> 8), (uint8_t)(data & 0xFF) };
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	723b      	strb	r3, [r7, #8]
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	727b      	strb	r3, [r7, #9]

    for (int i = 0; i < 2; i++) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	e022      	b.n	8000f42 <_Z15AS5x47_CalcCRC8t+0x6a>
        crc ^= bytes[i];
 8000efc:	f107 0208 	add.w	r2, r7, #8
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4413      	add	r3, r2
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
 8000f08:	4053      	eors	r3, r2
 8000f0a:	75fb      	strb	r3, [r7, #23]
        for (int bit = 0; bit < 8; bit++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	e011      	b.n	8000f36 <_Z15AS5x47_CalcCRC8t+0x5e>
            if (crc & 0x80)
 8000f12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	da07      	bge.n	8000f2a <_Z15AS5x47_CalcCRC8t+0x52>
                crc = ((crc << 1) ^ 0x1D) & 0xFF;
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	b25b      	sxtb	r3, r3
 8000f20:	f083 031d 	eor.w	r3, r3, #29
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	75fb      	strb	r3, [r7, #23]
 8000f28:	e002      	b.n	8000f30 <_Z15AS5x47_CalcCRC8t+0x58>
            else
                crc = (crc << 1) & 0xFF;
 8000f2a:	7dfb      	ldrb	r3, [r7, #23]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	75fb      	strb	r3, [r7, #23]
        for (int bit = 0; bit < 8; bit++) {
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3301      	adds	r3, #1
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b07      	cmp	r3, #7
 8000f3a:	ddea      	ble.n	8000f12 <_Z15AS5x47_CalcCRC8t+0x3a>
    for (int i = 0; i < 2; i++) {
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	ddd9      	ble.n	8000efc <_Z15AS5x47_CalcCRC8t+0x24>
        }
    }
    crc ^= 0xFF;
 8000f48:	7dfb      	ldrb	r3, [r7, #23]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	75fb      	strb	r3, [r7, #23]
    return crc;
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <_Z13AS5x47_Read16P19__SPI_HandleTypeDefP12GPIO_TypeDefttPt>:


bool AS5x47_Read16(SPI_HandleTypeDef *hspi, GPIO_TypeDef *CS_Port, uint16_t CS_Pin, uint16_t address, uint16_t* result)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	4611      	mov	r1, r2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	80fb      	strh	r3, [r7, #6]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	80bb      	strh	r3, [r7, #4]
    uint8_t tx[2];
    uint8_t rx[2];
    uint16_t cmd = (0x4000u | (address & 0x3FFFu)); // bit14=1 -> read
 8000f72:	88bb      	ldrh	r3, [r7, #4]
 8000f74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f7e:	83fb      	strh	r3, [r7, #30]

    tx[0] = (uint8_t)(cmd >> 8);
 8000f80:	8bfb      	ldrh	r3, [r7, #30]
 8000f82:	0a1b      	lsrs	r3, r3, #8
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	773b      	strb	r3, [r7, #28]
    tx[1] = (uint8_t)(cmd & 0xFF);
 8000f8a:	8bfb      	ldrh	r3, [r7, #30]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	777b      	strb	r3, [r7, #29]

    // 1) Send the read command (address with bit14 set to 1)
    HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	2200      	movs	r2, #0
 8000f94:	4619      	mov	r1, r3
 8000f96:	68b8      	ldr	r0, [r7, #8]
 8000f98:	f001 f8ec 	bl	8002174 <HAL_GPIO_WritePin>
    if(HAL_SPI_Transmit(hspi, tx, 2, HAL_MAX_DELAY) != HAL_OK) return false;
 8000f9c:	f107 011c 	add.w	r1, r7, #28
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f001 ff6f 	bl	8002e8a <HAL_SPI_Transmit>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf14      	ite	ne
 8000fb2:	2301      	movne	r3, #1
 8000fb4:	2300      	moveq	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <_Z13AS5x47_Read16P19__SPI_HandleTypeDefP12GPIO_TypeDefttPt+0x64>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e030      	b.n	8001022 <_Z13AS5x47_Read16P19__SPI_HandleTypeDefP12GPIO_TypeDefttPt+0xc6>
    HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	68b8      	ldr	r0, [r7, #8]
 8000fc8:	f001 f8d4 	bl	8002174 <HAL_GPIO_WritePin>

    // 2) Read the reply
    HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	68b8      	ldr	r0, [r7, #8]
 8000fd4:	f001 f8ce 	bl	8002174 <HAL_GPIO_WritePin>
    if(HAL_SPI_Receive(hspi, rx, 2, HAL_MAX_DELAY) != HAL_OK) return false;
 8000fd8:	f107 0118 	add.w	r1, r7, #24
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f002 f88d 	bl	8003102 <HAL_SPI_Receive>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	bf14      	ite	ne
 8000fee:	2301      	movne	r3, #1
 8000ff0:	2300      	moveq	r3, #0
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <_Z13AS5x47_Read16P19__SPI_HandleTypeDefP12GPIO_TypeDefttPt+0xa0>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e012      	b.n	8001022 <_Z13AS5x47_Read16P19__SPI_HandleTypeDefP12GPIO_TypeDefttPt+0xc6>
    HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	2201      	movs	r2, #1
 8001000:	4619      	mov	r1, r3
 8001002:	68b8      	ldr	r0, [r7, #8]
 8001004:	f001 f8b6 	bl	8002174 <HAL_GPIO_WritePin>

    uint16_t tmp = ((uint16_t)rx[0] << 8) | rx[1];
 8001008:	7e3b      	ldrb	r3, [r7, #24]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	7e7b      	ldrb	r3, [r7, #25]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	b29b      	uxth	r3, r3
 8001018:	82fb      	strh	r3, [r7, #22]
    memcpy(result, &tmp, sizeof(uint16_t));
 800101a:	8afa      	ldrh	r2, [r7, #22]
 800101c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800101e:	801a      	strh	r2, [r3, #0]

    return true;
 8001020:	2301      	movs	r3, #1
}
 8001022:	4618      	mov	r0, r3
 8001024:	3720      	adds	r7, #32
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_Z20AS5x47_WriteRegisterP19__SPI_HandleTypeDefP12GPIO_TypeDefttt>:

bool AS5x47_WriteRegister(SPI_HandleTypeDef *hspi, GPIO_TypeDef *CS_Port, uint16_t CS_Pin, uint16_t address, uint16_t data)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	4611      	mov	r1, r2
 8001036:	461a      	mov	r2, r3
 8001038:	460b      	mov	r3, r1
 800103a:	80fb      	strh	r3, [r7, #6]
 800103c:	4613      	mov	r3, r2
 800103e:	80bb      	strh	r3, [r7, #4]
    uint8_t frame[3];

    // Első 24-bit frame: write command
    uint16_t cmd = (address & 0x3FFFu);  // bit14=0 (write)
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001046:	82fb      	strh	r3, [r7, #22]
    uint8_t crc_cmd = AS5x47_CalcCRC8(cmd);
 8001048:	8afb      	ldrh	r3, [r7, #22]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff44 	bl	8000ed8 <_Z15AS5x47_CalcCRC8t>
 8001050:	4603      	mov	r3, r0
 8001052:	757b      	strb	r3, [r7, #21]

    frame[0] = (uint8_t)(cmd >> 8);
 8001054:	8afb      	ldrh	r3, [r7, #22]
 8001056:	0a1b      	lsrs	r3, r3, #8
 8001058:	b29b      	uxth	r3, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	743b      	strb	r3, [r7, #16]
    frame[1] = (uint8_t)(cmd & 0xFF);
 800105e:	8afb      	ldrh	r3, [r7, #22]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	747b      	strb	r3, [r7, #17]
    frame[2] = crc_cmd;
 8001064:	7d7b      	ldrb	r3, [r7, #21]
 8001066:	74bb      	strb	r3, [r7, #18]

    HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	68b8      	ldr	r0, [r7, #8]
 8001070:	f001 f880 	bl	8002174 <HAL_GPIO_WritePin>
    if(HAL_SPI_Transmit(hspi, frame, 3, HAL_MAX_DELAY) != HAL_OK) return false;
 8001074:	f107 0110 	add.w	r1, r7, #16
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	2203      	movs	r2, #3
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f001 ff03 	bl	8002e8a <HAL_SPI_Transmit>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	bf14      	ite	ne
 800108a:	2301      	movne	r3, #1
 800108c:	2300      	moveq	r3, #0
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <_Z20AS5x47_WriteRegisterP19__SPI_HandleTypeDefP12GPIO_TypeDefttt+0x6e>
 8001094:	2300      	movs	r3, #0
 8001096:	e037      	b.n	8001108 <_Z20AS5x47_WriteRegisterP19__SPI_HandleTypeDefP12GPIO_TypeDefttt+0xde>
    HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	2201      	movs	r2, #1
 800109c:	4619      	mov	r1, r3
 800109e:	68b8      	ldr	r0, [r7, #8]
 80010a0:	f001 f868 	bl	8002174 <HAL_GPIO_WritePin>

    HAL_Delay(1); // kis szünet a két frame között
 80010a4:	2001      	movs	r0, #1
 80010a6:	f000 fdc7 	bl	8001c38 <HAL_Delay>

    // Második 24-bit frame: data + CRC
    uint8_t crc_data = AS5x47_CalcCRC8(data);
 80010aa:	8c3b      	ldrh	r3, [r7, #32]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff13 	bl	8000ed8 <_Z15AS5x47_CalcCRC8t>
 80010b2:	4603      	mov	r3, r0
 80010b4:	753b      	strb	r3, [r7, #20]
    frame[0] = (uint8_t)(data >> 8);
 80010b6:	8c3b      	ldrh	r3, [r7, #32]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	743b      	strb	r3, [r7, #16]
    frame[1] = (uint8_t)(data & 0xFF);
 80010c0:	8c3b      	ldrh	r3, [r7, #32]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	747b      	strb	r3, [r7, #17]
    frame[2] = crc_data;
 80010c6:	7d3b      	ldrb	r3, [r7, #20]
 80010c8:	74bb      	strb	r3, [r7, #18]

    HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	2200      	movs	r2, #0
 80010ce:	4619      	mov	r1, r3
 80010d0:	68b8      	ldr	r0, [r7, #8]
 80010d2:	f001 f84f 	bl	8002174 <HAL_GPIO_WritePin>
    if(HAL_SPI_Transmit(hspi, frame, 3, HAL_MAX_DELAY) != HAL_OK) return false;
 80010d6:	f107 0110 	add.w	r1, r7, #16
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	2203      	movs	r2, #3
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f001 fed2 	bl	8002e8a <HAL_SPI_Transmit>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	bf14      	ite	ne
 80010ec:	2301      	movne	r3, #1
 80010ee:	2300      	moveq	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <_Z20AS5x47_WriteRegisterP19__SPI_HandleTypeDefP12GPIO_TypeDefttt+0xd0>
 80010f6:	2300      	movs	r3, #0
 80010f8:	e006      	b.n	8001108 <_Z20AS5x47_WriteRegisterP19__SPI_HandleTypeDefP12GPIO_TypeDefttt+0xde>
    HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	68b8      	ldr	r0, [r7, #8]
 8001102:	f001 f837 	bl	8002174 <HAL_GPIO_WritePin>

    return true;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_ZN7AS5147UC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:

AS5147U::AS5147U(SPI_HandleTypeDef *hspi_p, GPIO_TypeDef *CS_Port, uint16_t CS_Pin)
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	807b      	strh	r3, [r7, #2]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	815a      	strh	r2, [r3, #10]
{
	this->hspi = hspi_p;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	601a      	str	r2, [r3, #0]
	this->CS_Port = CS_Port;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	605a      	str	r2, [r3, #4]
	this->CS_Pin = CS_Pin;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	811a      	strh	r2, [r3, #8]
}
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4618      	mov	r0, r3
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_ZN7AS5147U4initEv>:

bool AS5147U::init()
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af02      	add	r7, sp, #8
 800114a:	6078      	str	r0, [r7, #4]
	//Low rotation speeds -> K_min is set to 0
	uint16_t settings1 = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	81fb      	strh	r3, [r7, #14]
	uint16_t settings1_check = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	81bb      	strh	r3, [r7, #12]

	uint16_t errors = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	817b      	strh	r3, [r7, #10]

	//Set min K value to 0
	if( !AS5x47_Read16(hspi, CS_Port, CS_Pin, AS5147U_SETTINGS1, &settings1)) return false;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6859      	ldr	r1, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	891a      	ldrh	r2, [r3, #8]
 8001164:	f107 030e 	add.w	r3, r7, #14
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2318      	movs	r3, #24
 800116c:	f7ff fef6 	bl	8000f5c <_Z13AS5x47_Read16P19__SPI_HandleTypeDefP12GPIO_TypeDefttPt>
 8001170:	4603      	mov	r3, r0
 8001172:	f083 0301 	eor.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <_ZN7AS5147U4initEv+0x3c>
 800117c:	2300      	movs	r3, #0
 800117e:	e04b      	b.n	8001218 <_ZN7AS5147U4initEv+0xd4>
	settings1 |= (0b101 << 3);
 8001180:	89fb      	ldrh	r3, [r7, #14]
 8001182:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8001186:	b29b      	uxth	r3, r3
 8001188:	81fb      	strh	r3, [r7, #14]
	if( !AS5x47_WriteRegister(hspi, CS_Port, CS_Pin, 0x0018, settings1)) return false;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6859      	ldr	r1, [r3, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	891a      	ldrh	r2, [r3, #8]
 8001196:	89fb      	ldrh	r3, [r7, #14]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2318      	movs	r3, #24
 800119c:	f7ff ff45 	bl	800102a <_Z20AS5x47_WriteRegisterP19__SPI_HandleTypeDefP12GPIO_TypeDefttt>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f083 0301 	eor.w	r3, r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <_ZN7AS5147U4initEv+0x6c>
 80011ac:	2300      	movs	r3, #0
 80011ae:	e033      	b.n	8001218 <_ZN7AS5147U4initEv+0xd4>

	if( !AS5x47_Read16(hspi, CS_Port, CS_Pin, AS5147U_SETTINGS1, &settings1_check)) return false;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6859      	ldr	r1, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	891a      	ldrh	r2, [r3, #8]
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2318      	movs	r3, #24
 80011c4:	f7ff feca 	bl	8000f5c <_Z13AS5x47_Read16P19__SPI_HandleTypeDefP12GPIO_TypeDefttPt>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f083 0301 	eor.w	r3, r3, #1
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <_ZN7AS5147U4initEv+0x94>
 80011d4:	2300      	movs	r3, #0
 80011d6:	e01f      	b.n	8001218 <_ZN7AS5147U4initEv+0xd4>

	if( settings1 != settings1_check) return false;
 80011d8:	89fa      	ldrh	r2, [r7, #14]
 80011da:	89bb      	ldrh	r3, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d001      	beq.n	80011e4 <_ZN7AS5147U4initEv+0xa0>
 80011e0:	2300      	movs	r3, #0
 80011e2:	e019      	b.n	8001218 <_ZN7AS5147U4initEv+0xd4>

	if( !AS5x47_Read16(hspi, CS_Port, CS_Pin, AS5147U_ERRFL, &errors)) return false;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6859      	ldr	r1, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	891a      	ldrh	r2, [r3, #8]
 80011f0:	f107 030a 	add.w	r3, r7, #10
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2301      	movs	r3, #1
 80011f8:	f7ff feb0 	bl	8000f5c <_Z13AS5x47_Read16P19__SPI_HandleTypeDefP12GPIO_TypeDefttPt>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f083 0301 	eor.w	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <_ZN7AS5147U4initEv+0xc8>
 8001208:	2300      	movs	r3, #0
 800120a:	e005      	b.n	8001218 <_ZN7AS5147U4initEv+0xd4>
	//todo error management
	if( errors != 0) return false;
 800120c:	897b      	ldrh	r3, [r7, #10]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <_ZN7AS5147U4initEv+0xd2>
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <_ZN7AS5147U4initEv+0xd4>

	return true;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZN7AS5147U15getRawAngleDataEv>:

uint16_t AS5147U::getRawAngleData()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af02      	add	r7, sp, #8
 8001226:	6078      	str	r0, [r7, #4]
	uint16_t rawAngleData = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	81fb      	strh	r3, [r7, #14]
	AS5x47_Read16(hspi, CS_Port, CS_Pin, AS5147U_ANGLECOM, &rawAngleData);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6859      	ldr	r1, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	891a      	ldrh	r2, [r3, #8]
 8001238:	f107 030e 	add.w	r3, r7, #14
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8001242:	f7ff fe8b 	bl	8000f5c <_Z13AS5x47_Read16P19__SPI_HandleTypeDefP12GPIO_TypeDefttPt>
	rawAngleData &= 0x3FFF;
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800124c:	b29b      	uxth	r3, r3
 800124e:	81fb      	strh	r3, [r7, #14]

	return rawAngleData;
 8001250:	89fb      	ldrh	r3, [r7, #14]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <_ZN7AS5147U10getDegreesEv>:

float AS5147U::getDegrees()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	return (float)getRawAngleData()/AS5147U_ANGLE_SCALER * (float)360;
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ffdb 	bl	8001220 <_ZN7AS5147U15getRawAngleDataEv>
 800126a:	4603      	mov	r3, r0
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001274:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001290 <_ZN7AS5147U10getDegreesEv+0x34>
 8001278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001294 <_ZN7AS5147U10getDegreesEv+0x38>
 8001280:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	467ffc00 	.word	0x467ffc00
 8001294:	43b40000 	.word	0x43b40000

08001298 <_ZN7AS5147U6getAGCEv>:

uint8_t AS5147U::getAGC()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af02      	add	r7, sp, #8
 800129e:	6078      	str	r0, [r7, #4]
	uint16_t AGCdata = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	81fb      	strh	r3, [r7, #14]
	AS5x47_Read16(hspi, CS_Port, CS_Pin, AS5147U_AGC, &AGCdata);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	891a      	ldrh	r2, [r3, #8]
 80012b0:	f107 030e 	add.w	r3, r7, #14
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	f643 73f9 	movw	r3, #16377	@ 0x3ff9
 80012ba:	f7ff fe4f 	bl	8000f5c <_Z13AS5x47_Read16P19__SPI_HandleTypeDefP12GPIO_TypeDefttPt>
	AGCdata &= 0xFF;
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	81fb      	strh	r3, [r7, #14]

	return (uint8_t)AGCdata;
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	b2db      	uxtb	r3, r3
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b098      	sub	sp, #96	@ 0x60
 80012d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012da:	f000 fc3b 	bl	8001b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012de:	f000 f8c9 	bl	8001474 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e2:	f000 f9a9 	bl	8001638 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80012e6:	f000 f979 	bl	80015dc <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 80012ea:	f000 f93b 	bl	8001564 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */

  char MSG[64] = {'\0'};
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	223c      	movs	r2, #60	@ 0x3c
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f003 fc37 	bl	8004b6e <memset>
  float angle = 0;
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t AGCval = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  uint16_t FILTERSTATUS_Data = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	81fb      	strh	r3, [r7, #14]
  uint8_t K_adpt = 9;
 8001310:	2309      	movs	r3, #9
 8001312:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52


  AS5147U encoder(&hspi1, ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin);
 8001316:	4638      	mov	r0, r7
 8001318:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800131c:	4a4d      	ldr	r2, [pc, #308]	@ (8001454 <main+0x180>)
 800131e:	494e      	ldr	r1, [pc, #312]	@ (8001458 <main+0x184>)
 8001320:	f7ff fef6 	bl	8001110 <_ZN7AS5147UC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>

  if( !encoder.init() )
 8001324:	463b      	mov	r3, r7
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff0c 	bl	8001144 <_ZN7AS5147U4initEv>
 800132c:	4603      	mov	r3, r0
 800132e:	f083 0301 	eor.w	r3, r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d013      	beq.n	8001360 <main+0x8c>
  {
	  snprintf(MSG, sizeof(MSG), "INIT ERROR");
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4a47      	ldr	r2, [pc, #284]	@ (800145c <main+0x188>)
 800133e:	2140      	movs	r1, #64	@ 0x40
 8001340:	4618      	mov	r0, r3
 8001342:	f003 fb9d 	bl	8004a80 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)MSG, strlen(MSG), 100);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4618      	mov	r0, r3
 800134c:	f7fe ffb0 	bl	80002b0 <strlen>
 8001350:	4603      	mov	r3, r0
 8001352:	b29a      	uxth	r2, r3
 8001354:	f107 0110 	add.w	r1, r7, #16
 8001358:	2364      	movs	r3, #100	@ 0x64
 800135a:	4841      	ldr	r0, [pc, #260]	@ (8001460 <main+0x18c>)
 800135c:	f002 fb01 	bl	8003962 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AS5x47_Read16(&hspi1, ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0x00F6, &FILTERSTATUS_Data);
 8001360:	f107 030e 	add.w	r3, r7, #14
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	23f6      	movs	r3, #246	@ 0xf6
 8001368:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800136c:	4939      	ldr	r1, [pc, #228]	@ (8001454 <main+0x180>)
 800136e:	483a      	ldr	r0, [pc, #232]	@ (8001458 <main+0x184>)
 8001370:	f7ff fdf4 	bl	8000f5c <_Z13AS5x47_Read16P19__SPI_HandleTypeDefP12GPIO_TypeDefttPt>
	  K_adpt = FILTERSTATUS_Data & 0b111;
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

	  angle = encoder.getDegrees();
 8001380:	463b      	mov	r3, r7
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff6a 	bl	800125c <_ZN7AS5147U10getDegreesEv>
 8001388:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
	  AGCval = encoder.getAGC();
 800138c:	463b      	mov	r3, r7
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff82 	bl	8001298 <_ZN7AS5147U6getAGCEv>
 8001394:	4603      	mov	r3, r0
 8001396:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	  snprintf(MSG, sizeof(MSG), "\033[H\033[J"); // clear screen
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4a31      	ldr	r2, [pc, #196]	@ (8001464 <main+0x190>)
 80013a0:	2140      	movs	r1, #64	@ 0x40
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 fb6c 	bl	8004a80 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)MSG, strlen(MSG), 100);
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7fe ff7f 	bl	80002b0 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	f107 0110 	add.w	r1, r7, #16
 80013ba:	2364      	movs	r3, #100	@ 0x64
 80013bc:	4828      	ldr	r0, [pc, #160]	@ (8001460 <main+0x18c>)
 80013be:	f002 fad0 	bl	8003962 <HAL_UART_Transmit>

	  // row1
	  snprintf(MSG, sizeof(MSG), "Angle   : %05.3f °\r\n", angle);
 80013c2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80013c4:	f7ff f8e0 	bl	8000588 <__aeabi_f2d>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	f107 0010 	add.w	r0, r7, #16
 80013d0:	e9cd 2300 	strd	r2, r3, [sp]
 80013d4:	4a24      	ldr	r2, [pc, #144]	@ (8001468 <main+0x194>)
 80013d6:	2140      	movs	r1, #64	@ 0x40
 80013d8:	f003 fb52 	bl	8004a80 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)MSG, strlen(MSG), 100);
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7fe ff65 	bl	80002b0 <strlen>
 80013e6:	4603      	mov	r3, r0
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	f107 0110 	add.w	r1, r7, #16
 80013ee:	2364      	movs	r3, #100	@ 0x64
 80013f0:	481b      	ldr	r0, [pc, #108]	@ (8001460 <main+0x18c>)
 80013f2:	f002 fab6 	bl	8003962 <HAL_UART_Transmit>

	  // row2
	  snprintf(MSG, sizeof(MSG), "K value   : %d \r\n", K_adpt);
 80013f6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80013fa:	f107 0010 	add.w	r0, r7, #16
 80013fe:	4a1b      	ldr	r2, [pc, #108]	@ (800146c <main+0x198>)
 8001400:	2140      	movs	r1, #64	@ 0x40
 8001402:	f003 fb3d 	bl	8004a80 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)MSG, strlen(MSG), 100);
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe ff50 	bl	80002b0 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	b29a      	uxth	r2, r3
 8001414:	f107 0110 	add.w	r1, r7, #16
 8001418:	2364      	movs	r3, #100	@ 0x64
 800141a:	4811      	ldr	r0, [pc, #68]	@ (8001460 <main+0x18c>)
 800141c:	f002 faa1 	bl	8003962 <HAL_UART_Transmit>

	  // row3
	  snprintf(MSG, sizeof(MSG), "AGC value   : %d \r\n", AGCval);
 8001420:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001424:	f107 0010 	add.w	r0, r7, #16
 8001428:	4a11      	ldr	r2, [pc, #68]	@ (8001470 <main+0x19c>)
 800142a:	2140      	movs	r1, #64	@ 0x40
 800142c:	f003 fb28 	bl	8004a80 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)MSG, strlen(MSG), 100);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4618      	mov	r0, r3
 8001436:	f7fe ff3b 	bl	80002b0 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	f107 0110 	add.w	r1, r7, #16
 8001442:	2364      	movs	r3, #100	@ 0x64
 8001444:	4806      	ldr	r0, [pc, #24]	@ (8001460 <main+0x18c>)
 8001446:	f002 fa8c 	bl	8003962 <HAL_UART_Transmit>

	  HAL_Delay(50);
 800144a:	2032      	movs	r0, #50	@ 0x32
 800144c:	f000 fbf4 	bl	8001c38 <HAL_Delay>
	  AS5x47_Read16(&hspi1, ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0x00F6, &FILTERSTATUS_Data);
 8001450:	bf00      	nop
 8001452:	e785      	b.n	8001360 <main+0x8c>
 8001454:	40020000 	.word	0x40020000
 8001458:	200001f0 	.word	0x200001f0
 800145c:	08006d18 	.word	0x08006d18
 8001460:	20000248 	.word	0x20000248
 8001464:	08006d24 	.word	0x08006d24
 8001468:	08006d2c 	.word	0x08006d2c
 800146c:	08006d44 	.word	0x08006d44
 8001470:	08006d58 	.word	0x08006d58

08001474 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b094      	sub	sp, #80	@ 0x50
 8001478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	2234      	movs	r2, #52	@ 0x34
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f003 fb73 	bl	8004b6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	4b2f      	ldr	r3, [pc, #188]	@ (800155c <_Z18SystemClock_Configv+0xe8>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	4a2e      	ldr	r2, [pc, #184]	@ (800155c <_Z18SystemClock_Configv+0xe8>)
 80014a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a8:	4b2c      	ldr	r3, [pc, #176]	@ (800155c <_Z18SystemClock_Configv+0xe8>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014b4:	2300      	movs	r3, #0
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	4b29      	ldr	r3, [pc, #164]	@ (8001560 <_Z18SystemClock_Configv+0xec>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014c0:	4a27      	ldr	r2, [pc, #156]	@ (8001560 <_Z18SystemClock_Configv+0xec>)
 80014c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b25      	ldr	r3, [pc, #148]	@ (8001560 <_Z18SystemClock_Configv+0xec>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d8:	2301      	movs	r3, #1
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014dc:	2310      	movs	r3, #16
 80014de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e0:	2302      	movs	r3, #2
 80014e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e4:	2300      	movs	r3, #0
 80014e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014e8:	2310      	movs	r3, #16
 80014ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014f2:	2304      	movs	r3, #4
 80014f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4618      	mov	r0, r3
 8001504:	f001 f99a 	bl	800283c <HAL_RCC_OscConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	bf14      	ite	ne
 800150e:	2301      	movne	r3, #1
 8001510:	2300      	moveq	r3, #0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8001518:	f000 f90c 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151c:	230f      	movs	r3, #15
 800151e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001520:	2302      	movs	r3, #2
 8001522:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001528:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800152c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	2102      	movs	r1, #2
 8001538:	4618      	mov	r0, r3
 800153a:	f000 fe35 	bl	80021a8 <HAL_RCC_ClockConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf14      	ite	ne
 8001544:	2301      	movne	r3, #1
 8001546:	2300      	moveq	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 800154e:	f000 f8f1 	bl	8001734 <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3750      	adds	r7, #80	@ 0x50
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40007000 	.word	0x40007000

08001564 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001568:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <_ZL12MX_SPI1_Initv+0x70>)
 800156a:	4a1b      	ldr	r2, [pc, #108]	@ (80015d8 <_ZL12MX_SPI1_Initv+0x74>)
 800156c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800156e:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <_ZL12MX_SPI1_Initv+0x70>)
 8001570:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001574:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001576:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <_ZL12MX_SPI1_Initv+0x70>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800157c:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <_ZL12MX_SPI1_Initv+0x70>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001582:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <_ZL12MX_SPI1_Initv+0x70>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <_ZL12MX_SPI1_Initv+0x70>)
 800158a:	2201      	movs	r2, #1
 800158c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <_ZL12MX_SPI1_Initv+0x70>)
 8001590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001594:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001596:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <_ZL12MX_SPI1_Initv+0x70>)
 8001598:	2218      	movs	r2, #24
 800159a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800159c:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <_ZL12MX_SPI1_Initv+0x70>)
 800159e:	2200      	movs	r2, #0
 80015a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a2:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <_ZL12MX_SPI1_Initv+0x70>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <_ZL12MX_SPI1_Initv+0x70>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <_ZL12MX_SPI1_Initv+0x70>)
 80015b0:	220a      	movs	r2, #10
 80015b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015b4:	4807      	ldr	r0, [pc, #28]	@ (80015d4 <_ZL12MX_SPI1_Initv+0x70>)
 80015b6:	f001 fbdf 	bl	8002d78 <HAL_SPI_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bf14      	ite	ne
 80015c0:	2301      	movne	r3, #1
 80015c2:	2300      	moveq	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80015ca:	f000 f8b3 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200001f0 	.word	0x200001f0
 80015d8:	40013000 	.word	0x40013000

080015dc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e0:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015e2:	4a14      	ldr	r2, [pc, #80]	@ (8001634 <_ZL19MX_USART2_UART_Initv+0x58>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015e6:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <_ZL19MX_USART2_UART_Initv+0x54>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001612:	4807      	ldr	r0, [pc, #28]	@ (8001630 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001614:	f002 f958 	bl	80038c8 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	bf14      	ite	ne
 800161e:	2301      	movne	r3, #1
 8001620:	2300      	moveq	r3, #0
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001628:	f000 f884 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000248 	.word	0x20000248
 8001634:	40004400 	.word	0x40004400

08001638 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b35      	ldr	r3, [pc, #212]	@ (8001728 <_ZL12MX_GPIO_Initv+0xf0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a34      	ldr	r2, [pc, #208]	@ (8001728 <_ZL12MX_GPIO_Initv+0xf0>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b32      	ldr	r3, [pc, #200]	@ (8001728 <_ZL12MX_GPIO_Initv+0xf0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b2e      	ldr	r3, [pc, #184]	@ (8001728 <_ZL12MX_GPIO_Initv+0xf0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a2d      	ldr	r2, [pc, #180]	@ (8001728 <_ZL12MX_GPIO_Initv+0xf0>)
 8001674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b2b      	ldr	r3, [pc, #172]	@ (8001728 <_ZL12MX_GPIO_Initv+0xf0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <_ZL12MX_GPIO_Initv+0xf0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a26      	ldr	r2, [pc, #152]	@ (8001728 <_ZL12MX_GPIO_Initv+0xf0>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <_ZL12MX_GPIO_Initv+0xf0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <_ZL12MX_GPIO_Initv+0xf0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001728 <_ZL12MX_GPIO_Initv+0xf0>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <_ZL12MX_GPIO_Initv+0xf0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ENCODER1_CS_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80016c4:	4819      	ldr	r0, [pc, #100]	@ (800172c <_ZL12MX_GPIO_Initv+0xf4>)
 80016c6:	f000 fd55 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4813      	ldr	r0, [pc, #76]	@ (8001730 <_ZL12MX_GPIO_Initv+0xf8>)
 80016e2:	f000 fbb3 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016e6:	2320      	movs	r3, #32
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	480b      	ldr	r0, [pc, #44]	@ (800172c <_ZL12MX_GPIO_Initv+0xf4>)
 80016fe:	f000 fba5 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER1_CS_Pin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8001702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001710:	2301      	movs	r3, #1
 8001712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	4804      	ldr	r0, [pc, #16]	@ (800172c <_ZL12MX_GPIO_Initv+0xf4>)
 800171c:	f000 fb96 	bl	8001e4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	@ 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	40020000 	.word	0x40020000
 8001730:	40020800 	.word	0x40020800

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <Error_Handler+0x8>

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <HAL_MspInit+0x4c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	4a0f      	ldr	r2, [pc, #60]	@ (800178c <HAL_MspInit+0x4c>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001754:	6453      	str	r3, [r2, #68]	@ 0x44
 8001756:	4b0d      	ldr	r3, [pc, #52]	@ (800178c <HAL_MspInit+0x4c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	@ (800178c <HAL_MspInit+0x4c>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	@ 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_MspInit+0x4c>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800177e:	2007      	movs	r0, #7
 8001780:	f000 fb30 	bl	8001de4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a28      	ldr	r2, [pc, #160]	@ (8001850 <HAL_SPI_MspInit+0xc0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d149      	bne.n	8001846 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b27      	ldr	r3, [pc, #156]	@ (8001854 <HAL_SPI_MspInit+0xc4>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	4a26      	ldr	r2, [pc, #152]	@ (8001854 <HAL_SPI_MspInit+0xc4>)
 80017bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c2:	4b24      	ldr	r3, [pc, #144]	@ (8001854 <HAL_SPI_MspInit+0xc4>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <HAL_SPI_MspInit+0xc4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001854 <HAL_SPI_MspInit+0xc4>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b1d      	ldr	r3, [pc, #116]	@ (8001854 <HAL_SPI_MspInit+0xc4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <HAL_SPI_MspInit+0xc4>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a18      	ldr	r2, [pc, #96]	@ (8001854 <HAL_SPI_MspInit+0xc4>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <HAL_SPI_MspInit+0xc4>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001806:	23c0      	movs	r3, #192	@ 0xc0
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001816:	2305      	movs	r3, #5
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	480d      	ldr	r0, [pc, #52]	@ (8001858 <HAL_SPI_MspInit+0xc8>)
 8001822:	f000 fb13 	bl	8001e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001826:	2308      	movs	r3, #8
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001836:	2305      	movs	r3, #5
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4806      	ldr	r0, [pc, #24]	@ (800185c <HAL_SPI_MspInit+0xcc>)
 8001842:	f000 fb03 	bl	8001e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	@ 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40013000 	.word	0x40013000
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000
 800185c:	40020400 	.word	0x40020400

08001860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	@ 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a19      	ldr	r2, [pc, #100]	@ (80018e4 <HAL_UART_MspInit+0x84>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d12b      	bne.n	80018da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <HAL_UART_MspInit+0x88>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a17      	ldr	r2, [pc, #92]	@ (80018e8 <HAL_UART_MspInit+0x88>)
 800188c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <HAL_UART_MspInit+0x88>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_UART_MspInit+0x88>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a10      	ldr	r2, [pc, #64]	@ (80018e8 <HAL_UART_MspInit+0x88>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <HAL_UART_MspInit+0x88>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ba:	230c      	movs	r3, #12
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ca:	2307      	movs	r3, #7
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <HAL_UART_MspInit+0x8c>)
 80018d6:	f000 fab9 	bl	8001e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	@ 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40004400 	.word	0x40004400
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020000 	.word	0x40020000

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <NMI_Handler+0x4>

080018f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <MemManage_Handler+0x4>

08001908 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <BusFault_Handler+0x4>

08001910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <UsageFault_Handler+0x4>

08001918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001946:	f000 f957 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}

0800194e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  return 1;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_kill>:

int _kill(int pid, int sig)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001968:	f003 f954 	bl	8004c14 <__errno>
 800196c:	4603      	mov	r3, r0
 800196e:	2216      	movs	r2, #22
 8001970:	601a      	str	r2, [r3, #0]
  return -1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_exit>:

void _exit (int status)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001986:	f04f 31ff 	mov.w	r1, #4294967295
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffe7 	bl	800195e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <_exit+0x12>

08001994 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e00a      	b.n	80019bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019a6:	f3af 8000 	nop.w
 80019aa:	4601      	mov	r1, r0
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	60ba      	str	r2, [r7, #8]
 80019b2:	b2ca      	uxtb	r2, r1
 80019b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dbf0      	blt.n	80019a6 <_read+0x12>
  }

  return len;
 80019c4:	687b      	ldr	r3, [r7, #4]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e009      	b.n	80019f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	60ba      	str	r2, [r7, #8]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dbf1      	blt.n	80019e0 <_write+0x12>
  }
  return len;
 80019fc:	687b      	ldr	r3, [r7, #4]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_close>:

int _close(int file)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a2e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_isatty>:

int _isatty(int file)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a78:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <_sbrk+0x5c>)
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <_sbrk+0x60>)
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <_sbrk+0x64>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ad8 <_sbrk+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d207      	bcs.n	8001ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa0:	f003 f8b8 	bl	8004c14 <__errno>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e009      	b.n	8001ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a05      	ldr	r2, [pc, #20]	@ (8001ad4 <_sbrk+0x64>)
 8001ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20020000 	.word	0x20020000
 8001ad0:	00000400 	.word	0x00000400
 8001ad4:	2000028c 	.word	0x2000028c
 8001ad8:	200003e0 	.word	0x200003e0

08001adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <SystemInit+0x20>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae6:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <SystemInit+0x20>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b04:	480d      	ldr	r0, [pc, #52]	@ (8001b3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b06:	490e      	ldr	r1, [pc, #56]	@ (8001b40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b08:	4a0e      	ldr	r2, [pc, #56]	@ (8001b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b1c:	4c0b      	ldr	r4, [pc, #44]	@ (8001b4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b2a:	f7ff ffd7 	bl	8001adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f003 f877 	bl	8004c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b32:	f7ff fbcf 	bl	80012d4 <main>
  bx  lr    
 8001b36:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8001b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b44:	08007108 	.word	0x08007108
  ldr r2, =_sbss
 8001b48:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b4c:	200003e0 	.word	0x200003e0

08001b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC_IRQHandler>
	...

08001b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b58:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b94 <HAL_Init+0x40>)
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b64:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <HAL_Init+0x40>)
 8001b6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b70:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a07      	ldr	r2, [pc, #28]	@ (8001b94 <HAL_Init+0x40>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f000 f931 	bl	8001de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f000 f808 	bl	8001b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b88:	f7ff fdda 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba0:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <HAL_InitTick+0x54>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_InitTick+0x58>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f93b 	bl	8001e32 <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00e      	b.n	8001be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b0f      	cmp	r3, #15
 8001bca:	d80a      	bhi.n	8001be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f000 f911 	bl	8001dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd8:	4a06      	ldr	r2, [pc, #24]	@ (8001bf4 <HAL_InitTick+0x5c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000008 	.word	0x20000008
 8001bf4:	20000004 	.word	0x20000004

08001bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_IncTick+0x20>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_IncTick+0x24>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <HAL_IncTick+0x24>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	20000290 	.word	0x20000290

08001c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <HAL_GetTick+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000290 	.word	0x20000290

08001c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff ffee 	bl	8001c20 <HAL_GetTick>
 8001c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c50:	d005      	beq.n	8001c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c52:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <HAL_Delay+0x44>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c5e:	bf00      	nop
 8001c60:	f7ff ffde 	bl	8001c20 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d8f7      	bhi.n	8001c60 <HAL_Delay+0x28>
  {
  }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000008 	.word	0x20000008

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb2:	4a04      	ldr	r2, [pc, #16]	@ (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60d3      	str	r3, [r2, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0a      	blt.n	8001d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	490c      	ldr	r1, [pc, #48]	@ (8001d30 <__NVIC_SetPriority+0x4c>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d0c:	e00a      	b.n	8001d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	@ (8001d34 <__NVIC_SetPriority+0x50>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	0112      	lsls	r2, r2, #4
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440b      	add	r3, r1
 8001d22:	761a      	strb	r2, [r3, #24]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	@ 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f1c3 0307 	rsb	r3, r3, #7
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	bf28      	it	cs
 8001d56:	2304      	movcs	r3, #4
 8001d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d902      	bls.n	8001d68 <NVIC_EncodePriority+0x30>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b03      	subs	r3, #3
 8001d66:	e000      	b.n	8001d6a <NVIC_EncodePriority+0x32>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	4313      	orrs	r3, r2
         );
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	@ 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001db0:	d301      	bcc.n	8001db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <SysTick_Config+0x40>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dbe:	210f      	movs	r1, #15
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f7ff ff8e 	bl	8001ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc8:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <SysTick_Config+0x40>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dce:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <SysTick_Config+0x40>)
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	e000e010 	.word	0xe000e010

08001de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff47 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e0c:	f7ff ff5c 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f7ff ff8e 	bl	8001d38 <NVIC_EncodePriority>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff5d 	bl	8001ce4 <__NVIC_SetPriority>
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ffb0 	bl	8001da0 <SysTick_Config>
 8001e40:	4603      	mov	r3, r0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	@ 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	e165      	b.n	8002134 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	f040 8154 	bne.w	800212e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d005      	beq.n	8001e9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d130      	bne.n	8001f00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 0201 	and.w	r2, r3, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d017      	beq.n	8001f3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d123      	bne.n	8001f90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	08da      	lsrs	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3208      	adds	r2, #8
 8001f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	08da      	lsrs	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3208      	adds	r2, #8
 8001f8a:	69b9      	ldr	r1, [r7, #24]
 8001f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0203 	and.w	r2, r3, #3
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 80ae 	beq.w	800212e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800214c <HAL_GPIO_Init+0x300>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	4a5c      	ldr	r2, [pc, #368]	@ (800214c <HAL_GPIO_Init+0x300>)
 8001fdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fe2:	4b5a      	ldr	r3, [pc, #360]	@ (800214c <HAL_GPIO_Init+0x300>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fee:	4a58      	ldr	r2, [pc, #352]	@ (8002150 <HAL_GPIO_Init+0x304>)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4f      	ldr	r2, [pc, #316]	@ (8002154 <HAL_GPIO_Init+0x308>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d025      	beq.n	8002066 <HAL_GPIO_Init+0x21a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4e      	ldr	r2, [pc, #312]	@ (8002158 <HAL_GPIO_Init+0x30c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01f      	beq.n	8002062 <HAL_GPIO_Init+0x216>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4d      	ldr	r2, [pc, #308]	@ (800215c <HAL_GPIO_Init+0x310>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d019      	beq.n	800205e <HAL_GPIO_Init+0x212>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4c      	ldr	r2, [pc, #304]	@ (8002160 <HAL_GPIO_Init+0x314>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0x20e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4b      	ldr	r2, [pc, #300]	@ (8002164 <HAL_GPIO_Init+0x318>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00d      	beq.n	8002056 <HAL_GPIO_Init+0x20a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4a      	ldr	r2, [pc, #296]	@ (8002168 <HAL_GPIO_Init+0x31c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <HAL_GPIO_Init+0x206>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a49      	ldr	r2, [pc, #292]	@ (800216c <HAL_GPIO_Init+0x320>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_GPIO_Init+0x202>
 800204a:	2306      	movs	r3, #6
 800204c:	e00c      	b.n	8002068 <HAL_GPIO_Init+0x21c>
 800204e:	2307      	movs	r3, #7
 8002050:	e00a      	b.n	8002068 <HAL_GPIO_Init+0x21c>
 8002052:	2305      	movs	r3, #5
 8002054:	e008      	b.n	8002068 <HAL_GPIO_Init+0x21c>
 8002056:	2304      	movs	r3, #4
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x21c>
 800205a:	2303      	movs	r3, #3
 800205c:	e004      	b.n	8002068 <HAL_GPIO_Init+0x21c>
 800205e:	2302      	movs	r3, #2
 8002060:	e002      	b.n	8002068 <HAL_GPIO_Init+0x21c>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_GPIO_Init+0x21c>
 8002066:	2300      	movs	r3, #0
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	f002 0203 	and.w	r2, r2, #3
 800206e:	0092      	lsls	r2, r2, #2
 8002070:	4093      	lsls	r3, r2
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002078:	4935      	ldr	r1, [pc, #212]	@ (8002150 <HAL_GPIO_Init+0x304>)
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	3302      	adds	r3, #2
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002086:	4b3a      	ldr	r3, [pc, #232]	@ (8002170 <HAL_GPIO_Init+0x324>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020aa:	4a31      	ldr	r2, [pc, #196]	@ (8002170 <HAL_GPIO_Init+0x324>)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002170 <HAL_GPIO_Init+0x324>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020d4:	4a26      	ldr	r2, [pc, #152]	@ (8002170 <HAL_GPIO_Init+0x324>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020da:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <HAL_GPIO_Init+0x324>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002170 <HAL_GPIO_Init+0x324>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002104:	4b1a      	ldr	r3, [pc, #104]	@ (8002170 <HAL_GPIO_Init+0x324>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002128:	4a11      	ldr	r2, [pc, #68]	@ (8002170 <HAL_GPIO_Init+0x324>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3301      	adds	r3, #1
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	2b0f      	cmp	r3, #15
 8002138:	f67f ae96 	bls.w	8001e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3724      	adds	r7, #36	@ 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800
 8002150:	40013800 	.word	0x40013800
 8002154:	40020000 	.word	0x40020000
 8002158:	40020400 	.word	0x40020400
 800215c:	40020800 	.word	0x40020800
 8002160:	40020c00 	.word	0x40020c00
 8002164:	40021000 	.word	0x40021000
 8002168:	40021400 	.word	0x40021400
 800216c:	40021800 	.word	0x40021800
 8002170:	40013c00 	.word	0x40013c00

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002190:	e003      	b.n	800219a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	619a      	str	r2, [r3, #24]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0cc      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021bc:	4b68      	ldr	r3, [pc, #416]	@ (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d90c      	bls.n	80021e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b65      	ldr	r3, [pc, #404]	@ (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b63      	ldr	r3, [pc, #396]	@ (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0b8      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021fc:	4b59      	ldr	r3, [pc, #356]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	4a58      	ldr	r2, [pc, #352]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002206:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002214:	4b53      	ldr	r3, [pc, #332]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4a52      	ldr	r2, [pc, #328]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800221e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002220:	4b50      	ldr	r3, [pc, #320]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	494d      	ldr	r1, [pc, #308]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	4313      	orrs	r3, r2
 8002230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d044      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	4b47      	ldr	r3, [pc, #284]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d119      	bne.n	8002286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e07f      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d003      	beq.n	8002266 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002262:	2b03      	cmp	r3, #3
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002266:	4b3f      	ldr	r3, [pc, #252]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e06f      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002276:	4b3b      	ldr	r3, [pc, #236]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e067      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002286:	4b37      	ldr	r3, [pc, #220]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f023 0203 	bic.w	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4934      	ldr	r1, [pc, #208]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	4313      	orrs	r3, r2
 8002296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002298:	f7ff fcc2 	bl	8001c20 <HAL_GetTick>
 800229c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229e:	e00a      	b.n	80022b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a0:	f7ff fcbe 	bl	8001c20 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e04f      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 020c 	and.w	r2, r3, #12
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d1eb      	bne.n	80022a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022c8:	4b25      	ldr	r3, [pc, #148]	@ (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d20c      	bcs.n	80022f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e032      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022fc:	4b19      	ldr	r3, [pc, #100]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4916      	ldr	r1, [pc, #88]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800231a:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	490e      	ldr	r1, [pc, #56]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800232e:	f000 f855 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8002332:	4602      	mov	r2, r0
 8002334:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	490a      	ldr	r1, [pc, #40]	@ (8002368 <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	5ccb      	ldrb	r3, [r1, r3]
 8002342:	fa22 f303 	lsr.w	r3, r2, r3
 8002346:	4a09      	ldr	r2, [pc, #36]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800234a:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fc22 	bl	8001b98 <HAL_InitTick>

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023c00 	.word	0x40023c00
 8002364:	40023800 	.word	0x40023800
 8002368:	08006d6c 	.word	0x08006d6c
 800236c:	20000000 	.word	0x20000000
 8002370:	20000004 	.word	0x20000004

08002374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002378:	4b03      	ldr	r3, [pc, #12]	@ (8002388 <HAL_RCC_GetHCLKFreq+0x14>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000000 	.word	0x20000000

0800238c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002390:	f7ff fff0 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	0a9b      	lsrs	r3, r3, #10
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4903      	ldr	r1, [pc, #12]	@ (80023b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	08006d7c 	.word	0x08006d7c

080023b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023b8:	f7ff ffdc 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	0b5b      	lsrs	r3, r3, #13
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4903      	ldr	r1, [pc, #12]	@ (80023d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40023800 	.word	0x40023800
 80023d8:	08006d7c 	.word	0x08006d7c

080023dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e0:	b0ae      	sub	sp, #184	@ 0xb8
 80023e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002402:	4bcb      	ldr	r3, [pc, #812]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x354>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b0c      	cmp	r3, #12
 800240c:	f200 8206 	bhi.w	800281c <HAL_RCC_GetSysClockFreq+0x440>
 8002410:	a201      	add	r2, pc, #4	@ (adr r2, 8002418 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002416:	bf00      	nop
 8002418:	0800244d 	.word	0x0800244d
 800241c:	0800281d 	.word	0x0800281d
 8002420:	0800281d 	.word	0x0800281d
 8002424:	0800281d 	.word	0x0800281d
 8002428:	08002455 	.word	0x08002455
 800242c:	0800281d 	.word	0x0800281d
 8002430:	0800281d 	.word	0x0800281d
 8002434:	0800281d 	.word	0x0800281d
 8002438:	0800245d 	.word	0x0800245d
 800243c:	0800281d 	.word	0x0800281d
 8002440:	0800281d 	.word	0x0800281d
 8002444:	0800281d 	.word	0x0800281d
 8002448:	0800264d 	.word	0x0800264d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800244c:	4bb9      	ldr	r3, [pc, #740]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x358>)
 800244e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002452:	e1e7      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002454:	4bb8      	ldr	r3, [pc, #736]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002456:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800245a:	e1e3      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800245c:	4bb4      	ldr	r3, [pc, #720]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x354>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002464:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002468:	4bb1      	ldr	r3, [pc, #708]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x354>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d071      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002474:	4bae      	ldr	r3, [pc, #696]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x354>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	2200      	movs	r2, #0
 800247c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002480:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002484:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002496:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800249a:	4622      	mov	r2, r4
 800249c:	462b      	mov	r3, r5
 800249e:	f04f 0000 	mov.w	r0, #0
 80024a2:	f04f 0100 	mov.w	r1, #0
 80024a6:	0159      	lsls	r1, r3, #5
 80024a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ac:	0150      	lsls	r0, r2, #5
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4621      	mov	r1, r4
 80024b4:	1a51      	subs	r1, r2, r1
 80024b6:	6439      	str	r1, [r7, #64]	@ 0x40
 80024b8:	4629      	mov	r1, r5
 80024ba:	eb63 0301 	sbc.w	r3, r3, r1
 80024be:	647b      	str	r3, [r7, #68]	@ 0x44
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80024cc:	4649      	mov	r1, r9
 80024ce:	018b      	lsls	r3, r1, #6
 80024d0:	4641      	mov	r1, r8
 80024d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024d6:	4641      	mov	r1, r8
 80024d8:	018a      	lsls	r2, r1, #6
 80024da:	4641      	mov	r1, r8
 80024dc:	1a51      	subs	r1, r2, r1
 80024de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024e0:	4649      	mov	r1, r9
 80024e2:	eb63 0301 	sbc.w	r3, r3, r1
 80024e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80024f4:	4649      	mov	r1, r9
 80024f6:	00cb      	lsls	r3, r1, #3
 80024f8:	4641      	mov	r1, r8
 80024fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024fe:	4641      	mov	r1, r8
 8002500:	00ca      	lsls	r2, r1, #3
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	4603      	mov	r3, r0
 8002508:	4622      	mov	r2, r4
 800250a:	189b      	adds	r3, r3, r2
 800250c:	633b      	str	r3, [r7, #48]	@ 0x30
 800250e:	462b      	mov	r3, r5
 8002510:	460a      	mov	r2, r1
 8002512:	eb42 0303 	adc.w	r3, r2, r3
 8002516:	637b      	str	r3, [r7, #52]	@ 0x34
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002524:	4629      	mov	r1, r5
 8002526:	024b      	lsls	r3, r1, #9
 8002528:	4621      	mov	r1, r4
 800252a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800252e:	4621      	mov	r1, r4
 8002530:	024a      	lsls	r2, r1, #9
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800253a:	2200      	movs	r2, #0
 800253c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002540:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002544:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002548:	f7fe fb4e 	bl	8000be8 <__aeabi_uldivmod>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4613      	mov	r3, r2
 8002552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002556:	e067      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002558:	4b75      	ldr	r3, [pc, #468]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x354>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	099b      	lsrs	r3, r3, #6
 800255e:	2200      	movs	r2, #0
 8002560:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002564:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002568:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800256c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002570:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002572:	2300      	movs	r3, #0
 8002574:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002576:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800257a:	4622      	mov	r2, r4
 800257c:	462b      	mov	r3, r5
 800257e:	f04f 0000 	mov.w	r0, #0
 8002582:	f04f 0100 	mov.w	r1, #0
 8002586:	0159      	lsls	r1, r3, #5
 8002588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800258c:	0150      	lsls	r0, r2, #5
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4621      	mov	r1, r4
 8002594:	1a51      	subs	r1, r2, r1
 8002596:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002598:	4629      	mov	r1, r5
 800259a:	eb63 0301 	sbc.w	r3, r3, r1
 800259e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80025ac:	4649      	mov	r1, r9
 80025ae:	018b      	lsls	r3, r1, #6
 80025b0:	4641      	mov	r1, r8
 80025b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025b6:	4641      	mov	r1, r8
 80025b8:	018a      	lsls	r2, r1, #6
 80025ba:	4641      	mov	r1, r8
 80025bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80025c0:	4649      	mov	r1, r9
 80025c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025da:	4692      	mov	sl, r2
 80025dc:	469b      	mov	fp, r3
 80025de:	4623      	mov	r3, r4
 80025e0:	eb1a 0303 	adds.w	r3, sl, r3
 80025e4:	623b      	str	r3, [r7, #32]
 80025e6:	462b      	mov	r3, r5
 80025e8:	eb4b 0303 	adc.w	r3, fp, r3
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80025fa:	4629      	mov	r1, r5
 80025fc:	028b      	lsls	r3, r1, #10
 80025fe:	4621      	mov	r1, r4
 8002600:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002604:	4621      	mov	r1, r4
 8002606:	028a      	lsls	r2, r1, #10
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002610:	2200      	movs	r2, #0
 8002612:	673b      	str	r3, [r7, #112]	@ 0x70
 8002614:	677a      	str	r2, [r7, #116]	@ 0x74
 8002616:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800261a:	f7fe fae5 	bl	8000be8 <__aeabi_uldivmod>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4613      	mov	r3, r2
 8002624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002628:	4b41      	ldr	r3, [pc, #260]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x354>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	0c1b      	lsrs	r3, r3, #16
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	3301      	adds	r3, #1
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800263a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800263e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800264a:	e0eb      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800264c:	4b38      	ldr	r3, [pc, #224]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x354>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002654:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002658:	4b35      	ldr	r3, [pc, #212]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x354>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d06b      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002664:	4b32      	ldr	r3, [pc, #200]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x354>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	2200      	movs	r2, #0
 800266c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800266e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002670:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002676:	663b      	str	r3, [r7, #96]	@ 0x60
 8002678:	2300      	movs	r3, #0
 800267a:	667b      	str	r3, [r7, #100]	@ 0x64
 800267c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002680:	4622      	mov	r2, r4
 8002682:	462b      	mov	r3, r5
 8002684:	f04f 0000 	mov.w	r0, #0
 8002688:	f04f 0100 	mov.w	r1, #0
 800268c:	0159      	lsls	r1, r3, #5
 800268e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002692:	0150      	lsls	r0, r2, #5
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4621      	mov	r1, r4
 800269a:	1a51      	subs	r1, r2, r1
 800269c:	61b9      	str	r1, [r7, #24]
 800269e:	4629      	mov	r1, r5
 80026a0:	eb63 0301 	sbc.w	r3, r3, r1
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026b2:	4659      	mov	r1, fp
 80026b4:	018b      	lsls	r3, r1, #6
 80026b6:	4651      	mov	r1, sl
 80026b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026bc:	4651      	mov	r1, sl
 80026be:	018a      	lsls	r2, r1, #6
 80026c0:	4651      	mov	r1, sl
 80026c2:	ebb2 0801 	subs.w	r8, r2, r1
 80026c6:	4659      	mov	r1, fp
 80026c8:	eb63 0901 	sbc.w	r9, r3, r1
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e0:	4690      	mov	r8, r2
 80026e2:	4699      	mov	r9, r3
 80026e4:	4623      	mov	r3, r4
 80026e6:	eb18 0303 	adds.w	r3, r8, r3
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	462b      	mov	r3, r5
 80026ee:	eb49 0303 	adc.w	r3, r9, r3
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002700:	4629      	mov	r1, r5
 8002702:	024b      	lsls	r3, r1, #9
 8002704:	4621      	mov	r1, r4
 8002706:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800270a:	4621      	mov	r1, r4
 800270c:	024a      	lsls	r2, r1, #9
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002716:	2200      	movs	r2, #0
 8002718:	65bb      	str	r3, [r7, #88]	@ 0x58
 800271a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800271c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002720:	f7fe fa62 	bl	8000be8 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4613      	mov	r3, r2
 800272a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800272e:	e065      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x420>
 8002730:	40023800 	.word	0x40023800
 8002734:	00f42400 	.word	0x00f42400
 8002738:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273c:	4b3d      	ldr	r3, [pc, #244]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x458>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	099b      	lsrs	r3, r3, #6
 8002742:	2200      	movs	r2, #0
 8002744:	4618      	mov	r0, r3
 8002746:	4611      	mov	r1, r2
 8002748:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800274c:	653b      	str	r3, [r7, #80]	@ 0x50
 800274e:	2300      	movs	r3, #0
 8002750:	657b      	str	r3, [r7, #84]	@ 0x54
 8002752:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002756:	4642      	mov	r2, r8
 8002758:	464b      	mov	r3, r9
 800275a:	f04f 0000 	mov.w	r0, #0
 800275e:	f04f 0100 	mov.w	r1, #0
 8002762:	0159      	lsls	r1, r3, #5
 8002764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002768:	0150      	lsls	r0, r2, #5
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4641      	mov	r1, r8
 8002770:	1a51      	subs	r1, r2, r1
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	4649      	mov	r1, r9
 8002776:	eb63 0301 	sbc.w	r3, r3, r1
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002788:	4659      	mov	r1, fp
 800278a:	018b      	lsls	r3, r1, #6
 800278c:	4651      	mov	r1, sl
 800278e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002792:	4651      	mov	r1, sl
 8002794:	018a      	lsls	r2, r1, #6
 8002796:	4651      	mov	r1, sl
 8002798:	1a54      	subs	r4, r2, r1
 800279a:	4659      	mov	r1, fp
 800279c:	eb63 0501 	sbc.w	r5, r3, r1
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	00eb      	lsls	r3, r5, #3
 80027aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ae:	00e2      	lsls	r2, r4, #3
 80027b0:	4614      	mov	r4, r2
 80027b2:	461d      	mov	r5, r3
 80027b4:	4643      	mov	r3, r8
 80027b6:	18e3      	adds	r3, r4, r3
 80027b8:	603b      	str	r3, [r7, #0]
 80027ba:	464b      	mov	r3, r9
 80027bc:	eb45 0303 	adc.w	r3, r5, r3
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ce:	4629      	mov	r1, r5
 80027d0:	028b      	lsls	r3, r1, #10
 80027d2:	4621      	mov	r1, r4
 80027d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d8:	4621      	mov	r1, r4
 80027da:	028a      	lsls	r2, r1, #10
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027e4:	2200      	movs	r2, #0
 80027e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027e8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80027ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027ee:	f7fe f9fb 	bl	8000be8 <__aeabi_uldivmod>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4613      	mov	r3, r2
 80027f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80027fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x458>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	0f1b      	lsrs	r3, r3, #28
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800280a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800280e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002812:	fbb2 f3f3 	udiv	r3, r2, r3
 8002816:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800281a:	e003      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x45c>)
 800281e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002822:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002828:	4618      	mov	r0, r3
 800282a:	37b8      	adds	r7, #184	@ 0xb8
 800282c:	46bd      	mov	sp, r7
 800282e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002832:	bf00      	nop
 8002834:	40023800 	.word	0x40023800
 8002838:	00f42400 	.word	0x00f42400

0800283c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e28d      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8083 	beq.w	8002962 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800285c:	4b94      	ldr	r3, [pc, #592]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b04      	cmp	r3, #4
 8002866:	d019      	beq.n	800289c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002868:	4b91      	ldr	r3, [pc, #580]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002870:	2b08      	cmp	r3, #8
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002874:	4b8e      	ldr	r3, [pc, #568]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800287c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002880:	d00c      	beq.n	800289c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002882:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d112      	bne.n	80028b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288e:	4b88      	ldr	r3, [pc, #544]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002896:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800289a:	d10b      	bne.n	80028b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	4b84      	ldr	r3, [pc, #528]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d05b      	beq.n	8002960 <HAL_RCC_OscConfig+0x124>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d157      	bne.n	8002960 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e25a      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028bc:	d106      	bne.n	80028cc <HAL_RCC_OscConfig+0x90>
 80028be:	4b7c      	ldr	r3, [pc, #496]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a7b      	ldr	r2, [pc, #492]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e01d      	b.n	8002908 <HAL_RCC_OscConfig+0xcc>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0xb4>
 80028d6:	4b76      	ldr	r3, [pc, #472]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a75      	ldr	r2, [pc, #468]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 80028dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b73      	ldr	r3, [pc, #460]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a72      	ldr	r2, [pc, #456]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e00b      	b.n	8002908 <HAL_RCC_OscConfig+0xcc>
 80028f0:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a6e      	ldr	r2, [pc, #440]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 80028f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a6b      	ldr	r2, [pc, #428]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7ff f986 	bl	8001c20 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002918:	f7ff f982 	bl	8001c20 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	@ 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e21f      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b61      	ldr	r3, [pc, #388]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0xdc>
 8002936:	e014      	b.n	8002962 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7ff f972 	bl	8001c20 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002940:	f7ff f96e 	bl	8001c20 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	@ 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e20b      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002952:	4b57      	ldr	r3, [pc, #348]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x104>
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d06f      	beq.n	8002a4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800296e:	4b50      	ldr	r3, [pc, #320]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b00      	cmp	r3, #0
 8002978:	d017      	beq.n	80029aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800297a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002982:	2b08      	cmp	r3, #8
 8002984:	d105      	bne.n	8002992 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002986:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00b      	beq.n	80029aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002992:	4b47      	ldr	r3, [pc, #284]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800299a:	2b0c      	cmp	r3, #12
 800299c:	d11c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299e:	4b44      	ldr	r3, [pc, #272]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d116      	bne.n	80029d8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029aa:	4b41      	ldr	r3, [pc, #260]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_RCC_OscConfig+0x186>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d001      	beq.n	80029c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e1d3      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4937      	ldr	r1, [pc, #220]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d6:	e03a      	b.n	8002a4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d020      	beq.n	8002a22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e0:	4b34      	ldr	r3, [pc, #208]	@ (8002ab4 <HAL_RCC_OscConfig+0x278>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7ff f91b 	bl	8001c20 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ee:	f7ff f917 	bl	8001c20 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e1b4      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a00:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0c:	4b28      	ldr	r3, [pc, #160]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4925      	ldr	r1, [pc, #148]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	600b      	str	r3, [r1, #0]
 8002a20:	e015      	b.n	8002a4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a22:	4b24      	ldr	r3, [pc, #144]	@ (8002ab4 <HAL_RCC_OscConfig+0x278>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7ff f8fa 	bl	8001c20 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a30:	f7ff f8f6 	bl	8001c20 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e193      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a42:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d036      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d016      	beq.n	8002a90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a62:	4b15      	ldr	r3, [pc, #84]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a68:	f7ff f8da 	bl	8001c20 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a70:	f7ff f8d6 	bl	8001c20 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e173      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a82:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x234>
 8002a8e:	e01b      	b.n	8002ac8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a90:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a96:	f7ff f8c3 	bl	8001c20 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9c:	e00e      	b.n	8002abc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a9e:	f7ff f8bf 	bl	8001c20 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d907      	bls.n	8002abc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e15c      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	42470000 	.word	0x42470000
 8002ab8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002abc:	4b8a      	ldr	r3, [pc, #552]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ea      	bne.n	8002a9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8097 	beq.w	8002c04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ada:	4b83      	ldr	r3, [pc, #524]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10f      	bne.n	8002b06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	4a7e      	ldr	r2, [pc, #504]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002af6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b06:	4b79      	ldr	r3, [pc, #484]	@ (8002cec <HAL_RCC_OscConfig+0x4b0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d118      	bne.n	8002b44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b12:	4b76      	ldr	r3, [pc, #472]	@ (8002cec <HAL_RCC_OscConfig+0x4b0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a75      	ldr	r2, [pc, #468]	@ (8002cec <HAL_RCC_OscConfig+0x4b0>)
 8002b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1e:	f7ff f87f 	bl	8001c20 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b26:	f7ff f87b 	bl	8001c20 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e118      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b38:	4b6c      	ldr	r3, [pc, #432]	@ (8002cec <HAL_RCC_OscConfig+0x4b0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d106      	bne.n	8002b5a <HAL_RCC_OscConfig+0x31e>
 8002b4c:	4b66      	ldr	r3, [pc, #408]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b50:	4a65      	ldr	r2, [pc, #404]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b58:	e01c      	b.n	8002b94 <HAL_RCC_OscConfig+0x358>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b05      	cmp	r3, #5
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x340>
 8002b62:	4b61      	ldr	r3, [pc, #388]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b66:	4a60      	ldr	r2, [pc, #384]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002b68:	f043 0304 	orr.w	r3, r3, #4
 8002b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b6e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b72:	4a5d      	ldr	r2, [pc, #372]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7a:	e00b      	b.n	8002b94 <HAL_RCC_OscConfig+0x358>
 8002b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b80:	4a59      	ldr	r2, [pc, #356]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b88:	4b57      	ldr	r3, [pc, #348]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8c:	4a56      	ldr	r2, [pc, #344]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002b8e:	f023 0304 	bic.w	r3, r3, #4
 8002b92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d015      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9c:	f7ff f840 	bl	8001c20 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f7ff f83c 	bl	8001c20 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e0d7      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bba:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0ee      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x368>
 8002bc6:	e014      	b.n	8002bf2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7ff f82a 	bl	8001c20 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd0:	f7ff f826 	bl	8001c20 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e0c1      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be6:	4b40      	ldr	r3, [pc, #256]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1ee      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf2:	7dfb      	ldrb	r3, [r7, #23]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d105      	bne.n	8002c04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002bfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80ad 	beq.w	8002d68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c0e:	4b36      	ldr	r3, [pc, #216]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d060      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d145      	bne.n	8002cae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c22:	4b33      	ldr	r3, [pc, #204]	@ (8002cf0 <HAL_RCC_OscConfig+0x4b4>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7fe fffa 	bl	8001c20 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c30:	f7fe fff6 	bl	8001c20 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e093      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	4b29      	ldr	r3, [pc, #164]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	019b      	lsls	r3, r3, #6
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c64:	085b      	lsrs	r3, r3, #1
 8002c66:	3b01      	subs	r3, #1
 8002c68:	041b      	lsls	r3, r3, #16
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c70:	061b      	lsls	r3, r3, #24
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c78:	071b      	lsls	r3, r3, #28
 8002c7a:	491b      	ldr	r1, [pc, #108]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c80:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf0 <HAL_RCC_OscConfig+0x4b4>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c86:	f7fe ffcb 	bl	8001c20 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fe ffc7 	bl	8001c20 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e064      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca0:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x452>
 8002cac:	e05c      	b.n	8002d68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cae:	4b10      	ldr	r3, [pc, #64]	@ (8002cf0 <HAL_RCC_OscConfig+0x4b4>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe ffb4 	bl	8001c20 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe ffb0 	bl	8001c20 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e04d      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <HAL_RCC_OscConfig+0x4ac>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x480>
 8002cda:	e045      	b.n	8002d68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d107      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e040      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d74 <HAL_RCC_OscConfig+0x538>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d030      	beq.n	8002d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d129      	bne.n	8002d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d122      	bne.n	8002d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d24:	4013      	ands	r3, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d119      	bne.n	8002d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d10f      	bne.n	8002d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800

08002d78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e07b      	b.n	8002e82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d108      	bne.n	8002da4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d9a:	d009      	beq.n	8002db0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	61da      	str	r2, [r3, #28]
 8002da2:	e005      	b.n	8002db0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe fce0 	bl	8001790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002de6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e34:	ea42 0103 	orr.w	r1, r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	f003 0104 	and.w	r1, r3, #4
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	f003 0210 	and.w	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69da      	ldr	r2, [r3, #28]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b088      	sub	sp, #32
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	4613      	mov	r3, r2
 8002e98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_SPI_Transmit+0x22>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e126      	b.n	80030fa <HAL_SPI_Transmit+0x270>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eb4:	f7fe feb4 	bl	8001c20 <HAL_GetTick>
 8002eb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d002      	beq.n	8002ed0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ece:	e10b      	b.n	80030e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_SPI_Transmit+0x52>
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ee0:	e102      	b.n	80030e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	88fa      	ldrh	r2, [r7, #6]
 8002efa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	88fa      	ldrh	r2, [r7, #6]
 8002f00:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f28:	d10f      	bne.n	8002f4a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f54:	2b40      	cmp	r3, #64	@ 0x40
 8002f56:	d007      	beq.n	8002f68 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f70:	d14b      	bne.n	800300a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_SPI_Transmit+0xf6>
 8002f7a:	8afb      	ldrh	r3, [r7, #22]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d13e      	bne.n	8002ffe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f84:	881a      	ldrh	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f90:	1c9a      	adds	r2, r3, #2
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fa4:	e02b      	b.n	8002ffe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d112      	bne.n	8002fda <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb8:	881a      	ldrh	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc4:	1c9a      	adds	r2, r3, #2
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002fd8:	e011      	b.n	8002ffe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fda:	f7fe fe21 	bl	8001c20 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d803      	bhi.n	8002ff2 <HAL_SPI_Transmit+0x168>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d102      	bne.n	8002ff8 <HAL_SPI_Transmit+0x16e>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d102      	bne.n	8002ffe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ffc:	e074      	b.n	80030e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ce      	bne.n	8002fa6 <HAL_SPI_Transmit+0x11c>
 8003008:	e04c      	b.n	80030a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_SPI_Transmit+0x18e>
 8003012:	8afb      	ldrh	r3, [r7, #22]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d140      	bne.n	800309a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	7812      	ldrb	r2, [r2, #0]
 8003024:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800303e:	e02c      	b.n	800309a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	d113      	bne.n	8003076 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	330c      	adds	r3, #12
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003074:	e011      	b.n	800309a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003076:	f7fe fdd3 	bl	8001c20 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d803      	bhi.n	800308e <HAL_SPI_Transmit+0x204>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d102      	bne.n	8003094 <HAL_SPI_Transmit+0x20a>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d102      	bne.n	800309a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003098:	e026      	b.n	80030e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1cd      	bne.n	8003040 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	6839      	ldr	r1, [r7, #0]
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 fbcb 	bl	8003844 <SPI_EndRxTxTransaction>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e000      	b.n	80030e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80030e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80030f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b088      	sub	sp, #32
 8003106:	af02      	add	r7, sp, #8
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	4613      	mov	r3, r2
 8003110:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800311e:	d112      	bne.n	8003146 <HAL_SPI_Receive+0x44>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10e      	bne.n	8003146 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2204      	movs	r2, #4
 800312c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003130:	88fa      	ldrh	r2, [r7, #6]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	4613      	mov	r3, r2
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f8f1 	bl	8003324 <HAL_SPI_TransmitReceive>
 8003142:	4603      	mov	r3, r0
 8003144:	e0ea      	b.n	800331c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_SPI_Receive+0x52>
 8003150:	2302      	movs	r3, #2
 8003152:	e0e3      	b.n	800331c <HAL_SPI_Receive+0x21a>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800315c:	f7fe fd60 	bl	8001c20 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d002      	beq.n	8003174 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800316e:	2302      	movs	r3, #2
 8003170:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003172:	e0ca      	b.n	800330a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_SPI_Receive+0x7e>
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003184:	e0c1      	b.n	800330a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2204      	movs	r2, #4
 800318a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	88fa      	ldrh	r2, [r7, #6]
 800319e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	88fa      	ldrh	r2, [r7, #6]
 80031a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031cc:	d10f      	bne.n	80031ee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f8:	2b40      	cmp	r3, #64	@ 0x40
 80031fa:	d007      	beq.n	800320c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800320a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d162      	bne.n	80032da <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003214:	e02e      	b.n	8003274 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d115      	bne.n	8003250 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f103 020c 	add.w	r2, r3, #12
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003230:	7812      	ldrb	r2, [r2, #0]
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800324e:	e011      	b.n	8003274 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003250:	f7fe fce6 	bl	8001c20 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d803      	bhi.n	8003268 <HAL_SPI_Receive+0x166>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003266:	d102      	bne.n	800326e <HAL_SPI_Receive+0x16c>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d102      	bne.n	8003274 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003272:	e04a      	b.n	800330a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1cb      	bne.n	8003216 <HAL_SPI_Receive+0x114>
 800327e:	e031      	b.n	80032e4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b01      	cmp	r3, #1
 800328c:	d113      	bne.n	80032b6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003298:	b292      	uxth	r2, r2
 800329a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a0:	1c9a      	adds	r2, r3, #2
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032b4:	e011      	b.n	80032da <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032b6:	f7fe fcb3 	bl	8001c20 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d803      	bhi.n	80032ce <HAL_SPI_Receive+0x1cc>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d102      	bne.n	80032d4 <HAL_SPI_Receive+0x1d2>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d102      	bne.n	80032da <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80032d8:	e017      	b.n	800330a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1cd      	bne.n	8003280 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	6839      	ldr	r1, [r7, #0]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 fa45 	bl	8003778 <SPI_EndRxTransaction>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	75fb      	strb	r3, [r7, #23]
 8003306:	e000      	b.n	800330a <HAL_SPI_Receive+0x208>
  }

error :
 8003308:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800331a:	7dfb      	ldrb	r3, [r7, #23]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08c      	sub	sp, #48	@ 0x30
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003332:	2301      	movs	r3, #1
 8003334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_SPI_TransmitReceive+0x26>
 8003346:	2302      	movs	r3, #2
 8003348:	e18a      	b.n	8003660 <HAL_SPI_TransmitReceive+0x33c>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003352:	f7fe fc65 	bl	8001c20 <HAL_GetTick>
 8003356:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800335e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003368:	887b      	ldrh	r3, [r7, #2]
 800336a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800336c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003370:	2b01      	cmp	r3, #1
 8003372:	d00f      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x70>
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800337a:	d107      	bne.n	800338c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d103      	bne.n	800338c <HAL_SPI_TransmitReceive+0x68>
 8003384:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003388:	2b04      	cmp	r3, #4
 800338a:	d003      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800338c:	2302      	movs	r3, #2
 800338e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003392:	e15b      	b.n	800364c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d005      	beq.n	80033a6 <HAL_SPI_TransmitReceive+0x82>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HAL_SPI_TransmitReceive+0x82>
 80033a0:	887b      	ldrh	r3, [r7, #2]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d103      	bne.n	80033ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80033ac:	e14e      	b.n	800364c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d003      	beq.n	80033c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2205      	movs	r2, #5
 80033be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	887a      	ldrh	r2, [r7, #2]
 80033d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	887a      	ldrh	r2, [r7, #2]
 80033d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	887a      	ldrh	r2, [r7, #2]
 80033e4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	887a      	ldrh	r2, [r7, #2]
 80033ea:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003402:	2b40      	cmp	r3, #64	@ 0x40
 8003404:	d007      	beq.n	8003416 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800341e:	d178      	bne.n	8003512 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_SPI_TransmitReceive+0x10a>
 8003428:	8b7b      	ldrh	r3, [r7, #26]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d166      	bne.n	80034fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	881a      	ldrh	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	1c9a      	adds	r2, r3, #2
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003452:	e053      	b.n	80034fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b02      	cmp	r3, #2
 8003460:	d11b      	bne.n	800349a <HAL_SPI_TransmitReceive+0x176>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d016      	beq.n	800349a <HAL_SPI_TransmitReceive+0x176>
 800346c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346e:	2b01      	cmp	r3, #1
 8003470:	d113      	bne.n	800349a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	881a      	ldrh	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	1c9a      	adds	r2, r3, #2
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d119      	bne.n	80034dc <HAL_SPI_TransmitReceive+0x1b8>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d014      	beq.n	80034dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034bc:	b292      	uxth	r2, r2
 80034be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c4:	1c9a      	adds	r2, r3, #2
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034d8:	2301      	movs	r3, #1
 80034da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034dc:	f7fe fba0 	bl	8001c20 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d807      	bhi.n	80034fc <HAL_SPI_TransmitReceive+0x1d8>
 80034ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f2:	d003      	beq.n	80034fc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80034fa:	e0a7      	b.n	800364c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1a6      	bne.n	8003454 <HAL_SPI_TransmitReceive+0x130>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1a1      	bne.n	8003454 <HAL_SPI_TransmitReceive+0x130>
 8003510:	e07c      	b.n	800360c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <HAL_SPI_TransmitReceive+0x1fc>
 800351a:	8b7b      	ldrh	r3, [r7, #26]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d16b      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	7812      	ldrb	r2, [r2, #0]
 800352c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003546:	e057      	b.n	80035f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d11c      	bne.n	8003590 <HAL_SPI_TransmitReceive+0x26c>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d017      	beq.n	8003590 <HAL_SPI_TransmitReceive+0x26c>
 8003560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003562:	2b01      	cmp	r3, #1
 8003564:	d114      	bne.n	8003590 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	7812      	ldrb	r2, [r2, #0]
 8003572:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d119      	bne.n	80035d2 <HAL_SPI_TransmitReceive+0x2ae>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d014      	beq.n	80035d2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035ce:	2301      	movs	r3, #1
 80035d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035d2:	f7fe fb25 	bl	8001c20 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035de:	429a      	cmp	r2, r3
 80035e0:	d803      	bhi.n	80035ea <HAL_SPI_TransmitReceive+0x2c6>
 80035e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d102      	bne.n	80035f0 <HAL_SPI_TransmitReceive+0x2cc>
 80035ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d103      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80035f6:	e029      	b.n	800364c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1a2      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x224>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d19d      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800360c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f917 	bl	8003844 <SPI_EndRxTxTransaction>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d006      	beq.n	800362a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003628:	e010      	b.n	800364c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	e000      	b.n	800364c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800364a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800365c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003660:	4618      	mov	r0, r3
 8003662:	3730      	adds	r7, #48	@ 0x30
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	4613      	mov	r3, r2
 8003676:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003678:	f7fe fad2 	bl	8001c20 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	4413      	add	r3, r2
 8003686:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003688:	f7fe faca 	bl	8001c20 <HAL_GetTick>
 800368c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800368e:	4b39      	ldr	r3, [pc, #228]	@ (8003774 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	015b      	lsls	r3, r3, #5
 8003694:	0d1b      	lsrs	r3, r3, #20
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	fb02 f303 	mul.w	r3, r2, r3
 800369c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800369e:	e054      	b.n	800374a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d050      	beq.n	800374a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036a8:	f7fe faba 	bl	8001c20 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d902      	bls.n	80036be <SPI_WaitFlagStateUntilTimeout+0x56>
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d13d      	bne.n	800373a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036d6:	d111      	bne.n	80036fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036e0:	d004      	beq.n	80036ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ea:	d107      	bne.n	80036fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003704:	d10f      	bne.n	8003726 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003724:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e017      	b.n	800376a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	3b01      	subs	r3, #1
 8003748:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4013      	ands	r3, r2
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	429a      	cmp	r2, r3
 8003758:	bf0c      	ite	eq
 800375a:	2301      	moveq	r3, #1
 800375c:	2300      	movne	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	461a      	mov	r2, r3
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	429a      	cmp	r2, r3
 8003766:	d19b      	bne.n	80036a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000000 	.word	0x20000000

08003778 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800378c:	d111      	bne.n	80037b2 <SPI_EndRxTransaction+0x3a>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003796:	d004      	beq.n	80037a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a0:	d107      	bne.n	80037b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037ba:	d12a      	bne.n	8003812 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c4:	d012      	beq.n	80037ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2200      	movs	r2, #0
 80037ce:	2180      	movs	r1, #128	@ 0x80
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7ff ff49 	bl	8003668 <SPI_WaitFlagStateUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d02d      	beq.n	8003838 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e0:	f043 0220 	orr.w	r2, r3, #32
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e026      	b.n	800383a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2200      	movs	r2, #0
 80037f4:	2101      	movs	r1, #1
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f7ff ff36 	bl	8003668 <SPI_WaitFlagStateUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d01a      	beq.n	8003838 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e013      	b.n	800383a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2200      	movs	r2, #0
 800381a:	2101      	movs	r1, #1
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f7ff ff23 	bl	8003668 <SPI_WaitFlagStateUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382c:	f043 0220 	orr.w	r2, r3, #32
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e000      	b.n	800383a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003850:	4b1b      	ldr	r3, [pc, #108]	@ (80038c0 <SPI_EndRxTxTransaction+0x7c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1b      	ldr	r2, [pc, #108]	@ (80038c4 <SPI_EndRxTxTransaction+0x80>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	0d5b      	lsrs	r3, r3, #21
 800385c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800386e:	d112      	bne.n	8003896 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2200      	movs	r2, #0
 8003878:	2180      	movs	r1, #128	@ 0x80
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff fef4 	bl	8003668 <SPI_WaitFlagStateUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d016      	beq.n	80038b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e00f      	b.n	80038b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	3b01      	subs	r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ac:	2b80      	cmp	r3, #128	@ 0x80
 80038ae:	d0f2      	beq.n	8003896 <SPI_EndRxTxTransaction+0x52>
 80038b0:	e000      	b.n	80038b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80038b2:	bf00      	nop
  }

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000000 	.word	0x20000000
 80038c4:	165e9f81 	.word	0x165e9f81

080038c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e03f      	b.n	800395a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd ffb6 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2224      	movs	r2, #36	@ 0x24
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800390a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f929 	bl	8003b64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b08a      	sub	sp, #40	@ 0x28
 8003966:	af02      	add	r7, sp, #8
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b20      	cmp	r3, #32
 8003980:	d17c      	bne.n	8003a7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_UART_Transmit+0x2c>
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e075      	b.n	8003a7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_UART_Transmit+0x3e>
 800399c:	2302      	movs	r3, #2
 800399e:	e06e      	b.n	8003a7e <HAL_UART_Transmit+0x11c>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2221      	movs	r2, #33	@ 0x21
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039b6:	f7fe f933 	bl	8001c20 <HAL_GetTick>
 80039ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	88fa      	ldrh	r2, [r7, #6]
 80039c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039d0:	d108      	bne.n	80039e4 <HAL_UART_Transmit+0x82>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d104      	bne.n	80039e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	e003      	b.n	80039ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80039f4:	e02a      	b.n	8003a4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2200      	movs	r2, #0
 80039fe:	2180      	movs	r1, #128	@ 0x80
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f840 	bl	8003a86 <UART_WaitOnFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e036      	b.n	8003a7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10b      	bne.n	8003a2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	3302      	adds	r3, #2
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	e007      	b.n	8003a3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	781a      	ldrb	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1cf      	bne.n	80039f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2140      	movs	r1, #64	@ 0x40
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f810 	bl	8003a86 <UART_WaitOnFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e006      	b.n	8003a7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e000      	b.n	8003a7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a7c:	2302      	movs	r3, #2
  }
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b090      	sub	sp, #64	@ 0x40
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a96:	e050      	b.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d04c      	beq.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aa6:	f7fe f8bb 	bl	8001c20 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d241      	bcs.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	330c      	adds	r3, #12
 8003abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ad6:	637a      	str	r2, [r7, #52]	@ 0x34
 8003ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003adc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e5      	bne.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3314      	adds	r3, #20
 8003af0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	613b      	str	r3, [r7, #16]
   return(result);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3314      	adds	r3, #20
 8003b08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b0a:	623a      	str	r2, [r7, #32]
 8003b0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	69f9      	ldr	r1, [r7, #28]
 8003b10:	6a3a      	ldr	r2, [r7, #32]
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e5      	bne.n	8003aea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e00f      	b.n	8003b5a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4013      	ands	r3, r2
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	bf0c      	ite	eq
 8003b4a:	2301      	moveq	r3, #1
 8003b4c:	2300      	movne	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d09f      	beq.n	8003a98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3740      	adds	r7, #64	@ 0x40
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b68:	b0c0      	sub	sp, #256	@ 0x100
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b80:	68d9      	ldr	r1, [r3, #12]
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	ea40 0301 	orr.w	r3, r0, r1
 8003b8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003bbc:	f021 010c 	bic.w	r1, r1, #12
 8003bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bde:	6999      	ldr	r1, [r3, #24]
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	ea40 0301 	orr.w	r3, r0, r1
 8003bea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4b8f      	ldr	r3, [pc, #572]	@ (8003e30 <UART_SetConfig+0x2cc>)
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d005      	beq.n	8003c04 <UART_SetConfig+0xa0>
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4b8d      	ldr	r3, [pc, #564]	@ (8003e34 <UART_SetConfig+0x2d0>)
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d104      	bne.n	8003c0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c04:	f7fe fbd6 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 8003c08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003c0c:	e003      	b.n	8003c16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c0e:	f7fe fbbd 	bl	800238c <HAL_RCC_GetPCLK1Freq>
 8003c12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c20:	f040 810c 	bne.w	8003e3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c36:	4622      	mov	r2, r4
 8003c38:	462b      	mov	r3, r5
 8003c3a:	1891      	adds	r1, r2, r2
 8003c3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c3e:	415b      	adcs	r3, r3
 8003c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c46:	4621      	mov	r1, r4
 8003c48:	eb12 0801 	adds.w	r8, r2, r1
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	eb43 0901 	adc.w	r9, r3, r1
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c66:	4690      	mov	r8, r2
 8003c68:	4699      	mov	r9, r3
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	eb18 0303 	adds.w	r3, r8, r3
 8003c70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c74:	462b      	mov	r3, r5
 8003c76:	eb49 0303 	adc.w	r3, r9, r3
 8003c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c92:	460b      	mov	r3, r1
 8003c94:	18db      	adds	r3, r3, r3
 8003c96:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c98:	4613      	mov	r3, r2
 8003c9a:	eb42 0303 	adc.w	r3, r2, r3
 8003c9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ca0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ca4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ca8:	f7fc ff9e 	bl	8000be8 <__aeabi_uldivmod>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4b61      	ldr	r3, [pc, #388]	@ (8003e38 <UART_SetConfig+0x2d4>)
 8003cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	011c      	lsls	r4, r3, #4
 8003cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003cc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ccc:	4642      	mov	r2, r8
 8003cce:	464b      	mov	r3, r9
 8003cd0:	1891      	adds	r1, r2, r2
 8003cd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003cd4:	415b      	adcs	r3, r3
 8003cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003cdc:	4641      	mov	r1, r8
 8003cde:	eb12 0a01 	adds.w	sl, r2, r1
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cfc:	4692      	mov	sl, r2
 8003cfe:	469b      	mov	fp, r3
 8003d00:	4643      	mov	r3, r8
 8003d02:	eb1a 0303 	adds.w	r3, sl, r3
 8003d06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	18db      	adds	r3, r3, r3
 8003d2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d2e:	4613      	mov	r3, r2
 8003d30:	eb42 0303 	adc.w	r3, r2, r3
 8003d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d3e:	f7fc ff53 	bl	8000be8 <__aeabi_uldivmod>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4611      	mov	r1, r2
 8003d48:	4b3b      	ldr	r3, [pc, #236]	@ (8003e38 <UART_SetConfig+0x2d4>)
 8003d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	2264      	movs	r2, #100	@ 0x64
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
 8003d56:	1acb      	subs	r3, r1, r3
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d5e:	4b36      	ldr	r3, [pc, #216]	@ (8003e38 <UART_SetConfig+0x2d4>)
 8003d60:	fba3 2302 	umull	r2, r3, r3, r2
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d6c:	441c      	add	r4, r3
 8003d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d72:	2200      	movs	r2, #0
 8003d74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d80:	4642      	mov	r2, r8
 8003d82:	464b      	mov	r3, r9
 8003d84:	1891      	adds	r1, r2, r2
 8003d86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d88:	415b      	adcs	r3, r3
 8003d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d90:	4641      	mov	r1, r8
 8003d92:	1851      	adds	r1, r2, r1
 8003d94:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d96:	4649      	mov	r1, r9
 8003d98:	414b      	adcs	r3, r1
 8003d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003da8:	4659      	mov	r1, fp
 8003daa:	00cb      	lsls	r3, r1, #3
 8003dac:	4651      	mov	r1, sl
 8003dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003db2:	4651      	mov	r1, sl
 8003db4:	00ca      	lsls	r2, r1, #3
 8003db6:	4610      	mov	r0, r2
 8003db8:	4619      	mov	r1, r3
 8003dba:	4603      	mov	r3, r0
 8003dbc:	4642      	mov	r2, r8
 8003dbe:	189b      	adds	r3, r3, r2
 8003dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dc4:	464b      	mov	r3, r9
 8003dc6:	460a      	mov	r2, r1
 8003dc8:	eb42 0303 	adc.w	r3, r2, r3
 8003dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ddc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003de0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003de4:	460b      	mov	r3, r1
 8003de6:	18db      	adds	r3, r3, r3
 8003de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dea:	4613      	mov	r3, r2
 8003dec:	eb42 0303 	adc.w	r3, r2, r3
 8003df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003df2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003df6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003dfa:	f7fc fef5 	bl	8000be8 <__aeabi_uldivmod>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4b0d      	ldr	r3, [pc, #52]	@ (8003e38 <UART_SetConfig+0x2d4>)
 8003e04:	fba3 1302 	umull	r1, r3, r3, r2
 8003e08:	095b      	lsrs	r3, r3, #5
 8003e0a:	2164      	movs	r1, #100	@ 0x64
 8003e0c:	fb01 f303 	mul.w	r3, r1, r3
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	3332      	adds	r3, #50	@ 0x32
 8003e16:	4a08      	ldr	r2, [pc, #32]	@ (8003e38 <UART_SetConfig+0x2d4>)
 8003e18:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	f003 0207 	and.w	r2, r3, #7
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4422      	add	r2, r4
 8003e2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e2c:	e106      	b.n	800403c <UART_SetConfig+0x4d8>
 8003e2e:	bf00      	nop
 8003e30:	40011000 	.word	0x40011000
 8003e34:	40011400 	.word	0x40011400
 8003e38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e40:	2200      	movs	r2, #0
 8003e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e4e:	4642      	mov	r2, r8
 8003e50:	464b      	mov	r3, r9
 8003e52:	1891      	adds	r1, r2, r2
 8003e54:	6239      	str	r1, [r7, #32]
 8003e56:	415b      	adcs	r3, r3
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e5e:	4641      	mov	r1, r8
 8003e60:	1854      	adds	r4, r2, r1
 8003e62:	4649      	mov	r1, r9
 8003e64:	eb43 0501 	adc.w	r5, r3, r1
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	00eb      	lsls	r3, r5, #3
 8003e72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e76:	00e2      	lsls	r2, r4, #3
 8003e78:	4614      	mov	r4, r2
 8003e7a:	461d      	mov	r5, r3
 8003e7c:	4643      	mov	r3, r8
 8003e7e:	18e3      	adds	r3, r4, r3
 8003e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e84:	464b      	mov	r3, r9
 8003e86:	eb45 0303 	adc.w	r3, r5, r3
 8003e8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003eaa:	4629      	mov	r1, r5
 8003eac:	008b      	lsls	r3, r1, #2
 8003eae:	4621      	mov	r1, r4
 8003eb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	008a      	lsls	r2, r1, #2
 8003eb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ebc:	f7fc fe94 	bl	8000be8 <__aeabi_uldivmod>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4b60      	ldr	r3, [pc, #384]	@ (8004048 <UART_SetConfig+0x4e4>)
 8003ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	011c      	lsls	r4, r3, #4
 8003ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ed8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003edc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ee0:	4642      	mov	r2, r8
 8003ee2:	464b      	mov	r3, r9
 8003ee4:	1891      	adds	r1, r2, r2
 8003ee6:	61b9      	str	r1, [r7, #24]
 8003ee8:	415b      	adcs	r3, r3
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	1851      	adds	r1, r2, r1
 8003ef4:	6139      	str	r1, [r7, #16]
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	414b      	adcs	r3, r1
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f08:	4659      	mov	r1, fp
 8003f0a:	00cb      	lsls	r3, r1, #3
 8003f0c:	4651      	mov	r1, sl
 8003f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f12:	4651      	mov	r1, sl
 8003f14:	00ca      	lsls	r2, r1, #3
 8003f16:	4610      	mov	r0, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4642      	mov	r2, r8
 8003f1e:	189b      	adds	r3, r3, r2
 8003f20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f24:	464b      	mov	r3, r9
 8003f26:	460a      	mov	r2, r1
 8003f28:	eb42 0303 	adc.w	r3, r2, r3
 8003f2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f48:	4649      	mov	r1, r9
 8003f4a:	008b      	lsls	r3, r1, #2
 8003f4c:	4641      	mov	r1, r8
 8003f4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f52:	4641      	mov	r1, r8
 8003f54:	008a      	lsls	r2, r1, #2
 8003f56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f5a:	f7fc fe45 	bl	8000be8 <__aeabi_uldivmod>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4611      	mov	r1, r2
 8003f64:	4b38      	ldr	r3, [pc, #224]	@ (8004048 <UART_SetConfig+0x4e4>)
 8003f66:	fba3 2301 	umull	r2, r3, r3, r1
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	2264      	movs	r2, #100	@ 0x64
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	1acb      	subs	r3, r1, r3
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	3332      	adds	r3, #50	@ 0x32
 8003f78:	4a33      	ldr	r2, [pc, #204]	@ (8004048 <UART_SetConfig+0x4e4>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f84:	441c      	add	r4, r3
 8003f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	1891      	adds	r1, r2, r2
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	415b      	adcs	r3, r3
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fa4:	4641      	mov	r1, r8
 8003fa6:	1851      	adds	r1, r2, r1
 8003fa8:	6039      	str	r1, [r7, #0]
 8003faa:	4649      	mov	r1, r9
 8003fac:	414b      	adcs	r3, r1
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fbc:	4659      	mov	r1, fp
 8003fbe:	00cb      	lsls	r3, r1, #3
 8003fc0:	4651      	mov	r1, sl
 8003fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fc6:	4651      	mov	r1, sl
 8003fc8:	00ca      	lsls	r2, r1, #3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	189b      	adds	r3, r3, r2
 8003fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	460a      	mov	r2, r1
 8003fda:	eb42 0303 	adc.w	r3, r2, r3
 8003fde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fea:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ff8:	4649      	mov	r1, r9
 8003ffa:	008b      	lsls	r3, r1, #2
 8003ffc:	4641      	mov	r1, r8
 8003ffe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004002:	4641      	mov	r1, r8
 8004004:	008a      	lsls	r2, r1, #2
 8004006:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800400a:	f7fc fded 	bl	8000be8 <__aeabi_uldivmod>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <UART_SetConfig+0x4e4>)
 8004014:	fba3 1302 	umull	r1, r3, r3, r2
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	2164      	movs	r1, #100	@ 0x64
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	3332      	adds	r3, #50	@ 0x32
 8004026:	4a08      	ldr	r2, [pc, #32]	@ (8004048 <UART_SetConfig+0x4e4>)
 8004028:	fba2 2303 	umull	r2, r3, r2, r3
 800402c:	095b      	lsrs	r3, r3, #5
 800402e:	f003 020f 	and.w	r2, r3, #15
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4422      	add	r2, r4
 800403a:	609a      	str	r2, [r3, #8]
}
 800403c:	bf00      	nop
 800403e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004042:	46bd      	mov	sp, r7
 8004044:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004048:	51eb851f 	.word	0x51eb851f

0800404c <__cvt>:
 800404c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004050:	ec57 6b10 	vmov	r6, r7, d0
 8004054:	2f00      	cmp	r7, #0
 8004056:	460c      	mov	r4, r1
 8004058:	4619      	mov	r1, r3
 800405a:	463b      	mov	r3, r7
 800405c:	bfbb      	ittet	lt
 800405e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004062:	461f      	movlt	r7, r3
 8004064:	2300      	movge	r3, #0
 8004066:	232d      	movlt	r3, #45	@ 0x2d
 8004068:	700b      	strb	r3, [r1, #0]
 800406a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800406c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004070:	4691      	mov	r9, r2
 8004072:	f023 0820 	bic.w	r8, r3, #32
 8004076:	bfbc      	itt	lt
 8004078:	4632      	movlt	r2, r6
 800407a:	4616      	movlt	r6, r2
 800407c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004080:	d005      	beq.n	800408e <__cvt+0x42>
 8004082:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004086:	d100      	bne.n	800408a <__cvt+0x3e>
 8004088:	3401      	adds	r4, #1
 800408a:	2102      	movs	r1, #2
 800408c:	e000      	b.n	8004090 <__cvt+0x44>
 800408e:	2103      	movs	r1, #3
 8004090:	ab03      	add	r3, sp, #12
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	ab02      	add	r3, sp, #8
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	ec47 6b10 	vmov	d0, r6, r7
 800409c:	4653      	mov	r3, sl
 800409e:	4622      	mov	r2, r4
 80040a0:	f000 fe6e 	bl	8004d80 <_dtoa_r>
 80040a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80040a8:	4605      	mov	r5, r0
 80040aa:	d119      	bne.n	80040e0 <__cvt+0x94>
 80040ac:	f019 0f01 	tst.w	r9, #1
 80040b0:	d00e      	beq.n	80040d0 <__cvt+0x84>
 80040b2:	eb00 0904 	add.w	r9, r0, r4
 80040b6:	2200      	movs	r2, #0
 80040b8:	2300      	movs	r3, #0
 80040ba:	4630      	mov	r0, r6
 80040bc:	4639      	mov	r1, r7
 80040be:	f7fc fd23 	bl	8000b08 <__aeabi_dcmpeq>
 80040c2:	b108      	cbz	r0, 80040c8 <__cvt+0x7c>
 80040c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80040c8:	2230      	movs	r2, #48	@ 0x30
 80040ca:	9b03      	ldr	r3, [sp, #12]
 80040cc:	454b      	cmp	r3, r9
 80040ce:	d31e      	bcc.n	800410e <__cvt+0xc2>
 80040d0:	9b03      	ldr	r3, [sp, #12]
 80040d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80040d4:	1b5b      	subs	r3, r3, r5
 80040d6:	4628      	mov	r0, r5
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	b004      	add	sp, #16
 80040dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80040e4:	eb00 0904 	add.w	r9, r0, r4
 80040e8:	d1e5      	bne.n	80040b6 <__cvt+0x6a>
 80040ea:	7803      	ldrb	r3, [r0, #0]
 80040ec:	2b30      	cmp	r3, #48	@ 0x30
 80040ee:	d10a      	bne.n	8004106 <__cvt+0xba>
 80040f0:	2200      	movs	r2, #0
 80040f2:	2300      	movs	r3, #0
 80040f4:	4630      	mov	r0, r6
 80040f6:	4639      	mov	r1, r7
 80040f8:	f7fc fd06 	bl	8000b08 <__aeabi_dcmpeq>
 80040fc:	b918      	cbnz	r0, 8004106 <__cvt+0xba>
 80040fe:	f1c4 0401 	rsb	r4, r4, #1
 8004102:	f8ca 4000 	str.w	r4, [sl]
 8004106:	f8da 3000 	ldr.w	r3, [sl]
 800410a:	4499      	add	r9, r3
 800410c:	e7d3      	b.n	80040b6 <__cvt+0x6a>
 800410e:	1c59      	adds	r1, r3, #1
 8004110:	9103      	str	r1, [sp, #12]
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	e7d9      	b.n	80040ca <__cvt+0x7e>

08004116 <__exponent>:
 8004116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004118:	2900      	cmp	r1, #0
 800411a:	bfba      	itte	lt
 800411c:	4249      	neglt	r1, r1
 800411e:	232d      	movlt	r3, #45	@ 0x2d
 8004120:	232b      	movge	r3, #43	@ 0x2b
 8004122:	2909      	cmp	r1, #9
 8004124:	7002      	strb	r2, [r0, #0]
 8004126:	7043      	strb	r3, [r0, #1]
 8004128:	dd29      	ble.n	800417e <__exponent+0x68>
 800412a:	f10d 0307 	add.w	r3, sp, #7
 800412e:	461d      	mov	r5, r3
 8004130:	270a      	movs	r7, #10
 8004132:	461a      	mov	r2, r3
 8004134:	fbb1 f6f7 	udiv	r6, r1, r7
 8004138:	fb07 1416 	mls	r4, r7, r6, r1
 800413c:	3430      	adds	r4, #48	@ 0x30
 800413e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004142:	460c      	mov	r4, r1
 8004144:	2c63      	cmp	r4, #99	@ 0x63
 8004146:	f103 33ff 	add.w	r3, r3, #4294967295
 800414a:	4631      	mov	r1, r6
 800414c:	dcf1      	bgt.n	8004132 <__exponent+0x1c>
 800414e:	3130      	adds	r1, #48	@ 0x30
 8004150:	1e94      	subs	r4, r2, #2
 8004152:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004156:	1c41      	adds	r1, r0, #1
 8004158:	4623      	mov	r3, r4
 800415a:	42ab      	cmp	r3, r5
 800415c:	d30a      	bcc.n	8004174 <__exponent+0x5e>
 800415e:	f10d 0309 	add.w	r3, sp, #9
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	42ac      	cmp	r4, r5
 8004166:	bf88      	it	hi
 8004168:	2300      	movhi	r3, #0
 800416a:	3302      	adds	r3, #2
 800416c:	4403      	add	r3, r0
 800416e:	1a18      	subs	r0, r3, r0
 8004170:	b003      	add	sp, #12
 8004172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004174:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004178:	f801 6f01 	strb.w	r6, [r1, #1]!
 800417c:	e7ed      	b.n	800415a <__exponent+0x44>
 800417e:	2330      	movs	r3, #48	@ 0x30
 8004180:	3130      	adds	r1, #48	@ 0x30
 8004182:	7083      	strb	r3, [r0, #2]
 8004184:	70c1      	strb	r1, [r0, #3]
 8004186:	1d03      	adds	r3, r0, #4
 8004188:	e7f1      	b.n	800416e <__exponent+0x58>
	...

0800418c <_printf_float>:
 800418c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004190:	b08d      	sub	sp, #52	@ 0x34
 8004192:	460c      	mov	r4, r1
 8004194:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004198:	4616      	mov	r6, r2
 800419a:	461f      	mov	r7, r3
 800419c:	4605      	mov	r5, r0
 800419e:	f000 fcef 	bl	8004b80 <_localeconv_r>
 80041a2:	6803      	ldr	r3, [r0, #0]
 80041a4:	9304      	str	r3, [sp, #16]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fc f882 	bl	80002b0 <strlen>
 80041ac:	2300      	movs	r3, #0
 80041ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80041b0:	f8d8 3000 	ldr.w	r3, [r8]
 80041b4:	9005      	str	r0, [sp, #20]
 80041b6:	3307      	adds	r3, #7
 80041b8:	f023 0307 	bic.w	r3, r3, #7
 80041bc:	f103 0208 	add.w	r2, r3, #8
 80041c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80041c4:	f8d4 b000 	ldr.w	fp, [r4]
 80041c8:	f8c8 2000 	str.w	r2, [r8]
 80041cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80041d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80041d4:	9307      	str	r3, [sp, #28]
 80041d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80041da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80041de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041e2:	4b9c      	ldr	r3, [pc, #624]	@ (8004454 <_printf_float+0x2c8>)
 80041e4:	f04f 32ff 	mov.w	r2, #4294967295
 80041e8:	f7fc fcc0 	bl	8000b6c <__aeabi_dcmpun>
 80041ec:	bb70      	cbnz	r0, 800424c <_printf_float+0xc0>
 80041ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041f2:	4b98      	ldr	r3, [pc, #608]	@ (8004454 <_printf_float+0x2c8>)
 80041f4:	f04f 32ff 	mov.w	r2, #4294967295
 80041f8:	f7fc fc9a 	bl	8000b30 <__aeabi_dcmple>
 80041fc:	bb30      	cbnz	r0, 800424c <_printf_float+0xc0>
 80041fe:	2200      	movs	r2, #0
 8004200:	2300      	movs	r3, #0
 8004202:	4640      	mov	r0, r8
 8004204:	4649      	mov	r1, r9
 8004206:	f7fc fc89 	bl	8000b1c <__aeabi_dcmplt>
 800420a:	b110      	cbz	r0, 8004212 <_printf_float+0x86>
 800420c:	232d      	movs	r3, #45	@ 0x2d
 800420e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004212:	4a91      	ldr	r2, [pc, #580]	@ (8004458 <_printf_float+0x2cc>)
 8004214:	4b91      	ldr	r3, [pc, #580]	@ (800445c <_printf_float+0x2d0>)
 8004216:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800421a:	bf94      	ite	ls
 800421c:	4690      	movls	r8, r2
 800421e:	4698      	movhi	r8, r3
 8004220:	2303      	movs	r3, #3
 8004222:	6123      	str	r3, [r4, #16]
 8004224:	f02b 0304 	bic.w	r3, fp, #4
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	f04f 0900 	mov.w	r9, #0
 800422e:	9700      	str	r7, [sp, #0]
 8004230:	4633      	mov	r3, r6
 8004232:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004234:	4621      	mov	r1, r4
 8004236:	4628      	mov	r0, r5
 8004238:	f000 f9d2 	bl	80045e0 <_printf_common>
 800423c:	3001      	adds	r0, #1
 800423e:	f040 808d 	bne.w	800435c <_printf_float+0x1d0>
 8004242:	f04f 30ff 	mov.w	r0, #4294967295
 8004246:	b00d      	add	sp, #52	@ 0x34
 8004248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424c:	4642      	mov	r2, r8
 800424e:	464b      	mov	r3, r9
 8004250:	4640      	mov	r0, r8
 8004252:	4649      	mov	r1, r9
 8004254:	f7fc fc8a 	bl	8000b6c <__aeabi_dcmpun>
 8004258:	b140      	cbz	r0, 800426c <_printf_float+0xe0>
 800425a:	464b      	mov	r3, r9
 800425c:	2b00      	cmp	r3, #0
 800425e:	bfbc      	itt	lt
 8004260:	232d      	movlt	r3, #45	@ 0x2d
 8004262:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004266:	4a7e      	ldr	r2, [pc, #504]	@ (8004460 <_printf_float+0x2d4>)
 8004268:	4b7e      	ldr	r3, [pc, #504]	@ (8004464 <_printf_float+0x2d8>)
 800426a:	e7d4      	b.n	8004216 <_printf_float+0x8a>
 800426c:	6863      	ldr	r3, [r4, #4]
 800426e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004272:	9206      	str	r2, [sp, #24]
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	d13b      	bne.n	80042f0 <_printf_float+0x164>
 8004278:	2306      	movs	r3, #6
 800427a:	6063      	str	r3, [r4, #4]
 800427c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004280:	2300      	movs	r3, #0
 8004282:	6022      	str	r2, [r4, #0]
 8004284:	9303      	str	r3, [sp, #12]
 8004286:	ab0a      	add	r3, sp, #40	@ 0x28
 8004288:	e9cd a301 	strd	sl, r3, [sp, #4]
 800428c:	ab09      	add	r3, sp, #36	@ 0x24
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	6861      	ldr	r1, [r4, #4]
 8004292:	ec49 8b10 	vmov	d0, r8, r9
 8004296:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800429a:	4628      	mov	r0, r5
 800429c:	f7ff fed6 	bl	800404c <__cvt>
 80042a0:	9b06      	ldr	r3, [sp, #24]
 80042a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80042a4:	2b47      	cmp	r3, #71	@ 0x47
 80042a6:	4680      	mov	r8, r0
 80042a8:	d129      	bne.n	80042fe <_printf_float+0x172>
 80042aa:	1cc8      	adds	r0, r1, #3
 80042ac:	db02      	blt.n	80042b4 <_printf_float+0x128>
 80042ae:	6863      	ldr	r3, [r4, #4]
 80042b0:	4299      	cmp	r1, r3
 80042b2:	dd41      	ble.n	8004338 <_printf_float+0x1ac>
 80042b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80042b8:	fa5f fa8a 	uxtb.w	sl, sl
 80042bc:	3901      	subs	r1, #1
 80042be:	4652      	mov	r2, sl
 80042c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80042c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80042c6:	f7ff ff26 	bl	8004116 <__exponent>
 80042ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80042cc:	1813      	adds	r3, r2, r0
 80042ce:	2a01      	cmp	r2, #1
 80042d0:	4681      	mov	r9, r0
 80042d2:	6123      	str	r3, [r4, #16]
 80042d4:	dc02      	bgt.n	80042dc <_printf_float+0x150>
 80042d6:	6822      	ldr	r2, [r4, #0]
 80042d8:	07d2      	lsls	r2, r2, #31
 80042da:	d501      	bpl.n	80042e0 <_printf_float+0x154>
 80042dc:	3301      	adds	r3, #1
 80042de:	6123      	str	r3, [r4, #16]
 80042e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0a2      	beq.n	800422e <_printf_float+0xa2>
 80042e8:	232d      	movs	r3, #45	@ 0x2d
 80042ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042ee:	e79e      	b.n	800422e <_printf_float+0xa2>
 80042f0:	9a06      	ldr	r2, [sp, #24]
 80042f2:	2a47      	cmp	r2, #71	@ 0x47
 80042f4:	d1c2      	bne.n	800427c <_printf_float+0xf0>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1c0      	bne.n	800427c <_printf_float+0xf0>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e7bd      	b.n	800427a <_printf_float+0xee>
 80042fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004302:	d9db      	bls.n	80042bc <_printf_float+0x130>
 8004304:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004308:	d118      	bne.n	800433c <_printf_float+0x1b0>
 800430a:	2900      	cmp	r1, #0
 800430c:	6863      	ldr	r3, [r4, #4]
 800430e:	dd0b      	ble.n	8004328 <_printf_float+0x19c>
 8004310:	6121      	str	r1, [r4, #16]
 8004312:	b913      	cbnz	r3, 800431a <_printf_float+0x18e>
 8004314:	6822      	ldr	r2, [r4, #0]
 8004316:	07d0      	lsls	r0, r2, #31
 8004318:	d502      	bpl.n	8004320 <_printf_float+0x194>
 800431a:	3301      	adds	r3, #1
 800431c:	440b      	add	r3, r1
 800431e:	6123      	str	r3, [r4, #16]
 8004320:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004322:	f04f 0900 	mov.w	r9, #0
 8004326:	e7db      	b.n	80042e0 <_printf_float+0x154>
 8004328:	b913      	cbnz	r3, 8004330 <_printf_float+0x1a4>
 800432a:	6822      	ldr	r2, [r4, #0]
 800432c:	07d2      	lsls	r2, r2, #31
 800432e:	d501      	bpl.n	8004334 <_printf_float+0x1a8>
 8004330:	3302      	adds	r3, #2
 8004332:	e7f4      	b.n	800431e <_printf_float+0x192>
 8004334:	2301      	movs	r3, #1
 8004336:	e7f2      	b.n	800431e <_printf_float+0x192>
 8004338:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800433c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800433e:	4299      	cmp	r1, r3
 8004340:	db05      	blt.n	800434e <_printf_float+0x1c2>
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	6121      	str	r1, [r4, #16]
 8004346:	07d8      	lsls	r0, r3, #31
 8004348:	d5ea      	bpl.n	8004320 <_printf_float+0x194>
 800434a:	1c4b      	adds	r3, r1, #1
 800434c:	e7e7      	b.n	800431e <_printf_float+0x192>
 800434e:	2900      	cmp	r1, #0
 8004350:	bfd4      	ite	le
 8004352:	f1c1 0202 	rsble	r2, r1, #2
 8004356:	2201      	movgt	r2, #1
 8004358:	4413      	add	r3, r2
 800435a:	e7e0      	b.n	800431e <_printf_float+0x192>
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	055a      	lsls	r2, r3, #21
 8004360:	d407      	bmi.n	8004372 <_printf_float+0x1e6>
 8004362:	6923      	ldr	r3, [r4, #16]
 8004364:	4642      	mov	r2, r8
 8004366:	4631      	mov	r1, r6
 8004368:	4628      	mov	r0, r5
 800436a:	47b8      	blx	r7
 800436c:	3001      	adds	r0, #1
 800436e:	d12b      	bne.n	80043c8 <_printf_float+0x23c>
 8004370:	e767      	b.n	8004242 <_printf_float+0xb6>
 8004372:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004376:	f240 80dd 	bls.w	8004534 <_printf_float+0x3a8>
 800437a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800437e:	2200      	movs	r2, #0
 8004380:	2300      	movs	r3, #0
 8004382:	f7fc fbc1 	bl	8000b08 <__aeabi_dcmpeq>
 8004386:	2800      	cmp	r0, #0
 8004388:	d033      	beq.n	80043f2 <_printf_float+0x266>
 800438a:	4a37      	ldr	r2, [pc, #220]	@ (8004468 <_printf_float+0x2dc>)
 800438c:	2301      	movs	r3, #1
 800438e:	4631      	mov	r1, r6
 8004390:	4628      	mov	r0, r5
 8004392:	47b8      	blx	r7
 8004394:	3001      	adds	r0, #1
 8004396:	f43f af54 	beq.w	8004242 <_printf_float+0xb6>
 800439a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800439e:	4543      	cmp	r3, r8
 80043a0:	db02      	blt.n	80043a8 <_printf_float+0x21c>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	07d8      	lsls	r0, r3, #31
 80043a6:	d50f      	bpl.n	80043c8 <_printf_float+0x23c>
 80043a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043ac:	4631      	mov	r1, r6
 80043ae:	4628      	mov	r0, r5
 80043b0:	47b8      	blx	r7
 80043b2:	3001      	adds	r0, #1
 80043b4:	f43f af45 	beq.w	8004242 <_printf_float+0xb6>
 80043b8:	f04f 0900 	mov.w	r9, #0
 80043bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80043c0:	f104 0a1a 	add.w	sl, r4, #26
 80043c4:	45c8      	cmp	r8, r9
 80043c6:	dc09      	bgt.n	80043dc <_printf_float+0x250>
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	079b      	lsls	r3, r3, #30
 80043cc:	f100 8103 	bmi.w	80045d6 <_printf_float+0x44a>
 80043d0:	68e0      	ldr	r0, [r4, #12]
 80043d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80043d4:	4298      	cmp	r0, r3
 80043d6:	bfb8      	it	lt
 80043d8:	4618      	movlt	r0, r3
 80043da:	e734      	b.n	8004246 <_printf_float+0xba>
 80043dc:	2301      	movs	r3, #1
 80043de:	4652      	mov	r2, sl
 80043e0:	4631      	mov	r1, r6
 80043e2:	4628      	mov	r0, r5
 80043e4:	47b8      	blx	r7
 80043e6:	3001      	adds	r0, #1
 80043e8:	f43f af2b 	beq.w	8004242 <_printf_float+0xb6>
 80043ec:	f109 0901 	add.w	r9, r9, #1
 80043f0:	e7e8      	b.n	80043c4 <_printf_float+0x238>
 80043f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	dc39      	bgt.n	800446c <_printf_float+0x2e0>
 80043f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004468 <_printf_float+0x2dc>)
 80043fa:	2301      	movs	r3, #1
 80043fc:	4631      	mov	r1, r6
 80043fe:	4628      	mov	r0, r5
 8004400:	47b8      	blx	r7
 8004402:	3001      	adds	r0, #1
 8004404:	f43f af1d 	beq.w	8004242 <_printf_float+0xb6>
 8004408:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800440c:	ea59 0303 	orrs.w	r3, r9, r3
 8004410:	d102      	bne.n	8004418 <_printf_float+0x28c>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	07d9      	lsls	r1, r3, #31
 8004416:	d5d7      	bpl.n	80043c8 <_printf_float+0x23c>
 8004418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800441c:	4631      	mov	r1, r6
 800441e:	4628      	mov	r0, r5
 8004420:	47b8      	blx	r7
 8004422:	3001      	adds	r0, #1
 8004424:	f43f af0d 	beq.w	8004242 <_printf_float+0xb6>
 8004428:	f04f 0a00 	mov.w	sl, #0
 800442c:	f104 0b1a 	add.w	fp, r4, #26
 8004430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004432:	425b      	negs	r3, r3
 8004434:	4553      	cmp	r3, sl
 8004436:	dc01      	bgt.n	800443c <_printf_float+0x2b0>
 8004438:	464b      	mov	r3, r9
 800443a:	e793      	b.n	8004364 <_printf_float+0x1d8>
 800443c:	2301      	movs	r3, #1
 800443e:	465a      	mov	r2, fp
 8004440:	4631      	mov	r1, r6
 8004442:	4628      	mov	r0, r5
 8004444:	47b8      	blx	r7
 8004446:	3001      	adds	r0, #1
 8004448:	f43f aefb 	beq.w	8004242 <_printf_float+0xb6>
 800444c:	f10a 0a01 	add.w	sl, sl, #1
 8004450:	e7ee      	b.n	8004430 <_printf_float+0x2a4>
 8004452:	bf00      	nop
 8004454:	7fefffff 	.word	0x7fefffff
 8004458:	08006d84 	.word	0x08006d84
 800445c:	08006d88 	.word	0x08006d88
 8004460:	08006d8c 	.word	0x08006d8c
 8004464:	08006d90 	.word	0x08006d90
 8004468:	08006d94 	.word	0x08006d94
 800446c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800446e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004472:	4553      	cmp	r3, sl
 8004474:	bfa8      	it	ge
 8004476:	4653      	movge	r3, sl
 8004478:	2b00      	cmp	r3, #0
 800447a:	4699      	mov	r9, r3
 800447c:	dc36      	bgt.n	80044ec <_printf_float+0x360>
 800447e:	f04f 0b00 	mov.w	fp, #0
 8004482:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004486:	f104 021a 	add.w	r2, r4, #26
 800448a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800448c:	9306      	str	r3, [sp, #24]
 800448e:	eba3 0309 	sub.w	r3, r3, r9
 8004492:	455b      	cmp	r3, fp
 8004494:	dc31      	bgt.n	80044fa <_printf_float+0x36e>
 8004496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004498:	459a      	cmp	sl, r3
 800449a:	dc3a      	bgt.n	8004512 <_printf_float+0x386>
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	07da      	lsls	r2, r3, #31
 80044a0:	d437      	bmi.n	8004512 <_printf_float+0x386>
 80044a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044a4:	ebaa 0903 	sub.w	r9, sl, r3
 80044a8:	9b06      	ldr	r3, [sp, #24]
 80044aa:	ebaa 0303 	sub.w	r3, sl, r3
 80044ae:	4599      	cmp	r9, r3
 80044b0:	bfa8      	it	ge
 80044b2:	4699      	movge	r9, r3
 80044b4:	f1b9 0f00 	cmp.w	r9, #0
 80044b8:	dc33      	bgt.n	8004522 <_printf_float+0x396>
 80044ba:	f04f 0800 	mov.w	r8, #0
 80044be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044c2:	f104 0b1a 	add.w	fp, r4, #26
 80044c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044c8:	ebaa 0303 	sub.w	r3, sl, r3
 80044cc:	eba3 0309 	sub.w	r3, r3, r9
 80044d0:	4543      	cmp	r3, r8
 80044d2:	f77f af79 	ble.w	80043c8 <_printf_float+0x23c>
 80044d6:	2301      	movs	r3, #1
 80044d8:	465a      	mov	r2, fp
 80044da:	4631      	mov	r1, r6
 80044dc:	4628      	mov	r0, r5
 80044de:	47b8      	blx	r7
 80044e0:	3001      	adds	r0, #1
 80044e2:	f43f aeae 	beq.w	8004242 <_printf_float+0xb6>
 80044e6:	f108 0801 	add.w	r8, r8, #1
 80044ea:	e7ec      	b.n	80044c6 <_printf_float+0x33a>
 80044ec:	4642      	mov	r2, r8
 80044ee:	4631      	mov	r1, r6
 80044f0:	4628      	mov	r0, r5
 80044f2:	47b8      	blx	r7
 80044f4:	3001      	adds	r0, #1
 80044f6:	d1c2      	bne.n	800447e <_printf_float+0x2f2>
 80044f8:	e6a3      	b.n	8004242 <_printf_float+0xb6>
 80044fa:	2301      	movs	r3, #1
 80044fc:	4631      	mov	r1, r6
 80044fe:	4628      	mov	r0, r5
 8004500:	9206      	str	r2, [sp, #24]
 8004502:	47b8      	blx	r7
 8004504:	3001      	adds	r0, #1
 8004506:	f43f ae9c 	beq.w	8004242 <_printf_float+0xb6>
 800450a:	9a06      	ldr	r2, [sp, #24]
 800450c:	f10b 0b01 	add.w	fp, fp, #1
 8004510:	e7bb      	b.n	800448a <_printf_float+0x2fe>
 8004512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004516:	4631      	mov	r1, r6
 8004518:	4628      	mov	r0, r5
 800451a:	47b8      	blx	r7
 800451c:	3001      	adds	r0, #1
 800451e:	d1c0      	bne.n	80044a2 <_printf_float+0x316>
 8004520:	e68f      	b.n	8004242 <_printf_float+0xb6>
 8004522:	9a06      	ldr	r2, [sp, #24]
 8004524:	464b      	mov	r3, r9
 8004526:	4442      	add	r2, r8
 8004528:	4631      	mov	r1, r6
 800452a:	4628      	mov	r0, r5
 800452c:	47b8      	blx	r7
 800452e:	3001      	adds	r0, #1
 8004530:	d1c3      	bne.n	80044ba <_printf_float+0x32e>
 8004532:	e686      	b.n	8004242 <_printf_float+0xb6>
 8004534:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004538:	f1ba 0f01 	cmp.w	sl, #1
 800453c:	dc01      	bgt.n	8004542 <_printf_float+0x3b6>
 800453e:	07db      	lsls	r3, r3, #31
 8004540:	d536      	bpl.n	80045b0 <_printf_float+0x424>
 8004542:	2301      	movs	r3, #1
 8004544:	4642      	mov	r2, r8
 8004546:	4631      	mov	r1, r6
 8004548:	4628      	mov	r0, r5
 800454a:	47b8      	blx	r7
 800454c:	3001      	adds	r0, #1
 800454e:	f43f ae78 	beq.w	8004242 <_printf_float+0xb6>
 8004552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004556:	4631      	mov	r1, r6
 8004558:	4628      	mov	r0, r5
 800455a:	47b8      	blx	r7
 800455c:	3001      	adds	r0, #1
 800455e:	f43f ae70 	beq.w	8004242 <_printf_float+0xb6>
 8004562:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004566:	2200      	movs	r2, #0
 8004568:	2300      	movs	r3, #0
 800456a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800456e:	f7fc facb 	bl	8000b08 <__aeabi_dcmpeq>
 8004572:	b9c0      	cbnz	r0, 80045a6 <_printf_float+0x41a>
 8004574:	4653      	mov	r3, sl
 8004576:	f108 0201 	add.w	r2, r8, #1
 800457a:	4631      	mov	r1, r6
 800457c:	4628      	mov	r0, r5
 800457e:	47b8      	blx	r7
 8004580:	3001      	adds	r0, #1
 8004582:	d10c      	bne.n	800459e <_printf_float+0x412>
 8004584:	e65d      	b.n	8004242 <_printf_float+0xb6>
 8004586:	2301      	movs	r3, #1
 8004588:	465a      	mov	r2, fp
 800458a:	4631      	mov	r1, r6
 800458c:	4628      	mov	r0, r5
 800458e:	47b8      	blx	r7
 8004590:	3001      	adds	r0, #1
 8004592:	f43f ae56 	beq.w	8004242 <_printf_float+0xb6>
 8004596:	f108 0801 	add.w	r8, r8, #1
 800459a:	45d0      	cmp	r8, sl
 800459c:	dbf3      	blt.n	8004586 <_printf_float+0x3fa>
 800459e:	464b      	mov	r3, r9
 80045a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80045a4:	e6df      	b.n	8004366 <_printf_float+0x1da>
 80045a6:	f04f 0800 	mov.w	r8, #0
 80045aa:	f104 0b1a 	add.w	fp, r4, #26
 80045ae:	e7f4      	b.n	800459a <_printf_float+0x40e>
 80045b0:	2301      	movs	r3, #1
 80045b2:	4642      	mov	r2, r8
 80045b4:	e7e1      	b.n	800457a <_printf_float+0x3ee>
 80045b6:	2301      	movs	r3, #1
 80045b8:	464a      	mov	r2, r9
 80045ba:	4631      	mov	r1, r6
 80045bc:	4628      	mov	r0, r5
 80045be:	47b8      	blx	r7
 80045c0:	3001      	adds	r0, #1
 80045c2:	f43f ae3e 	beq.w	8004242 <_printf_float+0xb6>
 80045c6:	f108 0801 	add.w	r8, r8, #1
 80045ca:	68e3      	ldr	r3, [r4, #12]
 80045cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80045ce:	1a5b      	subs	r3, r3, r1
 80045d0:	4543      	cmp	r3, r8
 80045d2:	dcf0      	bgt.n	80045b6 <_printf_float+0x42a>
 80045d4:	e6fc      	b.n	80043d0 <_printf_float+0x244>
 80045d6:	f04f 0800 	mov.w	r8, #0
 80045da:	f104 0919 	add.w	r9, r4, #25
 80045de:	e7f4      	b.n	80045ca <_printf_float+0x43e>

080045e0 <_printf_common>:
 80045e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045e4:	4616      	mov	r6, r2
 80045e6:	4698      	mov	r8, r3
 80045e8:	688a      	ldr	r2, [r1, #8]
 80045ea:	690b      	ldr	r3, [r1, #16]
 80045ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045f0:	4293      	cmp	r3, r2
 80045f2:	bfb8      	it	lt
 80045f4:	4613      	movlt	r3, r2
 80045f6:	6033      	str	r3, [r6, #0]
 80045f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045fc:	4607      	mov	r7, r0
 80045fe:	460c      	mov	r4, r1
 8004600:	b10a      	cbz	r2, 8004606 <_printf_common+0x26>
 8004602:	3301      	adds	r3, #1
 8004604:	6033      	str	r3, [r6, #0]
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	0699      	lsls	r1, r3, #26
 800460a:	bf42      	ittt	mi
 800460c:	6833      	ldrmi	r3, [r6, #0]
 800460e:	3302      	addmi	r3, #2
 8004610:	6033      	strmi	r3, [r6, #0]
 8004612:	6825      	ldr	r5, [r4, #0]
 8004614:	f015 0506 	ands.w	r5, r5, #6
 8004618:	d106      	bne.n	8004628 <_printf_common+0x48>
 800461a:	f104 0a19 	add.w	sl, r4, #25
 800461e:	68e3      	ldr	r3, [r4, #12]
 8004620:	6832      	ldr	r2, [r6, #0]
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	42ab      	cmp	r3, r5
 8004626:	dc26      	bgt.n	8004676 <_printf_common+0x96>
 8004628:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800462c:	6822      	ldr	r2, [r4, #0]
 800462e:	3b00      	subs	r3, #0
 8004630:	bf18      	it	ne
 8004632:	2301      	movne	r3, #1
 8004634:	0692      	lsls	r2, r2, #26
 8004636:	d42b      	bmi.n	8004690 <_printf_common+0xb0>
 8004638:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800463c:	4641      	mov	r1, r8
 800463e:	4638      	mov	r0, r7
 8004640:	47c8      	blx	r9
 8004642:	3001      	adds	r0, #1
 8004644:	d01e      	beq.n	8004684 <_printf_common+0xa4>
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	6922      	ldr	r2, [r4, #16]
 800464a:	f003 0306 	and.w	r3, r3, #6
 800464e:	2b04      	cmp	r3, #4
 8004650:	bf02      	ittt	eq
 8004652:	68e5      	ldreq	r5, [r4, #12]
 8004654:	6833      	ldreq	r3, [r6, #0]
 8004656:	1aed      	subeq	r5, r5, r3
 8004658:	68a3      	ldr	r3, [r4, #8]
 800465a:	bf0c      	ite	eq
 800465c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004660:	2500      	movne	r5, #0
 8004662:	4293      	cmp	r3, r2
 8004664:	bfc4      	itt	gt
 8004666:	1a9b      	subgt	r3, r3, r2
 8004668:	18ed      	addgt	r5, r5, r3
 800466a:	2600      	movs	r6, #0
 800466c:	341a      	adds	r4, #26
 800466e:	42b5      	cmp	r5, r6
 8004670:	d11a      	bne.n	80046a8 <_printf_common+0xc8>
 8004672:	2000      	movs	r0, #0
 8004674:	e008      	b.n	8004688 <_printf_common+0xa8>
 8004676:	2301      	movs	r3, #1
 8004678:	4652      	mov	r2, sl
 800467a:	4641      	mov	r1, r8
 800467c:	4638      	mov	r0, r7
 800467e:	47c8      	blx	r9
 8004680:	3001      	adds	r0, #1
 8004682:	d103      	bne.n	800468c <_printf_common+0xac>
 8004684:	f04f 30ff 	mov.w	r0, #4294967295
 8004688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800468c:	3501      	adds	r5, #1
 800468e:	e7c6      	b.n	800461e <_printf_common+0x3e>
 8004690:	18e1      	adds	r1, r4, r3
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	2030      	movs	r0, #48	@ 0x30
 8004696:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800469a:	4422      	add	r2, r4
 800469c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046a4:	3302      	adds	r3, #2
 80046a6:	e7c7      	b.n	8004638 <_printf_common+0x58>
 80046a8:	2301      	movs	r3, #1
 80046aa:	4622      	mov	r2, r4
 80046ac:	4641      	mov	r1, r8
 80046ae:	4638      	mov	r0, r7
 80046b0:	47c8      	blx	r9
 80046b2:	3001      	adds	r0, #1
 80046b4:	d0e6      	beq.n	8004684 <_printf_common+0xa4>
 80046b6:	3601      	adds	r6, #1
 80046b8:	e7d9      	b.n	800466e <_printf_common+0x8e>
	...

080046bc <_printf_i>:
 80046bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046c0:	7e0f      	ldrb	r7, [r1, #24]
 80046c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046c4:	2f78      	cmp	r7, #120	@ 0x78
 80046c6:	4691      	mov	r9, r2
 80046c8:	4680      	mov	r8, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	469a      	mov	sl, r3
 80046ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046d2:	d807      	bhi.n	80046e4 <_printf_i+0x28>
 80046d4:	2f62      	cmp	r7, #98	@ 0x62
 80046d6:	d80a      	bhi.n	80046ee <_printf_i+0x32>
 80046d8:	2f00      	cmp	r7, #0
 80046da:	f000 80d2 	beq.w	8004882 <_printf_i+0x1c6>
 80046de:	2f58      	cmp	r7, #88	@ 0x58
 80046e0:	f000 80b9 	beq.w	8004856 <_printf_i+0x19a>
 80046e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046ec:	e03a      	b.n	8004764 <_printf_i+0xa8>
 80046ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046f2:	2b15      	cmp	r3, #21
 80046f4:	d8f6      	bhi.n	80046e4 <_printf_i+0x28>
 80046f6:	a101      	add	r1, pc, #4	@ (adr r1, 80046fc <_printf_i+0x40>)
 80046f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046fc:	08004755 	.word	0x08004755
 8004700:	08004769 	.word	0x08004769
 8004704:	080046e5 	.word	0x080046e5
 8004708:	080046e5 	.word	0x080046e5
 800470c:	080046e5 	.word	0x080046e5
 8004710:	080046e5 	.word	0x080046e5
 8004714:	08004769 	.word	0x08004769
 8004718:	080046e5 	.word	0x080046e5
 800471c:	080046e5 	.word	0x080046e5
 8004720:	080046e5 	.word	0x080046e5
 8004724:	080046e5 	.word	0x080046e5
 8004728:	08004869 	.word	0x08004869
 800472c:	08004793 	.word	0x08004793
 8004730:	08004823 	.word	0x08004823
 8004734:	080046e5 	.word	0x080046e5
 8004738:	080046e5 	.word	0x080046e5
 800473c:	0800488b 	.word	0x0800488b
 8004740:	080046e5 	.word	0x080046e5
 8004744:	08004793 	.word	0x08004793
 8004748:	080046e5 	.word	0x080046e5
 800474c:	080046e5 	.word	0x080046e5
 8004750:	0800482b 	.word	0x0800482b
 8004754:	6833      	ldr	r3, [r6, #0]
 8004756:	1d1a      	adds	r2, r3, #4
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6032      	str	r2, [r6, #0]
 800475c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004760:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004764:	2301      	movs	r3, #1
 8004766:	e09d      	b.n	80048a4 <_printf_i+0x1e8>
 8004768:	6833      	ldr	r3, [r6, #0]
 800476a:	6820      	ldr	r0, [r4, #0]
 800476c:	1d19      	adds	r1, r3, #4
 800476e:	6031      	str	r1, [r6, #0]
 8004770:	0606      	lsls	r6, r0, #24
 8004772:	d501      	bpl.n	8004778 <_printf_i+0xbc>
 8004774:	681d      	ldr	r5, [r3, #0]
 8004776:	e003      	b.n	8004780 <_printf_i+0xc4>
 8004778:	0645      	lsls	r5, r0, #25
 800477a:	d5fb      	bpl.n	8004774 <_printf_i+0xb8>
 800477c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004780:	2d00      	cmp	r5, #0
 8004782:	da03      	bge.n	800478c <_printf_i+0xd0>
 8004784:	232d      	movs	r3, #45	@ 0x2d
 8004786:	426d      	negs	r5, r5
 8004788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800478c:	4859      	ldr	r0, [pc, #356]	@ (80048f4 <_printf_i+0x238>)
 800478e:	230a      	movs	r3, #10
 8004790:	e011      	b.n	80047b6 <_printf_i+0xfa>
 8004792:	6821      	ldr	r1, [r4, #0]
 8004794:	6833      	ldr	r3, [r6, #0]
 8004796:	0608      	lsls	r0, r1, #24
 8004798:	f853 5b04 	ldr.w	r5, [r3], #4
 800479c:	d402      	bmi.n	80047a4 <_printf_i+0xe8>
 800479e:	0649      	lsls	r1, r1, #25
 80047a0:	bf48      	it	mi
 80047a2:	b2ad      	uxthmi	r5, r5
 80047a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80047a6:	4853      	ldr	r0, [pc, #332]	@ (80048f4 <_printf_i+0x238>)
 80047a8:	6033      	str	r3, [r6, #0]
 80047aa:	bf14      	ite	ne
 80047ac:	230a      	movne	r3, #10
 80047ae:	2308      	moveq	r3, #8
 80047b0:	2100      	movs	r1, #0
 80047b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047b6:	6866      	ldr	r6, [r4, #4]
 80047b8:	60a6      	str	r6, [r4, #8]
 80047ba:	2e00      	cmp	r6, #0
 80047bc:	bfa2      	ittt	ge
 80047be:	6821      	ldrge	r1, [r4, #0]
 80047c0:	f021 0104 	bicge.w	r1, r1, #4
 80047c4:	6021      	strge	r1, [r4, #0]
 80047c6:	b90d      	cbnz	r5, 80047cc <_printf_i+0x110>
 80047c8:	2e00      	cmp	r6, #0
 80047ca:	d04b      	beq.n	8004864 <_printf_i+0x1a8>
 80047cc:	4616      	mov	r6, r2
 80047ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80047d2:	fb03 5711 	mls	r7, r3, r1, r5
 80047d6:	5dc7      	ldrb	r7, [r0, r7]
 80047d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047dc:	462f      	mov	r7, r5
 80047de:	42bb      	cmp	r3, r7
 80047e0:	460d      	mov	r5, r1
 80047e2:	d9f4      	bls.n	80047ce <_printf_i+0x112>
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d10b      	bne.n	8004800 <_printf_i+0x144>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	07df      	lsls	r7, r3, #31
 80047ec:	d508      	bpl.n	8004800 <_printf_i+0x144>
 80047ee:	6923      	ldr	r3, [r4, #16]
 80047f0:	6861      	ldr	r1, [r4, #4]
 80047f2:	4299      	cmp	r1, r3
 80047f4:	bfde      	ittt	le
 80047f6:	2330      	movle	r3, #48	@ 0x30
 80047f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004800:	1b92      	subs	r2, r2, r6
 8004802:	6122      	str	r2, [r4, #16]
 8004804:	f8cd a000 	str.w	sl, [sp]
 8004808:	464b      	mov	r3, r9
 800480a:	aa03      	add	r2, sp, #12
 800480c:	4621      	mov	r1, r4
 800480e:	4640      	mov	r0, r8
 8004810:	f7ff fee6 	bl	80045e0 <_printf_common>
 8004814:	3001      	adds	r0, #1
 8004816:	d14a      	bne.n	80048ae <_printf_i+0x1f2>
 8004818:	f04f 30ff 	mov.w	r0, #4294967295
 800481c:	b004      	add	sp, #16
 800481e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	f043 0320 	orr.w	r3, r3, #32
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	4833      	ldr	r0, [pc, #204]	@ (80048f8 <_printf_i+0x23c>)
 800482c:	2778      	movs	r7, #120	@ 0x78
 800482e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	6831      	ldr	r1, [r6, #0]
 8004836:	061f      	lsls	r7, r3, #24
 8004838:	f851 5b04 	ldr.w	r5, [r1], #4
 800483c:	d402      	bmi.n	8004844 <_printf_i+0x188>
 800483e:	065f      	lsls	r7, r3, #25
 8004840:	bf48      	it	mi
 8004842:	b2ad      	uxthmi	r5, r5
 8004844:	6031      	str	r1, [r6, #0]
 8004846:	07d9      	lsls	r1, r3, #31
 8004848:	bf44      	itt	mi
 800484a:	f043 0320 	orrmi.w	r3, r3, #32
 800484e:	6023      	strmi	r3, [r4, #0]
 8004850:	b11d      	cbz	r5, 800485a <_printf_i+0x19e>
 8004852:	2310      	movs	r3, #16
 8004854:	e7ac      	b.n	80047b0 <_printf_i+0xf4>
 8004856:	4827      	ldr	r0, [pc, #156]	@ (80048f4 <_printf_i+0x238>)
 8004858:	e7e9      	b.n	800482e <_printf_i+0x172>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	f023 0320 	bic.w	r3, r3, #32
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	e7f6      	b.n	8004852 <_printf_i+0x196>
 8004864:	4616      	mov	r6, r2
 8004866:	e7bd      	b.n	80047e4 <_printf_i+0x128>
 8004868:	6833      	ldr	r3, [r6, #0]
 800486a:	6825      	ldr	r5, [r4, #0]
 800486c:	6961      	ldr	r1, [r4, #20]
 800486e:	1d18      	adds	r0, r3, #4
 8004870:	6030      	str	r0, [r6, #0]
 8004872:	062e      	lsls	r6, r5, #24
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	d501      	bpl.n	800487c <_printf_i+0x1c0>
 8004878:	6019      	str	r1, [r3, #0]
 800487a:	e002      	b.n	8004882 <_printf_i+0x1c6>
 800487c:	0668      	lsls	r0, r5, #25
 800487e:	d5fb      	bpl.n	8004878 <_printf_i+0x1bc>
 8004880:	8019      	strh	r1, [r3, #0]
 8004882:	2300      	movs	r3, #0
 8004884:	6123      	str	r3, [r4, #16]
 8004886:	4616      	mov	r6, r2
 8004888:	e7bc      	b.n	8004804 <_printf_i+0x148>
 800488a:	6833      	ldr	r3, [r6, #0]
 800488c:	1d1a      	adds	r2, r3, #4
 800488e:	6032      	str	r2, [r6, #0]
 8004890:	681e      	ldr	r6, [r3, #0]
 8004892:	6862      	ldr	r2, [r4, #4]
 8004894:	2100      	movs	r1, #0
 8004896:	4630      	mov	r0, r6
 8004898:	f7fb fcba 	bl	8000210 <memchr>
 800489c:	b108      	cbz	r0, 80048a2 <_printf_i+0x1e6>
 800489e:	1b80      	subs	r0, r0, r6
 80048a0:	6060      	str	r0, [r4, #4]
 80048a2:	6863      	ldr	r3, [r4, #4]
 80048a4:	6123      	str	r3, [r4, #16]
 80048a6:	2300      	movs	r3, #0
 80048a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048ac:	e7aa      	b.n	8004804 <_printf_i+0x148>
 80048ae:	6923      	ldr	r3, [r4, #16]
 80048b0:	4632      	mov	r2, r6
 80048b2:	4649      	mov	r1, r9
 80048b4:	4640      	mov	r0, r8
 80048b6:	47d0      	blx	sl
 80048b8:	3001      	adds	r0, #1
 80048ba:	d0ad      	beq.n	8004818 <_printf_i+0x15c>
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	079b      	lsls	r3, r3, #30
 80048c0:	d413      	bmi.n	80048ea <_printf_i+0x22e>
 80048c2:	68e0      	ldr	r0, [r4, #12]
 80048c4:	9b03      	ldr	r3, [sp, #12]
 80048c6:	4298      	cmp	r0, r3
 80048c8:	bfb8      	it	lt
 80048ca:	4618      	movlt	r0, r3
 80048cc:	e7a6      	b.n	800481c <_printf_i+0x160>
 80048ce:	2301      	movs	r3, #1
 80048d0:	4632      	mov	r2, r6
 80048d2:	4649      	mov	r1, r9
 80048d4:	4640      	mov	r0, r8
 80048d6:	47d0      	blx	sl
 80048d8:	3001      	adds	r0, #1
 80048da:	d09d      	beq.n	8004818 <_printf_i+0x15c>
 80048dc:	3501      	adds	r5, #1
 80048de:	68e3      	ldr	r3, [r4, #12]
 80048e0:	9903      	ldr	r1, [sp, #12]
 80048e2:	1a5b      	subs	r3, r3, r1
 80048e4:	42ab      	cmp	r3, r5
 80048e6:	dcf2      	bgt.n	80048ce <_printf_i+0x212>
 80048e8:	e7eb      	b.n	80048c2 <_printf_i+0x206>
 80048ea:	2500      	movs	r5, #0
 80048ec:	f104 0619 	add.w	r6, r4, #25
 80048f0:	e7f5      	b.n	80048de <_printf_i+0x222>
 80048f2:	bf00      	nop
 80048f4:	08006d96 	.word	0x08006d96
 80048f8:	08006da7 	.word	0x08006da7

080048fc <std>:
 80048fc:	2300      	movs	r3, #0
 80048fe:	b510      	push	{r4, lr}
 8004900:	4604      	mov	r4, r0
 8004902:	e9c0 3300 	strd	r3, r3, [r0]
 8004906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800490a:	6083      	str	r3, [r0, #8]
 800490c:	8181      	strh	r1, [r0, #12]
 800490e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004910:	81c2      	strh	r2, [r0, #14]
 8004912:	6183      	str	r3, [r0, #24]
 8004914:	4619      	mov	r1, r3
 8004916:	2208      	movs	r2, #8
 8004918:	305c      	adds	r0, #92	@ 0x5c
 800491a:	f000 f928 	bl	8004b6e <memset>
 800491e:	4b0d      	ldr	r3, [pc, #52]	@ (8004954 <std+0x58>)
 8004920:	6263      	str	r3, [r4, #36]	@ 0x24
 8004922:	4b0d      	ldr	r3, [pc, #52]	@ (8004958 <std+0x5c>)
 8004924:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004926:	4b0d      	ldr	r3, [pc, #52]	@ (800495c <std+0x60>)
 8004928:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800492a:	4b0d      	ldr	r3, [pc, #52]	@ (8004960 <std+0x64>)
 800492c:	6323      	str	r3, [r4, #48]	@ 0x30
 800492e:	4b0d      	ldr	r3, [pc, #52]	@ (8004964 <std+0x68>)
 8004930:	6224      	str	r4, [r4, #32]
 8004932:	429c      	cmp	r4, r3
 8004934:	d006      	beq.n	8004944 <std+0x48>
 8004936:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800493a:	4294      	cmp	r4, r2
 800493c:	d002      	beq.n	8004944 <std+0x48>
 800493e:	33d0      	adds	r3, #208	@ 0xd0
 8004940:	429c      	cmp	r4, r3
 8004942:	d105      	bne.n	8004950 <std+0x54>
 8004944:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800494c:	f000 b98c 	b.w	8004c68 <__retarget_lock_init_recursive>
 8004950:	bd10      	pop	{r4, pc}
 8004952:	bf00      	nop
 8004954:	08004ae9 	.word	0x08004ae9
 8004958:	08004b0b 	.word	0x08004b0b
 800495c:	08004b43 	.word	0x08004b43
 8004960:	08004b67 	.word	0x08004b67
 8004964:	20000294 	.word	0x20000294

08004968 <stdio_exit_handler>:
 8004968:	4a02      	ldr	r2, [pc, #8]	@ (8004974 <stdio_exit_handler+0xc>)
 800496a:	4903      	ldr	r1, [pc, #12]	@ (8004978 <stdio_exit_handler+0x10>)
 800496c:	4803      	ldr	r0, [pc, #12]	@ (800497c <stdio_exit_handler+0x14>)
 800496e:	f000 b869 	b.w	8004a44 <_fwalk_sglue>
 8004972:	bf00      	nop
 8004974:	2000000c 	.word	0x2000000c
 8004978:	080065c5 	.word	0x080065c5
 800497c:	2000001c 	.word	0x2000001c

08004980 <cleanup_stdio>:
 8004980:	6841      	ldr	r1, [r0, #4]
 8004982:	4b0c      	ldr	r3, [pc, #48]	@ (80049b4 <cleanup_stdio+0x34>)
 8004984:	4299      	cmp	r1, r3
 8004986:	b510      	push	{r4, lr}
 8004988:	4604      	mov	r4, r0
 800498a:	d001      	beq.n	8004990 <cleanup_stdio+0x10>
 800498c:	f001 fe1a 	bl	80065c4 <_fflush_r>
 8004990:	68a1      	ldr	r1, [r4, #8]
 8004992:	4b09      	ldr	r3, [pc, #36]	@ (80049b8 <cleanup_stdio+0x38>)
 8004994:	4299      	cmp	r1, r3
 8004996:	d002      	beq.n	800499e <cleanup_stdio+0x1e>
 8004998:	4620      	mov	r0, r4
 800499a:	f001 fe13 	bl	80065c4 <_fflush_r>
 800499e:	68e1      	ldr	r1, [r4, #12]
 80049a0:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <cleanup_stdio+0x3c>)
 80049a2:	4299      	cmp	r1, r3
 80049a4:	d004      	beq.n	80049b0 <cleanup_stdio+0x30>
 80049a6:	4620      	mov	r0, r4
 80049a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ac:	f001 be0a 	b.w	80065c4 <_fflush_r>
 80049b0:	bd10      	pop	{r4, pc}
 80049b2:	bf00      	nop
 80049b4:	20000294 	.word	0x20000294
 80049b8:	200002fc 	.word	0x200002fc
 80049bc:	20000364 	.word	0x20000364

080049c0 <global_stdio_init.part.0>:
 80049c0:	b510      	push	{r4, lr}
 80049c2:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <global_stdio_init.part.0+0x30>)
 80049c4:	4c0b      	ldr	r4, [pc, #44]	@ (80049f4 <global_stdio_init.part.0+0x34>)
 80049c6:	4a0c      	ldr	r2, [pc, #48]	@ (80049f8 <global_stdio_init.part.0+0x38>)
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	4620      	mov	r0, r4
 80049cc:	2200      	movs	r2, #0
 80049ce:	2104      	movs	r1, #4
 80049d0:	f7ff ff94 	bl	80048fc <std>
 80049d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80049d8:	2201      	movs	r2, #1
 80049da:	2109      	movs	r1, #9
 80049dc:	f7ff ff8e 	bl	80048fc <std>
 80049e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80049e4:	2202      	movs	r2, #2
 80049e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ea:	2112      	movs	r1, #18
 80049ec:	f7ff bf86 	b.w	80048fc <std>
 80049f0:	200003cc 	.word	0x200003cc
 80049f4:	20000294 	.word	0x20000294
 80049f8:	08004969 	.word	0x08004969

080049fc <__sfp_lock_acquire>:
 80049fc:	4801      	ldr	r0, [pc, #4]	@ (8004a04 <__sfp_lock_acquire+0x8>)
 80049fe:	f000 b934 	b.w	8004c6a <__retarget_lock_acquire_recursive>
 8004a02:	bf00      	nop
 8004a04:	200003d5 	.word	0x200003d5

08004a08 <__sfp_lock_release>:
 8004a08:	4801      	ldr	r0, [pc, #4]	@ (8004a10 <__sfp_lock_release+0x8>)
 8004a0a:	f000 b92f 	b.w	8004c6c <__retarget_lock_release_recursive>
 8004a0e:	bf00      	nop
 8004a10:	200003d5 	.word	0x200003d5

08004a14 <__sinit>:
 8004a14:	b510      	push	{r4, lr}
 8004a16:	4604      	mov	r4, r0
 8004a18:	f7ff fff0 	bl	80049fc <__sfp_lock_acquire>
 8004a1c:	6a23      	ldr	r3, [r4, #32]
 8004a1e:	b11b      	cbz	r3, 8004a28 <__sinit+0x14>
 8004a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a24:	f7ff bff0 	b.w	8004a08 <__sfp_lock_release>
 8004a28:	4b04      	ldr	r3, [pc, #16]	@ (8004a3c <__sinit+0x28>)
 8004a2a:	6223      	str	r3, [r4, #32]
 8004a2c:	4b04      	ldr	r3, [pc, #16]	@ (8004a40 <__sinit+0x2c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f5      	bne.n	8004a20 <__sinit+0xc>
 8004a34:	f7ff ffc4 	bl	80049c0 <global_stdio_init.part.0>
 8004a38:	e7f2      	b.n	8004a20 <__sinit+0xc>
 8004a3a:	bf00      	nop
 8004a3c:	08004981 	.word	0x08004981
 8004a40:	200003cc 	.word	0x200003cc

08004a44 <_fwalk_sglue>:
 8004a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a48:	4607      	mov	r7, r0
 8004a4a:	4688      	mov	r8, r1
 8004a4c:	4614      	mov	r4, r2
 8004a4e:	2600      	movs	r6, #0
 8004a50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a54:	f1b9 0901 	subs.w	r9, r9, #1
 8004a58:	d505      	bpl.n	8004a66 <_fwalk_sglue+0x22>
 8004a5a:	6824      	ldr	r4, [r4, #0]
 8004a5c:	2c00      	cmp	r4, #0
 8004a5e:	d1f7      	bne.n	8004a50 <_fwalk_sglue+0xc>
 8004a60:	4630      	mov	r0, r6
 8004a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a66:	89ab      	ldrh	r3, [r5, #12]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d907      	bls.n	8004a7c <_fwalk_sglue+0x38>
 8004a6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a70:	3301      	adds	r3, #1
 8004a72:	d003      	beq.n	8004a7c <_fwalk_sglue+0x38>
 8004a74:	4629      	mov	r1, r5
 8004a76:	4638      	mov	r0, r7
 8004a78:	47c0      	blx	r8
 8004a7a:	4306      	orrs	r6, r0
 8004a7c:	3568      	adds	r5, #104	@ 0x68
 8004a7e:	e7e9      	b.n	8004a54 <_fwalk_sglue+0x10>

08004a80 <sniprintf>:
 8004a80:	b40c      	push	{r2, r3}
 8004a82:	b530      	push	{r4, r5, lr}
 8004a84:	4b17      	ldr	r3, [pc, #92]	@ (8004ae4 <sniprintf+0x64>)
 8004a86:	1e0c      	subs	r4, r1, #0
 8004a88:	681d      	ldr	r5, [r3, #0]
 8004a8a:	b09d      	sub	sp, #116	@ 0x74
 8004a8c:	da08      	bge.n	8004aa0 <sniprintf+0x20>
 8004a8e:	238b      	movs	r3, #139	@ 0x8b
 8004a90:	602b      	str	r3, [r5, #0]
 8004a92:	f04f 30ff 	mov.w	r0, #4294967295
 8004a96:	b01d      	add	sp, #116	@ 0x74
 8004a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a9c:	b002      	add	sp, #8
 8004a9e:	4770      	bx	lr
 8004aa0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004aa4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004aa8:	bf14      	ite	ne
 8004aaa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004aae:	4623      	moveq	r3, r4
 8004ab0:	9304      	str	r3, [sp, #16]
 8004ab2:	9307      	str	r3, [sp, #28]
 8004ab4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ab8:	9002      	str	r0, [sp, #8]
 8004aba:	9006      	str	r0, [sp, #24]
 8004abc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004ac0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004ac2:	ab21      	add	r3, sp, #132	@ 0x84
 8004ac4:	a902      	add	r1, sp, #8
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	9301      	str	r3, [sp, #4]
 8004aca:	f001 fbfb 	bl	80062c4 <_svfiprintf_r>
 8004ace:	1c43      	adds	r3, r0, #1
 8004ad0:	bfbc      	itt	lt
 8004ad2:	238b      	movlt	r3, #139	@ 0x8b
 8004ad4:	602b      	strlt	r3, [r5, #0]
 8004ad6:	2c00      	cmp	r4, #0
 8004ad8:	d0dd      	beq.n	8004a96 <sniprintf+0x16>
 8004ada:	9b02      	ldr	r3, [sp, #8]
 8004adc:	2200      	movs	r2, #0
 8004ade:	701a      	strb	r2, [r3, #0]
 8004ae0:	e7d9      	b.n	8004a96 <sniprintf+0x16>
 8004ae2:	bf00      	nop
 8004ae4:	20000018 	.word	0x20000018

08004ae8 <__sread>:
 8004ae8:	b510      	push	{r4, lr}
 8004aea:	460c      	mov	r4, r1
 8004aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af0:	f000 f86c 	bl	8004bcc <_read_r>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	bfab      	itete	ge
 8004af8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004afa:	89a3      	ldrhlt	r3, [r4, #12]
 8004afc:	181b      	addge	r3, r3, r0
 8004afe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b02:	bfac      	ite	ge
 8004b04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b06:	81a3      	strhlt	r3, [r4, #12]
 8004b08:	bd10      	pop	{r4, pc}

08004b0a <__swrite>:
 8004b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0e:	461f      	mov	r7, r3
 8004b10:	898b      	ldrh	r3, [r1, #12]
 8004b12:	05db      	lsls	r3, r3, #23
 8004b14:	4605      	mov	r5, r0
 8004b16:	460c      	mov	r4, r1
 8004b18:	4616      	mov	r6, r2
 8004b1a:	d505      	bpl.n	8004b28 <__swrite+0x1e>
 8004b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b20:	2302      	movs	r3, #2
 8004b22:	2200      	movs	r2, #0
 8004b24:	f000 f840 	bl	8004ba8 <_lseek_r>
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b32:	81a3      	strh	r3, [r4, #12]
 8004b34:	4632      	mov	r2, r6
 8004b36:	463b      	mov	r3, r7
 8004b38:	4628      	mov	r0, r5
 8004b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3e:	f000 b857 	b.w	8004bf0 <_write_r>

08004b42 <__sseek>:
 8004b42:	b510      	push	{r4, lr}
 8004b44:	460c      	mov	r4, r1
 8004b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b4a:	f000 f82d 	bl	8004ba8 <_lseek_r>
 8004b4e:	1c43      	adds	r3, r0, #1
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	bf15      	itete	ne
 8004b54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b5e:	81a3      	strheq	r3, [r4, #12]
 8004b60:	bf18      	it	ne
 8004b62:	81a3      	strhne	r3, [r4, #12]
 8004b64:	bd10      	pop	{r4, pc}

08004b66 <__sclose>:
 8004b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6a:	f000 b80d 	b.w	8004b88 <_close_r>

08004b6e <memset>:
 8004b6e:	4402      	add	r2, r0
 8004b70:	4603      	mov	r3, r0
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d100      	bne.n	8004b78 <memset+0xa>
 8004b76:	4770      	bx	lr
 8004b78:	f803 1b01 	strb.w	r1, [r3], #1
 8004b7c:	e7f9      	b.n	8004b72 <memset+0x4>
	...

08004b80 <_localeconv_r>:
 8004b80:	4800      	ldr	r0, [pc, #0]	@ (8004b84 <_localeconv_r+0x4>)
 8004b82:	4770      	bx	lr
 8004b84:	20000158 	.word	0x20000158

08004b88 <_close_r>:
 8004b88:	b538      	push	{r3, r4, r5, lr}
 8004b8a:	4d06      	ldr	r5, [pc, #24]	@ (8004ba4 <_close_r+0x1c>)
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	4604      	mov	r4, r0
 8004b90:	4608      	mov	r0, r1
 8004b92:	602b      	str	r3, [r5, #0]
 8004b94:	f7fc ff37 	bl	8001a06 <_close>
 8004b98:	1c43      	adds	r3, r0, #1
 8004b9a:	d102      	bne.n	8004ba2 <_close_r+0x1a>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	b103      	cbz	r3, 8004ba2 <_close_r+0x1a>
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	bd38      	pop	{r3, r4, r5, pc}
 8004ba4:	200003d0 	.word	0x200003d0

08004ba8 <_lseek_r>:
 8004ba8:	b538      	push	{r3, r4, r5, lr}
 8004baa:	4d07      	ldr	r5, [pc, #28]	@ (8004bc8 <_lseek_r+0x20>)
 8004bac:	4604      	mov	r4, r0
 8004bae:	4608      	mov	r0, r1
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	602a      	str	r2, [r5, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f7fc ff4c 	bl	8001a54 <_lseek>
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	d102      	bne.n	8004bc6 <_lseek_r+0x1e>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	b103      	cbz	r3, 8004bc6 <_lseek_r+0x1e>
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	bd38      	pop	{r3, r4, r5, pc}
 8004bc8:	200003d0 	.word	0x200003d0

08004bcc <_read_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	4d07      	ldr	r5, [pc, #28]	@ (8004bec <_read_r+0x20>)
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	4608      	mov	r0, r1
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	602a      	str	r2, [r5, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f7fc feda 	bl	8001994 <_read>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	d102      	bne.n	8004bea <_read_r+0x1e>
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	b103      	cbz	r3, 8004bea <_read_r+0x1e>
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
 8004bec:	200003d0 	.word	0x200003d0

08004bf0 <_write_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4d07      	ldr	r5, [pc, #28]	@ (8004c10 <_write_r+0x20>)
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	4608      	mov	r0, r1
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	602a      	str	r2, [r5, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f7fc fee5 	bl	80019ce <_write>
 8004c04:	1c43      	adds	r3, r0, #1
 8004c06:	d102      	bne.n	8004c0e <_write_r+0x1e>
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	b103      	cbz	r3, 8004c0e <_write_r+0x1e>
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
 8004c10:	200003d0 	.word	0x200003d0

08004c14 <__errno>:
 8004c14:	4b01      	ldr	r3, [pc, #4]	@ (8004c1c <__errno+0x8>)
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	20000018 	.word	0x20000018

08004c20 <__libc_init_array>:
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	4d0d      	ldr	r5, [pc, #52]	@ (8004c58 <__libc_init_array+0x38>)
 8004c24:	4c0d      	ldr	r4, [pc, #52]	@ (8004c5c <__libc_init_array+0x3c>)
 8004c26:	1b64      	subs	r4, r4, r5
 8004c28:	10a4      	asrs	r4, r4, #2
 8004c2a:	2600      	movs	r6, #0
 8004c2c:	42a6      	cmp	r6, r4
 8004c2e:	d109      	bne.n	8004c44 <__libc_init_array+0x24>
 8004c30:	4d0b      	ldr	r5, [pc, #44]	@ (8004c60 <__libc_init_array+0x40>)
 8004c32:	4c0c      	ldr	r4, [pc, #48]	@ (8004c64 <__libc_init_array+0x44>)
 8004c34:	f002 f864 	bl	8006d00 <_init>
 8004c38:	1b64      	subs	r4, r4, r5
 8004c3a:	10a4      	asrs	r4, r4, #2
 8004c3c:	2600      	movs	r6, #0
 8004c3e:	42a6      	cmp	r6, r4
 8004c40:	d105      	bne.n	8004c4e <__libc_init_array+0x2e>
 8004c42:	bd70      	pop	{r4, r5, r6, pc}
 8004c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c48:	4798      	blx	r3
 8004c4a:	3601      	adds	r6, #1
 8004c4c:	e7ee      	b.n	8004c2c <__libc_init_array+0xc>
 8004c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c52:	4798      	blx	r3
 8004c54:	3601      	adds	r6, #1
 8004c56:	e7f2      	b.n	8004c3e <__libc_init_array+0x1e>
 8004c58:	08007100 	.word	0x08007100
 8004c5c:	08007100 	.word	0x08007100
 8004c60:	08007100 	.word	0x08007100
 8004c64:	08007104 	.word	0x08007104

08004c68 <__retarget_lock_init_recursive>:
 8004c68:	4770      	bx	lr

08004c6a <__retarget_lock_acquire_recursive>:
 8004c6a:	4770      	bx	lr

08004c6c <__retarget_lock_release_recursive>:
 8004c6c:	4770      	bx	lr

08004c6e <quorem>:
 8004c6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c72:	6903      	ldr	r3, [r0, #16]
 8004c74:	690c      	ldr	r4, [r1, #16]
 8004c76:	42a3      	cmp	r3, r4
 8004c78:	4607      	mov	r7, r0
 8004c7a:	db7e      	blt.n	8004d7a <quorem+0x10c>
 8004c7c:	3c01      	subs	r4, #1
 8004c7e:	f101 0814 	add.w	r8, r1, #20
 8004c82:	00a3      	lsls	r3, r4, #2
 8004c84:	f100 0514 	add.w	r5, r0, #20
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ca0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ca4:	d32e      	bcc.n	8004d04 <quorem+0x96>
 8004ca6:	f04f 0a00 	mov.w	sl, #0
 8004caa:	46c4      	mov	ip, r8
 8004cac:	46ae      	mov	lr, r5
 8004cae:	46d3      	mov	fp, sl
 8004cb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004cb4:	b298      	uxth	r0, r3
 8004cb6:	fb06 a000 	mla	r0, r6, r0, sl
 8004cba:	0c02      	lsrs	r2, r0, #16
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	fb06 2303 	mla	r3, r6, r3, r2
 8004cc2:	f8de 2000 	ldr.w	r2, [lr]
 8004cc6:	b280      	uxth	r0, r0
 8004cc8:	b292      	uxth	r2, r2
 8004cca:	1a12      	subs	r2, r2, r0
 8004ccc:	445a      	add	r2, fp
 8004cce:	f8de 0000 	ldr.w	r0, [lr]
 8004cd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004cdc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004ce0:	b292      	uxth	r2, r2
 8004ce2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004ce6:	45e1      	cmp	r9, ip
 8004ce8:	f84e 2b04 	str.w	r2, [lr], #4
 8004cec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004cf0:	d2de      	bcs.n	8004cb0 <quorem+0x42>
 8004cf2:	9b00      	ldr	r3, [sp, #0]
 8004cf4:	58eb      	ldr	r3, [r5, r3]
 8004cf6:	b92b      	cbnz	r3, 8004d04 <quorem+0x96>
 8004cf8:	9b01      	ldr	r3, [sp, #4]
 8004cfa:	3b04      	subs	r3, #4
 8004cfc:	429d      	cmp	r5, r3
 8004cfe:	461a      	mov	r2, r3
 8004d00:	d32f      	bcc.n	8004d62 <quorem+0xf4>
 8004d02:	613c      	str	r4, [r7, #16]
 8004d04:	4638      	mov	r0, r7
 8004d06:	f001 f979 	bl	8005ffc <__mcmp>
 8004d0a:	2800      	cmp	r0, #0
 8004d0c:	db25      	blt.n	8004d5a <quorem+0xec>
 8004d0e:	4629      	mov	r1, r5
 8004d10:	2000      	movs	r0, #0
 8004d12:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d16:	f8d1 c000 	ldr.w	ip, [r1]
 8004d1a:	fa1f fe82 	uxth.w	lr, r2
 8004d1e:	fa1f f38c 	uxth.w	r3, ip
 8004d22:	eba3 030e 	sub.w	r3, r3, lr
 8004d26:	4403      	add	r3, r0
 8004d28:	0c12      	lsrs	r2, r2, #16
 8004d2a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004d2e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d38:	45c1      	cmp	r9, r8
 8004d3a:	f841 3b04 	str.w	r3, [r1], #4
 8004d3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004d42:	d2e6      	bcs.n	8004d12 <quorem+0xa4>
 8004d44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d4c:	b922      	cbnz	r2, 8004d58 <quorem+0xea>
 8004d4e:	3b04      	subs	r3, #4
 8004d50:	429d      	cmp	r5, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	d30b      	bcc.n	8004d6e <quorem+0x100>
 8004d56:	613c      	str	r4, [r7, #16]
 8004d58:	3601      	adds	r6, #1
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	b003      	add	sp, #12
 8004d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	3b04      	subs	r3, #4
 8004d66:	2a00      	cmp	r2, #0
 8004d68:	d1cb      	bne.n	8004d02 <quorem+0x94>
 8004d6a:	3c01      	subs	r4, #1
 8004d6c:	e7c6      	b.n	8004cfc <quorem+0x8e>
 8004d6e:	6812      	ldr	r2, [r2, #0]
 8004d70:	3b04      	subs	r3, #4
 8004d72:	2a00      	cmp	r2, #0
 8004d74:	d1ef      	bne.n	8004d56 <quorem+0xe8>
 8004d76:	3c01      	subs	r4, #1
 8004d78:	e7ea      	b.n	8004d50 <quorem+0xe2>
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	e7ee      	b.n	8004d5c <quorem+0xee>
	...

08004d80 <_dtoa_r>:
 8004d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d84:	69c7      	ldr	r7, [r0, #28]
 8004d86:	b099      	sub	sp, #100	@ 0x64
 8004d88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004d8c:	ec55 4b10 	vmov	r4, r5, d0
 8004d90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004d92:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d94:	4683      	mov	fp, r0
 8004d96:	920e      	str	r2, [sp, #56]	@ 0x38
 8004d98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004d9a:	b97f      	cbnz	r7, 8004dbc <_dtoa_r+0x3c>
 8004d9c:	2010      	movs	r0, #16
 8004d9e:	f000 fdfd 	bl	800599c <malloc>
 8004da2:	4602      	mov	r2, r0
 8004da4:	f8cb 001c 	str.w	r0, [fp, #28]
 8004da8:	b920      	cbnz	r0, 8004db4 <_dtoa_r+0x34>
 8004daa:	4ba7      	ldr	r3, [pc, #668]	@ (8005048 <_dtoa_r+0x2c8>)
 8004dac:	21ef      	movs	r1, #239	@ 0xef
 8004dae:	48a7      	ldr	r0, [pc, #668]	@ (800504c <_dtoa_r+0x2cc>)
 8004db0:	f001 fc68 	bl	8006684 <__assert_func>
 8004db4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004db8:	6007      	str	r7, [r0, #0]
 8004dba:	60c7      	str	r7, [r0, #12]
 8004dbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004dc0:	6819      	ldr	r1, [r3, #0]
 8004dc2:	b159      	cbz	r1, 8004ddc <_dtoa_r+0x5c>
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	604a      	str	r2, [r1, #4]
 8004dc8:	2301      	movs	r3, #1
 8004dca:	4093      	lsls	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
 8004dce:	4658      	mov	r0, fp
 8004dd0:	f000 feda 	bl	8005b88 <_Bfree>
 8004dd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	1e2b      	subs	r3, r5, #0
 8004dde:	bfb9      	ittee	lt
 8004de0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004de4:	9303      	strlt	r3, [sp, #12]
 8004de6:	2300      	movge	r3, #0
 8004de8:	6033      	strge	r3, [r6, #0]
 8004dea:	9f03      	ldr	r7, [sp, #12]
 8004dec:	4b98      	ldr	r3, [pc, #608]	@ (8005050 <_dtoa_r+0x2d0>)
 8004dee:	bfbc      	itt	lt
 8004df0:	2201      	movlt	r2, #1
 8004df2:	6032      	strlt	r2, [r6, #0]
 8004df4:	43bb      	bics	r3, r7
 8004df6:	d112      	bne.n	8004e1e <_dtoa_r+0x9e>
 8004df8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004dfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004e04:	4323      	orrs	r3, r4
 8004e06:	f000 854d 	beq.w	80058a4 <_dtoa_r+0xb24>
 8004e0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004e0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005064 <_dtoa_r+0x2e4>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 854f 	beq.w	80058b4 <_dtoa_r+0xb34>
 8004e16:	f10a 0303 	add.w	r3, sl, #3
 8004e1a:	f000 bd49 	b.w	80058b0 <_dtoa_r+0xb30>
 8004e1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e22:	2200      	movs	r2, #0
 8004e24:	ec51 0b17 	vmov	r0, r1, d7
 8004e28:	2300      	movs	r3, #0
 8004e2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004e2e:	f7fb fe6b 	bl	8000b08 <__aeabi_dcmpeq>
 8004e32:	4680      	mov	r8, r0
 8004e34:	b158      	cbz	r0, 8004e4e <_dtoa_r+0xce>
 8004e36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004e38:	2301      	movs	r3, #1
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004e3e:	b113      	cbz	r3, 8004e46 <_dtoa_r+0xc6>
 8004e40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004e42:	4b84      	ldr	r3, [pc, #528]	@ (8005054 <_dtoa_r+0x2d4>)
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005068 <_dtoa_r+0x2e8>
 8004e4a:	f000 bd33 	b.w	80058b4 <_dtoa_r+0xb34>
 8004e4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004e52:	aa16      	add	r2, sp, #88	@ 0x58
 8004e54:	a917      	add	r1, sp, #92	@ 0x5c
 8004e56:	4658      	mov	r0, fp
 8004e58:	f001 f980 	bl	800615c <__d2b>
 8004e5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004e60:	4681      	mov	r9, r0
 8004e62:	2e00      	cmp	r6, #0
 8004e64:	d077      	beq.n	8004f56 <_dtoa_r+0x1d6>
 8004e66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004e78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004e7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004e80:	4619      	mov	r1, r3
 8004e82:	2200      	movs	r2, #0
 8004e84:	4b74      	ldr	r3, [pc, #464]	@ (8005058 <_dtoa_r+0x2d8>)
 8004e86:	f7fb fa1f 	bl	80002c8 <__aeabi_dsub>
 8004e8a:	a369      	add	r3, pc, #420	@ (adr r3, 8005030 <_dtoa_r+0x2b0>)
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	f7fb fbd2 	bl	8000638 <__aeabi_dmul>
 8004e94:	a368      	add	r3, pc, #416	@ (adr r3, 8005038 <_dtoa_r+0x2b8>)
 8004e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9a:	f7fb fa17 	bl	80002cc <__adddf3>
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	460d      	mov	r5, r1
 8004ea4:	f7fb fb5e 	bl	8000564 <__aeabi_i2d>
 8004ea8:	a365      	add	r3, pc, #404	@ (adr r3, 8005040 <_dtoa_r+0x2c0>)
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	f7fb fbc3 	bl	8000638 <__aeabi_dmul>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	4629      	mov	r1, r5
 8004eba:	f7fb fa07 	bl	80002cc <__adddf3>
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	460d      	mov	r5, r1
 8004ec2:	f7fb fe69 	bl	8000b98 <__aeabi_d2iz>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	4607      	mov	r7, r0
 8004eca:	2300      	movs	r3, #0
 8004ecc:	4620      	mov	r0, r4
 8004ece:	4629      	mov	r1, r5
 8004ed0:	f7fb fe24 	bl	8000b1c <__aeabi_dcmplt>
 8004ed4:	b140      	cbz	r0, 8004ee8 <_dtoa_r+0x168>
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	f7fb fb44 	bl	8000564 <__aeabi_i2d>
 8004edc:	4622      	mov	r2, r4
 8004ede:	462b      	mov	r3, r5
 8004ee0:	f7fb fe12 	bl	8000b08 <__aeabi_dcmpeq>
 8004ee4:	b900      	cbnz	r0, 8004ee8 <_dtoa_r+0x168>
 8004ee6:	3f01      	subs	r7, #1
 8004ee8:	2f16      	cmp	r7, #22
 8004eea:	d851      	bhi.n	8004f90 <_dtoa_r+0x210>
 8004eec:	4b5b      	ldr	r3, [pc, #364]	@ (800505c <_dtoa_r+0x2dc>)
 8004eee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004efa:	f7fb fe0f 	bl	8000b1c <__aeabi_dcmplt>
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d048      	beq.n	8004f94 <_dtoa_r+0x214>
 8004f02:	3f01      	subs	r7, #1
 8004f04:	2300      	movs	r3, #0
 8004f06:	9312      	str	r3, [sp, #72]	@ 0x48
 8004f08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004f0a:	1b9b      	subs	r3, r3, r6
 8004f0c:	1e5a      	subs	r2, r3, #1
 8004f0e:	bf44      	itt	mi
 8004f10:	f1c3 0801 	rsbmi	r8, r3, #1
 8004f14:	2300      	movmi	r3, #0
 8004f16:	9208      	str	r2, [sp, #32]
 8004f18:	bf54      	ite	pl
 8004f1a:	f04f 0800 	movpl.w	r8, #0
 8004f1e:	9308      	strmi	r3, [sp, #32]
 8004f20:	2f00      	cmp	r7, #0
 8004f22:	db39      	blt.n	8004f98 <_dtoa_r+0x218>
 8004f24:	9b08      	ldr	r3, [sp, #32]
 8004f26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004f28:	443b      	add	r3, r7
 8004f2a:	9308      	str	r3, [sp, #32]
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f32:	2b09      	cmp	r3, #9
 8004f34:	d864      	bhi.n	8005000 <_dtoa_r+0x280>
 8004f36:	2b05      	cmp	r3, #5
 8004f38:	bfc4      	itt	gt
 8004f3a:	3b04      	subgt	r3, #4
 8004f3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f40:	f1a3 0302 	sub.w	r3, r3, #2
 8004f44:	bfcc      	ite	gt
 8004f46:	2400      	movgt	r4, #0
 8004f48:	2401      	movle	r4, #1
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d863      	bhi.n	8005016 <_dtoa_r+0x296>
 8004f4e:	e8df f003 	tbb	[pc, r3]
 8004f52:	372a      	.short	0x372a
 8004f54:	5535      	.short	0x5535
 8004f56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004f5a:	441e      	add	r6, r3
 8004f5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	bfc1      	itttt	gt
 8004f64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004f68:	409f      	lslgt	r7, r3
 8004f6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004f6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004f72:	bfd6      	itet	le
 8004f74:	f1c3 0320 	rsble	r3, r3, #32
 8004f78:	ea47 0003 	orrgt.w	r0, r7, r3
 8004f7c:	fa04 f003 	lslle.w	r0, r4, r3
 8004f80:	f7fb fae0 	bl	8000544 <__aeabi_ui2d>
 8004f84:	2201      	movs	r2, #1
 8004f86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004f8a:	3e01      	subs	r6, #1
 8004f8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8004f8e:	e777      	b.n	8004e80 <_dtoa_r+0x100>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e7b8      	b.n	8004f06 <_dtoa_r+0x186>
 8004f94:	9012      	str	r0, [sp, #72]	@ 0x48
 8004f96:	e7b7      	b.n	8004f08 <_dtoa_r+0x188>
 8004f98:	427b      	negs	r3, r7
 8004f9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	eba8 0807 	sub.w	r8, r8, r7
 8004fa2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004fa4:	e7c4      	b.n	8004f30 <_dtoa_r+0x1b0>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004faa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	dc35      	bgt.n	800501c <_dtoa_r+0x29c>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	9307      	str	r3, [sp, #28]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8004fba:	e00b      	b.n	8004fd4 <_dtoa_r+0x254>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e7f3      	b.n	8004fa8 <_dtoa_r+0x228>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	9307      	str	r3, [sp, #28]
 8004fd0:	bfb8      	it	lt
 8004fd2:	2301      	movlt	r3, #1
 8004fd4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004fd8:	2100      	movs	r1, #0
 8004fda:	2204      	movs	r2, #4
 8004fdc:	f102 0514 	add.w	r5, r2, #20
 8004fe0:	429d      	cmp	r5, r3
 8004fe2:	d91f      	bls.n	8005024 <_dtoa_r+0x2a4>
 8004fe4:	6041      	str	r1, [r0, #4]
 8004fe6:	4658      	mov	r0, fp
 8004fe8:	f000 fd8e 	bl	8005b08 <_Balloc>
 8004fec:	4682      	mov	sl, r0
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	d13c      	bne.n	800506c <_dtoa_r+0x2ec>
 8004ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8005060 <_dtoa_r+0x2e0>)
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	f240 11af 	movw	r1, #431	@ 0x1af
 8004ffa:	e6d8      	b.n	8004dae <_dtoa_r+0x2e>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e7e0      	b.n	8004fc2 <_dtoa_r+0x242>
 8005000:	2401      	movs	r4, #1
 8005002:	2300      	movs	r3, #0
 8005004:	9309      	str	r3, [sp, #36]	@ 0x24
 8005006:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005008:	f04f 33ff 	mov.w	r3, #4294967295
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	9307      	str	r3, [sp, #28]
 8005010:	2200      	movs	r2, #0
 8005012:	2312      	movs	r3, #18
 8005014:	e7d0      	b.n	8004fb8 <_dtoa_r+0x238>
 8005016:	2301      	movs	r3, #1
 8005018:	930b      	str	r3, [sp, #44]	@ 0x2c
 800501a:	e7f5      	b.n	8005008 <_dtoa_r+0x288>
 800501c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	9307      	str	r3, [sp, #28]
 8005022:	e7d7      	b.n	8004fd4 <_dtoa_r+0x254>
 8005024:	3101      	adds	r1, #1
 8005026:	0052      	lsls	r2, r2, #1
 8005028:	e7d8      	b.n	8004fdc <_dtoa_r+0x25c>
 800502a:	bf00      	nop
 800502c:	f3af 8000 	nop.w
 8005030:	636f4361 	.word	0x636f4361
 8005034:	3fd287a7 	.word	0x3fd287a7
 8005038:	8b60c8b3 	.word	0x8b60c8b3
 800503c:	3fc68a28 	.word	0x3fc68a28
 8005040:	509f79fb 	.word	0x509f79fb
 8005044:	3fd34413 	.word	0x3fd34413
 8005048:	08006dc5 	.word	0x08006dc5
 800504c:	08006ddc 	.word	0x08006ddc
 8005050:	7ff00000 	.word	0x7ff00000
 8005054:	08006d95 	.word	0x08006d95
 8005058:	3ff80000 	.word	0x3ff80000
 800505c:	08006ed8 	.word	0x08006ed8
 8005060:	08006e34 	.word	0x08006e34
 8005064:	08006dc1 	.word	0x08006dc1
 8005068:	08006d94 	.word	0x08006d94
 800506c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005070:	6018      	str	r0, [r3, #0]
 8005072:	9b07      	ldr	r3, [sp, #28]
 8005074:	2b0e      	cmp	r3, #14
 8005076:	f200 80a4 	bhi.w	80051c2 <_dtoa_r+0x442>
 800507a:	2c00      	cmp	r4, #0
 800507c:	f000 80a1 	beq.w	80051c2 <_dtoa_r+0x442>
 8005080:	2f00      	cmp	r7, #0
 8005082:	dd33      	ble.n	80050ec <_dtoa_r+0x36c>
 8005084:	4bad      	ldr	r3, [pc, #692]	@ (800533c <_dtoa_r+0x5bc>)
 8005086:	f007 020f 	and.w	r2, r7, #15
 800508a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800508e:	ed93 7b00 	vldr	d7, [r3]
 8005092:	05f8      	lsls	r0, r7, #23
 8005094:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005098:	ea4f 1427 	mov.w	r4, r7, asr #4
 800509c:	d516      	bpl.n	80050cc <_dtoa_r+0x34c>
 800509e:	4ba8      	ldr	r3, [pc, #672]	@ (8005340 <_dtoa_r+0x5c0>)
 80050a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050a8:	f7fb fbf0 	bl	800088c <__aeabi_ddiv>
 80050ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050b0:	f004 040f 	and.w	r4, r4, #15
 80050b4:	2603      	movs	r6, #3
 80050b6:	4da2      	ldr	r5, [pc, #648]	@ (8005340 <_dtoa_r+0x5c0>)
 80050b8:	b954      	cbnz	r4, 80050d0 <_dtoa_r+0x350>
 80050ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050c2:	f7fb fbe3 	bl	800088c <__aeabi_ddiv>
 80050c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050ca:	e028      	b.n	800511e <_dtoa_r+0x39e>
 80050cc:	2602      	movs	r6, #2
 80050ce:	e7f2      	b.n	80050b6 <_dtoa_r+0x336>
 80050d0:	07e1      	lsls	r1, r4, #31
 80050d2:	d508      	bpl.n	80050e6 <_dtoa_r+0x366>
 80050d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050dc:	f7fb faac 	bl	8000638 <__aeabi_dmul>
 80050e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050e4:	3601      	adds	r6, #1
 80050e6:	1064      	asrs	r4, r4, #1
 80050e8:	3508      	adds	r5, #8
 80050ea:	e7e5      	b.n	80050b8 <_dtoa_r+0x338>
 80050ec:	f000 80d2 	beq.w	8005294 <_dtoa_r+0x514>
 80050f0:	427c      	negs	r4, r7
 80050f2:	4b92      	ldr	r3, [pc, #584]	@ (800533c <_dtoa_r+0x5bc>)
 80050f4:	4d92      	ldr	r5, [pc, #584]	@ (8005340 <_dtoa_r+0x5c0>)
 80050f6:	f004 020f 	and.w	r2, r4, #15
 80050fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005106:	f7fb fa97 	bl	8000638 <__aeabi_dmul>
 800510a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800510e:	1124      	asrs	r4, r4, #4
 8005110:	2300      	movs	r3, #0
 8005112:	2602      	movs	r6, #2
 8005114:	2c00      	cmp	r4, #0
 8005116:	f040 80b2 	bne.w	800527e <_dtoa_r+0x4fe>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1d3      	bne.n	80050c6 <_dtoa_r+0x346>
 800511e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005120:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 80b7 	beq.w	8005298 <_dtoa_r+0x518>
 800512a:	4b86      	ldr	r3, [pc, #536]	@ (8005344 <_dtoa_r+0x5c4>)
 800512c:	2200      	movs	r2, #0
 800512e:	4620      	mov	r0, r4
 8005130:	4629      	mov	r1, r5
 8005132:	f7fb fcf3 	bl	8000b1c <__aeabi_dcmplt>
 8005136:	2800      	cmp	r0, #0
 8005138:	f000 80ae 	beq.w	8005298 <_dtoa_r+0x518>
 800513c:	9b07      	ldr	r3, [sp, #28]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 80aa 	beq.w	8005298 <_dtoa_r+0x518>
 8005144:	9b00      	ldr	r3, [sp, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	dd37      	ble.n	80051ba <_dtoa_r+0x43a>
 800514a:	1e7b      	subs	r3, r7, #1
 800514c:	9304      	str	r3, [sp, #16]
 800514e:	4620      	mov	r0, r4
 8005150:	4b7d      	ldr	r3, [pc, #500]	@ (8005348 <_dtoa_r+0x5c8>)
 8005152:	2200      	movs	r2, #0
 8005154:	4629      	mov	r1, r5
 8005156:	f7fb fa6f 	bl	8000638 <__aeabi_dmul>
 800515a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800515e:	9c00      	ldr	r4, [sp, #0]
 8005160:	3601      	adds	r6, #1
 8005162:	4630      	mov	r0, r6
 8005164:	f7fb f9fe 	bl	8000564 <__aeabi_i2d>
 8005168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800516c:	f7fb fa64 	bl	8000638 <__aeabi_dmul>
 8005170:	4b76      	ldr	r3, [pc, #472]	@ (800534c <_dtoa_r+0x5cc>)
 8005172:	2200      	movs	r2, #0
 8005174:	f7fb f8aa 	bl	80002cc <__adddf3>
 8005178:	4605      	mov	r5, r0
 800517a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800517e:	2c00      	cmp	r4, #0
 8005180:	f040 808d 	bne.w	800529e <_dtoa_r+0x51e>
 8005184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005188:	4b71      	ldr	r3, [pc, #452]	@ (8005350 <_dtoa_r+0x5d0>)
 800518a:	2200      	movs	r2, #0
 800518c:	f7fb f89c 	bl	80002c8 <__aeabi_dsub>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005198:	462a      	mov	r2, r5
 800519a:	4633      	mov	r3, r6
 800519c:	f7fb fcdc 	bl	8000b58 <__aeabi_dcmpgt>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	f040 828b 	bne.w	80056bc <_dtoa_r+0x93c>
 80051a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051aa:	462a      	mov	r2, r5
 80051ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80051b0:	f7fb fcb4 	bl	8000b1c <__aeabi_dcmplt>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	f040 8128 	bne.w	800540a <_dtoa_r+0x68a>
 80051ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80051be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80051c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f2c0 815a 	blt.w	800547e <_dtoa_r+0x6fe>
 80051ca:	2f0e      	cmp	r7, #14
 80051cc:	f300 8157 	bgt.w	800547e <_dtoa_r+0x6fe>
 80051d0:	4b5a      	ldr	r3, [pc, #360]	@ (800533c <_dtoa_r+0x5bc>)
 80051d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80051d6:	ed93 7b00 	vldr	d7, [r3]
 80051da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051dc:	2b00      	cmp	r3, #0
 80051de:	ed8d 7b00 	vstr	d7, [sp]
 80051e2:	da03      	bge.n	80051ec <_dtoa_r+0x46c>
 80051e4:	9b07      	ldr	r3, [sp, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f340 8101 	ble.w	80053ee <_dtoa_r+0x66e>
 80051ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80051f0:	4656      	mov	r6, sl
 80051f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051f6:	4620      	mov	r0, r4
 80051f8:	4629      	mov	r1, r5
 80051fa:	f7fb fb47 	bl	800088c <__aeabi_ddiv>
 80051fe:	f7fb fccb 	bl	8000b98 <__aeabi_d2iz>
 8005202:	4680      	mov	r8, r0
 8005204:	f7fb f9ae 	bl	8000564 <__aeabi_i2d>
 8005208:	e9dd 2300 	ldrd	r2, r3, [sp]
 800520c:	f7fb fa14 	bl	8000638 <__aeabi_dmul>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4620      	mov	r0, r4
 8005216:	4629      	mov	r1, r5
 8005218:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800521c:	f7fb f854 	bl	80002c8 <__aeabi_dsub>
 8005220:	f806 4b01 	strb.w	r4, [r6], #1
 8005224:	9d07      	ldr	r5, [sp, #28]
 8005226:	eba6 040a 	sub.w	r4, r6, sl
 800522a:	42a5      	cmp	r5, r4
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	f040 8117 	bne.w	8005462 <_dtoa_r+0x6e2>
 8005234:	f7fb f84a 	bl	80002cc <__adddf3>
 8005238:	e9dd 2300 	ldrd	r2, r3, [sp]
 800523c:	4604      	mov	r4, r0
 800523e:	460d      	mov	r5, r1
 8005240:	f7fb fc8a 	bl	8000b58 <__aeabi_dcmpgt>
 8005244:	2800      	cmp	r0, #0
 8005246:	f040 80f9 	bne.w	800543c <_dtoa_r+0x6bc>
 800524a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800524e:	4620      	mov	r0, r4
 8005250:	4629      	mov	r1, r5
 8005252:	f7fb fc59 	bl	8000b08 <__aeabi_dcmpeq>
 8005256:	b118      	cbz	r0, 8005260 <_dtoa_r+0x4e0>
 8005258:	f018 0f01 	tst.w	r8, #1
 800525c:	f040 80ee 	bne.w	800543c <_dtoa_r+0x6bc>
 8005260:	4649      	mov	r1, r9
 8005262:	4658      	mov	r0, fp
 8005264:	f000 fc90 	bl	8005b88 <_Bfree>
 8005268:	2300      	movs	r3, #0
 800526a:	7033      	strb	r3, [r6, #0]
 800526c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800526e:	3701      	adds	r7, #1
 8005270:	601f      	str	r7, [r3, #0]
 8005272:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 831d 	beq.w	80058b4 <_dtoa_r+0xb34>
 800527a:	601e      	str	r6, [r3, #0]
 800527c:	e31a      	b.n	80058b4 <_dtoa_r+0xb34>
 800527e:	07e2      	lsls	r2, r4, #31
 8005280:	d505      	bpl.n	800528e <_dtoa_r+0x50e>
 8005282:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005286:	f7fb f9d7 	bl	8000638 <__aeabi_dmul>
 800528a:	3601      	adds	r6, #1
 800528c:	2301      	movs	r3, #1
 800528e:	1064      	asrs	r4, r4, #1
 8005290:	3508      	adds	r5, #8
 8005292:	e73f      	b.n	8005114 <_dtoa_r+0x394>
 8005294:	2602      	movs	r6, #2
 8005296:	e742      	b.n	800511e <_dtoa_r+0x39e>
 8005298:	9c07      	ldr	r4, [sp, #28]
 800529a:	9704      	str	r7, [sp, #16]
 800529c:	e761      	b.n	8005162 <_dtoa_r+0x3e2>
 800529e:	4b27      	ldr	r3, [pc, #156]	@ (800533c <_dtoa_r+0x5bc>)
 80052a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80052a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052aa:	4454      	add	r4, sl
 80052ac:	2900      	cmp	r1, #0
 80052ae:	d053      	beq.n	8005358 <_dtoa_r+0x5d8>
 80052b0:	4928      	ldr	r1, [pc, #160]	@ (8005354 <_dtoa_r+0x5d4>)
 80052b2:	2000      	movs	r0, #0
 80052b4:	f7fb faea 	bl	800088c <__aeabi_ddiv>
 80052b8:	4633      	mov	r3, r6
 80052ba:	462a      	mov	r2, r5
 80052bc:	f7fb f804 	bl	80002c8 <__aeabi_dsub>
 80052c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80052c4:	4656      	mov	r6, sl
 80052c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ca:	f7fb fc65 	bl	8000b98 <__aeabi_d2iz>
 80052ce:	4605      	mov	r5, r0
 80052d0:	f7fb f948 	bl	8000564 <__aeabi_i2d>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052dc:	f7fa fff4 	bl	80002c8 <__aeabi_dsub>
 80052e0:	3530      	adds	r5, #48	@ 0x30
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052ea:	f806 5b01 	strb.w	r5, [r6], #1
 80052ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80052f2:	f7fb fc13 	bl	8000b1c <__aeabi_dcmplt>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	d171      	bne.n	80053de <_dtoa_r+0x65e>
 80052fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052fe:	4911      	ldr	r1, [pc, #68]	@ (8005344 <_dtoa_r+0x5c4>)
 8005300:	2000      	movs	r0, #0
 8005302:	f7fa ffe1 	bl	80002c8 <__aeabi_dsub>
 8005306:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800530a:	f7fb fc07 	bl	8000b1c <__aeabi_dcmplt>
 800530e:	2800      	cmp	r0, #0
 8005310:	f040 8095 	bne.w	800543e <_dtoa_r+0x6be>
 8005314:	42a6      	cmp	r6, r4
 8005316:	f43f af50 	beq.w	80051ba <_dtoa_r+0x43a>
 800531a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800531e:	4b0a      	ldr	r3, [pc, #40]	@ (8005348 <_dtoa_r+0x5c8>)
 8005320:	2200      	movs	r2, #0
 8005322:	f7fb f989 	bl	8000638 <__aeabi_dmul>
 8005326:	4b08      	ldr	r3, [pc, #32]	@ (8005348 <_dtoa_r+0x5c8>)
 8005328:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800532c:	2200      	movs	r2, #0
 800532e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005332:	f7fb f981 	bl	8000638 <__aeabi_dmul>
 8005336:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800533a:	e7c4      	b.n	80052c6 <_dtoa_r+0x546>
 800533c:	08006ed8 	.word	0x08006ed8
 8005340:	08006eb0 	.word	0x08006eb0
 8005344:	3ff00000 	.word	0x3ff00000
 8005348:	40240000 	.word	0x40240000
 800534c:	401c0000 	.word	0x401c0000
 8005350:	40140000 	.word	0x40140000
 8005354:	3fe00000 	.word	0x3fe00000
 8005358:	4631      	mov	r1, r6
 800535a:	4628      	mov	r0, r5
 800535c:	f7fb f96c 	bl	8000638 <__aeabi_dmul>
 8005360:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005364:	9415      	str	r4, [sp, #84]	@ 0x54
 8005366:	4656      	mov	r6, sl
 8005368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800536c:	f7fb fc14 	bl	8000b98 <__aeabi_d2iz>
 8005370:	4605      	mov	r5, r0
 8005372:	f7fb f8f7 	bl	8000564 <__aeabi_i2d>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800537e:	f7fa ffa3 	bl	80002c8 <__aeabi_dsub>
 8005382:	3530      	adds	r5, #48	@ 0x30
 8005384:	f806 5b01 	strb.w	r5, [r6], #1
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	42a6      	cmp	r6, r4
 800538e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	d124      	bne.n	80053e2 <_dtoa_r+0x662>
 8005398:	4bac      	ldr	r3, [pc, #688]	@ (800564c <_dtoa_r+0x8cc>)
 800539a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800539e:	f7fa ff95 	bl	80002cc <__adddf3>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053aa:	f7fb fbd5 	bl	8000b58 <__aeabi_dcmpgt>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d145      	bne.n	800543e <_dtoa_r+0x6be>
 80053b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053b6:	49a5      	ldr	r1, [pc, #660]	@ (800564c <_dtoa_r+0x8cc>)
 80053b8:	2000      	movs	r0, #0
 80053ba:	f7fa ff85 	bl	80002c8 <__aeabi_dsub>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053c6:	f7fb fba9 	bl	8000b1c <__aeabi_dcmplt>
 80053ca:	2800      	cmp	r0, #0
 80053cc:	f43f aef5 	beq.w	80051ba <_dtoa_r+0x43a>
 80053d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80053d2:	1e73      	subs	r3, r6, #1
 80053d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80053d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80053da:	2b30      	cmp	r3, #48	@ 0x30
 80053dc:	d0f8      	beq.n	80053d0 <_dtoa_r+0x650>
 80053de:	9f04      	ldr	r7, [sp, #16]
 80053e0:	e73e      	b.n	8005260 <_dtoa_r+0x4e0>
 80053e2:	4b9b      	ldr	r3, [pc, #620]	@ (8005650 <_dtoa_r+0x8d0>)
 80053e4:	f7fb f928 	bl	8000638 <__aeabi_dmul>
 80053e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053ec:	e7bc      	b.n	8005368 <_dtoa_r+0x5e8>
 80053ee:	d10c      	bne.n	800540a <_dtoa_r+0x68a>
 80053f0:	4b98      	ldr	r3, [pc, #608]	@ (8005654 <_dtoa_r+0x8d4>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053f8:	f7fb f91e 	bl	8000638 <__aeabi_dmul>
 80053fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005400:	f7fb fba0 	bl	8000b44 <__aeabi_dcmpge>
 8005404:	2800      	cmp	r0, #0
 8005406:	f000 8157 	beq.w	80056b8 <_dtoa_r+0x938>
 800540a:	2400      	movs	r4, #0
 800540c:	4625      	mov	r5, r4
 800540e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005410:	43db      	mvns	r3, r3
 8005412:	9304      	str	r3, [sp, #16]
 8005414:	4656      	mov	r6, sl
 8005416:	2700      	movs	r7, #0
 8005418:	4621      	mov	r1, r4
 800541a:	4658      	mov	r0, fp
 800541c:	f000 fbb4 	bl	8005b88 <_Bfree>
 8005420:	2d00      	cmp	r5, #0
 8005422:	d0dc      	beq.n	80053de <_dtoa_r+0x65e>
 8005424:	b12f      	cbz	r7, 8005432 <_dtoa_r+0x6b2>
 8005426:	42af      	cmp	r7, r5
 8005428:	d003      	beq.n	8005432 <_dtoa_r+0x6b2>
 800542a:	4639      	mov	r1, r7
 800542c:	4658      	mov	r0, fp
 800542e:	f000 fbab 	bl	8005b88 <_Bfree>
 8005432:	4629      	mov	r1, r5
 8005434:	4658      	mov	r0, fp
 8005436:	f000 fba7 	bl	8005b88 <_Bfree>
 800543a:	e7d0      	b.n	80053de <_dtoa_r+0x65e>
 800543c:	9704      	str	r7, [sp, #16]
 800543e:	4633      	mov	r3, r6
 8005440:	461e      	mov	r6, r3
 8005442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005446:	2a39      	cmp	r2, #57	@ 0x39
 8005448:	d107      	bne.n	800545a <_dtoa_r+0x6da>
 800544a:	459a      	cmp	sl, r3
 800544c:	d1f8      	bne.n	8005440 <_dtoa_r+0x6c0>
 800544e:	9a04      	ldr	r2, [sp, #16]
 8005450:	3201      	adds	r2, #1
 8005452:	9204      	str	r2, [sp, #16]
 8005454:	2230      	movs	r2, #48	@ 0x30
 8005456:	f88a 2000 	strb.w	r2, [sl]
 800545a:	781a      	ldrb	r2, [r3, #0]
 800545c:	3201      	adds	r2, #1
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	e7bd      	b.n	80053de <_dtoa_r+0x65e>
 8005462:	4b7b      	ldr	r3, [pc, #492]	@ (8005650 <_dtoa_r+0x8d0>)
 8005464:	2200      	movs	r2, #0
 8005466:	f7fb f8e7 	bl	8000638 <__aeabi_dmul>
 800546a:	2200      	movs	r2, #0
 800546c:	2300      	movs	r3, #0
 800546e:	4604      	mov	r4, r0
 8005470:	460d      	mov	r5, r1
 8005472:	f7fb fb49 	bl	8000b08 <__aeabi_dcmpeq>
 8005476:	2800      	cmp	r0, #0
 8005478:	f43f aebb 	beq.w	80051f2 <_dtoa_r+0x472>
 800547c:	e6f0      	b.n	8005260 <_dtoa_r+0x4e0>
 800547e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005480:	2a00      	cmp	r2, #0
 8005482:	f000 80db 	beq.w	800563c <_dtoa_r+0x8bc>
 8005486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005488:	2a01      	cmp	r2, #1
 800548a:	f300 80bf 	bgt.w	800560c <_dtoa_r+0x88c>
 800548e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005490:	2a00      	cmp	r2, #0
 8005492:	f000 80b7 	beq.w	8005604 <_dtoa_r+0x884>
 8005496:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800549a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800549c:	4646      	mov	r6, r8
 800549e:	9a08      	ldr	r2, [sp, #32]
 80054a0:	2101      	movs	r1, #1
 80054a2:	441a      	add	r2, r3
 80054a4:	4658      	mov	r0, fp
 80054a6:	4498      	add	r8, r3
 80054a8:	9208      	str	r2, [sp, #32]
 80054aa:	f000 fc21 	bl	8005cf0 <__i2b>
 80054ae:	4605      	mov	r5, r0
 80054b0:	b15e      	cbz	r6, 80054ca <_dtoa_r+0x74a>
 80054b2:	9b08      	ldr	r3, [sp, #32]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	dd08      	ble.n	80054ca <_dtoa_r+0x74a>
 80054b8:	42b3      	cmp	r3, r6
 80054ba:	9a08      	ldr	r2, [sp, #32]
 80054bc:	bfa8      	it	ge
 80054be:	4633      	movge	r3, r6
 80054c0:	eba8 0803 	sub.w	r8, r8, r3
 80054c4:	1af6      	subs	r6, r6, r3
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	9308      	str	r3, [sp, #32]
 80054ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054cc:	b1f3      	cbz	r3, 800550c <_dtoa_r+0x78c>
 80054ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 80b7 	beq.w	8005644 <_dtoa_r+0x8c4>
 80054d6:	b18c      	cbz	r4, 80054fc <_dtoa_r+0x77c>
 80054d8:	4629      	mov	r1, r5
 80054da:	4622      	mov	r2, r4
 80054dc:	4658      	mov	r0, fp
 80054de:	f000 fcc7 	bl	8005e70 <__pow5mult>
 80054e2:	464a      	mov	r2, r9
 80054e4:	4601      	mov	r1, r0
 80054e6:	4605      	mov	r5, r0
 80054e8:	4658      	mov	r0, fp
 80054ea:	f000 fc17 	bl	8005d1c <__multiply>
 80054ee:	4649      	mov	r1, r9
 80054f0:	9004      	str	r0, [sp, #16]
 80054f2:	4658      	mov	r0, fp
 80054f4:	f000 fb48 	bl	8005b88 <_Bfree>
 80054f8:	9b04      	ldr	r3, [sp, #16]
 80054fa:	4699      	mov	r9, r3
 80054fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054fe:	1b1a      	subs	r2, r3, r4
 8005500:	d004      	beq.n	800550c <_dtoa_r+0x78c>
 8005502:	4649      	mov	r1, r9
 8005504:	4658      	mov	r0, fp
 8005506:	f000 fcb3 	bl	8005e70 <__pow5mult>
 800550a:	4681      	mov	r9, r0
 800550c:	2101      	movs	r1, #1
 800550e:	4658      	mov	r0, fp
 8005510:	f000 fbee 	bl	8005cf0 <__i2b>
 8005514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005516:	4604      	mov	r4, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 81cf 	beq.w	80058bc <_dtoa_r+0xb3c>
 800551e:	461a      	mov	r2, r3
 8005520:	4601      	mov	r1, r0
 8005522:	4658      	mov	r0, fp
 8005524:	f000 fca4 	bl	8005e70 <__pow5mult>
 8005528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800552a:	2b01      	cmp	r3, #1
 800552c:	4604      	mov	r4, r0
 800552e:	f300 8095 	bgt.w	800565c <_dtoa_r+0x8dc>
 8005532:	9b02      	ldr	r3, [sp, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	f040 8087 	bne.w	8005648 <_dtoa_r+0x8c8>
 800553a:	9b03      	ldr	r3, [sp, #12]
 800553c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005540:	2b00      	cmp	r3, #0
 8005542:	f040 8089 	bne.w	8005658 <_dtoa_r+0x8d8>
 8005546:	9b03      	ldr	r3, [sp, #12]
 8005548:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800554c:	0d1b      	lsrs	r3, r3, #20
 800554e:	051b      	lsls	r3, r3, #20
 8005550:	b12b      	cbz	r3, 800555e <_dtoa_r+0x7de>
 8005552:	9b08      	ldr	r3, [sp, #32]
 8005554:	3301      	adds	r3, #1
 8005556:	9308      	str	r3, [sp, #32]
 8005558:	f108 0801 	add.w	r8, r8, #1
 800555c:	2301      	movs	r3, #1
 800555e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 81b0 	beq.w	80058c8 <_dtoa_r+0xb48>
 8005568:	6923      	ldr	r3, [r4, #16]
 800556a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800556e:	6918      	ldr	r0, [r3, #16]
 8005570:	f000 fb72 	bl	8005c58 <__hi0bits>
 8005574:	f1c0 0020 	rsb	r0, r0, #32
 8005578:	9b08      	ldr	r3, [sp, #32]
 800557a:	4418      	add	r0, r3
 800557c:	f010 001f 	ands.w	r0, r0, #31
 8005580:	d077      	beq.n	8005672 <_dtoa_r+0x8f2>
 8005582:	f1c0 0320 	rsb	r3, r0, #32
 8005586:	2b04      	cmp	r3, #4
 8005588:	dd6b      	ble.n	8005662 <_dtoa_r+0x8e2>
 800558a:	9b08      	ldr	r3, [sp, #32]
 800558c:	f1c0 001c 	rsb	r0, r0, #28
 8005590:	4403      	add	r3, r0
 8005592:	4480      	add	r8, r0
 8005594:	4406      	add	r6, r0
 8005596:	9308      	str	r3, [sp, #32]
 8005598:	f1b8 0f00 	cmp.w	r8, #0
 800559c:	dd05      	ble.n	80055aa <_dtoa_r+0x82a>
 800559e:	4649      	mov	r1, r9
 80055a0:	4642      	mov	r2, r8
 80055a2:	4658      	mov	r0, fp
 80055a4:	f000 fcbe 	bl	8005f24 <__lshift>
 80055a8:	4681      	mov	r9, r0
 80055aa:	9b08      	ldr	r3, [sp, #32]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	dd05      	ble.n	80055bc <_dtoa_r+0x83c>
 80055b0:	4621      	mov	r1, r4
 80055b2:	461a      	mov	r2, r3
 80055b4:	4658      	mov	r0, fp
 80055b6:	f000 fcb5 	bl	8005f24 <__lshift>
 80055ba:	4604      	mov	r4, r0
 80055bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d059      	beq.n	8005676 <_dtoa_r+0x8f6>
 80055c2:	4621      	mov	r1, r4
 80055c4:	4648      	mov	r0, r9
 80055c6:	f000 fd19 	bl	8005ffc <__mcmp>
 80055ca:	2800      	cmp	r0, #0
 80055cc:	da53      	bge.n	8005676 <_dtoa_r+0x8f6>
 80055ce:	1e7b      	subs	r3, r7, #1
 80055d0:	9304      	str	r3, [sp, #16]
 80055d2:	4649      	mov	r1, r9
 80055d4:	2300      	movs	r3, #0
 80055d6:	220a      	movs	r2, #10
 80055d8:	4658      	mov	r0, fp
 80055da:	f000 faf7 	bl	8005bcc <__multadd>
 80055de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055e0:	4681      	mov	r9, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 8172 	beq.w	80058cc <_dtoa_r+0xb4c>
 80055e8:	2300      	movs	r3, #0
 80055ea:	4629      	mov	r1, r5
 80055ec:	220a      	movs	r2, #10
 80055ee:	4658      	mov	r0, fp
 80055f0:	f000 faec 	bl	8005bcc <__multadd>
 80055f4:	9b00      	ldr	r3, [sp, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	4605      	mov	r5, r0
 80055fa:	dc67      	bgt.n	80056cc <_dtoa_r+0x94c>
 80055fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055fe:	2b02      	cmp	r3, #2
 8005600:	dc41      	bgt.n	8005686 <_dtoa_r+0x906>
 8005602:	e063      	b.n	80056cc <_dtoa_r+0x94c>
 8005604:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005606:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800560a:	e746      	b.n	800549a <_dtoa_r+0x71a>
 800560c:	9b07      	ldr	r3, [sp, #28]
 800560e:	1e5c      	subs	r4, r3, #1
 8005610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005612:	42a3      	cmp	r3, r4
 8005614:	bfbf      	itttt	lt
 8005616:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005618:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800561a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800561c:	1ae3      	sublt	r3, r4, r3
 800561e:	bfb4      	ite	lt
 8005620:	18d2      	addlt	r2, r2, r3
 8005622:	1b1c      	subge	r4, r3, r4
 8005624:	9b07      	ldr	r3, [sp, #28]
 8005626:	bfbc      	itt	lt
 8005628:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800562a:	2400      	movlt	r4, #0
 800562c:	2b00      	cmp	r3, #0
 800562e:	bfb5      	itete	lt
 8005630:	eba8 0603 	sublt.w	r6, r8, r3
 8005634:	9b07      	ldrge	r3, [sp, #28]
 8005636:	2300      	movlt	r3, #0
 8005638:	4646      	movge	r6, r8
 800563a:	e730      	b.n	800549e <_dtoa_r+0x71e>
 800563c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800563e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005640:	4646      	mov	r6, r8
 8005642:	e735      	b.n	80054b0 <_dtoa_r+0x730>
 8005644:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005646:	e75c      	b.n	8005502 <_dtoa_r+0x782>
 8005648:	2300      	movs	r3, #0
 800564a:	e788      	b.n	800555e <_dtoa_r+0x7de>
 800564c:	3fe00000 	.word	0x3fe00000
 8005650:	40240000 	.word	0x40240000
 8005654:	40140000 	.word	0x40140000
 8005658:	9b02      	ldr	r3, [sp, #8]
 800565a:	e780      	b.n	800555e <_dtoa_r+0x7de>
 800565c:	2300      	movs	r3, #0
 800565e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005660:	e782      	b.n	8005568 <_dtoa_r+0x7e8>
 8005662:	d099      	beq.n	8005598 <_dtoa_r+0x818>
 8005664:	9a08      	ldr	r2, [sp, #32]
 8005666:	331c      	adds	r3, #28
 8005668:	441a      	add	r2, r3
 800566a:	4498      	add	r8, r3
 800566c:	441e      	add	r6, r3
 800566e:	9208      	str	r2, [sp, #32]
 8005670:	e792      	b.n	8005598 <_dtoa_r+0x818>
 8005672:	4603      	mov	r3, r0
 8005674:	e7f6      	b.n	8005664 <_dtoa_r+0x8e4>
 8005676:	9b07      	ldr	r3, [sp, #28]
 8005678:	9704      	str	r7, [sp, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	dc20      	bgt.n	80056c0 <_dtoa_r+0x940>
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005682:	2b02      	cmp	r3, #2
 8005684:	dd1e      	ble.n	80056c4 <_dtoa_r+0x944>
 8005686:	9b00      	ldr	r3, [sp, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f47f aec0 	bne.w	800540e <_dtoa_r+0x68e>
 800568e:	4621      	mov	r1, r4
 8005690:	2205      	movs	r2, #5
 8005692:	4658      	mov	r0, fp
 8005694:	f000 fa9a 	bl	8005bcc <__multadd>
 8005698:	4601      	mov	r1, r0
 800569a:	4604      	mov	r4, r0
 800569c:	4648      	mov	r0, r9
 800569e:	f000 fcad 	bl	8005ffc <__mcmp>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	f77f aeb3 	ble.w	800540e <_dtoa_r+0x68e>
 80056a8:	4656      	mov	r6, sl
 80056aa:	2331      	movs	r3, #49	@ 0x31
 80056ac:	f806 3b01 	strb.w	r3, [r6], #1
 80056b0:	9b04      	ldr	r3, [sp, #16]
 80056b2:	3301      	adds	r3, #1
 80056b4:	9304      	str	r3, [sp, #16]
 80056b6:	e6ae      	b.n	8005416 <_dtoa_r+0x696>
 80056b8:	9c07      	ldr	r4, [sp, #28]
 80056ba:	9704      	str	r7, [sp, #16]
 80056bc:	4625      	mov	r5, r4
 80056be:	e7f3      	b.n	80056a8 <_dtoa_r+0x928>
 80056c0:	9b07      	ldr	r3, [sp, #28]
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 8104 	beq.w	80058d4 <_dtoa_r+0xb54>
 80056cc:	2e00      	cmp	r6, #0
 80056ce:	dd05      	ble.n	80056dc <_dtoa_r+0x95c>
 80056d0:	4629      	mov	r1, r5
 80056d2:	4632      	mov	r2, r6
 80056d4:	4658      	mov	r0, fp
 80056d6:	f000 fc25 	bl	8005f24 <__lshift>
 80056da:	4605      	mov	r5, r0
 80056dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d05a      	beq.n	8005798 <_dtoa_r+0xa18>
 80056e2:	6869      	ldr	r1, [r5, #4]
 80056e4:	4658      	mov	r0, fp
 80056e6:	f000 fa0f 	bl	8005b08 <_Balloc>
 80056ea:	4606      	mov	r6, r0
 80056ec:	b928      	cbnz	r0, 80056fa <_dtoa_r+0x97a>
 80056ee:	4b84      	ldr	r3, [pc, #528]	@ (8005900 <_dtoa_r+0xb80>)
 80056f0:	4602      	mov	r2, r0
 80056f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80056f6:	f7ff bb5a 	b.w	8004dae <_dtoa_r+0x2e>
 80056fa:	692a      	ldr	r2, [r5, #16]
 80056fc:	3202      	adds	r2, #2
 80056fe:	0092      	lsls	r2, r2, #2
 8005700:	f105 010c 	add.w	r1, r5, #12
 8005704:	300c      	adds	r0, #12
 8005706:	f000 ffaf 	bl	8006668 <memcpy>
 800570a:	2201      	movs	r2, #1
 800570c:	4631      	mov	r1, r6
 800570e:	4658      	mov	r0, fp
 8005710:	f000 fc08 	bl	8005f24 <__lshift>
 8005714:	f10a 0301 	add.w	r3, sl, #1
 8005718:	9307      	str	r3, [sp, #28]
 800571a:	9b00      	ldr	r3, [sp, #0]
 800571c:	4453      	add	r3, sl
 800571e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005720:	9b02      	ldr	r3, [sp, #8]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	462f      	mov	r7, r5
 8005728:	930a      	str	r3, [sp, #40]	@ 0x28
 800572a:	4605      	mov	r5, r0
 800572c:	9b07      	ldr	r3, [sp, #28]
 800572e:	4621      	mov	r1, r4
 8005730:	3b01      	subs	r3, #1
 8005732:	4648      	mov	r0, r9
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	f7ff fa9a 	bl	8004c6e <quorem>
 800573a:	4639      	mov	r1, r7
 800573c:	9002      	str	r0, [sp, #8]
 800573e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005742:	4648      	mov	r0, r9
 8005744:	f000 fc5a 	bl	8005ffc <__mcmp>
 8005748:	462a      	mov	r2, r5
 800574a:	9008      	str	r0, [sp, #32]
 800574c:	4621      	mov	r1, r4
 800574e:	4658      	mov	r0, fp
 8005750:	f000 fc70 	bl	8006034 <__mdiff>
 8005754:	68c2      	ldr	r2, [r0, #12]
 8005756:	4606      	mov	r6, r0
 8005758:	bb02      	cbnz	r2, 800579c <_dtoa_r+0xa1c>
 800575a:	4601      	mov	r1, r0
 800575c:	4648      	mov	r0, r9
 800575e:	f000 fc4d 	bl	8005ffc <__mcmp>
 8005762:	4602      	mov	r2, r0
 8005764:	4631      	mov	r1, r6
 8005766:	4658      	mov	r0, fp
 8005768:	920e      	str	r2, [sp, #56]	@ 0x38
 800576a:	f000 fa0d 	bl	8005b88 <_Bfree>
 800576e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005770:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005772:	9e07      	ldr	r6, [sp, #28]
 8005774:	ea43 0102 	orr.w	r1, r3, r2
 8005778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800577a:	4319      	orrs	r1, r3
 800577c:	d110      	bne.n	80057a0 <_dtoa_r+0xa20>
 800577e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005782:	d029      	beq.n	80057d8 <_dtoa_r+0xa58>
 8005784:	9b08      	ldr	r3, [sp, #32]
 8005786:	2b00      	cmp	r3, #0
 8005788:	dd02      	ble.n	8005790 <_dtoa_r+0xa10>
 800578a:	9b02      	ldr	r3, [sp, #8]
 800578c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005790:	9b00      	ldr	r3, [sp, #0]
 8005792:	f883 8000 	strb.w	r8, [r3]
 8005796:	e63f      	b.n	8005418 <_dtoa_r+0x698>
 8005798:	4628      	mov	r0, r5
 800579a:	e7bb      	b.n	8005714 <_dtoa_r+0x994>
 800579c:	2201      	movs	r2, #1
 800579e:	e7e1      	b.n	8005764 <_dtoa_r+0x9e4>
 80057a0:	9b08      	ldr	r3, [sp, #32]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	db04      	blt.n	80057b0 <_dtoa_r+0xa30>
 80057a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80057a8:	430b      	orrs	r3, r1
 80057aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057ac:	430b      	orrs	r3, r1
 80057ae:	d120      	bne.n	80057f2 <_dtoa_r+0xa72>
 80057b0:	2a00      	cmp	r2, #0
 80057b2:	dded      	ble.n	8005790 <_dtoa_r+0xa10>
 80057b4:	4649      	mov	r1, r9
 80057b6:	2201      	movs	r2, #1
 80057b8:	4658      	mov	r0, fp
 80057ba:	f000 fbb3 	bl	8005f24 <__lshift>
 80057be:	4621      	mov	r1, r4
 80057c0:	4681      	mov	r9, r0
 80057c2:	f000 fc1b 	bl	8005ffc <__mcmp>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	dc03      	bgt.n	80057d2 <_dtoa_r+0xa52>
 80057ca:	d1e1      	bne.n	8005790 <_dtoa_r+0xa10>
 80057cc:	f018 0f01 	tst.w	r8, #1
 80057d0:	d0de      	beq.n	8005790 <_dtoa_r+0xa10>
 80057d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80057d6:	d1d8      	bne.n	800578a <_dtoa_r+0xa0a>
 80057d8:	9a00      	ldr	r2, [sp, #0]
 80057da:	2339      	movs	r3, #57	@ 0x39
 80057dc:	7013      	strb	r3, [r2, #0]
 80057de:	4633      	mov	r3, r6
 80057e0:	461e      	mov	r6, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80057e8:	2a39      	cmp	r2, #57	@ 0x39
 80057ea:	d052      	beq.n	8005892 <_dtoa_r+0xb12>
 80057ec:	3201      	adds	r2, #1
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	e612      	b.n	8005418 <_dtoa_r+0x698>
 80057f2:	2a00      	cmp	r2, #0
 80057f4:	dd07      	ble.n	8005806 <_dtoa_r+0xa86>
 80057f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80057fa:	d0ed      	beq.n	80057d8 <_dtoa_r+0xa58>
 80057fc:	9a00      	ldr	r2, [sp, #0]
 80057fe:	f108 0301 	add.w	r3, r8, #1
 8005802:	7013      	strb	r3, [r2, #0]
 8005804:	e608      	b.n	8005418 <_dtoa_r+0x698>
 8005806:	9b07      	ldr	r3, [sp, #28]
 8005808:	9a07      	ldr	r2, [sp, #28]
 800580a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800580e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005810:	4293      	cmp	r3, r2
 8005812:	d028      	beq.n	8005866 <_dtoa_r+0xae6>
 8005814:	4649      	mov	r1, r9
 8005816:	2300      	movs	r3, #0
 8005818:	220a      	movs	r2, #10
 800581a:	4658      	mov	r0, fp
 800581c:	f000 f9d6 	bl	8005bcc <__multadd>
 8005820:	42af      	cmp	r7, r5
 8005822:	4681      	mov	r9, r0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	f04f 020a 	mov.w	r2, #10
 800582c:	4639      	mov	r1, r7
 800582e:	4658      	mov	r0, fp
 8005830:	d107      	bne.n	8005842 <_dtoa_r+0xac2>
 8005832:	f000 f9cb 	bl	8005bcc <__multadd>
 8005836:	4607      	mov	r7, r0
 8005838:	4605      	mov	r5, r0
 800583a:	9b07      	ldr	r3, [sp, #28]
 800583c:	3301      	adds	r3, #1
 800583e:	9307      	str	r3, [sp, #28]
 8005840:	e774      	b.n	800572c <_dtoa_r+0x9ac>
 8005842:	f000 f9c3 	bl	8005bcc <__multadd>
 8005846:	4629      	mov	r1, r5
 8005848:	4607      	mov	r7, r0
 800584a:	2300      	movs	r3, #0
 800584c:	220a      	movs	r2, #10
 800584e:	4658      	mov	r0, fp
 8005850:	f000 f9bc 	bl	8005bcc <__multadd>
 8005854:	4605      	mov	r5, r0
 8005856:	e7f0      	b.n	800583a <_dtoa_r+0xaba>
 8005858:	9b00      	ldr	r3, [sp, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	bfcc      	ite	gt
 800585e:	461e      	movgt	r6, r3
 8005860:	2601      	movle	r6, #1
 8005862:	4456      	add	r6, sl
 8005864:	2700      	movs	r7, #0
 8005866:	4649      	mov	r1, r9
 8005868:	2201      	movs	r2, #1
 800586a:	4658      	mov	r0, fp
 800586c:	f000 fb5a 	bl	8005f24 <__lshift>
 8005870:	4621      	mov	r1, r4
 8005872:	4681      	mov	r9, r0
 8005874:	f000 fbc2 	bl	8005ffc <__mcmp>
 8005878:	2800      	cmp	r0, #0
 800587a:	dcb0      	bgt.n	80057de <_dtoa_r+0xa5e>
 800587c:	d102      	bne.n	8005884 <_dtoa_r+0xb04>
 800587e:	f018 0f01 	tst.w	r8, #1
 8005882:	d1ac      	bne.n	80057de <_dtoa_r+0xa5e>
 8005884:	4633      	mov	r3, r6
 8005886:	461e      	mov	r6, r3
 8005888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800588c:	2a30      	cmp	r2, #48	@ 0x30
 800588e:	d0fa      	beq.n	8005886 <_dtoa_r+0xb06>
 8005890:	e5c2      	b.n	8005418 <_dtoa_r+0x698>
 8005892:	459a      	cmp	sl, r3
 8005894:	d1a4      	bne.n	80057e0 <_dtoa_r+0xa60>
 8005896:	9b04      	ldr	r3, [sp, #16]
 8005898:	3301      	adds	r3, #1
 800589a:	9304      	str	r3, [sp, #16]
 800589c:	2331      	movs	r3, #49	@ 0x31
 800589e:	f88a 3000 	strb.w	r3, [sl]
 80058a2:	e5b9      	b.n	8005418 <_dtoa_r+0x698>
 80058a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80058a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005904 <_dtoa_r+0xb84>
 80058aa:	b11b      	cbz	r3, 80058b4 <_dtoa_r+0xb34>
 80058ac:	f10a 0308 	add.w	r3, sl, #8
 80058b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	4650      	mov	r0, sl
 80058b6:	b019      	add	sp, #100	@ 0x64
 80058b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058be:	2b01      	cmp	r3, #1
 80058c0:	f77f ae37 	ble.w	8005532 <_dtoa_r+0x7b2>
 80058c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80058c8:	2001      	movs	r0, #1
 80058ca:	e655      	b.n	8005578 <_dtoa_r+0x7f8>
 80058cc:	9b00      	ldr	r3, [sp, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f77f aed6 	ble.w	8005680 <_dtoa_r+0x900>
 80058d4:	4656      	mov	r6, sl
 80058d6:	4621      	mov	r1, r4
 80058d8:	4648      	mov	r0, r9
 80058da:	f7ff f9c8 	bl	8004c6e <quorem>
 80058de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80058e2:	f806 8b01 	strb.w	r8, [r6], #1
 80058e6:	9b00      	ldr	r3, [sp, #0]
 80058e8:	eba6 020a 	sub.w	r2, r6, sl
 80058ec:	4293      	cmp	r3, r2
 80058ee:	ddb3      	ble.n	8005858 <_dtoa_r+0xad8>
 80058f0:	4649      	mov	r1, r9
 80058f2:	2300      	movs	r3, #0
 80058f4:	220a      	movs	r2, #10
 80058f6:	4658      	mov	r0, fp
 80058f8:	f000 f968 	bl	8005bcc <__multadd>
 80058fc:	4681      	mov	r9, r0
 80058fe:	e7ea      	b.n	80058d6 <_dtoa_r+0xb56>
 8005900:	08006e34 	.word	0x08006e34
 8005904:	08006db8 	.word	0x08006db8

08005908 <_free_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4605      	mov	r5, r0
 800590c:	2900      	cmp	r1, #0
 800590e:	d041      	beq.n	8005994 <_free_r+0x8c>
 8005910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005914:	1f0c      	subs	r4, r1, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	bfb8      	it	lt
 800591a:	18e4      	addlt	r4, r4, r3
 800591c:	f000 f8e8 	bl	8005af0 <__malloc_lock>
 8005920:	4a1d      	ldr	r2, [pc, #116]	@ (8005998 <_free_r+0x90>)
 8005922:	6813      	ldr	r3, [r2, #0]
 8005924:	b933      	cbnz	r3, 8005934 <_free_r+0x2c>
 8005926:	6063      	str	r3, [r4, #4]
 8005928:	6014      	str	r4, [r2, #0]
 800592a:	4628      	mov	r0, r5
 800592c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005930:	f000 b8e4 	b.w	8005afc <__malloc_unlock>
 8005934:	42a3      	cmp	r3, r4
 8005936:	d908      	bls.n	800594a <_free_r+0x42>
 8005938:	6820      	ldr	r0, [r4, #0]
 800593a:	1821      	adds	r1, r4, r0
 800593c:	428b      	cmp	r3, r1
 800593e:	bf01      	itttt	eq
 8005940:	6819      	ldreq	r1, [r3, #0]
 8005942:	685b      	ldreq	r3, [r3, #4]
 8005944:	1809      	addeq	r1, r1, r0
 8005946:	6021      	streq	r1, [r4, #0]
 8005948:	e7ed      	b.n	8005926 <_free_r+0x1e>
 800594a:	461a      	mov	r2, r3
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	b10b      	cbz	r3, 8005954 <_free_r+0x4c>
 8005950:	42a3      	cmp	r3, r4
 8005952:	d9fa      	bls.n	800594a <_free_r+0x42>
 8005954:	6811      	ldr	r1, [r2, #0]
 8005956:	1850      	adds	r0, r2, r1
 8005958:	42a0      	cmp	r0, r4
 800595a:	d10b      	bne.n	8005974 <_free_r+0x6c>
 800595c:	6820      	ldr	r0, [r4, #0]
 800595e:	4401      	add	r1, r0
 8005960:	1850      	adds	r0, r2, r1
 8005962:	4283      	cmp	r3, r0
 8005964:	6011      	str	r1, [r2, #0]
 8005966:	d1e0      	bne.n	800592a <_free_r+0x22>
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	6053      	str	r3, [r2, #4]
 800596e:	4408      	add	r0, r1
 8005970:	6010      	str	r0, [r2, #0]
 8005972:	e7da      	b.n	800592a <_free_r+0x22>
 8005974:	d902      	bls.n	800597c <_free_r+0x74>
 8005976:	230c      	movs	r3, #12
 8005978:	602b      	str	r3, [r5, #0]
 800597a:	e7d6      	b.n	800592a <_free_r+0x22>
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	1821      	adds	r1, r4, r0
 8005980:	428b      	cmp	r3, r1
 8005982:	bf04      	itt	eq
 8005984:	6819      	ldreq	r1, [r3, #0]
 8005986:	685b      	ldreq	r3, [r3, #4]
 8005988:	6063      	str	r3, [r4, #4]
 800598a:	bf04      	itt	eq
 800598c:	1809      	addeq	r1, r1, r0
 800598e:	6021      	streq	r1, [r4, #0]
 8005990:	6054      	str	r4, [r2, #4]
 8005992:	e7ca      	b.n	800592a <_free_r+0x22>
 8005994:	bd38      	pop	{r3, r4, r5, pc}
 8005996:	bf00      	nop
 8005998:	200003dc 	.word	0x200003dc

0800599c <malloc>:
 800599c:	4b02      	ldr	r3, [pc, #8]	@ (80059a8 <malloc+0xc>)
 800599e:	4601      	mov	r1, r0
 80059a0:	6818      	ldr	r0, [r3, #0]
 80059a2:	f000 b825 	b.w	80059f0 <_malloc_r>
 80059a6:	bf00      	nop
 80059a8:	20000018 	.word	0x20000018

080059ac <sbrk_aligned>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	4e0f      	ldr	r6, [pc, #60]	@ (80059ec <sbrk_aligned+0x40>)
 80059b0:	460c      	mov	r4, r1
 80059b2:	6831      	ldr	r1, [r6, #0]
 80059b4:	4605      	mov	r5, r0
 80059b6:	b911      	cbnz	r1, 80059be <sbrk_aligned+0x12>
 80059b8:	f000 fe46 	bl	8006648 <_sbrk_r>
 80059bc:	6030      	str	r0, [r6, #0]
 80059be:	4621      	mov	r1, r4
 80059c0:	4628      	mov	r0, r5
 80059c2:	f000 fe41 	bl	8006648 <_sbrk_r>
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	d103      	bne.n	80059d2 <sbrk_aligned+0x26>
 80059ca:	f04f 34ff 	mov.w	r4, #4294967295
 80059ce:	4620      	mov	r0, r4
 80059d0:	bd70      	pop	{r4, r5, r6, pc}
 80059d2:	1cc4      	adds	r4, r0, #3
 80059d4:	f024 0403 	bic.w	r4, r4, #3
 80059d8:	42a0      	cmp	r0, r4
 80059da:	d0f8      	beq.n	80059ce <sbrk_aligned+0x22>
 80059dc:	1a21      	subs	r1, r4, r0
 80059de:	4628      	mov	r0, r5
 80059e0:	f000 fe32 	bl	8006648 <_sbrk_r>
 80059e4:	3001      	adds	r0, #1
 80059e6:	d1f2      	bne.n	80059ce <sbrk_aligned+0x22>
 80059e8:	e7ef      	b.n	80059ca <sbrk_aligned+0x1e>
 80059ea:	bf00      	nop
 80059ec:	200003d8 	.word	0x200003d8

080059f0 <_malloc_r>:
 80059f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059f4:	1ccd      	adds	r5, r1, #3
 80059f6:	f025 0503 	bic.w	r5, r5, #3
 80059fa:	3508      	adds	r5, #8
 80059fc:	2d0c      	cmp	r5, #12
 80059fe:	bf38      	it	cc
 8005a00:	250c      	movcc	r5, #12
 8005a02:	2d00      	cmp	r5, #0
 8005a04:	4606      	mov	r6, r0
 8005a06:	db01      	blt.n	8005a0c <_malloc_r+0x1c>
 8005a08:	42a9      	cmp	r1, r5
 8005a0a:	d904      	bls.n	8005a16 <_malloc_r+0x26>
 8005a0c:	230c      	movs	r3, #12
 8005a0e:	6033      	str	r3, [r6, #0]
 8005a10:	2000      	movs	r0, #0
 8005a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005aec <_malloc_r+0xfc>
 8005a1a:	f000 f869 	bl	8005af0 <__malloc_lock>
 8005a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8005a22:	461c      	mov	r4, r3
 8005a24:	bb44      	cbnz	r4, 8005a78 <_malloc_r+0x88>
 8005a26:	4629      	mov	r1, r5
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f7ff ffbf 	bl	80059ac <sbrk_aligned>
 8005a2e:	1c43      	adds	r3, r0, #1
 8005a30:	4604      	mov	r4, r0
 8005a32:	d158      	bne.n	8005ae6 <_malloc_r+0xf6>
 8005a34:	f8d8 4000 	ldr.w	r4, [r8]
 8005a38:	4627      	mov	r7, r4
 8005a3a:	2f00      	cmp	r7, #0
 8005a3c:	d143      	bne.n	8005ac6 <_malloc_r+0xd6>
 8005a3e:	2c00      	cmp	r4, #0
 8005a40:	d04b      	beq.n	8005ada <_malloc_r+0xea>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	4639      	mov	r1, r7
 8005a46:	4630      	mov	r0, r6
 8005a48:	eb04 0903 	add.w	r9, r4, r3
 8005a4c:	f000 fdfc 	bl	8006648 <_sbrk_r>
 8005a50:	4581      	cmp	r9, r0
 8005a52:	d142      	bne.n	8005ada <_malloc_r+0xea>
 8005a54:	6821      	ldr	r1, [r4, #0]
 8005a56:	1a6d      	subs	r5, r5, r1
 8005a58:	4629      	mov	r1, r5
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f7ff ffa6 	bl	80059ac <sbrk_aligned>
 8005a60:	3001      	adds	r0, #1
 8005a62:	d03a      	beq.n	8005ada <_malloc_r+0xea>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	442b      	add	r3, r5
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	bb62      	cbnz	r2, 8005acc <_malloc_r+0xdc>
 8005a72:	f8c8 7000 	str.w	r7, [r8]
 8005a76:	e00f      	b.n	8005a98 <_malloc_r+0xa8>
 8005a78:	6822      	ldr	r2, [r4, #0]
 8005a7a:	1b52      	subs	r2, r2, r5
 8005a7c:	d420      	bmi.n	8005ac0 <_malloc_r+0xd0>
 8005a7e:	2a0b      	cmp	r2, #11
 8005a80:	d917      	bls.n	8005ab2 <_malloc_r+0xc2>
 8005a82:	1961      	adds	r1, r4, r5
 8005a84:	42a3      	cmp	r3, r4
 8005a86:	6025      	str	r5, [r4, #0]
 8005a88:	bf18      	it	ne
 8005a8a:	6059      	strne	r1, [r3, #4]
 8005a8c:	6863      	ldr	r3, [r4, #4]
 8005a8e:	bf08      	it	eq
 8005a90:	f8c8 1000 	streq.w	r1, [r8]
 8005a94:	5162      	str	r2, [r4, r5]
 8005a96:	604b      	str	r3, [r1, #4]
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f000 f82f 	bl	8005afc <__malloc_unlock>
 8005a9e:	f104 000b 	add.w	r0, r4, #11
 8005aa2:	1d23      	adds	r3, r4, #4
 8005aa4:	f020 0007 	bic.w	r0, r0, #7
 8005aa8:	1ac2      	subs	r2, r0, r3
 8005aaa:	bf1c      	itt	ne
 8005aac:	1a1b      	subne	r3, r3, r0
 8005aae:	50a3      	strne	r3, [r4, r2]
 8005ab0:	e7af      	b.n	8005a12 <_malloc_r+0x22>
 8005ab2:	6862      	ldr	r2, [r4, #4]
 8005ab4:	42a3      	cmp	r3, r4
 8005ab6:	bf0c      	ite	eq
 8005ab8:	f8c8 2000 	streq.w	r2, [r8]
 8005abc:	605a      	strne	r2, [r3, #4]
 8005abe:	e7eb      	b.n	8005a98 <_malloc_r+0xa8>
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	6864      	ldr	r4, [r4, #4]
 8005ac4:	e7ae      	b.n	8005a24 <_malloc_r+0x34>
 8005ac6:	463c      	mov	r4, r7
 8005ac8:	687f      	ldr	r7, [r7, #4]
 8005aca:	e7b6      	b.n	8005a3a <_malloc_r+0x4a>
 8005acc:	461a      	mov	r2, r3
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	42a3      	cmp	r3, r4
 8005ad2:	d1fb      	bne.n	8005acc <_malloc_r+0xdc>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	6053      	str	r3, [r2, #4]
 8005ad8:	e7de      	b.n	8005a98 <_malloc_r+0xa8>
 8005ada:	230c      	movs	r3, #12
 8005adc:	6033      	str	r3, [r6, #0]
 8005ade:	4630      	mov	r0, r6
 8005ae0:	f000 f80c 	bl	8005afc <__malloc_unlock>
 8005ae4:	e794      	b.n	8005a10 <_malloc_r+0x20>
 8005ae6:	6005      	str	r5, [r0, #0]
 8005ae8:	e7d6      	b.n	8005a98 <_malloc_r+0xa8>
 8005aea:	bf00      	nop
 8005aec:	200003dc 	.word	0x200003dc

08005af0 <__malloc_lock>:
 8005af0:	4801      	ldr	r0, [pc, #4]	@ (8005af8 <__malloc_lock+0x8>)
 8005af2:	f7ff b8ba 	b.w	8004c6a <__retarget_lock_acquire_recursive>
 8005af6:	bf00      	nop
 8005af8:	200003d4 	.word	0x200003d4

08005afc <__malloc_unlock>:
 8005afc:	4801      	ldr	r0, [pc, #4]	@ (8005b04 <__malloc_unlock+0x8>)
 8005afe:	f7ff b8b5 	b.w	8004c6c <__retarget_lock_release_recursive>
 8005b02:	bf00      	nop
 8005b04:	200003d4 	.word	0x200003d4

08005b08 <_Balloc>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	69c6      	ldr	r6, [r0, #28]
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	460d      	mov	r5, r1
 8005b10:	b976      	cbnz	r6, 8005b30 <_Balloc+0x28>
 8005b12:	2010      	movs	r0, #16
 8005b14:	f7ff ff42 	bl	800599c <malloc>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	61e0      	str	r0, [r4, #28]
 8005b1c:	b920      	cbnz	r0, 8005b28 <_Balloc+0x20>
 8005b1e:	4b18      	ldr	r3, [pc, #96]	@ (8005b80 <_Balloc+0x78>)
 8005b20:	4818      	ldr	r0, [pc, #96]	@ (8005b84 <_Balloc+0x7c>)
 8005b22:	216b      	movs	r1, #107	@ 0x6b
 8005b24:	f000 fdae 	bl	8006684 <__assert_func>
 8005b28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b2c:	6006      	str	r6, [r0, #0]
 8005b2e:	60c6      	str	r6, [r0, #12]
 8005b30:	69e6      	ldr	r6, [r4, #28]
 8005b32:	68f3      	ldr	r3, [r6, #12]
 8005b34:	b183      	cbz	r3, 8005b58 <_Balloc+0x50>
 8005b36:	69e3      	ldr	r3, [r4, #28]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b3e:	b9b8      	cbnz	r0, 8005b70 <_Balloc+0x68>
 8005b40:	2101      	movs	r1, #1
 8005b42:	fa01 f605 	lsl.w	r6, r1, r5
 8005b46:	1d72      	adds	r2, r6, #5
 8005b48:	0092      	lsls	r2, r2, #2
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f000 fdb8 	bl	80066c0 <_calloc_r>
 8005b50:	b160      	cbz	r0, 8005b6c <_Balloc+0x64>
 8005b52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b56:	e00e      	b.n	8005b76 <_Balloc+0x6e>
 8005b58:	2221      	movs	r2, #33	@ 0x21
 8005b5a:	2104      	movs	r1, #4
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 fdaf 	bl	80066c0 <_calloc_r>
 8005b62:	69e3      	ldr	r3, [r4, #28]
 8005b64:	60f0      	str	r0, [r6, #12]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e4      	bne.n	8005b36 <_Balloc+0x2e>
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	6802      	ldr	r2, [r0, #0]
 8005b72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b76:	2300      	movs	r3, #0
 8005b78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b7c:	e7f7      	b.n	8005b6e <_Balloc+0x66>
 8005b7e:	bf00      	nop
 8005b80:	08006dc5 	.word	0x08006dc5
 8005b84:	08006e45 	.word	0x08006e45

08005b88 <_Bfree>:
 8005b88:	b570      	push	{r4, r5, r6, lr}
 8005b8a:	69c6      	ldr	r6, [r0, #28]
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	460c      	mov	r4, r1
 8005b90:	b976      	cbnz	r6, 8005bb0 <_Bfree+0x28>
 8005b92:	2010      	movs	r0, #16
 8005b94:	f7ff ff02 	bl	800599c <malloc>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	61e8      	str	r0, [r5, #28]
 8005b9c:	b920      	cbnz	r0, 8005ba8 <_Bfree+0x20>
 8005b9e:	4b09      	ldr	r3, [pc, #36]	@ (8005bc4 <_Bfree+0x3c>)
 8005ba0:	4809      	ldr	r0, [pc, #36]	@ (8005bc8 <_Bfree+0x40>)
 8005ba2:	218f      	movs	r1, #143	@ 0x8f
 8005ba4:	f000 fd6e 	bl	8006684 <__assert_func>
 8005ba8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bac:	6006      	str	r6, [r0, #0]
 8005bae:	60c6      	str	r6, [r0, #12]
 8005bb0:	b13c      	cbz	r4, 8005bc2 <_Bfree+0x3a>
 8005bb2:	69eb      	ldr	r3, [r5, #28]
 8005bb4:	6862      	ldr	r2, [r4, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bbc:	6021      	str	r1, [r4, #0]
 8005bbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005bc2:	bd70      	pop	{r4, r5, r6, pc}
 8005bc4:	08006dc5 	.word	0x08006dc5
 8005bc8:	08006e45 	.word	0x08006e45

08005bcc <__multadd>:
 8005bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd0:	690d      	ldr	r5, [r1, #16]
 8005bd2:	4607      	mov	r7, r0
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	461e      	mov	r6, r3
 8005bd8:	f101 0c14 	add.w	ip, r1, #20
 8005bdc:	2000      	movs	r0, #0
 8005bde:	f8dc 3000 	ldr.w	r3, [ip]
 8005be2:	b299      	uxth	r1, r3
 8005be4:	fb02 6101 	mla	r1, r2, r1, r6
 8005be8:	0c1e      	lsrs	r6, r3, #16
 8005bea:	0c0b      	lsrs	r3, r1, #16
 8005bec:	fb02 3306 	mla	r3, r2, r6, r3
 8005bf0:	b289      	uxth	r1, r1
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005bf8:	4285      	cmp	r5, r0
 8005bfa:	f84c 1b04 	str.w	r1, [ip], #4
 8005bfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c02:	dcec      	bgt.n	8005bde <__multadd+0x12>
 8005c04:	b30e      	cbz	r6, 8005c4a <__multadd+0x7e>
 8005c06:	68a3      	ldr	r3, [r4, #8]
 8005c08:	42ab      	cmp	r3, r5
 8005c0a:	dc19      	bgt.n	8005c40 <__multadd+0x74>
 8005c0c:	6861      	ldr	r1, [r4, #4]
 8005c0e:	4638      	mov	r0, r7
 8005c10:	3101      	adds	r1, #1
 8005c12:	f7ff ff79 	bl	8005b08 <_Balloc>
 8005c16:	4680      	mov	r8, r0
 8005c18:	b928      	cbnz	r0, 8005c26 <__multadd+0x5a>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c50 <__multadd+0x84>)
 8005c1e:	480d      	ldr	r0, [pc, #52]	@ (8005c54 <__multadd+0x88>)
 8005c20:	21ba      	movs	r1, #186	@ 0xba
 8005c22:	f000 fd2f 	bl	8006684 <__assert_func>
 8005c26:	6922      	ldr	r2, [r4, #16]
 8005c28:	3202      	adds	r2, #2
 8005c2a:	f104 010c 	add.w	r1, r4, #12
 8005c2e:	0092      	lsls	r2, r2, #2
 8005c30:	300c      	adds	r0, #12
 8005c32:	f000 fd19 	bl	8006668 <memcpy>
 8005c36:	4621      	mov	r1, r4
 8005c38:	4638      	mov	r0, r7
 8005c3a:	f7ff ffa5 	bl	8005b88 <_Bfree>
 8005c3e:	4644      	mov	r4, r8
 8005c40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c44:	3501      	adds	r5, #1
 8005c46:	615e      	str	r6, [r3, #20]
 8005c48:	6125      	str	r5, [r4, #16]
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c50:	08006e34 	.word	0x08006e34
 8005c54:	08006e45 	.word	0x08006e45

08005c58 <__hi0bits>:
 8005c58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	bf36      	itet	cc
 8005c60:	0403      	lslcc	r3, r0, #16
 8005c62:	2000      	movcs	r0, #0
 8005c64:	2010      	movcc	r0, #16
 8005c66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c6a:	bf3c      	itt	cc
 8005c6c:	021b      	lslcc	r3, r3, #8
 8005c6e:	3008      	addcc	r0, #8
 8005c70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c74:	bf3c      	itt	cc
 8005c76:	011b      	lslcc	r3, r3, #4
 8005c78:	3004      	addcc	r0, #4
 8005c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c7e:	bf3c      	itt	cc
 8005c80:	009b      	lslcc	r3, r3, #2
 8005c82:	3002      	addcc	r0, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	db05      	blt.n	8005c94 <__hi0bits+0x3c>
 8005c88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005c8c:	f100 0001 	add.w	r0, r0, #1
 8005c90:	bf08      	it	eq
 8005c92:	2020      	moveq	r0, #32
 8005c94:	4770      	bx	lr

08005c96 <__lo0bits>:
 8005c96:	6803      	ldr	r3, [r0, #0]
 8005c98:	4602      	mov	r2, r0
 8005c9a:	f013 0007 	ands.w	r0, r3, #7
 8005c9e:	d00b      	beq.n	8005cb8 <__lo0bits+0x22>
 8005ca0:	07d9      	lsls	r1, r3, #31
 8005ca2:	d421      	bmi.n	8005ce8 <__lo0bits+0x52>
 8005ca4:	0798      	lsls	r0, r3, #30
 8005ca6:	bf49      	itett	mi
 8005ca8:	085b      	lsrmi	r3, r3, #1
 8005caa:	089b      	lsrpl	r3, r3, #2
 8005cac:	2001      	movmi	r0, #1
 8005cae:	6013      	strmi	r3, [r2, #0]
 8005cb0:	bf5c      	itt	pl
 8005cb2:	6013      	strpl	r3, [r2, #0]
 8005cb4:	2002      	movpl	r0, #2
 8005cb6:	4770      	bx	lr
 8005cb8:	b299      	uxth	r1, r3
 8005cba:	b909      	cbnz	r1, 8005cc0 <__lo0bits+0x2a>
 8005cbc:	0c1b      	lsrs	r3, r3, #16
 8005cbe:	2010      	movs	r0, #16
 8005cc0:	b2d9      	uxtb	r1, r3
 8005cc2:	b909      	cbnz	r1, 8005cc8 <__lo0bits+0x32>
 8005cc4:	3008      	adds	r0, #8
 8005cc6:	0a1b      	lsrs	r3, r3, #8
 8005cc8:	0719      	lsls	r1, r3, #28
 8005cca:	bf04      	itt	eq
 8005ccc:	091b      	lsreq	r3, r3, #4
 8005cce:	3004      	addeq	r0, #4
 8005cd0:	0799      	lsls	r1, r3, #30
 8005cd2:	bf04      	itt	eq
 8005cd4:	089b      	lsreq	r3, r3, #2
 8005cd6:	3002      	addeq	r0, #2
 8005cd8:	07d9      	lsls	r1, r3, #31
 8005cda:	d403      	bmi.n	8005ce4 <__lo0bits+0x4e>
 8005cdc:	085b      	lsrs	r3, r3, #1
 8005cde:	f100 0001 	add.w	r0, r0, #1
 8005ce2:	d003      	beq.n	8005cec <__lo0bits+0x56>
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	4770      	bx	lr
 8005ce8:	2000      	movs	r0, #0
 8005cea:	4770      	bx	lr
 8005cec:	2020      	movs	r0, #32
 8005cee:	4770      	bx	lr

08005cf0 <__i2b>:
 8005cf0:	b510      	push	{r4, lr}
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	f7ff ff07 	bl	8005b08 <_Balloc>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	b928      	cbnz	r0, 8005d0a <__i2b+0x1a>
 8005cfe:	4b05      	ldr	r3, [pc, #20]	@ (8005d14 <__i2b+0x24>)
 8005d00:	4805      	ldr	r0, [pc, #20]	@ (8005d18 <__i2b+0x28>)
 8005d02:	f240 1145 	movw	r1, #325	@ 0x145
 8005d06:	f000 fcbd 	bl	8006684 <__assert_func>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	6144      	str	r4, [r0, #20]
 8005d0e:	6103      	str	r3, [r0, #16]
 8005d10:	bd10      	pop	{r4, pc}
 8005d12:	bf00      	nop
 8005d14:	08006e34 	.word	0x08006e34
 8005d18:	08006e45 	.word	0x08006e45

08005d1c <__multiply>:
 8005d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d20:	4614      	mov	r4, r2
 8005d22:	690a      	ldr	r2, [r1, #16]
 8005d24:	6923      	ldr	r3, [r4, #16]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	bfa8      	it	ge
 8005d2a:	4623      	movge	r3, r4
 8005d2c:	460f      	mov	r7, r1
 8005d2e:	bfa4      	itt	ge
 8005d30:	460c      	movge	r4, r1
 8005d32:	461f      	movge	r7, r3
 8005d34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005d38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005d3c:	68a3      	ldr	r3, [r4, #8]
 8005d3e:	6861      	ldr	r1, [r4, #4]
 8005d40:	eb0a 0609 	add.w	r6, sl, r9
 8005d44:	42b3      	cmp	r3, r6
 8005d46:	b085      	sub	sp, #20
 8005d48:	bfb8      	it	lt
 8005d4a:	3101      	addlt	r1, #1
 8005d4c:	f7ff fedc 	bl	8005b08 <_Balloc>
 8005d50:	b930      	cbnz	r0, 8005d60 <__multiply+0x44>
 8005d52:	4602      	mov	r2, r0
 8005d54:	4b44      	ldr	r3, [pc, #272]	@ (8005e68 <__multiply+0x14c>)
 8005d56:	4845      	ldr	r0, [pc, #276]	@ (8005e6c <__multiply+0x150>)
 8005d58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005d5c:	f000 fc92 	bl	8006684 <__assert_func>
 8005d60:	f100 0514 	add.w	r5, r0, #20
 8005d64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d68:	462b      	mov	r3, r5
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	4543      	cmp	r3, r8
 8005d6e:	d321      	bcc.n	8005db4 <__multiply+0x98>
 8005d70:	f107 0114 	add.w	r1, r7, #20
 8005d74:	f104 0214 	add.w	r2, r4, #20
 8005d78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005d7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005d80:	9302      	str	r3, [sp, #8]
 8005d82:	1b13      	subs	r3, r2, r4
 8005d84:	3b15      	subs	r3, #21
 8005d86:	f023 0303 	bic.w	r3, r3, #3
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	f104 0715 	add.w	r7, r4, #21
 8005d90:	42ba      	cmp	r2, r7
 8005d92:	bf38      	it	cc
 8005d94:	2304      	movcc	r3, #4
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	9b02      	ldr	r3, [sp, #8]
 8005d9a:	9103      	str	r1, [sp, #12]
 8005d9c:	428b      	cmp	r3, r1
 8005d9e:	d80c      	bhi.n	8005dba <__multiply+0x9e>
 8005da0:	2e00      	cmp	r6, #0
 8005da2:	dd03      	ble.n	8005dac <__multiply+0x90>
 8005da4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d05b      	beq.n	8005e64 <__multiply+0x148>
 8005dac:	6106      	str	r6, [r0, #16]
 8005dae:	b005      	add	sp, #20
 8005db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db4:	f843 2b04 	str.w	r2, [r3], #4
 8005db8:	e7d8      	b.n	8005d6c <__multiply+0x50>
 8005dba:	f8b1 a000 	ldrh.w	sl, [r1]
 8005dbe:	f1ba 0f00 	cmp.w	sl, #0
 8005dc2:	d024      	beq.n	8005e0e <__multiply+0xf2>
 8005dc4:	f104 0e14 	add.w	lr, r4, #20
 8005dc8:	46a9      	mov	r9, r5
 8005dca:	f04f 0c00 	mov.w	ip, #0
 8005dce:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005dd2:	f8d9 3000 	ldr.w	r3, [r9]
 8005dd6:	fa1f fb87 	uxth.w	fp, r7
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	fb0a 330b 	mla	r3, sl, fp, r3
 8005de0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005de4:	f8d9 7000 	ldr.w	r7, [r9]
 8005de8:	4463      	add	r3, ip
 8005dea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005dee:	fb0a c70b 	mla	r7, sl, fp, ip
 8005df2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005dfc:	4572      	cmp	r2, lr
 8005dfe:	f849 3b04 	str.w	r3, [r9], #4
 8005e02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005e06:	d8e2      	bhi.n	8005dce <__multiply+0xb2>
 8005e08:	9b01      	ldr	r3, [sp, #4]
 8005e0a:	f845 c003 	str.w	ip, [r5, r3]
 8005e0e:	9b03      	ldr	r3, [sp, #12]
 8005e10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005e14:	3104      	adds	r1, #4
 8005e16:	f1b9 0f00 	cmp.w	r9, #0
 8005e1a:	d021      	beq.n	8005e60 <__multiply+0x144>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	f104 0c14 	add.w	ip, r4, #20
 8005e22:	46ae      	mov	lr, r5
 8005e24:	f04f 0a00 	mov.w	sl, #0
 8005e28:	f8bc b000 	ldrh.w	fp, [ip]
 8005e2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005e30:	fb09 770b 	mla	r7, r9, fp, r7
 8005e34:	4457      	add	r7, sl
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005e3c:	f84e 3b04 	str.w	r3, [lr], #4
 8005e40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e48:	f8be 3000 	ldrh.w	r3, [lr]
 8005e4c:	fb09 330a 	mla	r3, r9, sl, r3
 8005e50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005e54:	4562      	cmp	r2, ip
 8005e56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e5a:	d8e5      	bhi.n	8005e28 <__multiply+0x10c>
 8005e5c:	9f01      	ldr	r7, [sp, #4]
 8005e5e:	51eb      	str	r3, [r5, r7]
 8005e60:	3504      	adds	r5, #4
 8005e62:	e799      	b.n	8005d98 <__multiply+0x7c>
 8005e64:	3e01      	subs	r6, #1
 8005e66:	e79b      	b.n	8005da0 <__multiply+0x84>
 8005e68:	08006e34 	.word	0x08006e34
 8005e6c:	08006e45 	.word	0x08006e45

08005e70 <__pow5mult>:
 8005e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e74:	4615      	mov	r5, r2
 8005e76:	f012 0203 	ands.w	r2, r2, #3
 8005e7a:	4607      	mov	r7, r0
 8005e7c:	460e      	mov	r6, r1
 8005e7e:	d007      	beq.n	8005e90 <__pow5mult+0x20>
 8005e80:	4c25      	ldr	r4, [pc, #148]	@ (8005f18 <__pow5mult+0xa8>)
 8005e82:	3a01      	subs	r2, #1
 8005e84:	2300      	movs	r3, #0
 8005e86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e8a:	f7ff fe9f 	bl	8005bcc <__multadd>
 8005e8e:	4606      	mov	r6, r0
 8005e90:	10ad      	asrs	r5, r5, #2
 8005e92:	d03d      	beq.n	8005f10 <__pow5mult+0xa0>
 8005e94:	69fc      	ldr	r4, [r7, #28]
 8005e96:	b97c      	cbnz	r4, 8005eb8 <__pow5mult+0x48>
 8005e98:	2010      	movs	r0, #16
 8005e9a:	f7ff fd7f 	bl	800599c <malloc>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	61f8      	str	r0, [r7, #28]
 8005ea2:	b928      	cbnz	r0, 8005eb0 <__pow5mult+0x40>
 8005ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8005f1c <__pow5mult+0xac>)
 8005ea6:	481e      	ldr	r0, [pc, #120]	@ (8005f20 <__pow5mult+0xb0>)
 8005ea8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005eac:	f000 fbea 	bl	8006684 <__assert_func>
 8005eb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005eb4:	6004      	str	r4, [r0, #0]
 8005eb6:	60c4      	str	r4, [r0, #12]
 8005eb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005ebc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ec0:	b94c      	cbnz	r4, 8005ed6 <__pow5mult+0x66>
 8005ec2:	f240 2171 	movw	r1, #625	@ 0x271
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	f7ff ff12 	bl	8005cf0 <__i2b>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	6003      	str	r3, [r0, #0]
 8005ed6:	f04f 0900 	mov.w	r9, #0
 8005eda:	07eb      	lsls	r3, r5, #31
 8005edc:	d50a      	bpl.n	8005ef4 <__pow5mult+0x84>
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	f7ff ff1a 	bl	8005d1c <__multiply>
 8005ee8:	4631      	mov	r1, r6
 8005eea:	4680      	mov	r8, r0
 8005eec:	4638      	mov	r0, r7
 8005eee:	f7ff fe4b 	bl	8005b88 <_Bfree>
 8005ef2:	4646      	mov	r6, r8
 8005ef4:	106d      	asrs	r5, r5, #1
 8005ef6:	d00b      	beq.n	8005f10 <__pow5mult+0xa0>
 8005ef8:	6820      	ldr	r0, [r4, #0]
 8005efa:	b938      	cbnz	r0, 8005f0c <__pow5mult+0x9c>
 8005efc:	4622      	mov	r2, r4
 8005efe:	4621      	mov	r1, r4
 8005f00:	4638      	mov	r0, r7
 8005f02:	f7ff ff0b 	bl	8005d1c <__multiply>
 8005f06:	6020      	str	r0, [r4, #0]
 8005f08:	f8c0 9000 	str.w	r9, [r0]
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	e7e4      	b.n	8005eda <__pow5mult+0x6a>
 8005f10:	4630      	mov	r0, r6
 8005f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f16:	bf00      	nop
 8005f18:	08006ea0 	.word	0x08006ea0
 8005f1c:	08006dc5 	.word	0x08006dc5
 8005f20:	08006e45 	.word	0x08006e45

08005f24 <__lshift>:
 8005f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f28:	460c      	mov	r4, r1
 8005f2a:	6849      	ldr	r1, [r1, #4]
 8005f2c:	6923      	ldr	r3, [r4, #16]
 8005f2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f32:	68a3      	ldr	r3, [r4, #8]
 8005f34:	4607      	mov	r7, r0
 8005f36:	4691      	mov	r9, r2
 8005f38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f3c:	f108 0601 	add.w	r6, r8, #1
 8005f40:	42b3      	cmp	r3, r6
 8005f42:	db0b      	blt.n	8005f5c <__lshift+0x38>
 8005f44:	4638      	mov	r0, r7
 8005f46:	f7ff fddf 	bl	8005b08 <_Balloc>
 8005f4a:	4605      	mov	r5, r0
 8005f4c:	b948      	cbnz	r0, 8005f62 <__lshift+0x3e>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	4b28      	ldr	r3, [pc, #160]	@ (8005ff4 <__lshift+0xd0>)
 8005f52:	4829      	ldr	r0, [pc, #164]	@ (8005ff8 <__lshift+0xd4>)
 8005f54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005f58:	f000 fb94 	bl	8006684 <__assert_func>
 8005f5c:	3101      	adds	r1, #1
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	e7ee      	b.n	8005f40 <__lshift+0x1c>
 8005f62:	2300      	movs	r3, #0
 8005f64:	f100 0114 	add.w	r1, r0, #20
 8005f68:	f100 0210 	add.w	r2, r0, #16
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	4553      	cmp	r3, sl
 8005f70:	db33      	blt.n	8005fda <__lshift+0xb6>
 8005f72:	6920      	ldr	r0, [r4, #16]
 8005f74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f78:	f104 0314 	add.w	r3, r4, #20
 8005f7c:	f019 091f 	ands.w	r9, r9, #31
 8005f80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f88:	d02b      	beq.n	8005fe2 <__lshift+0xbe>
 8005f8a:	f1c9 0e20 	rsb	lr, r9, #32
 8005f8e:	468a      	mov	sl, r1
 8005f90:	2200      	movs	r2, #0
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	fa00 f009 	lsl.w	r0, r0, r9
 8005f98:	4310      	orrs	r0, r2
 8005f9a:	f84a 0b04 	str.w	r0, [sl], #4
 8005f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fa2:	459c      	cmp	ip, r3
 8005fa4:	fa22 f20e 	lsr.w	r2, r2, lr
 8005fa8:	d8f3      	bhi.n	8005f92 <__lshift+0x6e>
 8005faa:	ebac 0304 	sub.w	r3, ip, r4
 8005fae:	3b15      	subs	r3, #21
 8005fb0:	f023 0303 	bic.w	r3, r3, #3
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	f104 0015 	add.w	r0, r4, #21
 8005fba:	4584      	cmp	ip, r0
 8005fbc:	bf38      	it	cc
 8005fbe:	2304      	movcc	r3, #4
 8005fc0:	50ca      	str	r2, [r1, r3]
 8005fc2:	b10a      	cbz	r2, 8005fc8 <__lshift+0xa4>
 8005fc4:	f108 0602 	add.w	r6, r8, #2
 8005fc8:	3e01      	subs	r6, #1
 8005fca:	4638      	mov	r0, r7
 8005fcc:	612e      	str	r6, [r5, #16]
 8005fce:	4621      	mov	r1, r4
 8005fd0:	f7ff fdda 	bl	8005b88 <_Bfree>
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fda:	f842 0f04 	str.w	r0, [r2, #4]!
 8005fde:	3301      	adds	r3, #1
 8005fe0:	e7c5      	b.n	8005f6e <__lshift+0x4a>
 8005fe2:	3904      	subs	r1, #4
 8005fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fe8:	f841 2f04 	str.w	r2, [r1, #4]!
 8005fec:	459c      	cmp	ip, r3
 8005fee:	d8f9      	bhi.n	8005fe4 <__lshift+0xc0>
 8005ff0:	e7ea      	b.n	8005fc8 <__lshift+0xa4>
 8005ff2:	bf00      	nop
 8005ff4:	08006e34 	.word	0x08006e34
 8005ff8:	08006e45 	.word	0x08006e45

08005ffc <__mcmp>:
 8005ffc:	690a      	ldr	r2, [r1, #16]
 8005ffe:	4603      	mov	r3, r0
 8006000:	6900      	ldr	r0, [r0, #16]
 8006002:	1a80      	subs	r0, r0, r2
 8006004:	b530      	push	{r4, r5, lr}
 8006006:	d10e      	bne.n	8006026 <__mcmp+0x2a>
 8006008:	3314      	adds	r3, #20
 800600a:	3114      	adds	r1, #20
 800600c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006010:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006014:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006018:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800601c:	4295      	cmp	r5, r2
 800601e:	d003      	beq.n	8006028 <__mcmp+0x2c>
 8006020:	d205      	bcs.n	800602e <__mcmp+0x32>
 8006022:	f04f 30ff 	mov.w	r0, #4294967295
 8006026:	bd30      	pop	{r4, r5, pc}
 8006028:	42a3      	cmp	r3, r4
 800602a:	d3f3      	bcc.n	8006014 <__mcmp+0x18>
 800602c:	e7fb      	b.n	8006026 <__mcmp+0x2a>
 800602e:	2001      	movs	r0, #1
 8006030:	e7f9      	b.n	8006026 <__mcmp+0x2a>
	...

08006034 <__mdiff>:
 8006034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006038:	4689      	mov	r9, r1
 800603a:	4606      	mov	r6, r0
 800603c:	4611      	mov	r1, r2
 800603e:	4648      	mov	r0, r9
 8006040:	4614      	mov	r4, r2
 8006042:	f7ff ffdb 	bl	8005ffc <__mcmp>
 8006046:	1e05      	subs	r5, r0, #0
 8006048:	d112      	bne.n	8006070 <__mdiff+0x3c>
 800604a:	4629      	mov	r1, r5
 800604c:	4630      	mov	r0, r6
 800604e:	f7ff fd5b 	bl	8005b08 <_Balloc>
 8006052:	4602      	mov	r2, r0
 8006054:	b928      	cbnz	r0, 8006062 <__mdiff+0x2e>
 8006056:	4b3f      	ldr	r3, [pc, #252]	@ (8006154 <__mdiff+0x120>)
 8006058:	f240 2137 	movw	r1, #567	@ 0x237
 800605c:	483e      	ldr	r0, [pc, #248]	@ (8006158 <__mdiff+0x124>)
 800605e:	f000 fb11 	bl	8006684 <__assert_func>
 8006062:	2301      	movs	r3, #1
 8006064:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006068:	4610      	mov	r0, r2
 800606a:	b003      	add	sp, #12
 800606c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006070:	bfbc      	itt	lt
 8006072:	464b      	movlt	r3, r9
 8006074:	46a1      	movlt	r9, r4
 8006076:	4630      	mov	r0, r6
 8006078:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800607c:	bfba      	itte	lt
 800607e:	461c      	movlt	r4, r3
 8006080:	2501      	movlt	r5, #1
 8006082:	2500      	movge	r5, #0
 8006084:	f7ff fd40 	bl	8005b08 <_Balloc>
 8006088:	4602      	mov	r2, r0
 800608a:	b918      	cbnz	r0, 8006094 <__mdiff+0x60>
 800608c:	4b31      	ldr	r3, [pc, #196]	@ (8006154 <__mdiff+0x120>)
 800608e:	f240 2145 	movw	r1, #581	@ 0x245
 8006092:	e7e3      	b.n	800605c <__mdiff+0x28>
 8006094:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006098:	6926      	ldr	r6, [r4, #16]
 800609a:	60c5      	str	r5, [r0, #12]
 800609c:	f109 0310 	add.w	r3, r9, #16
 80060a0:	f109 0514 	add.w	r5, r9, #20
 80060a4:	f104 0e14 	add.w	lr, r4, #20
 80060a8:	f100 0b14 	add.w	fp, r0, #20
 80060ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80060b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	46d9      	mov	r9, fp
 80060b8:	f04f 0c00 	mov.w	ip, #0
 80060bc:	9b01      	ldr	r3, [sp, #4]
 80060be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80060c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80060c6:	9301      	str	r3, [sp, #4]
 80060c8:	fa1f f38a 	uxth.w	r3, sl
 80060cc:	4619      	mov	r1, r3
 80060ce:	b283      	uxth	r3, r0
 80060d0:	1acb      	subs	r3, r1, r3
 80060d2:	0c00      	lsrs	r0, r0, #16
 80060d4:	4463      	add	r3, ip
 80060d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80060da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80060de:	b29b      	uxth	r3, r3
 80060e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80060e4:	4576      	cmp	r6, lr
 80060e6:	f849 3b04 	str.w	r3, [r9], #4
 80060ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80060ee:	d8e5      	bhi.n	80060bc <__mdiff+0x88>
 80060f0:	1b33      	subs	r3, r6, r4
 80060f2:	3b15      	subs	r3, #21
 80060f4:	f023 0303 	bic.w	r3, r3, #3
 80060f8:	3415      	adds	r4, #21
 80060fa:	3304      	adds	r3, #4
 80060fc:	42a6      	cmp	r6, r4
 80060fe:	bf38      	it	cc
 8006100:	2304      	movcc	r3, #4
 8006102:	441d      	add	r5, r3
 8006104:	445b      	add	r3, fp
 8006106:	461e      	mov	r6, r3
 8006108:	462c      	mov	r4, r5
 800610a:	4544      	cmp	r4, r8
 800610c:	d30e      	bcc.n	800612c <__mdiff+0xf8>
 800610e:	f108 0103 	add.w	r1, r8, #3
 8006112:	1b49      	subs	r1, r1, r5
 8006114:	f021 0103 	bic.w	r1, r1, #3
 8006118:	3d03      	subs	r5, #3
 800611a:	45a8      	cmp	r8, r5
 800611c:	bf38      	it	cc
 800611e:	2100      	movcc	r1, #0
 8006120:	440b      	add	r3, r1
 8006122:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006126:	b191      	cbz	r1, 800614e <__mdiff+0x11a>
 8006128:	6117      	str	r7, [r2, #16]
 800612a:	e79d      	b.n	8006068 <__mdiff+0x34>
 800612c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006130:	46e6      	mov	lr, ip
 8006132:	0c08      	lsrs	r0, r1, #16
 8006134:	fa1c fc81 	uxtah	ip, ip, r1
 8006138:	4471      	add	r1, lr
 800613a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800613e:	b289      	uxth	r1, r1
 8006140:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006144:	f846 1b04 	str.w	r1, [r6], #4
 8006148:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800614c:	e7dd      	b.n	800610a <__mdiff+0xd6>
 800614e:	3f01      	subs	r7, #1
 8006150:	e7e7      	b.n	8006122 <__mdiff+0xee>
 8006152:	bf00      	nop
 8006154:	08006e34 	.word	0x08006e34
 8006158:	08006e45 	.word	0x08006e45

0800615c <__d2b>:
 800615c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006160:	460f      	mov	r7, r1
 8006162:	2101      	movs	r1, #1
 8006164:	ec59 8b10 	vmov	r8, r9, d0
 8006168:	4616      	mov	r6, r2
 800616a:	f7ff fccd 	bl	8005b08 <_Balloc>
 800616e:	4604      	mov	r4, r0
 8006170:	b930      	cbnz	r0, 8006180 <__d2b+0x24>
 8006172:	4602      	mov	r2, r0
 8006174:	4b23      	ldr	r3, [pc, #140]	@ (8006204 <__d2b+0xa8>)
 8006176:	4824      	ldr	r0, [pc, #144]	@ (8006208 <__d2b+0xac>)
 8006178:	f240 310f 	movw	r1, #783	@ 0x30f
 800617c:	f000 fa82 	bl	8006684 <__assert_func>
 8006180:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006184:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006188:	b10d      	cbz	r5, 800618e <__d2b+0x32>
 800618a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800618e:	9301      	str	r3, [sp, #4]
 8006190:	f1b8 0300 	subs.w	r3, r8, #0
 8006194:	d023      	beq.n	80061de <__d2b+0x82>
 8006196:	4668      	mov	r0, sp
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	f7ff fd7c 	bl	8005c96 <__lo0bits>
 800619e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80061a2:	b1d0      	cbz	r0, 80061da <__d2b+0x7e>
 80061a4:	f1c0 0320 	rsb	r3, r0, #32
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	430b      	orrs	r3, r1
 80061ae:	40c2      	lsrs	r2, r0
 80061b0:	6163      	str	r3, [r4, #20]
 80061b2:	9201      	str	r2, [sp, #4]
 80061b4:	9b01      	ldr	r3, [sp, #4]
 80061b6:	61a3      	str	r3, [r4, #24]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	bf0c      	ite	eq
 80061bc:	2201      	moveq	r2, #1
 80061be:	2202      	movne	r2, #2
 80061c0:	6122      	str	r2, [r4, #16]
 80061c2:	b1a5      	cbz	r5, 80061ee <__d2b+0x92>
 80061c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80061c8:	4405      	add	r5, r0
 80061ca:	603d      	str	r5, [r7, #0]
 80061cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80061d0:	6030      	str	r0, [r6, #0]
 80061d2:	4620      	mov	r0, r4
 80061d4:	b003      	add	sp, #12
 80061d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061da:	6161      	str	r1, [r4, #20]
 80061dc:	e7ea      	b.n	80061b4 <__d2b+0x58>
 80061de:	a801      	add	r0, sp, #4
 80061e0:	f7ff fd59 	bl	8005c96 <__lo0bits>
 80061e4:	9b01      	ldr	r3, [sp, #4]
 80061e6:	6163      	str	r3, [r4, #20]
 80061e8:	3020      	adds	r0, #32
 80061ea:	2201      	movs	r2, #1
 80061ec:	e7e8      	b.n	80061c0 <__d2b+0x64>
 80061ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80061f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80061f6:	6038      	str	r0, [r7, #0]
 80061f8:	6918      	ldr	r0, [r3, #16]
 80061fa:	f7ff fd2d 	bl	8005c58 <__hi0bits>
 80061fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006202:	e7e5      	b.n	80061d0 <__d2b+0x74>
 8006204:	08006e34 	.word	0x08006e34
 8006208:	08006e45 	.word	0x08006e45

0800620c <__ssputs_r>:
 800620c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006210:	688e      	ldr	r6, [r1, #8]
 8006212:	461f      	mov	r7, r3
 8006214:	42be      	cmp	r6, r7
 8006216:	680b      	ldr	r3, [r1, #0]
 8006218:	4682      	mov	sl, r0
 800621a:	460c      	mov	r4, r1
 800621c:	4690      	mov	r8, r2
 800621e:	d82d      	bhi.n	800627c <__ssputs_r+0x70>
 8006220:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006224:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006228:	d026      	beq.n	8006278 <__ssputs_r+0x6c>
 800622a:	6965      	ldr	r5, [r4, #20]
 800622c:	6909      	ldr	r1, [r1, #16]
 800622e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006232:	eba3 0901 	sub.w	r9, r3, r1
 8006236:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800623a:	1c7b      	adds	r3, r7, #1
 800623c:	444b      	add	r3, r9
 800623e:	106d      	asrs	r5, r5, #1
 8006240:	429d      	cmp	r5, r3
 8006242:	bf38      	it	cc
 8006244:	461d      	movcc	r5, r3
 8006246:	0553      	lsls	r3, r2, #21
 8006248:	d527      	bpl.n	800629a <__ssputs_r+0x8e>
 800624a:	4629      	mov	r1, r5
 800624c:	f7ff fbd0 	bl	80059f0 <_malloc_r>
 8006250:	4606      	mov	r6, r0
 8006252:	b360      	cbz	r0, 80062ae <__ssputs_r+0xa2>
 8006254:	6921      	ldr	r1, [r4, #16]
 8006256:	464a      	mov	r2, r9
 8006258:	f000 fa06 	bl	8006668 <memcpy>
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006266:	81a3      	strh	r3, [r4, #12]
 8006268:	6126      	str	r6, [r4, #16]
 800626a:	6165      	str	r5, [r4, #20]
 800626c:	444e      	add	r6, r9
 800626e:	eba5 0509 	sub.w	r5, r5, r9
 8006272:	6026      	str	r6, [r4, #0]
 8006274:	60a5      	str	r5, [r4, #8]
 8006276:	463e      	mov	r6, r7
 8006278:	42be      	cmp	r6, r7
 800627a:	d900      	bls.n	800627e <__ssputs_r+0x72>
 800627c:	463e      	mov	r6, r7
 800627e:	6820      	ldr	r0, [r4, #0]
 8006280:	4632      	mov	r2, r6
 8006282:	4641      	mov	r1, r8
 8006284:	f000 f9c6 	bl	8006614 <memmove>
 8006288:	68a3      	ldr	r3, [r4, #8]
 800628a:	1b9b      	subs	r3, r3, r6
 800628c:	60a3      	str	r3, [r4, #8]
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	4433      	add	r3, r6
 8006292:	6023      	str	r3, [r4, #0]
 8006294:	2000      	movs	r0, #0
 8006296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629a:	462a      	mov	r2, r5
 800629c:	f000 fa36 	bl	800670c <_realloc_r>
 80062a0:	4606      	mov	r6, r0
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d1e0      	bne.n	8006268 <__ssputs_r+0x5c>
 80062a6:	6921      	ldr	r1, [r4, #16]
 80062a8:	4650      	mov	r0, sl
 80062aa:	f7ff fb2d 	bl	8005908 <_free_r>
 80062ae:	230c      	movs	r3, #12
 80062b0:	f8ca 3000 	str.w	r3, [sl]
 80062b4:	89a3      	ldrh	r3, [r4, #12]
 80062b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ba:	81a3      	strh	r3, [r4, #12]
 80062bc:	f04f 30ff 	mov.w	r0, #4294967295
 80062c0:	e7e9      	b.n	8006296 <__ssputs_r+0x8a>
	...

080062c4 <_svfiprintf_r>:
 80062c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c8:	4698      	mov	r8, r3
 80062ca:	898b      	ldrh	r3, [r1, #12]
 80062cc:	061b      	lsls	r3, r3, #24
 80062ce:	b09d      	sub	sp, #116	@ 0x74
 80062d0:	4607      	mov	r7, r0
 80062d2:	460d      	mov	r5, r1
 80062d4:	4614      	mov	r4, r2
 80062d6:	d510      	bpl.n	80062fa <_svfiprintf_r+0x36>
 80062d8:	690b      	ldr	r3, [r1, #16]
 80062da:	b973      	cbnz	r3, 80062fa <_svfiprintf_r+0x36>
 80062dc:	2140      	movs	r1, #64	@ 0x40
 80062de:	f7ff fb87 	bl	80059f0 <_malloc_r>
 80062e2:	6028      	str	r0, [r5, #0]
 80062e4:	6128      	str	r0, [r5, #16]
 80062e6:	b930      	cbnz	r0, 80062f6 <_svfiprintf_r+0x32>
 80062e8:	230c      	movs	r3, #12
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	f04f 30ff 	mov.w	r0, #4294967295
 80062f0:	b01d      	add	sp, #116	@ 0x74
 80062f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f6:	2340      	movs	r3, #64	@ 0x40
 80062f8:	616b      	str	r3, [r5, #20]
 80062fa:	2300      	movs	r3, #0
 80062fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80062fe:	2320      	movs	r3, #32
 8006300:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006304:	f8cd 800c 	str.w	r8, [sp, #12]
 8006308:	2330      	movs	r3, #48	@ 0x30
 800630a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80064a8 <_svfiprintf_r+0x1e4>
 800630e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006312:	f04f 0901 	mov.w	r9, #1
 8006316:	4623      	mov	r3, r4
 8006318:	469a      	mov	sl, r3
 800631a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800631e:	b10a      	cbz	r2, 8006324 <_svfiprintf_r+0x60>
 8006320:	2a25      	cmp	r2, #37	@ 0x25
 8006322:	d1f9      	bne.n	8006318 <_svfiprintf_r+0x54>
 8006324:	ebba 0b04 	subs.w	fp, sl, r4
 8006328:	d00b      	beq.n	8006342 <_svfiprintf_r+0x7e>
 800632a:	465b      	mov	r3, fp
 800632c:	4622      	mov	r2, r4
 800632e:	4629      	mov	r1, r5
 8006330:	4638      	mov	r0, r7
 8006332:	f7ff ff6b 	bl	800620c <__ssputs_r>
 8006336:	3001      	adds	r0, #1
 8006338:	f000 80a7 	beq.w	800648a <_svfiprintf_r+0x1c6>
 800633c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800633e:	445a      	add	r2, fp
 8006340:	9209      	str	r2, [sp, #36]	@ 0x24
 8006342:	f89a 3000 	ldrb.w	r3, [sl]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 809f 	beq.w	800648a <_svfiprintf_r+0x1c6>
 800634c:	2300      	movs	r3, #0
 800634e:	f04f 32ff 	mov.w	r2, #4294967295
 8006352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006356:	f10a 0a01 	add.w	sl, sl, #1
 800635a:	9304      	str	r3, [sp, #16]
 800635c:	9307      	str	r3, [sp, #28]
 800635e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006362:	931a      	str	r3, [sp, #104]	@ 0x68
 8006364:	4654      	mov	r4, sl
 8006366:	2205      	movs	r2, #5
 8006368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800636c:	484e      	ldr	r0, [pc, #312]	@ (80064a8 <_svfiprintf_r+0x1e4>)
 800636e:	f7f9 ff4f 	bl	8000210 <memchr>
 8006372:	9a04      	ldr	r2, [sp, #16]
 8006374:	b9d8      	cbnz	r0, 80063ae <_svfiprintf_r+0xea>
 8006376:	06d0      	lsls	r0, r2, #27
 8006378:	bf44      	itt	mi
 800637a:	2320      	movmi	r3, #32
 800637c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006380:	0711      	lsls	r1, r2, #28
 8006382:	bf44      	itt	mi
 8006384:	232b      	movmi	r3, #43	@ 0x2b
 8006386:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800638a:	f89a 3000 	ldrb.w	r3, [sl]
 800638e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006390:	d015      	beq.n	80063be <_svfiprintf_r+0xfa>
 8006392:	9a07      	ldr	r2, [sp, #28]
 8006394:	4654      	mov	r4, sl
 8006396:	2000      	movs	r0, #0
 8006398:	f04f 0c0a 	mov.w	ip, #10
 800639c:	4621      	mov	r1, r4
 800639e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063a2:	3b30      	subs	r3, #48	@ 0x30
 80063a4:	2b09      	cmp	r3, #9
 80063a6:	d94b      	bls.n	8006440 <_svfiprintf_r+0x17c>
 80063a8:	b1b0      	cbz	r0, 80063d8 <_svfiprintf_r+0x114>
 80063aa:	9207      	str	r2, [sp, #28]
 80063ac:	e014      	b.n	80063d8 <_svfiprintf_r+0x114>
 80063ae:	eba0 0308 	sub.w	r3, r0, r8
 80063b2:	fa09 f303 	lsl.w	r3, r9, r3
 80063b6:	4313      	orrs	r3, r2
 80063b8:	9304      	str	r3, [sp, #16]
 80063ba:	46a2      	mov	sl, r4
 80063bc:	e7d2      	b.n	8006364 <_svfiprintf_r+0xa0>
 80063be:	9b03      	ldr	r3, [sp, #12]
 80063c0:	1d19      	adds	r1, r3, #4
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	9103      	str	r1, [sp, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	bfbb      	ittet	lt
 80063ca:	425b      	neglt	r3, r3
 80063cc:	f042 0202 	orrlt.w	r2, r2, #2
 80063d0:	9307      	strge	r3, [sp, #28]
 80063d2:	9307      	strlt	r3, [sp, #28]
 80063d4:	bfb8      	it	lt
 80063d6:	9204      	strlt	r2, [sp, #16]
 80063d8:	7823      	ldrb	r3, [r4, #0]
 80063da:	2b2e      	cmp	r3, #46	@ 0x2e
 80063dc:	d10a      	bne.n	80063f4 <_svfiprintf_r+0x130>
 80063de:	7863      	ldrb	r3, [r4, #1]
 80063e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80063e2:	d132      	bne.n	800644a <_svfiprintf_r+0x186>
 80063e4:	9b03      	ldr	r3, [sp, #12]
 80063e6:	1d1a      	adds	r2, r3, #4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	9203      	str	r2, [sp, #12]
 80063ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063f0:	3402      	adds	r4, #2
 80063f2:	9305      	str	r3, [sp, #20]
 80063f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80064b8 <_svfiprintf_r+0x1f4>
 80063f8:	7821      	ldrb	r1, [r4, #0]
 80063fa:	2203      	movs	r2, #3
 80063fc:	4650      	mov	r0, sl
 80063fe:	f7f9 ff07 	bl	8000210 <memchr>
 8006402:	b138      	cbz	r0, 8006414 <_svfiprintf_r+0x150>
 8006404:	9b04      	ldr	r3, [sp, #16]
 8006406:	eba0 000a 	sub.w	r0, r0, sl
 800640a:	2240      	movs	r2, #64	@ 0x40
 800640c:	4082      	lsls	r2, r0
 800640e:	4313      	orrs	r3, r2
 8006410:	3401      	adds	r4, #1
 8006412:	9304      	str	r3, [sp, #16]
 8006414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006418:	4824      	ldr	r0, [pc, #144]	@ (80064ac <_svfiprintf_r+0x1e8>)
 800641a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800641e:	2206      	movs	r2, #6
 8006420:	f7f9 fef6 	bl	8000210 <memchr>
 8006424:	2800      	cmp	r0, #0
 8006426:	d036      	beq.n	8006496 <_svfiprintf_r+0x1d2>
 8006428:	4b21      	ldr	r3, [pc, #132]	@ (80064b0 <_svfiprintf_r+0x1ec>)
 800642a:	bb1b      	cbnz	r3, 8006474 <_svfiprintf_r+0x1b0>
 800642c:	9b03      	ldr	r3, [sp, #12]
 800642e:	3307      	adds	r3, #7
 8006430:	f023 0307 	bic.w	r3, r3, #7
 8006434:	3308      	adds	r3, #8
 8006436:	9303      	str	r3, [sp, #12]
 8006438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800643a:	4433      	add	r3, r6
 800643c:	9309      	str	r3, [sp, #36]	@ 0x24
 800643e:	e76a      	b.n	8006316 <_svfiprintf_r+0x52>
 8006440:	fb0c 3202 	mla	r2, ip, r2, r3
 8006444:	460c      	mov	r4, r1
 8006446:	2001      	movs	r0, #1
 8006448:	e7a8      	b.n	800639c <_svfiprintf_r+0xd8>
 800644a:	2300      	movs	r3, #0
 800644c:	3401      	adds	r4, #1
 800644e:	9305      	str	r3, [sp, #20]
 8006450:	4619      	mov	r1, r3
 8006452:	f04f 0c0a 	mov.w	ip, #10
 8006456:	4620      	mov	r0, r4
 8006458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800645c:	3a30      	subs	r2, #48	@ 0x30
 800645e:	2a09      	cmp	r2, #9
 8006460:	d903      	bls.n	800646a <_svfiprintf_r+0x1a6>
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0c6      	beq.n	80063f4 <_svfiprintf_r+0x130>
 8006466:	9105      	str	r1, [sp, #20]
 8006468:	e7c4      	b.n	80063f4 <_svfiprintf_r+0x130>
 800646a:	fb0c 2101 	mla	r1, ip, r1, r2
 800646e:	4604      	mov	r4, r0
 8006470:	2301      	movs	r3, #1
 8006472:	e7f0      	b.n	8006456 <_svfiprintf_r+0x192>
 8006474:	ab03      	add	r3, sp, #12
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	462a      	mov	r2, r5
 800647a:	4b0e      	ldr	r3, [pc, #56]	@ (80064b4 <_svfiprintf_r+0x1f0>)
 800647c:	a904      	add	r1, sp, #16
 800647e:	4638      	mov	r0, r7
 8006480:	f7fd fe84 	bl	800418c <_printf_float>
 8006484:	1c42      	adds	r2, r0, #1
 8006486:	4606      	mov	r6, r0
 8006488:	d1d6      	bne.n	8006438 <_svfiprintf_r+0x174>
 800648a:	89ab      	ldrh	r3, [r5, #12]
 800648c:	065b      	lsls	r3, r3, #25
 800648e:	f53f af2d 	bmi.w	80062ec <_svfiprintf_r+0x28>
 8006492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006494:	e72c      	b.n	80062f0 <_svfiprintf_r+0x2c>
 8006496:	ab03      	add	r3, sp, #12
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	462a      	mov	r2, r5
 800649c:	4b05      	ldr	r3, [pc, #20]	@ (80064b4 <_svfiprintf_r+0x1f0>)
 800649e:	a904      	add	r1, sp, #16
 80064a0:	4638      	mov	r0, r7
 80064a2:	f7fe f90b 	bl	80046bc <_printf_i>
 80064a6:	e7ed      	b.n	8006484 <_svfiprintf_r+0x1c0>
 80064a8:	08006fa0 	.word	0x08006fa0
 80064ac:	08006faa 	.word	0x08006faa
 80064b0:	0800418d 	.word	0x0800418d
 80064b4:	0800620d 	.word	0x0800620d
 80064b8:	08006fa6 	.word	0x08006fa6

080064bc <__sflush_r>:
 80064bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c4:	0716      	lsls	r6, r2, #28
 80064c6:	4605      	mov	r5, r0
 80064c8:	460c      	mov	r4, r1
 80064ca:	d454      	bmi.n	8006576 <__sflush_r+0xba>
 80064cc:	684b      	ldr	r3, [r1, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	dc02      	bgt.n	80064d8 <__sflush_r+0x1c>
 80064d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	dd48      	ble.n	800656a <__sflush_r+0xae>
 80064d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064da:	2e00      	cmp	r6, #0
 80064dc:	d045      	beq.n	800656a <__sflush_r+0xae>
 80064de:	2300      	movs	r3, #0
 80064e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064e4:	682f      	ldr	r7, [r5, #0]
 80064e6:	6a21      	ldr	r1, [r4, #32]
 80064e8:	602b      	str	r3, [r5, #0]
 80064ea:	d030      	beq.n	800654e <__sflush_r+0x92>
 80064ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064ee:	89a3      	ldrh	r3, [r4, #12]
 80064f0:	0759      	lsls	r1, r3, #29
 80064f2:	d505      	bpl.n	8006500 <__sflush_r+0x44>
 80064f4:	6863      	ldr	r3, [r4, #4]
 80064f6:	1ad2      	subs	r2, r2, r3
 80064f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064fa:	b10b      	cbz	r3, 8006500 <__sflush_r+0x44>
 80064fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064fe:	1ad2      	subs	r2, r2, r3
 8006500:	2300      	movs	r3, #0
 8006502:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006504:	6a21      	ldr	r1, [r4, #32]
 8006506:	4628      	mov	r0, r5
 8006508:	47b0      	blx	r6
 800650a:	1c43      	adds	r3, r0, #1
 800650c:	89a3      	ldrh	r3, [r4, #12]
 800650e:	d106      	bne.n	800651e <__sflush_r+0x62>
 8006510:	6829      	ldr	r1, [r5, #0]
 8006512:	291d      	cmp	r1, #29
 8006514:	d82b      	bhi.n	800656e <__sflush_r+0xb2>
 8006516:	4a2a      	ldr	r2, [pc, #168]	@ (80065c0 <__sflush_r+0x104>)
 8006518:	410a      	asrs	r2, r1
 800651a:	07d6      	lsls	r6, r2, #31
 800651c:	d427      	bmi.n	800656e <__sflush_r+0xb2>
 800651e:	2200      	movs	r2, #0
 8006520:	6062      	str	r2, [r4, #4]
 8006522:	04d9      	lsls	r1, r3, #19
 8006524:	6922      	ldr	r2, [r4, #16]
 8006526:	6022      	str	r2, [r4, #0]
 8006528:	d504      	bpl.n	8006534 <__sflush_r+0x78>
 800652a:	1c42      	adds	r2, r0, #1
 800652c:	d101      	bne.n	8006532 <__sflush_r+0x76>
 800652e:	682b      	ldr	r3, [r5, #0]
 8006530:	b903      	cbnz	r3, 8006534 <__sflush_r+0x78>
 8006532:	6560      	str	r0, [r4, #84]	@ 0x54
 8006534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006536:	602f      	str	r7, [r5, #0]
 8006538:	b1b9      	cbz	r1, 800656a <__sflush_r+0xae>
 800653a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800653e:	4299      	cmp	r1, r3
 8006540:	d002      	beq.n	8006548 <__sflush_r+0x8c>
 8006542:	4628      	mov	r0, r5
 8006544:	f7ff f9e0 	bl	8005908 <_free_r>
 8006548:	2300      	movs	r3, #0
 800654a:	6363      	str	r3, [r4, #52]	@ 0x34
 800654c:	e00d      	b.n	800656a <__sflush_r+0xae>
 800654e:	2301      	movs	r3, #1
 8006550:	4628      	mov	r0, r5
 8006552:	47b0      	blx	r6
 8006554:	4602      	mov	r2, r0
 8006556:	1c50      	adds	r0, r2, #1
 8006558:	d1c9      	bne.n	80064ee <__sflush_r+0x32>
 800655a:	682b      	ldr	r3, [r5, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0c6      	beq.n	80064ee <__sflush_r+0x32>
 8006560:	2b1d      	cmp	r3, #29
 8006562:	d001      	beq.n	8006568 <__sflush_r+0xac>
 8006564:	2b16      	cmp	r3, #22
 8006566:	d11e      	bne.n	80065a6 <__sflush_r+0xea>
 8006568:	602f      	str	r7, [r5, #0]
 800656a:	2000      	movs	r0, #0
 800656c:	e022      	b.n	80065b4 <__sflush_r+0xf8>
 800656e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006572:	b21b      	sxth	r3, r3
 8006574:	e01b      	b.n	80065ae <__sflush_r+0xf2>
 8006576:	690f      	ldr	r7, [r1, #16]
 8006578:	2f00      	cmp	r7, #0
 800657a:	d0f6      	beq.n	800656a <__sflush_r+0xae>
 800657c:	0793      	lsls	r3, r2, #30
 800657e:	680e      	ldr	r6, [r1, #0]
 8006580:	bf08      	it	eq
 8006582:	694b      	ldreq	r3, [r1, #20]
 8006584:	600f      	str	r7, [r1, #0]
 8006586:	bf18      	it	ne
 8006588:	2300      	movne	r3, #0
 800658a:	eba6 0807 	sub.w	r8, r6, r7
 800658e:	608b      	str	r3, [r1, #8]
 8006590:	f1b8 0f00 	cmp.w	r8, #0
 8006594:	dde9      	ble.n	800656a <__sflush_r+0xae>
 8006596:	6a21      	ldr	r1, [r4, #32]
 8006598:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800659a:	4643      	mov	r3, r8
 800659c:	463a      	mov	r2, r7
 800659e:	4628      	mov	r0, r5
 80065a0:	47b0      	blx	r6
 80065a2:	2800      	cmp	r0, #0
 80065a4:	dc08      	bgt.n	80065b8 <__sflush_r+0xfc>
 80065a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065ae:	81a3      	strh	r3, [r4, #12]
 80065b0:	f04f 30ff 	mov.w	r0, #4294967295
 80065b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b8:	4407      	add	r7, r0
 80065ba:	eba8 0800 	sub.w	r8, r8, r0
 80065be:	e7e7      	b.n	8006590 <__sflush_r+0xd4>
 80065c0:	dfbffffe 	.word	0xdfbffffe

080065c4 <_fflush_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	690b      	ldr	r3, [r1, #16]
 80065c8:	4605      	mov	r5, r0
 80065ca:	460c      	mov	r4, r1
 80065cc:	b913      	cbnz	r3, 80065d4 <_fflush_r+0x10>
 80065ce:	2500      	movs	r5, #0
 80065d0:	4628      	mov	r0, r5
 80065d2:	bd38      	pop	{r3, r4, r5, pc}
 80065d4:	b118      	cbz	r0, 80065de <_fflush_r+0x1a>
 80065d6:	6a03      	ldr	r3, [r0, #32]
 80065d8:	b90b      	cbnz	r3, 80065de <_fflush_r+0x1a>
 80065da:	f7fe fa1b 	bl	8004a14 <__sinit>
 80065de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0f3      	beq.n	80065ce <_fflush_r+0xa>
 80065e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065e8:	07d0      	lsls	r0, r2, #31
 80065ea:	d404      	bmi.n	80065f6 <_fflush_r+0x32>
 80065ec:	0599      	lsls	r1, r3, #22
 80065ee:	d402      	bmi.n	80065f6 <_fflush_r+0x32>
 80065f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065f2:	f7fe fb3a 	bl	8004c6a <__retarget_lock_acquire_recursive>
 80065f6:	4628      	mov	r0, r5
 80065f8:	4621      	mov	r1, r4
 80065fa:	f7ff ff5f 	bl	80064bc <__sflush_r>
 80065fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006600:	07da      	lsls	r2, r3, #31
 8006602:	4605      	mov	r5, r0
 8006604:	d4e4      	bmi.n	80065d0 <_fflush_r+0xc>
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	059b      	lsls	r3, r3, #22
 800660a:	d4e1      	bmi.n	80065d0 <_fflush_r+0xc>
 800660c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800660e:	f7fe fb2d 	bl	8004c6c <__retarget_lock_release_recursive>
 8006612:	e7dd      	b.n	80065d0 <_fflush_r+0xc>

08006614 <memmove>:
 8006614:	4288      	cmp	r0, r1
 8006616:	b510      	push	{r4, lr}
 8006618:	eb01 0402 	add.w	r4, r1, r2
 800661c:	d902      	bls.n	8006624 <memmove+0x10>
 800661e:	4284      	cmp	r4, r0
 8006620:	4623      	mov	r3, r4
 8006622:	d807      	bhi.n	8006634 <memmove+0x20>
 8006624:	1e43      	subs	r3, r0, #1
 8006626:	42a1      	cmp	r1, r4
 8006628:	d008      	beq.n	800663c <memmove+0x28>
 800662a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800662e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006632:	e7f8      	b.n	8006626 <memmove+0x12>
 8006634:	4402      	add	r2, r0
 8006636:	4601      	mov	r1, r0
 8006638:	428a      	cmp	r2, r1
 800663a:	d100      	bne.n	800663e <memmove+0x2a>
 800663c:	bd10      	pop	{r4, pc}
 800663e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006646:	e7f7      	b.n	8006638 <memmove+0x24>

08006648 <_sbrk_r>:
 8006648:	b538      	push	{r3, r4, r5, lr}
 800664a:	4d06      	ldr	r5, [pc, #24]	@ (8006664 <_sbrk_r+0x1c>)
 800664c:	2300      	movs	r3, #0
 800664e:	4604      	mov	r4, r0
 8006650:	4608      	mov	r0, r1
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	f7fb fa0c 	bl	8001a70 <_sbrk>
 8006658:	1c43      	adds	r3, r0, #1
 800665a:	d102      	bne.n	8006662 <_sbrk_r+0x1a>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	b103      	cbz	r3, 8006662 <_sbrk_r+0x1a>
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	200003d0 	.word	0x200003d0

08006668 <memcpy>:
 8006668:	440a      	add	r2, r1
 800666a:	4291      	cmp	r1, r2
 800666c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006670:	d100      	bne.n	8006674 <memcpy+0xc>
 8006672:	4770      	bx	lr
 8006674:	b510      	push	{r4, lr}
 8006676:	f811 4b01 	ldrb.w	r4, [r1], #1
 800667a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800667e:	4291      	cmp	r1, r2
 8006680:	d1f9      	bne.n	8006676 <memcpy+0xe>
 8006682:	bd10      	pop	{r4, pc}

08006684 <__assert_func>:
 8006684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006686:	4614      	mov	r4, r2
 8006688:	461a      	mov	r2, r3
 800668a:	4b09      	ldr	r3, [pc, #36]	@ (80066b0 <__assert_func+0x2c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4605      	mov	r5, r0
 8006690:	68d8      	ldr	r0, [r3, #12]
 8006692:	b954      	cbnz	r4, 80066aa <__assert_func+0x26>
 8006694:	4b07      	ldr	r3, [pc, #28]	@ (80066b4 <__assert_func+0x30>)
 8006696:	461c      	mov	r4, r3
 8006698:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800669c:	9100      	str	r1, [sp, #0]
 800669e:	462b      	mov	r3, r5
 80066a0:	4905      	ldr	r1, [pc, #20]	@ (80066b8 <__assert_func+0x34>)
 80066a2:	f000 f86f 	bl	8006784 <fiprintf>
 80066a6:	f000 f87f 	bl	80067a8 <abort>
 80066aa:	4b04      	ldr	r3, [pc, #16]	@ (80066bc <__assert_func+0x38>)
 80066ac:	e7f4      	b.n	8006698 <__assert_func+0x14>
 80066ae:	bf00      	nop
 80066b0:	20000018 	.word	0x20000018
 80066b4:	08006ff6 	.word	0x08006ff6
 80066b8:	08006fc8 	.word	0x08006fc8
 80066bc:	08006fbb 	.word	0x08006fbb

080066c0 <_calloc_r>:
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	fba1 5402 	umull	r5, r4, r1, r2
 80066c6:	b93c      	cbnz	r4, 80066d8 <_calloc_r+0x18>
 80066c8:	4629      	mov	r1, r5
 80066ca:	f7ff f991 	bl	80059f0 <_malloc_r>
 80066ce:	4606      	mov	r6, r0
 80066d0:	b928      	cbnz	r0, 80066de <_calloc_r+0x1e>
 80066d2:	2600      	movs	r6, #0
 80066d4:	4630      	mov	r0, r6
 80066d6:	bd70      	pop	{r4, r5, r6, pc}
 80066d8:	220c      	movs	r2, #12
 80066da:	6002      	str	r2, [r0, #0]
 80066dc:	e7f9      	b.n	80066d2 <_calloc_r+0x12>
 80066de:	462a      	mov	r2, r5
 80066e0:	4621      	mov	r1, r4
 80066e2:	f7fe fa44 	bl	8004b6e <memset>
 80066e6:	e7f5      	b.n	80066d4 <_calloc_r+0x14>

080066e8 <__ascii_mbtowc>:
 80066e8:	b082      	sub	sp, #8
 80066ea:	b901      	cbnz	r1, 80066ee <__ascii_mbtowc+0x6>
 80066ec:	a901      	add	r1, sp, #4
 80066ee:	b142      	cbz	r2, 8006702 <__ascii_mbtowc+0x1a>
 80066f0:	b14b      	cbz	r3, 8006706 <__ascii_mbtowc+0x1e>
 80066f2:	7813      	ldrb	r3, [r2, #0]
 80066f4:	600b      	str	r3, [r1, #0]
 80066f6:	7812      	ldrb	r2, [r2, #0]
 80066f8:	1e10      	subs	r0, r2, #0
 80066fa:	bf18      	it	ne
 80066fc:	2001      	movne	r0, #1
 80066fe:	b002      	add	sp, #8
 8006700:	4770      	bx	lr
 8006702:	4610      	mov	r0, r2
 8006704:	e7fb      	b.n	80066fe <__ascii_mbtowc+0x16>
 8006706:	f06f 0001 	mvn.w	r0, #1
 800670a:	e7f8      	b.n	80066fe <__ascii_mbtowc+0x16>

0800670c <_realloc_r>:
 800670c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006710:	4680      	mov	r8, r0
 8006712:	4615      	mov	r5, r2
 8006714:	460c      	mov	r4, r1
 8006716:	b921      	cbnz	r1, 8006722 <_realloc_r+0x16>
 8006718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800671c:	4611      	mov	r1, r2
 800671e:	f7ff b967 	b.w	80059f0 <_malloc_r>
 8006722:	b92a      	cbnz	r2, 8006730 <_realloc_r+0x24>
 8006724:	f7ff f8f0 	bl	8005908 <_free_r>
 8006728:	2400      	movs	r4, #0
 800672a:	4620      	mov	r0, r4
 800672c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006730:	f000 f841 	bl	80067b6 <_malloc_usable_size_r>
 8006734:	4285      	cmp	r5, r0
 8006736:	4606      	mov	r6, r0
 8006738:	d802      	bhi.n	8006740 <_realloc_r+0x34>
 800673a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800673e:	d8f4      	bhi.n	800672a <_realloc_r+0x1e>
 8006740:	4629      	mov	r1, r5
 8006742:	4640      	mov	r0, r8
 8006744:	f7ff f954 	bl	80059f0 <_malloc_r>
 8006748:	4607      	mov	r7, r0
 800674a:	2800      	cmp	r0, #0
 800674c:	d0ec      	beq.n	8006728 <_realloc_r+0x1c>
 800674e:	42b5      	cmp	r5, r6
 8006750:	462a      	mov	r2, r5
 8006752:	4621      	mov	r1, r4
 8006754:	bf28      	it	cs
 8006756:	4632      	movcs	r2, r6
 8006758:	f7ff ff86 	bl	8006668 <memcpy>
 800675c:	4621      	mov	r1, r4
 800675e:	4640      	mov	r0, r8
 8006760:	f7ff f8d2 	bl	8005908 <_free_r>
 8006764:	463c      	mov	r4, r7
 8006766:	e7e0      	b.n	800672a <_realloc_r+0x1e>

08006768 <__ascii_wctomb>:
 8006768:	4603      	mov	r3, r0
 800676a:	4608      	mov	r0, r1
 800676c:	b141      	cbz	r1, 8006780 <__ascii_wctomb+0x18>
 800676e:	2aff      	cmp	r2, #255	@ 0xff
 8006770:	d904      	bls.n	800677c <__ascii_wctomb+0x14>
 8006772:	228a      	movs	r2, #138	@ 0x8a
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	f04f 30ff 	mov.w	r0, #4294967295
 800677a:	4770      	bx	lr
 800677c:	700a      	strb	r2, [r1, #0]
 800677e:	2001      	movs	r0, #1
 8006780:	4770      	bx	lr
	...

08006784 <fiprintf>:
 8006784:	b40e      	push	{r1, r2, r3}
 8006786:	b503      	push	{r0, r1, lr}
 8006788:	4601      	mov	r1, r0
 800678a:	ab03      	add	r3, sp, #12
 800678c:	4805      	ldr	r0, [pc, #20]	@ (80067a4 <fiprintf+0x20>)
 800678e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006792:	6800      	ldr	r0, [r0, #0]
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	f000 f83f 	bl	8006818 <_vfiprintf_r>
 800679a:	b002      	add	sp, #8
 800679c:	f85d eb04 	ldr.w	lr, [sp], #4
 80067a0:	b003      	add	sp, #12
 80067a2:	4770      	bx	lr
 80067a4:	20000018 	.word	0x20000018

080067a8 <abort>:
 80067a8:	b508      	push	{r3, lr}
 80067aa:	2006      	movs	r0, #6
 80067ac:	f000 fa08 	bl	8006bc0 <raise>
 80067b0:	2001      	movs	r0, #1
 80067b2:	f7fb f8e4 	bl	800197e <_exit>

080067b6 <_malloc_usable_size_r>:
 80067b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ba:	1f18      	subs	r0, r3, #4
 80067bc:	2b00      	cmp	r3, #0
 80067be:	bfbc      	itt	lt
 80067c0:	580b      	ldrlt	r3, [r1, r0]
 80067c2:	18c0      	addlt	r0, r0, r3
 80067c4:	4770      	bx	lr

080067c6 <__sfputc_r>:
 80067c6:	6893      	ldr	r3, [r2, #8]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	b410      	push	{r4}
 80067ce:	6093      	str	r3, [r2, #8]
 80067d0:	da08      	bge.n	80067e4 <__sfputc_r+0x1e>
 80067d2:	6994      	ldr	r4, [r2, #24]
 80067d4:	42a3      	cmp	r3, r4
 80067d6:	db01      	blt.n	80067dc <__sfputc_r+0x16>
 80067d8:	290a      	cmp	r1, #10
 80067da:	d103      	bne.n	80067e4 <__sfputc_r+0x1e>
 80067dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067e0:	f000 b932 	b.w	8006a48 <__swbuf_r>
 80067e4:	6813      	ldr	r3, [r2, #0]
 80067e6:	1c58      	adds	r0, r3, #1
 80067e8:	6010      	str	r0, [r2, #0]
 80067ea:	7019      	strb	r1, [r3, #0]
 80067ec:	4608      	mov	r0, r1
 80067ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <__sfputs_r>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	4606      	mov	r6, r0
 80067f8:	460f      	mov	r7, r1
 80067fa:	4614      	mov	r4, r2
 80067fc:	18d5      	adds	r5, r2, r3
 80067fe:	42ac      	cmp	r4, r5
 8006800:	d101      	bne.n	8006806 <__sfputs_r+0x12>
 8006802:	2000      	movs	r0, #0
 8006804:	e007      	b.n	8006816 <__sfputs_r+0x22>
 8006806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800680a:	463a      	mov	r2, r7
 800680c:	4630      	mov	r0, r6
 800680e:	f7ff ffda 	bl	80067c6 <__sfputc_r>
 8006812:	1c43      	adds	r3, r0, #1
 8006814:	d1f3      	bne.n	80067fe <__sfputs_r+0xa>
 8006816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006818 <_vfiprintf_r>:
 8006818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681c:	460d      	mov	r5, r1
 800681e:	b09d      	sub	sp, #116	@ 0x74
 8006820:	4614      	mov	r4, r2
 8006822:	4698      	mov	r8, r3
 8006824:	4606      	mov	r6, r0
 8006826:	b118      	cbz	r0, 8006830 <_vfiprintf_r+0x18>
 8006828:	6a03      	ldr	r3, [r0, #32]
 800682a:	b90b      	cbnz	r3, 8006830 <_vfiprintf_r+0x18>
 800682c:	f7fe f8f2 	bl	8004a14 <__sinit>
 8006830:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006832:	07d9      	lsls	r1, r3, #31
 8006834:	d405      	bmi.n	8006842 <_vfiprintf_r+0x2a>
 8006836:	89ab      	ldrh	r3, [r5, #12]
 8006838:	059a      	lsls	r2, r3, #22
 800683a:	d402      	bmi.n	8006842 <_vfiprintf_r+0x2a>
 800683c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800683e:	f7fe fa14 	bl	8004c6a <__retarget_lock_acquire_recursive>
 8006842:	89ab      	ldrh	r3, [r5, #12]
 8006844:	071b      	lsls	r3, r3, #28
 8006846:	d501      	bpl.n	800684c <_vfiprintf_r+0x34>
 8006848:	692b      	ldr	r3, [r5, #16]
 800684a:	b99b      	cbnz	r3, 8006874 <_vfiprintf_r+0x5c>
 800684c:	4629      	mov	r1, r5
 800684e:	4630      	mov	r0, r6
 8006850:	f000 f938 	bl	8006ac4 <__swsetup_r>
 8006854:	b170      	cbz	r0, 8006874 <_vfiprintf_r+0x5c>
 8006856:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006858:	07dc      	lsls	r4, r3, #31
 800685a:	d504      	bpl.n	8006866 <_vfiprintf_r+0x4e>
 800685c:	f04f 30ff 	mov.w	r0, #4294967295
 8006860:	b01d      	add	sp, #116	@ 0x74
 8006862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006866:	89ab      	ldrh	r3, [r5, #12]
 8006868:	0598      	lsls	r0, r3, #22
 800686a:	d4f7      	bmi.n	800685c <_vfiprintf_r+0x44>
 800686c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800686e:	f7fe f9fd 	bl	8004c6c <__retarget_lock_release_recursive>
 8006872:	e7f3      	b.n	800685c <_vfiprintf_r+0x44>
 8006874:	2300      	movs	r3, #0
 8006876:	9309      	str	r3, [sp, #36]	@ 0x24
 8006878:	2320      	movs	r3, #32
 800687a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800687e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006882:	2330      	movs	r3, #48	@ 0x30
 8006884:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006a34 <_vfiprintf_r+0x21c>
 8006888:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800688c:	f04f 0901 	mov.w	r9, #1
 8006890:	4623      	mov	r3, r4
 8006892:	469a      	mov	sl, r3
 8006894:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006898:	b10a      	cbz	r2, 800689e <_vfiprintf_r+0x86>
 800689a:	2a25      	cmp	r2, #37	@ 0x25
 800689c:	d1f9      	bne.n	8006892 <_vfiprintf_r+0x7a>
 800689e:	ebba 0b04 	subs.w	fp, sl, r4
 80068a2:	d00b      	beq.n	80068bc <_vfiprintf_r+0xa4>
 80068a4:	465b      	mov	r3, fp
 80068a6:	4622      	mov	r2, r4
 80068a8:	4629      	mov	r1, r5
 80068aa:	4630      	mov	r0, r6
 80068ac:	f7ff ffa2 	bl	80067f4 <__sfputs_r>
 80068b0:	3001      	adds	r0, #1
 80068b2:	f000 80a7 	beq.w	8006a04 <_vfiprintf_r+0x1ec>
 80068b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068b8:	445a      	add	r2, fp
 80068ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80068bc:	f89a 3000 	ldrb.w	r3, [sl]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 809f 	beq.w	8006a04 <_vfiprintf_r+0x1ec>
 80068c6:	2300      	movs	r3, #0
 80068c8:	f04f 32ff 	mov.w	r2, #4294967295
 80068cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068d0:	f10a 0a01 	add.w	sl, sl, #1
 80068d4:	9304      	str	r3, [sp, #16]
 80068d6:	9307      	str	r3, [sp, #28]
 80068d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80068de:	4654      	mov	r4, sl
 80068e0:	2205      	movs	r2, #5
 80068e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068e6:	4853      	ldr	r0, [pc, #332]	@ (8006a34 <_vfiprintf_r+0x21c>)
 80068e8:	f7f9 fc92 	bl	8000210 <memchr>
 80068ec:	9a04      	ldr	r2, [sp, #16]
 80068ee:	b9d8      	cbnz	r0, 8006928 <_vfiprintf_r+0x110>
 80068f0:	06d1      	lsls	r1, r2, #27
 80068f2:	bf44      	itt	mi
 80068f4:	2320      	movmi	r3, #32
 80068f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068fa:	0713      	lsls	r3, r2, #28
 80068fc:	bf44      	itt	mi
 80068fe:	232b      	movmi	r3, #43	@ 0x2b
 8006900:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006904:	f89a 3000 	ldrb.w	r3, [sl]
 8006908:	2b2a      	cmp	r3, #42	@ 0x2a
 800690a:	d015      	beq.n	8006938 <_vfiprintf_r+0x120>
 800690c:	9a07      	ldr	r2, [sp, #28]
 800690e:	4654      	mov	r4, sl
 8006910:	2000      	movs	r0, #0
 8006912:	f04f 0c0a 	mov.w	ip, #10
 8006916:	4621      	mov	r1, r4
 8006918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800691c:	3b30      	subs	r3, #48	@ 0x30
 800691e:	2b09      	cmp	r3, #9
 8006920:	d94b      	bls.n	80069ba <_vfiprintf_r+0x1a2>
 8006922:	b1b0      	cbz	r0, 8006952 <_vfiprintf_r+0x13a>
 8006924:	9207      	str	r2, [sp, #28]
 8006926:	e014      	b.n	8006952 <_vfiprintf_r+0x13a>
 8006928:	eba0 0308 	sub.w	r3, r0, r8
 800692c:	fa09 f303 	lsl.w	r3, r9, r3
 8006930:	4313      	orrs	r3, r2
 8006932:	9304      	str	r3, [sp, #16]
 8006934:	46a2      	mov	sl, r4
 8006936:	e7d2      	b.n	80068de <_vfiprintf_r+0xc6>
 8006938:	9b03      	ldr	r3, [sp, #12]
 800693a:	1d19      	adds	r1, r3, #4
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	9103      	str	r1, [sp, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	bfbb      	ittet	lt
 8006944:	425b      	neglt	r3, r3
 8006946:	f042 0202 	orrlt.w	r2, r2, #2
 800694a:	9307      	strge	r3, [sp, #28]
 800694c:	9307      	strlt	r3, [sp, #28]
 800694e:	bfb8      	it	lt
 8006950:	9204      	strlt	r2, [sp, #16]
 8006952:	7823      	ldrb	r3, [r4, #0]
 8006954:	2b2e      	cmp	r3, #46	@ 0x2e
 8006956:	d10a      	bne.n	800696e <_vfiprintf_r+0x156>
 8006958:	7863      	ldrb	r3, [r4, #1]
 800695a:	2b2a      	cmp	r3, #42	@ 0x2a
 800695c:	d132      	bne.n	80069c4 <_vfiprintf_r+0x1ac>
 800695e:	9b03      	ldr	r3, [sp, #12]
 8006960:	1d1a      	adds	r2, r3, #4
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	9203      	str	r2, [sp, #12]
 8006966:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800696a:	3402      	adds	r4, #2
 800696c:	9305      	str	r3, [sp, #20]
 800696e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a44 <_vfiprintf_r+0x22c>
 8006972:	7821      	ldrb	r1, [r4, #0]
 8006974:	2203      	movs	r2, #3
 8006976:	4650      	mov	r0, sl
 8006978:	f7f9 fc4a 	bl	8000210 <memchr>
 800697c:	b138      	cbz	r0, 800698e <_vfiprintf_r+0x176>
 800697e:	9b04      	ldr	r3, [sp, #16]
 8006980:	eba0 000a 	sub.w	r0, r0, sl
 8006984:	2240      	movs	r2, #64	@ 0x40
 8006986:	4082      	lsls	r2, r0
 8006988:	4313      	orrs	r3, r2
 800698a:	3401      	adds	r4, #1
 800698c:	9304      	str	r3, [sp, #16]
 800698e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006992:	4829      	ldr	r0, [pc, #164]	@ (8006a38 <_vfiprintf_r+0x220>)
 8006994:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006998:	2206      	movs	r2, #6
 800699a:	f7f9 fc39 	bl	8000210 <memchr>
 800699e:	2800      	cmp	r0, #0
 80069a0:	d03f      	beq.n	8006a22 <_vfiprintf_r+0x20a>
 80069a2:	4b26      	ldr	r3, [pc, #152]	@ (8006a3c <_vfiprintf_r+0x224>)
 80069a4:	bb1b      	cbnz	r3, 80069ee <_vfiprintf_r+0x1d6>
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	3307      	adds	r3, #7
 80069aa:	f023 0307 	bic.w	r3, r3, #7
 80069ae:	3308      	adds	r3, #8
 80069b0:	9303      	str	r3, [sp, #12]
 80069b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069b4:	443b      	add	r3, r7
 80069b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80069b8:	e76a      	b.n	8006890 <_vfiprintf_r+0x78>
 80069ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80069be:	460c      	mov	r4, r1
 80069c0:	2001      	movs	r0, #1
 80069c2:	e7a8      	b.n	8006916 <_vfiprintf_r+0xfe>
 80069c4:	2300      	movs	r3, #0
 80069c6:	3401      	adds	r4, #1
 80069c8:	9305      	str	r3, [sp, #20]
 80069ca:	4619      	mov	r1, r3
 80069cc:	f04f 0c0a 	mov.w	ip, #10
 80069d0:	4620      	mov	r0, r4
 80069d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069d6:	3a30      	subs	r2, #48	@ 0x30
 80069d8:	2a09      	cmp	r2, #9
 80069da:	d903      	bls.n	80069e4 <_vfiprintf_r+0x1cc>
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0c6      	beq.n	800696e <_vfiprintf_r+0x156>
 80069e0:	9105      	str	r1, [sp, #20]
 80069e2:	e7c4      	b.n	800696e <_vfiprintf_r+0x156>
 80069e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80069e8:	4604      	mov	r4, r0
 80069ea:	2301      	movs	r3, #1
 80069ec:	e7f0      	b.n	80069d0 <_vfiprintf_r+0x1b8>
 80069ee:	ab03      	add	r3, sp, #12
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	462a      	mov	r2, r5
 80069f4:	4b12      	ldr	r3, [pc, #72]	@ (8006a40 <_vfiprintf_r+0x228>)
 80069f6:	a904      	add	r1, sp, #16
 80069f8:	4630      	mov	r0, r6
 80069fa:	f7fd fbc7 	bl	800418c <_printf_float>
 80069fe:	4607      	mov	r7, r0
 8006a00:	1c78      	adds	r0, r7, #1
 8006a02:	d1d6      	bne.n	80069b2 <_vfiprintf_r+0x19a>
 8006a04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a06:	07d9      	lsls	r1, r3, #31
 8006a08:	d405      	bmi.n	8006a16 <_vfiprintf_r+0x1fe>
 8006a0a:	89ab      	ldrh	r3, [r5, #12]
 8006a0c:	059a      	lsls	r2, r3, #22
 8006a0e:	d402      	bmi.n	8006a16 <_vfiprintf_r+0x1fe>
 8006a10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a12:	f7fe f92b 	bl	8004c6c <__retarget_lock_release_recursive>
 8006a16:	89ab      	ldrh	r3, [r5, #12]
 8006a18:	065b      	lsls	r3, r3, #25
 8006a1a:	f53f af1f 	bmi.w	800685c <_vfiprintf_r+0x44>
 8006a1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a20:	e71e      	b.n	8006860 <_vfiprintf_r+0x48>
 8006a22:	ab03      	add	r3, sp, #12
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	462a      	mov	r2, r5
 8006a28:	4b05      	ldr	r3, [pc, #20]	@ (8006a40 <_vfiprintf_r+0x228>)
 8006a2a:	a904      	add	r1, sp, #16
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f7fd fe45 	bl	80046bc <_printf_i>
 8006a32:	e7e4      	b.n	80069fe <_vfiprintf_r+0x1e6>
 8006a34:	08006fa0 	.word	0x08006fa0
 8006a38:	08006faa 	.word	0x08006faa
 8006a3c:	0800418d 	.word	0x0800418d
 8006a40:	080067f5 	.word	0x080067f5
 8006a44:	08006fa6 	.word	0x08006fa6

08006a48 <__swbuf_r>:
 8006a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4a:	460e      	mov	r6, r1
 8006a4c:	4614      	mov	r4, r2
 8006a4e:	4605      	mov	r5, r0
 8006a50:	b118      	cbz	r0, 8006a5a <__swbuf_r+0x12>
 8006a52:	6a03      	ldr	r3, [r0, #32]
 8006a54:	b90b      	cbnz	r3, 8006a5a <__swbuf_r+0x12>
 8006a56:	f7fd ffdd 	bl	8004a14 <__sinit>
 8006a5a:	69a3      	ldr	r3, [r4, #24]
 8006a5c:	60a3      	str	r3, [r4, #8]
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	071a      	lsls	r2, r3, #28
 8006a62:	d501      	bpl.n	8006a68 <__swbuf_r+0x20>
 8006a64:	6923      	ldr	r3, [r4, #16]
 8006a66:	b943      	cbnz	r3, 8006a7a <__swbuf_r+0x32>
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f000 f82a 	bl	8006ac4 <__swsetup_r>
 8006a70:	b118      	cbz	r0, 8006a7a <__swbuf_r+0x32>
 8006a72:	f04f 37ff 	mov.w	r7, #4294967295
 8006a76:	4638      	mov	r0, r7
 8006a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	6922      	ldr	r2, [r4, #16]
 8006a7e:	1a98      	subs	r0, r3, r2
 8006a80:	6963      	ldr	r3, [r4, #20]
 8006a82:	b2f6      	uxtb	r6, r6
 8006a84:	4283      	cmp	r3, r0
 8006a86:	4637      	mov	r7, r6
 8006a88:	dc05      	bgt.n	8006a96 <__swbuf_r+0x4e>
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f7ff fd99 	bl	80065c4 <_fflush_r>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	d1ed      	bne.n	8006a72 <__swbuf_r+0x2a>
 8006a96:	68a3      	ldr	r3, [r4, #8]
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	60a3      	str	r3, [r4, #8]
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	6022      	str	r2, [r4, #0]
 8006aa2:	701e      	strb	r6, [r3, #0]
 8006aa4:	6962      	ldr	r2, [r4, #20]
 8006aa6:	1c43      	adds	r3, r0, #1
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d004      	beq.n	8006ab6 <__swbuf_r+0x6e>
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	07db      	lsls	r3, r3, #31
 8006ab0:	d5e1      	bpl.n	8006a76 <__swbuf_r+0x2e>
 8006ab2:	2e0a      	cmp	r6, #10
 8006ab4:	d1df      	bne.n	8006a76 <__swbuf_r+0x2e>
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f7ff fd83 	bl	80065c4 <_fflush_r>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d0d9      	beq.n	8006a76 <__swbuf_r+0x2e>
 8006ac2:	e7d6      	b.n	8006a72 <__swbuf_r+0x2a>

08006ac4 <__swsetup_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4b29      	ldr	r3, [pc, #164]	@ (8006b6c <__swsetup_r+0xa8>)
 8006ac8:	4605      	mov	r5, r0
 8006aca:	6818      	ldr	r0, [r3, #0]
 8006acc:	460c      	mov	r4, r1
 8006ace:	b118      	cbz	r0, 8006ad8 <__swsetup_r+0x14>
 8006ad0:	6a03      	ldr	r3, [r0, #32]
 8006ad2:	b90b      	cbnz	r3, 8006ad8 <__swsetup_r+0x14>
 8006ad4:	f7fd ff9e 	bl	8004a14 <__sinit>
 8006ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006adc:	0719      	lsls	r1, r3, #28
 8006ade:	d422      	bmi.n	8006b26 <__swsetup_r+0x62>
 8006ae0:	06da      	lsls	r2, r3, #27
 8006ae2:	d407      	bmi.n	8006af4 <__swsetup_r+0x30>
 8006ae4:	2209      	movs	r2, #9
 8006ae6:	602a      	str	r2, [r5, #0]
 8006ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aec:	81a3      	strh	r3, [r4, #12]
 8006aee:	f04f 30ff 	mov.w	r0, #4294967295
 8006af2:	e033      	b.n	8006b5c <__swsetup_r+0x98>
 8006af4:	0758      	lsls	r0, r3, #29
 8006af6:	d512      	bpl.n	8006b1e <__swsetup_r+0x5a>
 8006af8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006afa:	b141      	cbz	r1, 8006b0e <__swsetup_r+0x4a>
 8006afc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b00:	4299      	cmp	r1, r3
 8006b02:	d002      	beq.n	8006b0a <__swsetup_r+0x46>
 8006b04:	4628      	mov	r0, r5
 8006b06:	f7fe feff 	bl	8005908 <_free_r>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	2300      	movs	r3, #0
 8006b18:	6063      	str	r3, [r4, #4]
 8006b1a:	6923      	ldr	r3, [r4, #16]
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	f043 0308 	orr.w	r3, r3, #8
 8006b24:	81a3      	strh	r3, [r4, #12]
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	b94b      	cbnz	r3, 8006b3e <__swsetup_r+0x7a>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b34:	d003      	beq.n	8006b3e <__swsetup_r+0x7a>
 8006b36:	4621      	mov	r1, r4
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 f883 	bl	8006c44 <__smakebuf_r>
 8006b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b42:	f013 0201 	ands.w	r2, r3, #1
 8006b46:	d00a      	beq.n	8006b5e <__swsetup_r+0x9a>
 8006b48:	2200      	movs	r2, #0
 8006b4a:	60a2      	str	r2, [r4, #8]
 8006b4c:	6962      	ldr	r2, [r4, #20]
 8006b4e:	4252      	negs	r2, r2
 8006b50:	61a2      	str	r2, [r4, #24]
 8006b52:	6922      	ldr	r2, [r4, #16]
 8006b54:	b942      	cbnz	r2, 8006b68 <__swsetup_r+0xa4>
 8006b56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b5a:	d1c5      	bne.n	8006ae8 <__swsetup_r+0x24>
 8006b5c:	bd38      	pop	{r3, r4, r5, pc}
 8006b5e:	0799      	lsls	r1, r3, #30
 8006b60:	bf58      	it	pl
 8006b62:	6962      	ldrpl	r2, [r4, #20]
 8006b64:	60a2      	str	r2, [r4, #8]
 8006b66:	e7f4      	b.n	8006b52 <__swsetup_r+0x8e>
 8006b68:	2000      	movs	r0, #0
 8006b6a:	e7f7      	b.n	8006b5c <__swsetup_r+0x98>
 8006b6c:	20000018 	.word	0x20000018

08006b70 <_raise_r>:
 8006b70:	291f      	cmp	r1, #31
 8006b72:	b538      	push	{r3, r4, r5, lr}
 8006b74:	4605      	mov	r5, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	d904      	bls.n	8006b84 <_raise_r+0x14>
 8006b7a:	2316      	movs	r3, #22
 8006b7c:	6003      	str	r3, [r0, #0]
 8006b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006b86:	b112      	cbz	r2, 8006b8e <_raise_r+0x1e>
 8006b88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b8c:	b94b      	cbnz	r3, 8006ba2 <_raise_r+0x32>
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f000 f830 	bl	8006bf4 <_getpid_r>
 8006b94:	4622      	mov	r2, r4
 8006b96:	4601      	mov	r1, r0
 8006b98:	4628      	mov	r0, r5
 8006b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b9e:	f000 b817 	b.w	8006bd0 <_kill_r>
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d00a      	beq.n	8006bbc <_raise_r+0x4c>
 8006ba6:	1c59      	adds	r1, r3, #1
 8006ba8:	d103      	bne.n	8006bb2 <_raise_r+0x42>
 8006baa:	2316      	movs	r3, #22
 8006bac:	6003      	str	r3, [r0, #0]
 8006bae:	2001      	movs	r0, #1
 8006bb0:	e7e7      	b.n	8006b82 <_raise_r+0x12>
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006bb8:	4620      	mov	r0, r4
 8006bba:	4798      	blx	r3
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	e7e0      	b.n	8006b82 <_raise_r+0x12>

08006bc0 <raise>:
 8006bc0:	4b02      	ldr	r3, [pc, #8]	@ (8006bcc <raise+0xc>)
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	f7ff bfd3 	b.w	8006b70 <_raise_r>
 8006bca:	bf00      	nop
 8006bcc:	20000018 	.word	0x20000018

08006bd0 <_kill_r>:
 8006bd0:	b538      	push	{r3, r4, r5, lr}
 8006bd2:	4d07      	ldr	r5, [pc, #28]	@ (8006bf0 <_kill_r+0x20>)
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	4608      	mov	r0, r1
 8006bda:	4611      	mov	r1, r2
 8006bdc:	602b      	str	r3, [r5, #0]
 8006bde:	f7fa febe 	bl	800195e <_kill>
 8006be2:	1c43      	adds	r3, r0, #1
 8006be4:	d102      	bne.n	8006bec <_kill_r+0x1c>
 8006be6:	682b      	ldr	r3, [r5, #0]
 8006be8:	b103      	cbz	r3, 8006bec <_kill_r+0x1c>
 8006bea:	6023      	str	r3, [r4, #0]
 8006bec:	bd38      	pop	{r3, r4, r5, pc}
 8006bee:	bf00      	nop
 8006bf0:	200003d0 	.word	0x200003d0

08006bf4 <_getpid_r>:
 8006bf4:	f7fa beab 	b.w	800194e <_getpid>

08006bf8 <__swhatbuf_r>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c00:	2900      	cmp	r1, #0
 8006c02:	b096      	sub	sp, #88	@ 0x58
 8006c04:	4615      	mov	r5, r2
 8006c06:	461e      	mov	r6, r3
 8006c08:	da0d      	bge.n	8006c26 <__swhatbuf_r+0x2e>
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c10:	f04f 0100 	mov.w	r1, #0
 8006c14:	bf14      	ite	ne
 8006c16:	2340      	movne	r3, #64	@ 0x40
 8006c18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	6031      	str	r1, [r6, #0]
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	b016      	add	sp, #88	@ 0x58
 8006c24:	bd70      	pop	{r4, r5, r6, pc}
 8006c26:	466a      	mov	r2, sp
 8006c28:	f000 f848 	bl	8006cbc <_fstat_r>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	dbec      	blt.n	8006c0a <__swhatbuf_r+0x12>
 8006c30:	9901      	ldr	r1, [sp, #4]
 8006c32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c3a:	4259      	negs	r1, r3
 8006c3c:	4159      	adcs	r1, r3
 8006c3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c42:	e7eb      	b.n	8006c1c <__swhatbuf_r+0x24>

08006c44 <__smakebuf_r>:
 8006c44:	898b      	ldrh	r3, [r1, #12]
 8006c46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c48:	079d      	lsls	r5, r3, #30
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	460c      	mov	r4, r1
 8006c4e:	d507      	bpl.n	8006c60 <__smakebuf_r+0x1c>
 8006c50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	6123      	str	r3, [r4, #16]
 8006c58:	2301      	movs	r3, #1
 8006c5a:	6163      	str	r3, [r4, #20]
 8006c5c:	b003      	add	sp, #12
 8006c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c60:	ab01      	add	r3, sp, #4
 8006c62:	466a      	mov	r2, sp
 8006c64:	f7ff ffc8 	bl	8006bf8 <__swhatbuf_r>
 8006c68:	9f00      	ldr	r7, [sp, #0]
 8006c6a:	4605      	mov	r5, r0
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f7fe febe 	bl	80059f0 <_malloc_r>
 8006c74:	b948      	cbnz	r0, 8006c8a <__smakebuf_r+0x46>
 8006c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c7a:	059a      	lsls	r2, r3, #22
 8006c7c:	d4ee      	bmi.n	8006c5c <__smakebuf_r+0x18>
 8006c7e:	f023 0303 	bic.w	r3, r3, #3
 8006c82:	f043 0302 	orr.w	r3, r3, #2
 8006c86:	81a3      	strh	r3, [r4, #12]
 8006c88:	e7e2      	b.n	8006c50 <__smakebuf_r+0xc>
 8006c8a:	89a3      	ldrh	r3, [r4, #12]
 8006c8c:	6020      	str	r0, [r4, #0]
 8006c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c92:	81a3      	strh	r3, [r4, #12]
 8006c94:	9b01      	ldr	r3, [sp, #4]
 8006c96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c9a:	b15b      	cbz	r3, 8006cb4 <__smakebuf_r+0x70>
 8006c9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	f000 f81d 	bl	8006ce0 <_isatty_r>
 8006ca6:	b128      	cbz	r0, 8006cb4 <__smakebuf_r+0x70>
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	f023 0303 	bic.w	r3, r3, #3
 8006cae:	f043 0301 	orr.w	r3, r3, #1
 8006cb2:	81a3      	strh	r3, [r4, #12]
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	431d      	orrs	r5, r3
 8006cb8:	81a5      	strh	r5, [r4, #12]
 8006cba:	e7cf      	b.n	8006c5c <__smakebuf_r+0x18>

08006cbc <_fstat_r>:
 8006cbc:	b538      	push	{r3, r4, r5, lr}
 8006cbe:	4d07      	ldr	r5, [pc, #28]	@ (8006cdc <_fstat_r+0x20>)
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	4608      	mov	r0, r1
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	602b      	str	r3, [r5, #0]
 8006cca:	f7fa fea8 	bl	8001a1e <_fstat>
 8006cce:	1c43      	adds	r3, r0, #1
 8006cd0:	d102      	bne.n	8006cd8 <_fstat_r+0x1c>
 8006cd2:	682b      	ldr	r3, [r5, #0]
 8006cd4:	b103      	cbz	r3, 8006cd8 <_fstat_r+0x1c>
 8006cd6:	6023      	str	r3, [r4, #0]
 8006cd8:	bd38      	pop	{r3, r4, r5, pc}
 8006cda:	bf00      	nop
 8006cdc:	200003d0 	.word	0x200003d0

08006ce0 <_isatty_r>:
 8006ce0:	b538      	push	{r3, r4, r5, lr}
 8006ce2:	4d06      	ldr	r5, [pc, #24]	@ (8006cfc <_isatty_r+0x1c>)
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	4608      	mov	r0, r1
 8006cea:	602b      	str	r3, [r5, #0]
 8006cec:	f7fa fea7 	bl	8001a3e <_isatty>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	d102      	bne.n	8006cfa <_isatty_r+0x1a>
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	b103      	cbz	r3, 8006cfa <_isatty_r+0x1a>
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	bd38      	pop	{r3, r4, r5, pc}
 8006cfc:	200003d0 	.word	0x200003d0

08006d00 <_init>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	bf00      	nop
 8006d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d06:	bc08      	pop	{r3}
 8006d08:	469e      	mov	lr, r3
 8006d0a:	4770      	bx	lr

08006d0c <_fini>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	bf00      	nop
 8006d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d12:	bc08      	pop	{r3}
 8006d14:	469e      	mov	lr, r3
 8006d16:	4770      	bx	lr
