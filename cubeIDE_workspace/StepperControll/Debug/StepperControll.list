
StepperControll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004578  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004740  08004740  00005740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004758  08004758  0000632c  2**0
                  CONTENTS
  4 .ARM          00000008  08004758  08004758  00005758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004760  08004760  0000632c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004760  08004760  00005760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004768  08004768  00005768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000032c  20000000  0800476c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000032c  08004a98  0000632c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08004a98  00006404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000632c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b939  00000000  00000000  0000635c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002144  00000000  00000000  00011c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00013de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000877  00000000  00000000  000148e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022db7  00000000  00000000  00015157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d943  00000000  00000000  00037f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb5da  00000000  00000000  00045851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110e2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef0  00000000  00000000  00110e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00113d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000032c 	.word	0x2000032c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004728 	.word	0x08004728

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000330 	.word	0x20000330
 8000204:	08004728 	.word	0x08004728

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_ldivmod>:
 80009f4:	b97b      	cbnz	r3, 8000a16 <__aeabi_ldivmod+0x22>
 80009f6:	b972      	cbnz	r2, 8000a16 <__aeabi_ldivmod+0x22>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bfbe      	ittt	lt
 80009fc:	2000      	movlt	r0, #0
 80009fe:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000a02:	e006      	blt.n	8000a12 <__aeabi_ldivmod+0x1e>
 8000a04:	bf08      	it	eq
 8000a06:	2800      	cmpeq	r0, #0
 8000a08:	bf1c      	itt	ne
 8000a0a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000a0e:	f04f 30ff 	movne.w	r0, #4294967295
 8000a12:	f000 b9b5 	b.w	8000d80 <__aeabi_idiv0>
 8000a16:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a1a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1e:	2900      	cmp	r1, #0
 8000a20:	db09      	blt.n	8000a36 <__aeabi_ldivmod+0x42>
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db1a      	blt.n	8000a5c <__aeabi_ldivmod+0x68>
 8000a26:	f000 f84d 	bl	8000ac4 <__udivmoddi4>
 8000a2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a32:	b004      	add	sp, #16
 8000a34:	4770      	bx	lr
 8000a36:	4240      	negs	r0, r0
 8000a38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db1b      	blt.n	8000a78 <__aeabi_ldivmod+0x84>
 8000a40:	f000 f840 	bl	8000ac4 <__udivmoddi4>
 8000a44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a4c:	b004      	add	sp, #16
 8000a4e:	4240      	negs	r0, r0
 8000a50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a54:	4252      	negs	r2, r2
 8000a56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a5a:	4770      	bx	lr
 8000a5c:	4252      	negs	r2, r2
 8000a5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a62:	f000 f82f 	bl	8000ac4 <__udivmoddi4>
 8000a66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6e:	b004      	add	sp, #16
 8000a70:	4240      	negs	r0, r0
 8000a72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a76:	4770      	bx	lr
 8000a78:	4252      	negs	r2, r2
 8000a7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a7e:	f000 f821 	bl	8000ac4 <__udivmoddi4>
 8000a82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a8a:	b004      	add	sp, #16
 8000a8c:	4252      	negs	r2, r2
 8000a8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <_ZN4GPIOC1EP12GPIO_TypeDefh>:
 *      Author: Sásdi András
 */

#include "GPIO.hpp"

GPIO::GPIO(GPIO_TypeDef* GPIOx_p, uint8_t GPIO_Pin_p)
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	71fb      	strb	r3, [r7, #7]
{
	this->GPIOx = GPIOx_p;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	601a      	str	r2, [r3, #0]
	this->GPIO_Pin = GPIO_Pin_p;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	79fa      	ldrb	r2, [r7, #7]
 8000d9c:	711a      	strb	r2, [r3, #4]
}
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <_ZN4GPIO12digitalWriteE13GPIO_PinState>:

void GPIO::digitalWrite(GPIO_PinState state_p)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, state_p);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	791b      	ldrb	r3, [r3, #4]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	f001 fdf1 	bl	80029ac <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_Z17XferCplt_CallbackP19__DMA_HandleTypeDef>:
-95852119,  -97945981, -100169480, -102552091, -105136281,
-107987272, -111214941, -115033700, -119997578, -131946891
}};

void XferCplt_Callback(DMA_HandleTypeDef *_hdma)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
	//The Parent is type StepperController*, and its "stepTimer" is a TIM_HandleTypeDef*
	HAL_TIM_PWM_Stop((TIM_HandleTypeDef*)((StepperController*)_hdma->Parent) -> stepTimer, TIM_CHANNEL_1);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dde:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 8000de2:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 fd8f 	bl	800390c <HAL_TIM_PWM_Stop>

	((StepperController*)_hdma->Parent)->steppingFinished = true;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000df2:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 8000df6:	2201      	movs	r2, #1
 8000df8:	f883 2828 	strb.w	r2, [r3, #2088]	@ 0x828
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <_ZN17StepperControllerC1EP17TIM_HandleTypeDefP19__DMA_HandleTypeDefP4GPIOdd>:

StepperController::StepperController(	TIM_HandleTypeDef* stepTimer,
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	61f8      	str	r0, [r7, #28]
 8000e0c:	61b9      	str	r1, [r7, #24]
 8000e0e:	617a      	str	r2, [r7, #20]
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	ed87 0b02 	vstr	d0, [r7, #8]
 8000e16:	ed87 1b00 	vstr	d1, [r7]
						DMA_HandleTypeDef* timerUpdaterDMA,
						GPIO* DIR_pin,
						double fullstep_deg,
						double u_step)
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	605a      	str	r2, [r3, #4]
{
	this -> stepTimer = stepTimer;
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 8000e26:	461a      	mov	r2, r3
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	f8c2 3824 	str.w	r3, [r2, #2084]	@ 0x824
	this -> timerUpdaterDMA = timerUpdaterDMA;
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	601a      	str	r2, [r3, #0]
	this -> DIR_pin = DIR_pin;
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	605a      	str	r2, [r3, #4]
	this -> timerUpdaterDMA->Parent = this;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	69fa      	ldr	r2, [r7, #28]
 8000e40:	639a      	str	r2, [r3, #56]	@ 0x38


	this -> fullstep_deg = fullstep_deg;
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	f503 4348 	add.w	r3, r3, #51200	@ 0xc800
 8000e48:	3310      	adds	r3, #16
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e50:	e9c1 2300 	strd	r2, r3, [r1]
	this -> u_step = u_step;
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f503 4348 	add.w	r3, r3, #51200	@ 0xc800
 8000e5a:	3320      	adds	r3, #32
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e62:	e941 2302 	strd	r2, r3, [r1, #-8]

	HAL_DMA_RegisterCallback(timerUpdaterDMA, HAL_DMA_XFER_CPLT_CB_ID, XferCplt_Callback);
 8000e66:	4a05      	ldr	r2, [pc, #20]	@ (8000e7c <_ZN17StepperControllerC1EP17TIM_HandleTypeDefP19__DMA_HandleTypeDefP4GPIOdd+0x78>)
 8000e68:	2100      	movs	r1, #0
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f001 fad6 	bl	800241c <HAL_DMA_RegisterCallback>
}
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	4618      	mov	r0, r3
 8000e74:	3720      	adds	r7, #32
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	08000dd3 	.word	0x08000dd3

08000e80 <_ZN17StepperController20interpolate_from_LUTEl8LUTTable>:

int32_t StepperController::interpolate_from_LUT(int32_t x, LUTTable LUT)
{
 8000e80:	b082      	sub	sp, #8
 8000e82:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e86:	b08e      	sub	sp, #56	@ 0x38
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000e92:	e881 000c 	stmia.w	r1, {r2, r3}
	int sign = 1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	637b      	str	r3, [r7, #52]	@ 0x34
	if (x < 0) {
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	da05      	bge.n	8000eac <_ZN17StepperController20interpolate_from_LUTEl8LUTTable+0x2c>
		sign = -1;
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea4:	637b      	str	r3, [r7, #52]	@ 0x34
		x = -x;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	425b      	negs	r3, r3
 8000eaa:	60bb      	str	r3, [r7, #8]
	}

	if (x <= (int32_t)LUT.x_values[0]) return sign * (int32_t)LUT.y_values[0];
 8000eac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dc05      	bgt.n	8000ec0 <_ZN17StepperController20interpolate_from_LUTEl8LUTTable+0x40>
 8000eb4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000eb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000eba:	fb02 f303 	mul.w	r3, r2, r3
 8000ebe:	e071      	b.n	8000fa4 <_ZN17StepperController20interpolate_from_LUTEl8LUTTable+0x124>
	if (x >= (int32_t)LUT.x_values[LUT_SIZE - 1]) return sign * (int32_t)LUT.y_values[LUT_SIZE - 1];
 8000ec0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	db05      	blt.n	8000ed6 <_ZN17StepperController20interpolate_from_LUTEl8LUTTable+0x56>
 8000eca:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8000ece:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ed0:	fb02 f303 	mul.w	r3, r2, r3
 8000ed4:	e066      	b.n	8000fa4 <_ZN17StepperController20interpolate_from_LUTEl8LUTTable+0x124>

	int16_t idx = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	867b      	strh	r3, [r7, #50]	@ 0x32
	// bináris keresés helyett egyszerű lineáris (mert LUT kicsi)
	while (idx < LUT_SIZE - 1 && x > (int32_t)LUT.x_values[idx+1]) idx++;
 8000eda:	e005      	b.n	8000ee8 <_ZN17StepperController20interpolate_from_LUTEl8LUTTable+0x68>
 8000edc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	867b      	strh	r3, [r7, #50]	@ 0x32
 8000ee8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000eec:	2b62      	cmp	r3, #98	@ 0x62
 8000eee:	dc09      	bgt.n	8000f04 <_ZN17StepperController20interpolate_from_LUTEl8LUTTable+0x84>
 8000ef0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8000efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	dceb      	bgt.n	8000edc <_ZN17StepperController20interpolate_from_LUTEl8LUTTable+0x5c>

	//idx = binarySearch(LUT.x_values, LUT_SIZE, x);


	int32_t x0 = LUT.x_values[idx];
 8000f04:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000f08:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8000f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t x1 = LUT.x_values[idx+1];
 8000f12:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000f16:	3301      	adds	r3, #1
 8000f18:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8000f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t y0 = LUT.y_values[idx];
 8000f22:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000f26:	3364      	adds	r3, #100	@ 0x64
 8000f28:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8000f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t y1 = LUT.y_values[idx+1];
 8000f32:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000f36:	3301      	adds	r3, #1
 8000f38:	3364      	adds	r3, #100	@ 0x64
 8000f3a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8000f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f42:	623b      	str	r3, [r7, #32]

	// lineáris interpoláció
	int32_t dy = y1 - y0;
 8000f44:	6a3a      	ldr	r2, [r7, #32]
 8000f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	61fb      	str	r3, [r7, #28]
	int32_t dx = x1 - x0;
 8000f4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	61bb      	str	r3, [r7, #24]
	int32_t dt = x - x0;
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	617b      	str	r3, [r7, #20]

	// (dy * dt) / dx
	int32_t y = y0 + (int32_t)((int64_t)dy * dt / dx);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	17da      	asrs	r2, r3, #31
 8000f60:	469a      	mov	sl, r3
 8000f62:	4693      	mov	fp, r2
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	17da      	asrs	r2, r3, #31
 8000f68:	4698      	mov	r8, r3
 8000f6a:	4691      	mov	r9, r2
 8000f6c:	fb08 f20b 	mul.w	r2, r8, fp
 8000f70:	fb0a f309 	mul.w	r3, sl, r9
 8000f74:	4413      	add	r3, r2
 8000f76:	fbaa 4508 	umull	r4, r5, sl, r8
 8000f7a:	442b      	add	r3, r5
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	17da      	asrs	r2, r3, #31
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	4629      	mov	r1, r5
 8000f8e:	f7ff fd31 	bl	80009f4 <__aeabi_ldivmod>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f98:	4413      	add	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]

	return sign * y;
 8000f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3738      	adds	r7, #56	@ 0x38
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fae:	b002      	add	sp, #8
 8000fb0:	4770      	bx	lr
 8000fb2:	0000      	movs	r0, r0
 8000fb4:	0000      	movs	r0, r0
	...

08000fb8 <_ZN17StepperController18calculate_movementEmf>:

bool StepperController::calculate_movement(uint32_t delta_Theta, float delta_t)
{
 8000fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fbc:	f5ad 7d73 	sub.w	sp, sp, #972	@ 0x3cc
 8000fc0:	afc6      	add	r7, sp, #792	@ 0x318
 8000fc2:	6678      	str	r0, [r7, #100]	@ 0x64
 8000fc4:	6639      	str	r1, [r7, #96]	@ 0x60
 8000fc6:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
	  int32_t ARR = dt_scaled - 1; //as the time scaler and the frequency is equal we don't need to do any further scaling
	  timer_values[k] = ARR;
	}
	//TODO: return0 if ARR<PWM
	return 1;
}
 8000fca:	466b      	mov	r3, sp
 8000fcc:	461e      	mov	r6, r3
	double alpha_rad = ( fullstep_deg * PI / 180.0 ) * u_step;
 8000fce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fd0:	f503 4348 	add.w	r3, r3, #51200	@ 0xc800
 8000fd4:	3310      	adds	r3, #16
 8000fd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fda:	a3d1      	add	r3, pc, #836	@ (adr r3, 8001320 <_ZN17StepperController18calculate_movementEmf+0x368>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff face 	bl	8000580 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	4bcd      	ldr	r3, [pc, #820]	@ (8001328 <_ZN17StepperController18calculate_movementEmf+0x370>)
 8000ff2:	f7ff fbef 	bl	80007d4 <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001000:	f503 4348 	add.w	r3, r3, #51200	@ 0xc800
 8001004:	3320      	adds	r3, #32
 8001006:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800100a:	f7ff fab9 	bl	8000580 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	int32_t alpha_rad_scaled = (int32_t)(alpha_rad * THETA_SCALER);
 8001016:	a3c0      	add	r3, pc, #768	@ (adr r3, 8001318 <_ZN17StepperController18calculate_movementEmf+0x360>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001020:	f7ff faae 	bl	8000580 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4610      	mov	r0, r2
 800102a:	4619      	mov	r1, r3
 800102c:	f7ff fcba 	bl	80009a4 <__aeabi_d2iz>
 8001030:	4603      	mov	r3, r0
 8001032:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	double Theta_rad = delta_Theta * PI / 180.0;
 8001036:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001038:	f7ff fa28 	bl	800048c <__aeabi_ui2d>
 800103c:	a3b8      	add	r3, pc, #736	@ (adr r3, 8001320 <_ZN17StepperController18calculate_movementEmf+0x368>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	f7ff fa9d 	bl	8000580 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4bb5      	ldr	r3, [pc, #724]	@ (8001328 <_ZN17StepperController18calculate_movementEmf+0x370>)
 8001054:	f7ff fbbe 	bl	80007d4 <__aeabi_ddiv>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	int32_t Theta_rad_scaled = (int32_t)(Theta_rad * THETA_SCALER);
 8001060:	a3ad      	add	r3, pc, #692	@ (adr r3, 8001318 <_ZN17StepperController18calculate_movementEmf+0x360>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800106a:	f7ff fa89 	bl	8000580 <__aeabi_dmul>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff fc95 	bl	80009a4 <__aeabi_d2iz>
 800107a:	4603      	mov	r3, r0
 800107c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	int32_t T_scaled = (int32_t)(delta_t * T_SCALER);
 8001080:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001084:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800132c <_ZN17StepperController18calculate_movementEmf+0x374>
 8001088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001090:	ee17 3a90 	vmov	r3, s15
 8001094:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	n_steps = (int)(delta_Theta / (fullstep_deg * u_step));
 8001098:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800109a:	f7ff f9f7 	bl	800048c <__aeabi_ui2d>
 800109e:	4604      	mov	r4, r0
 80010a0:	460d      	mov	r5, r1
 80010a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010a4:	f503 4348 	add.w	r3, r3, #51200	@ 0xc800
 80010a8:	3310      	adds	r3, #16
 80010aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010b0:	f503 4348 	add.w	r3, r3, #51200	@ 0xc800
 80010b4:	3320      	adds	r3, #32
 80010b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80010ba:	f7ff fa61 	bl	8000580 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff fb85 	bl	80007d4 <__aeabi_ddiv>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fc67 	bl	80009a4 <__aeabi_d2iz>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010dc:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 80010e0:	f8c3 2820 	str.w	r2, [r3, #2080]	@ 0x820
	int32_t t_k_scaled[n_steps+1];
 80010e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010e6:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 80010ea:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 80010ee:	1c59      	adds	r1, r3, #1
 80010f0:	460b      	mov	r3, r1
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80010f8:	2300      	movs	r3, #0
 80010fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800110a:	4628      	mov	r0, r5
 800110c:	0143      	lsls	r3, r0, #5
 800110e:	4620      	mov	r0, r4
 8001110:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001114:	4620      	mov	r0, r4
 8001116:	0142      	lsls	r2, r0, #5
 8001118:	2300      	movs	r3, #0
 800111a:	6239      	str	r1, [r7, #32]
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800112a:	4628      	mov	r0, r5
 800112c:	0143      	lsls	r3, r0, #5
 800112e:	4620      	mov	r0, r4
 8001130:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001134:	4620      	mov	r0, r4
 8001136:	0142      	lsls	r2, r0, #5
 8001138:	008b      	lsls	r3, r1, #2
 800113a:	3307      	adds	r3, #7
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	ebad 0d03 	sub.w	sp, sp, r3
 8001144:	abc6      	add	r3, sp, #792	@ 0x318
 8001146:	3303      	adds	r3, #3
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	uint32_t k = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	int32_t pi_scaled = (int32_t)(PI * T_SCALER);
 8001156:	4b76      	ldr	r3, [pc, #472]	@ (8001330 <_ZN17StepperController18calculate_movementEmf+0x378>)
 8001158:	67fb      	str	r3, [r7, #124]	@ 0x7c
	int32_t pi_scaled_half = pi_scaled/2;
 800115a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800115c:	0fd3      	lsrs	r3, r2, #31
 800115e:	4413      	add	r3, r2
 8001160:	105b      	asrs	r3, r3, #1
 8001162:	67bb      	str	r3, [r7, #120]	@ 0x78
	for (k = 0; k <= n_steps; k++)
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800116a:	e0c6      	b.n	80012fa <_ZN17StepperController18calculate_movementEmf+0x342>
		int32_t neg_arcsin_arg_scaled = THETA_SCALER - 2 * THETA_SCALER * ((int64_t)k * alpha_rad_scaled) / (Theta_rad_scaled);
 800116c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001170:	2200      	movs	r2, #0
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	61fa      	str	r2, [r7, #28]
 8001176:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800117a:	17da      	asrs	r2, r3, #31
 800117c:	653b      	str	r3, [r7, #80]	@ 0x50
 800117e:	657a      	str	r2, [r7, #84]	@ 0x54
 8001180:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001184:	462b      	mov	r3, r5
 8001186:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800118a:	4602      	mov	r2, r0
 800118c:	fb02 f203 	mul.w	r2, r2, r3
 8001190:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 8001194:	460b      	mov	r3, r1
 8001196:	4621      	mov	r1, r4
 8001198:	fb01 f303 	mul.w	r3, r1, r3
 800119c:	4413      	add	r3, r2
 800119e:	4622      	mov	r2, r4
 80011a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80011a2:	fba2 1201 	umull	r1, r2, r2, r1
 80011a6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80011a8:	460a      	mov	r2, r1
 80011aa:	64ba      	str	r2, [r7, #72]	@ 0x48
 80011ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011ae:	4413      	add	r3, r2
 80011b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011b2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80011b6:	4622      	mov	r2, r4
 80011b8:	462b      	mov	r3, r5
 80011ba:	f04f 0000 	mov.w	r0, #0
 80011be:	f04f 0100 	mov.w	r1, #0
 80011c2:	0159      	lsls	r1, r3, #5
 80011c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80011c8:	0150      	lsls	r0, r2, #5
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4621      	mov	r1, r4
 80011d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80011d4:	4629      	mov	r1, r5
 80011d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80011e6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80011ea:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80011ee:	ebb2 080a 	subs.w	r8, r2, sl
 80011f2:	eb63 090b 	sbc.w	r9, r3, fp
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800120a:	4690      	mov	r8, r2
 800120c:	4699      	mov	r9, r3
 800120e:	4623      	mov	r3, r4
 8001210:	eb18 0303 	adds.w	r3, r8, r3
 8001214:	633b      	str	r3, [r7, #48]	@ 0x30
 8001216:	462b      	mov	r3, r5
 8001218:	eb49 0303 	adc.w	r3, r9, r3
 800121c:	637b      	str	r3, [r7, #52]	@ 0x34
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800122a:	4629      	mov	r1, r5
 800122c:	01cb      	lsls	r3, r1, #7
 800122e:	4621      	mov	r1, r4
 8001230:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8001234:	4621      	mov	r1, r4
 8001236:	01ca      	lsls	r2, r1, #7
 8001238:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001244:	17da      	asrs	r2, r3, #31
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	617a      	str	r2, [r7, #20]
 800124a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800124e:	f7ff fbd1 	bl	80009f4 <__aeabi_ldivmod>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4613      	mov	r3, r2
 8001258:	f5c3 2374 	rsb	r3, r3, #999424	@ 0xf4000
 800125c:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8001260:	66fb      	str	r3, [r7, #108]	@ 0x6c
		int32_t neg_arcsin_scaled = interpolate_from_LUT(neg_arcsin_arg_scaled, minusArcSinLUT);
 8001262:	4c34      	ldr	r4, [pc, #208]	@ (8001334 <_ZN17StepperController18calculate_movementEmf+0x37c>)
 8001264:	4668      	mov	r0, sp
 8001266:	f104 0108 	add.w	r1, r4, #8
 800126a:	f44f 7346 	mov.w	r3, #792	@ 0x318
 800126e:	461a      	mov	r2, r3
 8001270:	f003 fa4c 	bl	800470c <memcpy>
 8001274:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001278:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800127a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800127c:	f7ff fe00 	bl	8000e80 <_ZN17StepperController20interpolate_from_LUTEl8LUTTable>
 8001280:	66b8      	str	r0, [r7, #104]	@ 0x68
		t_k_scaled[k] = (int32_t)(( (int64_t)(neg_arcsin_scaled + pi_scaled_half) * T_scaled) / pi_scaled);
 8001282:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001286:	4413      	add	r3, r2
 8001288:	17da      	asrs	r2, r3, #31
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	60fa      	str	r2, [r7, #12]
 800128e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001292:	17da      	asrs	r2, r3, #31
 8001294:	643b      	str	r3, [r7, #64]	@ 0x40
 8001296:	647a      	str	r2, [r7, #68]	@ 0x44
 8001298:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800129c:	462b      	mov	r3, r5
 800129e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80012a2:	4602      	mov	r2, r0
 80012a4:	fb02 f203 	mul.w	r2, r2, r3
 80012a8:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 80012ac:	460b      	mov	r3, r1
 80012ae:	4621      	mov	r1, r4
 80012b0:	fb01 f303 	mul.w	r3, r1, r3
 80012b4:	4413      	add	r3, r2
 80012b6:	4622      	mov	r2, r4
 80012b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80012ba:	fba2 1201 	umull	r1, r2, r2, r1
 80012be:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80012c0:	460a      	mov	r2, r1
 80012c2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80012c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012c6:	4413      	add	r3, r2
 80012c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80012cc:	17da      	asrs	r2, r3, #31
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80012da:	f7ff fb8b 	bl	80009f4 <__aeabi_ldivmod>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4611      	mov	r1, r2
 80012e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80012e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (k = 0; k <= n_steps; k++)
 80012f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012f4:	3301      	adds	r3, #1
 80012f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80012fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012fc:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 8001300:	f8d3 2820 	ldr.w	r2, [r3, #2080]	@ 0x820
 8001304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001308:	4293      	cmp	r3, r2
 800130a:	f67f af2f 	bls.w	800116c <_ZN17StepperController18calculate_movementEmf+0x1b4>
	for (k = 0; k < n_steps; k++)
 800130e:	2300      	movs	r3, #0
 8001310:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001314:	e02e      	b.n	8001374 <_ZN17StepperController18calculate_movementEmf+0x3bc>
 8001316:	bf00      	nop
 8001318:	00000000 	.word	0x00000000
 800131c:	412e8480 	.word	0x412e8480
 8001320:	54442d18 	.word	0x54442d18
 8001324:	400921fb 	.word	0x400921fb
 8001328:	40668000 	.word	0x40668000
 800132c:	4ca037a0 	.word	0x4ca037a0
 8001330:	0fbab316 	.word	0x0fbab316
 8001334:	20000000 	.word	0x20000000
	  int32_t dt_scaled = t_k_scaled[k+1] - t_k_scaled[k];
 8001338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001342:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001346:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800134a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800134e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	677b      	str	r3, [r7, #116]	@ 0x74
	  int32_t ARR = dt_scaled - 1; //as the time scaler and the frequency is equal we don't need to do any further scaling
 8001356:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001358:	3b01      	subs	r3, #1
 800135a:	673b      	str	r3, [r7, #112]	@ 0x70
	  timer_values[k] = ARR;
 800135c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800135e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001360:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001364:	3202      	adds	r2, #2
 8001366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (k = 0; k < n_steps; k++)
 800136a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800136e:	3301      	adds	r3, #1
 8001370:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001376:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 800137a:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 800137e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001382:	429a      	cmp	r2, r3
 8001384:	d3d8      	bcc.n	8001338 <_ZN17StepperController18calculate_movementEmf+0x380>
	return 1;
 8001386:	2301      	movs	r3, #1
 8001388:	46b5      	mov	sp, r6
}
 800138a:	4618      	mov	r0, r3
 800138c:	37b4      	adds	r7, #180	@ 0xb4
 800138e:	46bd      	mov	sp, r7
 8001390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001394 <_ZN17StepperController14start_steppingEa>:


bool StepperController::start_stepping(int8_t direction)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	70fb      	strb	r3, [r7, #3]
	if(direction < 0 )
 80013a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	da06      	bge.n	80013b6 <_ZN17StepperController14start_steppingEa+0x22>
	{
		DIR_pin->digitalWrite(GPIO_PIN_SET);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2101      	movs	r1, #1
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fcfc 	bl	8000dac <_ZN4GPIO12digitalWriteE13GPIO_PinState>
 80013b4:	e005      	b.n	80013c2 <_ZN17StepperController14start_steppingEa+0x2e>
	}
	else
	{
		DIR_pin->digitalWrite(GPIO_PIN_RESET);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fcf5 	bl	8000dac <_ZN4GPIO12digitalWriteE13GPIO_PinState>
	}

    uint32_t DstAddress = (uint32_t) & (stepTimer->Instance->ARR);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 80013c8:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	332c      	adds	r3, #44	@ 0x2c
 80013d0:	60fb      	str	r3, [r7, #12]

	HAL_StatusTypeDef State1;
	HAL_StatusTypeDef State2;
	HAL_StatusTypeDef State3;

	steppingFinished = false;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2828 	strb.w	r2, [r3, #2088]	@ 0x828

	State1 = HAL_TIM_Base_Start_IT(stepTimer);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 80013e4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 f8fd 	bl	80035e8 <HAL_TIM_Base_Start_IT>
 80013ee:	4603      	mov	r3, r0
 80013f0:	72fb      	strb	r3, [r7, #11]

	State2 = HAL_TIM_PWM_Start(stepTimer, TIM_CHANNEL_1);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 80013f8:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 f9bc 	bl	800377c <HAL_TIM_PWM_Start>
 8001404:	4603      	mov	r3, r0
 8001406:	72bb      	strb	r3, [r7, #10]

	State3 = HAL_DMA_Start_IT(timerUpdaterDMA, (uint32_t)timer_values, DstAddress, n_steps);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3308      	adds	r3, #8
 8001410:	4619      	mov	r1, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 8001418:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	f000 fe1b 	bl	8002058 <HAL_DMA_Start_IT>
 8001422:	4603      	mov	r3, r0
 8001424:	727b      	strb	r3, [r7, #9]

	__HAL_TIM_ENABLE_DMA(stepTimer, TIM_DMA_UPDATE);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 800142c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 800143a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001444:	60da      	str	r2, [r3, #12]

	if(State1 == HAL_OK && State2 == HAL_OK && State3 == HAL_OK)
 8001446:	7afb      	ldrb	r3, [r7, #11]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d107      	bne.n	800145c <_ZN17StepperController14start_steppingEa+0xc8>
 800144c:	7abb      	ldrb	r3, [r7, #10]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d104      	bne.n	800145c <_ZN17StepperController14start_steppingEa+0xc8>
 8001452:	7a7b      	ldrb	r3, [r7, #9]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <_ZN17StepperController14start_steppingEa+0xc8>
	{
		return 1;
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <_ZN17StepperController14start_steppingEa+0xca>
	}
	else
	{
		return 0;
 800145c:	2300      	movs	r3, #0
	}
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 800146e:	b08e      	sub	sp, #56	@ 0x38
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001472:	f000 fb9b 	bl	8001bac <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001476:	f000 f875 	bl	8001564 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147a:	f000 f99b 	bl	80017b4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800147e:	f000 f979 	bl	8001774 <_ZL11MX_DMA_Initv>
  MX_TIM2_Init();
 8001482:	f000 f8e7 	bl	8001654 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  ENN_GPIO.digitalWrite(GPIO_PIN_RESET);
 8001486:	2100      	movs	r1, #0
 8001488:	4831      	ldr	r0, [pc, #196]	@ (8001550 <main+0xe8>)
 800148a:	f7ff fc8f 	bl	8000dac <_ZN4GPIO12digitalWriteE13GPIO_PinState>
  StepperController motor1_controller(
		  &htim2,
		  &hdma_tim2_up_ch3,
		  &DIR_GPIO,
		  1.8d,
		  0.125d);
 800148e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001492:	3838      	subs	r0, #56	@ 0x38
 8001494:	ed9f 1b2a 	vldr	d1, [pc, #168]	@ 8001540 <main+0xd8>
 8001498:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8001548 <main+0xe0>
 800149c:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <main+0xec>)
 800149e:	4a2e      	ldr	r2, [pc, #184]	@ (8001558 <main+0xf0>)
 80014a0:	492e      	ldr	r1, [pc, #184]	@ (800155c <main+0xf4>)
 80014a2:	f7ff fcaf 	bl	8000e04 <_ZN17StepperControllerC1EP17TIM_HandleTypeDefP19__DMA_HandleTypeDefP4GPIOdd>

  motor1_controller.calculate_movement(18, 0.1);
 80014a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014aa:	3b38      	subs	r3, #56	@ 0x38
 80014ac:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001560 <main+0xf8>
 80014b0:	2112      	movs	r1, #18
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fd80 	bl	8000fb8 <_ZN17StepperController18calculate_movementEmf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int j = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80014be:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80014c2:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  HAL_Delay(150);
 80014c4:	2096      	movs	r0, #150	@ 0x96
 80014c6:	f000 fbe3 	bl	8001c90 <HAL_Delay>
	  if(j<=20)
 80014ca:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80014ce:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b14      	cmp	r3, #20
 80014d6:	dc06      	bgt.n	80014e6 <main+0x7e>
	  {
		  motor1_controller.start_stepping(1);
 80014d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014dc:	3b38      	subs	r3, #56	@ 0x38
 80014de:	2101      	movs	r1, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff57 	bl	8001394 <_ZN17StepperController14start_steppingEa>
	  }
	  if(j>72)
 80014e6:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80014ea:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b48      	cmp	r3, #72	@ 0x48
 80014f2:	dd07      	ble.n	8001504 <main+0x9c>
	  {
		  motor1_controller.start_stepping(-1);
 80014f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014f8:	3b38      	subs	r3, #56	@ 0x38
 80014fa:	f04f 31ff 	mov.w	r1, #4294967295
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff48 	bl	8001394 <_ZN17StepperController14start_steppingEa>
	  }
	  if(j == 21)
 8001504:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001508:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b15      	cmp	r3, #21
 8001510:	d109      	bne.n	8001526 <main+0xbe>
	  {
		  j = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001518:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800151c:	6013      	str	r3, [r2, #0]
		  HAL_Delay(1000);
 800151e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001522:	f000 fbb5 	bl	8001c90 <HAL_Delay>
	  }
	  j++;
 8001526:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800152a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001536:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800153a:	6013      	str	r3, [r2, #0]
	  HAL_Delay(150);
 800153c:	e7c2      	b.n	80014c4 <main+0x5c>
 800153e:	bf00      	nop
 8001540:	00000000 	.word	0x00000000
 8001544:	3fc00000 	.word	0x3fc00000
 8001548:	cccccccd 	.word	0xcccccccd
 800154c:	3ffccccc 	.word	0x3ffccccc
 8001550:	200003f8 	.word	0x200003f8
 8001554:	200003f0 	.word	0x200003f0
 8001558:	20000390 	.word	0x20000390
 800155c:	20000348 	.word	0x20000348
 8001560:	3dcccccd 	.word	0x3dcccccd

08001564 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b094      	sub	sp, #80	@ 0x50
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	2234      	movs	r2, #52	@ 0x34
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f003 f89e 	bl	80046b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	4b2f      	ldr	r3, [pc, #188]	@ (800164c <_Z18SystemClock_Configv+0xe8>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001590:	4a2e      	ldr	r2, [pc, #184]	@ (800164c <_Z18SystemClock_Configv+0xe8>)
 8001592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001596:	6413      	str	r3, [r2, #64]	@ 0x40
 8001598:	4b2c      	ldr	r3, [pc, #176]	@ (800164c <_Z18SystemClock_Configv+0xe8>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	4b29      	ldr	r3, [pc, #164]	@ (8001650 <_Z18SystemClock_Configv+0xec>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015b0:	4a27      	ldr	r2, [pc, #156]	@ (8001650 <_Z18SystemClock_Configv+0xec>)
 80015b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <_Z18SystemClock_Configv+0xec>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c8:	2301      	movs	r3, #1
 80015ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015cc:	2310      	movs	r3, #16
 80015ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d0:	2302      	movs	r3, #2
 80015d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015d4:	2300      	movs	r3, #0
 80015d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015d8:	2310      	movs	r3, #16
 80015da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80015e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015e2:	2304      	movs	r3, #4
 80015e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015e6:	2302      	movs	r3, #2
 80015e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015ea:	2302      	movs	r3, #2
 80015ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 fd0a 	bl	800300c <HAL_RCC_OscConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bf14      	ite	ne
 80015fe:	2301      	movne	r3, #1
 8001600:	2300      	moveq	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8001608:	f000 f960 	bl	80018cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160c:	230f      	movs	r3, #15
 800160e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001610:	2302      	movs	r3, #2
 8001612:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	2102      	movs	r1, #2
 8001628:	4618      	mov	r0, r3
 800162a:	f001 f9d9 	bl	80029e0 <HAL_RCC_ClockConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf14      	ite	ne
 8001634:	2301      	movne	r3, #1
 8001636:	2300      	moveq	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 800163e:	f000 f945 	bl	80018cc <Error_Handler>
  }
}
 8001642:	bf00      	nop
 8001644:	3750      	adds	r7, #80	@ 0x50
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40007000 	.word	0x40007000

08001654 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08e      	sub	sp, #56	@ 0x38
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	f107 0320 	add.w	r3, r7, #32
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
 8001680:	615a      	str	r2, [r3, #20]
 8001682:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001684:	4b39      	ldr	r3, [pc, #228]	@ (800176c <_ZL12MX_TIM2_Initv+0x118>)
 8001686:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800168a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800168c:	4b37      	ldr	r3, [pc, #220]	@ (800176c <_ZL12MX_TIM2_Initv+0x118>)
 800168e:	2200      	movs	r2, #0
 8001690:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b36      	ldr	r3, [pc, #216]	@ (800176c <_ZL12MX_TIM2_Initv+0x118>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 41999999;
 8001698:	4b34      	ldr	r3, [pc, #208]	@ (800176c <_ZL12MX_TIM2_Initv+0x118>)
 800169a:	4a35      	ldr	r2, [pc, #212]	@ (8001770 <_ZL12MX_TIM2_Initv+0x11c>)
 800169c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b33      	ldr	r3, [pc, #204]	@ (800176c <_ZL12MX_TIM2_Initv+0x118>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a4:	4b31      	ldr	r3, [pc, #196]	@ (800176c <_ZL12MX_TIM2_Initv+0x118>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016aa:	4830      	ldr	r0, [pc, #192]	@ (800176c <_ZL12MX_TIM2_Initv+0x118>)
 80016ac:	f001 ff4c 	bl	8003548 <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <_ZL12MX_TIM2_Initv+0x70>
  {
    Error_Handler();
 80016c0:	f000 f904 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ce:	4619      	mov	r1, r3
 80016d0:	4826      	ldr	r0, [pc, #152]	@ (800176c <_ZL12MX_TIM2_Initv+0x118>)
 80016d2:	f002 fb55 	bl	8003d80 <HAL_TIM_ConfigClockSource>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bf14      	ite	ne
 80016dc:	2301      	movne	r3, #1
 80016de:	2300      	moveq	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <_ZL12MX_TIM2_Initv+0x96>
  {
    Error_Handler();
 80016e6:	f000 f8f1 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016ea:	4820      	ldr	r0, [pc, #128]	@ (800176c <_ZL12MX_TIM2_Initv+0x118>)
 80016ec:	f001 ffec 	bl	80036c8 <HAL_TIM_PWM_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	bf14      	ite	ne
 80016f6:	2301      	movne	r3, #1
 80016f8:	2300      	moveq	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8001700:	f000 f8e4 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	4619      	mov	r1, r3
 8001712:	4816      	ldr	r0, [pc, #88]	@ (800176c <_ZL12MX_TIM2_Initv+0x118>)
 8001714:	f002 ff3e 	bl	8004594 <HAL_TIMEx_MasterConfigSynchronization>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf14      	ite	ne
 800171e:	2301      	movne	r3, #1
 8001720:	2300      	moveq	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <_ZL12MX_TIM2_Initv+0xd8>
  {
    Error_Handler();
 8001728:	f000 f8d0 	bl	80018cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172c:	2360      	movs	r3, #96	@ 0x60
 800172e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 320;
 8001730:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001734:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2200      	movs	r2, #0
 8001742:	4619      	mov	r1, r3
 8001744:	4809      	ldr	r0, [pc, #36]	@ (800176c <_ZL12MX_TIM2_Initv+0x118>)
 8001746:	f002 fa59 	bl	8003bfc <HAL_TIM_PWM_ConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf14      	ite	ne
 8001750:	2301      	movne	r3, #1
 8001752:	2300      	moveq	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 800175a:	f000 f8b7 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800175e:	4803      	ldr	r0, [pc, #12]	@ (800176c <_ZL12MX_TIM2_Initv+0x118>)
 8001760:	f000 f96c 	bl	8001a3c <HAL_TIM_MspPostInit>

}
 8001764:	bf00      	nop
 8001766:	3738      	adds	r7, #56	@ 0x38
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000348 	.word	0x20000348
 8001770:	0280de7f 	.word	0x0280de7f

08001774 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <_ZL11MX_DMA_Initv+0x3c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a0b      	ldr	r2, [pc, #44]	@ (80017b0 <_ZL11MX_DMA_Initv+0x3c>)
 8001784:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <_ZL11MX_DMA_Initv+0x3c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	200c      	movs	r0, #12
 800179c:	f000 fb77 	bl	8001e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80017a0:	200c      	movs	r0, #12
 80017a2:	f000 fb90 	bl	8001ec6 <HAL_NVIC_EnableIRQ>

}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b3c      	ldr	r3, [pc, #240]	@ (80018c0 <_ZL12MX_GPIO_Initv+0x10c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a3b      	ldr	r2, [pc, #236]	@ (80018c0 <_ZL12MX_GPIO_Initv+0x10c>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b39      	ldr	r3, [pc, #228]	@ (80018c0 <_ZL12MX_GPIO_Initv+0x10c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b35      	ldr	r3, [pc, #212]	@ (80018c0 <_ZL12MX_GPIO_Initv+0x10c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	4a34      	ldr	r2, [pc, #208]	@ (80018c0 <_ZL12MX_GPIO_Initv+0x10c>)
 80017f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f6:	4b32      	ldr	r3, [pc, #200]	@ (80018c0 <_ZL12MX_GPIO_Initv+0x10c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b2e      	ldr	r3, [pc, #184]	@ (80018c0 <_ZL12MX_GPIO_Initv+0x10c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a2d      	ldr	r2, [pc, #180]	@ (80018c0 <_ZL12MX_GPIO_Initv+0x10c>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b2b      	ldr	r3, [pc, #172]	@ (80018c0 <_ZL12MX_GPIO_Initv+0x10c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b27      	ldr	r3, [pc, #156]	@ (80018c0 <_ZL12MX_GPIO_Initv+0x10c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a26      	ldr	r2, [pc, #152]	@ (80018c0 <_ZL12MX_GPIO_Initv+0x10c>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <_ZL12MX_GPIO_Initv+0x10c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|ENN_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	21c0      	movs	r1, #192	@ 0xc0
 800183e:	4821      	ldr	r0, [pc, #132]	@ (80018c4 <_ZL12MX_GPIO_Initv+0x110>)
 8001840:	f001 f8b4 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800184a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	481b      	ldr	r0, [pc, #108]	@ (80018c8 <_ZL12MX_GPIO_Initv+0x114>)
 800185c:	f000 ff12 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001860:	230c      	movs	r3, #12
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001870:	2307      	movs	r3, #7
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4812      	ldr	r0, [pc, #72]	@ (80018c4 <_ZL12MX_GPIO_Initv+0x110>)
 800187c:	f000 ff02 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8001880:	2340      	movs	r3, #64	@ 0x40
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	480b      	ldr	r0, [pc, #44]	@ (80018c4 <_ZL12MX_GPIO_Initv+0x110>)
 8001898:	f000 fef4 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENN_Pin */
  GPIO_InitStruct.Pin = ENN_Pin;
 800189c:	2380      	movs	r3, #128	@ 0x80
 800189e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018a4:	2302      	movs	r3, #2
 80018a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENN_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4804      	ldr	r0, [pc, #16]	@ (80018c4 <_ZL12MX_GPIO_Initv+0x110>)
 80018b4:	f000 fee6 	bl	8002684 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b8:	bf00      	nop
 80018ba:	3728      	adds	r7, #40	@ 0x28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020800 	.word	0x40020800

080018cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
}
 80018d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <Error_Handler+0x8>

080018d8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d10e      	bne.n	8001906 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d109      	bne.n	8001906 <_Z41__static_initialization_and_destruction_0ii+0x2e>
GPIO DIR_GPIO(DIR_GPIO_Port, DIR_Pin);
 80018f2:	2240      	movs	r2, #64	@ 0x40
 80018f4:	4906      	ldr	r1, [pc, #24]	@ (8001910 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80018f6:	4807      	ldr	r0, [pc, #28]	@ (8001914 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80018f8:	f7ff fa44 	bl	8000d84 <_ZN4GPIOC1EP12GPIO_TypeDefh>
GPIO ENN_GPIO(ENN_GPIO_Port, ENN_Pin);
 80018fc:	2280      	movs	r2, #128	@ 0x80
 80018fe:	4904      	ldr	r1, [pc, #16]	@ (8001910 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001900:	4805      	ldr	r0, [pc, #20]	@ (8001918 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001902:	f7ff fa3f 	bl	8000d84 <_ZN4GPIOC1EP12GPIO_TypeDefh>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40020000 	.word	0x40020000
 8001914:	200003f0 	.word	0x200003f0
 8001918:	200003f8 	.word	0x200003f8

0800191c <_GLOBAL__sub_I_htim2>:
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
 8001920:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff ffd7 	bl	80018d8 <_Z41__static_initialization_and_destruction_0ii>
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <HAL_MspInit+0x4c>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193a:	4a0f      	ldr	r2, [pc, #60]	@ (8001978 <HAL_MspInit+0x4c>)
 800193c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001940:	6453      	str	r3, [r2, #68]	@ 0x44
 8001942:	4b0d      	ldr	r3, [pc, #52]	@ (8001978 <HAL_MspInit+0x4c>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_MspInit+0x4c>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	4a08      	ldr	r2, [pc, #32]	@ (8001978 <HAL_MspInit+0x4c>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800195c:	6413      	str	r3, [r2, #64]	@ 0x40
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_MspInit+0x4c>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800196a:	2007      	movs	r0, #7
 800196c:	f000 fa84 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800

0800197c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800198c:	d14c      	bne.n	8001a28 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b27      	ldr	r3, [pc, #156]	@ (8001a30 <HAL_TIM_Base_MspInit+0xb4>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	4a26      	ldr	r2, [pc, #152]	@ (8001a30 <HAL_TIM_Base_MspInit+0xb4>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6413      	str	r3, [r2, #64]	@ 0x40
 800199e:	4b24      	ldr	r3, [pc, #144]	@ (8001a30 <HAL_TIM_Base_MspInit+0xb4>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP_CH3 Init */
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80019aa:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <HAL_TIM_Base_MspInit+0xb8>)
 80019ac:	4a22      	ldr	r2, [pc, #136]	@ (8001a38 <HAL_TIM_Base_MspInit+0xbc>)
 80019ae:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80019b0:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <HAL_TIM_Base_MspInit+0xb8>)
 80019b2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80019b6:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <HAL_TIM_Base_MspInit+0xb8>)
 80019ba:	2240      	movs	r2, #64	@ 0x40
 80019bc:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80019be:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <HAL_TIM_Base_MspInit+0xb8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <HAL_TIM_Base_MspInit+0xb8>)
 80019c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ca:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019cc:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_TIM_Base_MspInit+0xb8>)
 80019ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019d2:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019d4:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <HAL_TIM_Base_MspInit+0xb8>)
 80019d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019da:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 80019dc:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <HAL_TIM_Base_MspInit+0xb8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80019e2:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <HAL_TIM_Base_MspInit+0xb8>)
 80019e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019e8:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ea:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_TIM_Base_MspInit+0xb8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80019f0:	4810      	ldr	r0, [pc, #64]	@ (8001a34 <HAL_TIM_Base_MspInit+0xb8>)
 80019f2:	f000 fa83 	bl	8001efc <HAL_DMA_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80019fc:	f7ff ff66 	bl	80018cc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a0c      	ldr	r2, [pc, #48]	@ (8001a34 <HAL_TIM_Base_MspInit+0xb8>)
 8001a04:	621a      	str	r2, [r3, #32]
 8001a06:	4a0b      	ldr	r2, [pc, #44]	@ (8001a34 <HAL_TIM_Base_MspInit+0xb8>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a09      	ldr	r2, [pc, #36]	@ (8001a34 <HAL_TIM_Base_MspInit+0xb8>)
 8001a10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_TIM_Base_MspInit+0xb8>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	201c      	movs	r0, #28
 8001a1e:	f000 fa36 	bl	8001e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a22:	201c      	movs	r0, #28
 8001a24:	f000 fa4f 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40023800 	.word	0x40023800
 8001a34:	20000390 	.word	0x20000390
 8001a38:	40026028 	.word	0x40026028

08001a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a5c:	d11d      	bne.n	8001a9a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <HAL_TIM_MspPostInit+0x68>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa4 <HAL_TIM_MspPostInit+0x68>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <HAL_TIM_MspPostInit+0x68>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_STEP_Pin;
 8001a7a:	2320      	movs	r3, #32
 8001a7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_STEP_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	4619      	mov	r1, r3
 8001a94:	4804      	ldr	r0, [pc, #16]	@ (8001aa8 <HAL_TIM_MspPostInit+0x6c>)
 8001a96:	f000 fdf5 	bl	8002684 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b02:	f000 f8a5 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8001b10:	4802      	ldr	r0, [pc, #8]	@ (8001b1c <DMA1_Stream1_IRQHandler+0x10>)
 8001b12:	f000 faf9 	bl	8002108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000390 	.word	0x20000390

08001b20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <TIM2_IRQHandler+0x10>)
 8001b26:	f001 ff61 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000348 	.word	0x20000348

08001b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <SystemInit+0x20>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b3e:	4a05      	ldr	r2, [pc, #20]	@ (8001b54 <SystemInit+0x20>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b5c:	480d      	ldr	r0, [pc, #52]	@ (8001b94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5e:	490e      	ldr	r1, [pc, #56]	@ (8001b98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b60:	4a0e      	ldr	r2, [pc, #56]	@ (8001b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b74:	4c0b      	ldr	r4, [pc, #44]	@ (8001ba4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b82:	f7ff ffd7 	bl	8001b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b86:	f002 fd9d 	bl	80046c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8a:	f7ff fc6d 	bl	8001468 <main>
  bx  lr    
 8001b8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 8001b9c:	0800476c 	.word	0x0800476c
  ldr r2, =_sbss
 8001ba0:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 8001ba4:	20000404 	.word	0x20000404

08001ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC_IRQHandler>
	...

08001bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bec <HAL_Init+0x40>)
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <HAL_Init+0x40>)
 8001bc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	@ (8001bec <HAL_Init+0x40>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f000 f94f 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f000 f808 	bl	8001bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be0:	f7ff fea4 	bl	800192c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf8:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_InitTick+0x54>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <HAL_InitTick+0x58>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f967 	bl	8001ee2 <HAL_SYSTICK_Config>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00e      	b.n	8001c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d80a      	bhi.n	8001c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c24:	2200      	movs	r2, #0
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f000 f92f 	bl	8001e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c30:	4a06      	ldr	r2, [pc, #24]	@ (8001c4c <HAL_InitTick+0x5c>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000320 	.word	0x20000320
 8001c48:	20000328 	.word	0x20000328
 8001c4c:	20000324 	.word	0x20000324

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_IncTick+0x20>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_IncTick+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <HAL_IncTick+0x24>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000328 	.word	0x20000328
 8001c74:	20000400 	.word	0x20000400

08001c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	@ (8001c8c <HAL_GetTick+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000400 	.word	0x20000400

08001c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff ffee 	bl	8001c78 <HAL_GetTick>
 8001c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <HAL_Delay+0x44>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cb6:	bf00      	nop
 8001cb8:	f7ff ffde 	bl	8001c78 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000328 	.word	0x20000328

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	@ (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db0b      	blt.n	8001d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4907      	ldr	r1, [pc, #28]	@ (8001d74 <__NVIC_EnableIRQ+0x38>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	@ (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	@ (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	@ 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	@ 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e44:	d301      	bcc.n	8001e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00f      	b.n	8001e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <SysTick_Config+0x40>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e52:	210f      	movs	r1, #15
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f7ff ff8e 	bl	8001d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <SysTick_Config+0x40>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e62:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <SysTick_Config+0x40>)
 8001e64:	2207      	movs	r2, #7
 8001e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	e000e010 	.word	0xe000e010

08001e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff29 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea0:	f7ff ff3e 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	6978      	ldr	r0, [r7, #20]
 8001eac:	f7ff ff8e 	bl	8001dcc <NVIC_EncodePriority>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff5d 	bl	8001d78 <__NVIC_SetPriority>
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff31 	bl	8001d3c <__NVIC_EnableIRQ>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ffa2 	bl	8001e34 <SysTick_Config>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff feb6 	bl	8001c78 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e099      	b.n	800204c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f38:	e00f      	b.n	8001f5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f3a:	f7ff fe9d 	bl	8001c78 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b05      	cmp	r3, #5
 8001f46:	d908      	bls.n	8001f5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2203      	movs	r2, #3
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e078      	b.n	800204c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1e8      	bne.n	8001f3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	4b38      	ldr	r3, [pc, #224]	@ (8002054 <HAL_DMA_Init+0x158>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d107      	bne.n	8001fc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f023 0307 	bic.w	r3, r3, #7
 8001fda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d117      	bne.n	800201e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00e      	beq.n	800201e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 fac3 	bl	800258c <DMA_CheckFifoParam>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800201a:	2301      	movs	r3, #1
 800201c:	e016      	b.n	800204c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fa7a 	bl	8002520 <DMA_CalcBaseAndBitshift>
 800202c:	4603      	mov	r3, r0
 800202e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002034:	223f      	movs	r2, #63	@ 0x3f
 8002036:	409a      	lsls	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	f010803f 	.word	0xf010803f

08002058 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_DMA_Start_IT+0x26>
 800207a:	2302      	movs	r3, #2
 800207c:	e040      	b.n	8002100 <HAL_DMA_Start_IT+0xa8>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b01      	cmp	r3, #1
 8002090:	d12f      	bne.n	80020f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2202      	movs	r2, #2
 8002096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fa0c 	bl	80024c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b0:	223f      	movs	r2, #63	@ 0x3f
 80020b2:	409a      	lsls	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0216 	orr.w	r2, r2, #22
 80020c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0208 	orr.w	r2, r2, #8
 80020de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e005      	b.n	80020fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020fa:	2302      	movs	r3, #2
 80020fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002114:	4b8e      	ldr	r3, [pc, #568]	@ (8002350 <HAL_DMA_IRQHandler+0x248>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a8e      	ldr	r2, [pc, #568]	@ (8002354 <HAL_DMA_IRQHandler+0x24c>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0a9b      	lsrs	r3, r3, #10
 8002120:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002126:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002132:	2208      	movs	r2, #8
 8002134:	409a      	lsls	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01a      	beq.n	8002174 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d013      	beq.n	8002174 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0204 	bic.w	r2, r2, #4
 800215a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002160:	2208      	movs	r2, #8
 8002162:	409a      	lsls	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216c:	f043 0201 	orr.w	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002178:	2201      	movs	r2, #1
 800217a:	409a      	lsls	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d012      	beq.n	80021aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002196:	2201      	movs	r2, #1
 8002198:	409a      	lsls	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a2:	f043 0202 	orr.w	r2, r3, #2
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ae:	2204      	movs	r2, #4
 80021b0:	409a      	lsls	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d012      	beq.n	80021e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00b      	beq.n	80021e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021cc:	2204      	movs	r2, #4
 80021ce:	409a      	lsls	r2, r3
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d8:	f043 0204 	orr.w	r2, r3, #4
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e4:	2210      	movs	r2, #16
 80021e6:	409a      	lsls	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d043      	beq.n	8002278 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d03c      	beq.n	8002278 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002202:	2210      	movs	r2, #16
 8002204:	409a      	lsls	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d018      	beq.n	800224a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d108      	bne.n	8002238 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	2b00      	cmp	r3, #0
 800222c:	d024      	beq.n	8002278 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	4798      	blx	r3
 8002236:	e01f      	b.n	8002278 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01b      	beq.n	8002278 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	4798      	blx	r3
 8002248:	e016      	b.n	8002278 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0208 	bic.w	r2, r2, #8
 8002266:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227c:	2220      	movs	r2, #32
 800227e:	409a      	lsls	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 808f 	beq.w	80023a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 8087 	beq.w	80023a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229e:	2220      	movs	r2, #32
 80022a0:	409a      	lsls	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d136      	bne.n	8002320 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0216 	bic.w	r2, r2, #22
 80022c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <HAL_DMA_IRQHandler+0x1da>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0208 	bic.w	r2, r2, #8
 80022f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f6:	223f      	movs	r2, #63	@ 0x3f
 80022f8:	409a      	lsls	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002312:	2b00      	cmp	r3, #0
 8002314:	d07e      	beq.n	8002414 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	4798      	blx	r3
        }
        return;
 800231e:	e079      	b.n	8002414 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01d      	beq.n	800236a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10d      	bne.n	8002358 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002340:	2b00      	cmp	r3, #0
 8002342:	d031      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
 800234c:	e02c      	b.n	80023a8 <HAL_DMA_IRQHandler+0x2a0>
 800234e:	bf00      	nop
 8002350:	20000320 	.word	0x20000320
 8002354:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d023      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
 8002368:	e01e      	b.n	80023a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10f      	bne.n	8002398 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0210 	bic.w	r2, r2, #16
 8002386:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d032      	beq.n	8002416 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d022      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2205      	movs	r2, #5
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	3301      	adds	r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d307      	bcc.n	80023f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f2      	bne.n	80023d4 <HAL_DMA_IRQHandler+0x2cc>
 80023ee:	e000      	b.n	80023f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	4798      	blx	r3
 8002412:	e000      	b.n	8002416 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002414:	bf00      	nop
    }
  }
}
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	460b      	mov	r3, r1
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_DMA_RegisterCallback+0x20>
 8002438:	2302      	movs	r3, #2
 800243a:	e03d      	b.n	80024b8 <HAL_DMA_RegisterCallback+0x9c>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d12c      	bne.n	80024aa <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8002450:	7afb      	ldrb	r3, [r7, #11]
 8002452:	2b05      	cmp	r3, #5
 8002454:	d826      	bhi.n	80024a4 <HAL_DMA_RegisterCallback+0x88>
 8002456:	a201      	add	r2, pc, #4	@ (adr r2, 800245c <HAL_DMA_RegisterCallback+0x40>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	08002475 	.word	0x08002475
 8002460:	0800247d 	.word	0x0800247d
 8002464:	08002485 	.word	0x08002485
 8002468:	0800248d 	.word	0x0800248d
 800246c:	08002495 	.word	0x08002495
 8002470:	0800249d 	.word	0x0800249d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800247a:	e018      	b.n	80024ae <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002482:	e014      	b.n	80024ae <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 800248a:	e010      	b.n	80024ae <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 8002492:	e00c      	b.n	80024ae <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 800249a:	e008      	b.n	80024ae <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80024a2:	e004      	b.n	80024ae <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	75fb      	strb	r3, [r7, #23]
      break;
 80024a8:	e001      	b.n	80024ae <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	371c      	adds	r7, #28
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b40      	cmp	r3, #64	@ 0x40
 80024f0:	d108      	bne.n	8002504 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002502:	e007      	b.n	8002514 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	60da      	str	r2, [r3, #12]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	3b10      	subs	r3, #16
 8002530:	4a14      	ldr	r2, [pc, #80]	@ (8002584 <DMA_CalcBaseAndBitshift+0x64>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800253a:	4a13      	ldr	r2, [pc, #76]	@ (8002588 <DMA_CalcBaseAndBitshift+0x68>)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d909      	bls.n	8002562 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002556:	f023 0303 	bic.w	r3, r3, #3
 800255a:	1d1a      	adds	r2, r3, #4
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002560:	e007      	b.n	8002572 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800256a:	f023 0303 	bic.w	r3, r3, #3
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	aaaaaaab 	.word	0xaaaaaaab
 8002588:	08004750 	.word	0x08004750

0800258c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11f      	bne.n	80025e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d856      	bhi.n	800265a <DMA_CheckFifoParam+0xce>
 80025ac:	a201      	add	r2, pc, #4	@ (adr r2, 80025b4 <DMA_CheckFifoParam+0x28>)
 80025ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b2:	bf00      	nop
 80025b4:	080025c5 	.word	0x080025c5
 80025b8:	080025d7 	.word	0x080025d7
 80025bc:	080025c5 	.word	0x080025c5
 80025c0:	0800265b 	.word	0x0800265b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d046      	beq.n	800265e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d4:	e043      	b.n	800265e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025de:	d140      	bne.n	8002662 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e4:	e03d      	b.n	8002662 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ee:	d121      	bne.n	8002634 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d837      	bhi.n	8002666 <DMA_CheckFifoParam+0xda>
 80025f6:	a201      	add	r2, pc, #4	@ (adr r2, 80025fc <DMA_CheckFifoParam+0x70>)
 80025f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fc:	0800260d 	.word	0x0800260d
 8002600:	08002613 	.word	0x08002613
 8002604:	0800260d 	.word	0x0800260d
 8002608:	08002625 	.word	0x08002625
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      break;
 8002610:	e030      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002616:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d025      	beq.n	800266a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002622:	e022      	b.n	800266a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002628:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800262c:	d11f      	bne.n	800266e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002632:	e01c      	b.n	800266e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d903      	bls.n	8002642 <DMA_CheckFifoParam+0xb6>
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b03      	cmp	r3, #3
 800263e:	d003      	beq.n	8002648 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002640:	e018      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
      break;
 8002646:	e015      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00e      	beq.n	8002672 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      break;
 8002658:	e00b      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      break;
 800265a:	bf00      	nop
 800265c:	e00a      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;
 800265e:	bf00      	nop
 8002660:	e008      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;
 8002662:	bf00      	nop
 8002664:	e006      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;
 8002666:	bf00      	nop
 8002668:	e004      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;
 800266a:	bf00      	nop
 800266c:	e002      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;   
 800266e:	bf00      	nop
 8002670:	e000      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;
 8002672:	bf00      	nop
    }
  } 
  
  return status; 
 8002674:	7bfb      	ldrb	r3, [r7, #15]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop

08002684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	@ 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e165      	b.n	800296c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	f040 8154 	bne.w	8002966 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d005      	beq.n	80026d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d130      	bne.n	8002738 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800270c:	2201      	movs	r2, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 0201 	and.w	r2, r3, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	2b03      	cmp	r3, #3
 8002742:	d017      	beq.n	8002774 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d123      	bne.n	80027c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	08da      	lsrs	r2, r3, #3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3208      	adds	r2, #8
 8002788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	220f      	movs	r2, #15
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	08da      	lsrs	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3208      	adds	r2, #8
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80ae 	beq.w	8002966 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	4b5d      	ldr	r3, [pc, #372]	@ (8002984 <HAL_GPIO_Init+0x300>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	4a5c      	ldr	r2, [pc, #368]	@ (8002984 <HAL_GPIO_Init+0x300>)
 8002814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002818:	6453      	str	r3, [r2, #68]	@ 0x44
 800281a:	4b5a      	ldr	r3, [pc, #360]	@ (8002984 <HAL_GPIO_Init+0x300>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002826:	4a58      	ldr	r2, [pc, #352]	@ (8002988 <HAL_GPIO_Init+0x304>)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	3302      	adds	r3, #2
 800282e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	220f      	movs	r2, #15
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4f      	ldr	r2, [pc, #316]	@ (800298c <HAL_GPIO_Init+0x308>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d025      	beq.n	800289e <HAL_GPIO_Init+0x21a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4e      	ldr	r2, [pc, #312]	@ (8002990 <HAL_GPIO_Init+0x30c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d01f      	beq.n	800289a <HAL_GPIO_Init+0x216>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4d      	ldr	r2, [pc, #308]	@ (8002994 <HAL_GPIO_Init+0x310>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d019      	beq.n	8002896 <HAL_GPIO_Init+0x212>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4c      	ldr	r2, [pc, #304]	@ (8002998 <HAL_GPIO_Init+0x314>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <HAL_GPIO_Init+0x20e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4b      	ldr	r2, [pc, #300]	@ (800299c <HAL_GPIO_Init+0x318>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00d      	beq.n	800288e <HAL_GPIO_Init+0x20a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4a      	ldr	r2, [pc, #296]	@ (80029a0 <HAL_GPIO_Init+0x31c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d007      	beq.n	800288a <HAL_GPIO_Init+0x206>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a49      	ldr	r2, [pc, #292]	@ (80029a4 <HAL_GPIO_Init+0x320>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_GPIO_Init+0x202>
 8002882:	2306      	movs	r3, #6
 8002884:	e00c      	b.n	80028a0 <HAL_GPIO_Init+0x21c>
 8002886:	2307      	movs	r3, #7
 8002888:	e00a      	b.n	80028a0 <HAL_GPIO_Init+0x21c>
 800288a:	2305      	movs	r3, #5
 800288c:	e008      	b.n	80028a0 <HAL_GPIO_Init+0x21c>
 800288e:	2304      	movs	r3, #4
 8002890:	e006      	b.n	80028a0 <HAL_GPIO_Init+0x21c>
 8002892:	2303      	movs	r3, #3
 8002894:	e004      	b.n	80028a0 <HAL_GPIO_Init+0x21c>
 8002896:	2302      	movs	r3, #2
 8002898:	e002      	b.n	80028a0 <HAL_GPIO_Init+0x21c>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <HAL_GPIO_Init+0x21c>
 800289e:	2300      	movs	r3, #0
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	f002 0203 	and.w	r2, r2, #3
 80028a6:	0092      	lsls	r2, r2, #2
 80028a8:	4093      	lsls	r3, r2
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028b0:	4935      	ldr	r1, [pc, #212]	@ (8002988 <HAL_GPIO_Init+0x304>)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	089b      	lsrs	r3, r3, #2
 80028b6:	3302      	adds	r3, #2
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028be:	4b3a      	ldr	r3, [pc, #232]	@ (80029a8 <HAL_GPIO_Init+0x324>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028e2:	4a31      	ldr	r2, [pc, #196]	@ (80029a8 <HAL_GPIO_Init+0x324>)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e8:	4b2f      	ldr	r3, [pc, #188]	@ (80029a8 <HAL_GPIO_Init+0x324>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800290c:	4a26      	ldr	r2, [pc, #152]	@ (80029a8 <HAL_GPIO_Init+0x324>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002912:	4b25      	ldr	r3, [pc, #148]	@ (80029a8 <HAL_GPIO_Init+0x324>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002936:	4a1c      	ldr	r2, [pc, #112]	@ (80029a8 <HAL_GPIO_Init+0x324>)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800293c:	4b1a      	ldr	r3, [pc, #104]	@ (80029a8 <HAL_GPIO_Init+0x324>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002960:	4a11      	ldr	r2, [pc, #68]	@ (80029a8 <HAL_GPIO_Init+0x324>)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3301      	adds	r3, #1
 800296a:	61fb      	str	r3, [r7, #28]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	2b0f      	cmp	r3, #15
 8002970:	f67f ae96 	bls.w	80026a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	3724      	adds	r7, #36	@ 0x24
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800
 8002988:	40013800 	.word	0x40013800
 800298c:	40020000 	.word	0x40020000
 8002990:	40020400 	.word	0x40020400
 8002994:	40020800 	.word	0x40020800
 8002998:	40020c00 	.word	0x40020c00
 800299c:	40021000 	.word	0x40021000
 80029a0:	40021400 	.word	0x40021400
 80029a4:	40021800 	.word	0x40021800
 80029a8:	40013c00 	.word	0x40013c00

080029ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
 80029b8:	4613      	mov	r3, r2
 80029ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029bc:	787b      	ldrb	r3, [r7, #1]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029c8:	e003      	b.n	80029d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	041a      	lsls	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	619a      	str	r2, [r3, #24]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0cc      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b68      	ldr	r3, [pc, #416]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d90c      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b65      	ldr	r3, [pc, #404]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b63      	ldr	r3, [pc, #396]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0b8      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a34:	4b59      	ldr	r3, [pc, #356]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4a58      	ldr	r2, [pc, #352]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a4c:	4b53      	ldr	r3, [pc, #332]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a52      	ldr	r2, [pc, #328]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a58:	4b50      	ldr	r3, [pc, #320]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	494d      	ldr	r1, [pc, #308]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d044      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	4b47      	ldr	r3, [pc, #284]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d119      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e07f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d003      	beq.n	8002a9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e06f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aae:	4b3b      	ldr	r3, [pc, #236]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e067      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002abe:	4b37      	ldr	r3, [pc, #220]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4934      	ldr	r1, [pc, #208]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad0:	f7ff f8d2 	bl	8001c78 <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad8:	f7ff f8ce 	bl	8001c78 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e04f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	4b2b      	ldr	r3, [pc, #172]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 020c 	and.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1eb      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b00:	4b25      	ldr	r3, [pc, #148]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d20c      	bcs.n	8002b28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b22      	ldr	r3, [pc, #136]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b20      	ldr	r3, [pc, #128]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e032      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b34:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4916      	ldr	r1, [pc, #88]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b52:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	490e      	ldr	r1, [pc, #56]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b66:	f000 f821 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	490a      	ldr	r1, [pc, #40]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b78:	5ccb      	ldrb	r3, [r1, r3]
 8002b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b82:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f832 	bl	8001bf0 <HAL_InitTick>

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023c00 	.word	0x40023c00
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	08004740 	.word	0x08004740
 8002ba4:	20000320 	.word	0x20000320
 8002ba8:	20000324 	.word	0x20000324

08002bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb0:	b0ae      	sub	sp, #184	@ 0xb8
 8002bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bd2:	4bcb      	ldr	r3, [pc, #812]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b0c      	cmp	r3, #12
 8002bdc:	f200 8206 	bhi.w	8002fec <HAL_RCC_GetSysClockFreq+0x440>
 8002be0:	a201      	add	r2, pc, #4	@ (adr r2, 8002be8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002c1d 	.word	0x08002c1d
 8002bec:	08002fed 	.word	0x08002fed
 8002bf0:	08002fed 	.word	0x08002fed
 8002bf4:	08002fed 	.word	0x08002fed
 8002bf8:	08002c25 	.word	0x08002c25
 8002bfc:	08002fed 	.word	0x08002fed
 8002c00:	08002fed 	.word	0x08002fed
 8002c04:	08002fed 	.word	0x08002fed
 8002c08:	08002c2d 	.word	0x08002c2d
 8002c0c:	08002fed 	.word	0x08002fed
 8002c10:	08002fed 	.word	0x08002fed
 8002c14:	08002fed 	.word	0x08002fed
 8002c18:	08002e1d 	.word	0x08002e1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4bb9      	ldr	r3, [pc, #740]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002c22:	e1e7      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c24:	4bb8      	ldr	r3, [pc, #736]	@ (8002f08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c2a:	e1e3      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c2c:	4bb4      	ldr	r3, [pc, #720]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c38:	4bb1      	ldr	r3, [pc, #708]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d071      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c44:	4bae      	ldr	r3, [pc, #696]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c50:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c6a:	4622      	mov	r2, r4
 8002c6c:	462b      	mov	r3, r5
 8002c6e:	f04f 0000 	mov.w	r0, #0
 8002c72:	f04f 0100 	mov.w	r1, #0
 8002c76:	0159      	lsls	r1, r3, #5
 8002c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c7c:	0150      	lsls	r0, r2, #5
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4621      	mov	r1, r4
 8002c84:	1a51      	subs	r1, r2, r1
 8002c86:	6439      	str	r1, [r7, #64]	@ 0x40
 8002c88:	4629      	mov	r1, r5
 8002c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002c9c:	4649      	mov	r1, r9
 8002c9e:	018b      	lsls	r3, r1, #6
 8002ca0:	4641      	mov	r1, r8
 8002ca2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ca6:	4641      	mov	r1, r8
 8002ca8:	018a      	lsls	r2, r1, #6
 8002caa:	4641      	mov	r1, r8
 8002cac:	1a51      	subs	r1, r2, r1
 8002cae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cb0:	4649      	mov	r1, r9
 8002cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002cc4:	4649      	mov	r1, r9
 8002cc6:	00cb      	lsls	r3, r1, #3
 8002cc8:	4641      	mov	r1, r8
 8002cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cce:	4641      	mov	r1, r8
 8002cd0:	00ca      	lsls	r2, r1, #3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4622      	mov	r2, r4
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cde:	462b      	mov	r3, r5
 8002ce0:	460a      	mov	r2, r1
 8002ce2:	eb42 0303 	adc.w	r3, r2, r3
 8002ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	024b      	lsls	r3, r1, #9
 8002cf8:	4621      	mov	r1, r4
 8002cfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cfe:	4621      	mov	r1, r4
 8002d00:	024a      	lsls	r2, r1, #9
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002d18:	f7fd febc 	bl	8000a94 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4613      	mov	r3, r2
 8002d22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d26:	e067      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d28:	4b75      	ldr	r3, [pc, #468]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d34:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002d38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d42:	2300      	movs	r3, #0
 8002d44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	462b      	mov	r3, r5
 8002d4e:	f04f 0000 	mov.w	r0, #0
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	0159      	lsls	r1, r3, #5
 8002d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5c:	0150      	lsls	r0, r2, #5
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4621      	mov	r1, r4
 8002d64:	1a51      	subs	r1, r2, r1
 8002d66:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002d68:	4629      	mov	r1, r5
 8002d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002d7c:	4649      	mov	r1, r9
 8002d7e:	018b      	lsls	r3, r1, #6
 8002d80:	4641      	mov	r1, r8
 8002d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d86:	4641      	mov	r1, r8
 8002d88:	018a      	lsls	r2, r1, #6
 8002d8a:	4641      	mov	r1, r8
 8002d8c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d90:	4649      	mov	r1, r9
 8002d92:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002da2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002da6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002daa:	4692      	mov	sl, r2
 8002dac:	469b      	mov	fp, r3
 8002dae:	4623      	mov	r3, r4
 8002db0:	eb1a 0303 	adds.w	r3, sl, r3
 8002db4:	623b      	str	r3, [r7, #32]
 8002db6:	462b      	mov	r3, r5
 8002db8:	eb4b 0303 	adc.w	r3, fp, r3
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	028b      	lsls	r3, r1, #10
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	028a      	lsls	r2, r1, #10
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002de0:	2200      	movs	r2, #0
 8002de2:	673b      	str	r3, [r7, #112]	@ 0x70
 8002de4:	677a      	str	r2, [r7, #116]	@ 0x74
 8002de6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002dea:	f7fd fe53 	bl	8000a94 <__aeabi_uldivmod>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4613      	mov	r3, r2
 8002df4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002df8:	4b41      	ldr	r3, [pc, #260]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	3301      	adds	r3, #1
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002e0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e1a:	e0eb      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e1c:	4b38      	ldr	r3, [pc, #224]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e28:	4b35      	ldr	r3, [pc, #212]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d06b      	beq.n	8002f0c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e34:	4b32      	ldr	r3, [pc, #200]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	099b      	lsrs	r3, r3, #6
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e46:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e48:	2300      	movs	r3, #0
 8002e4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002e50:	4622      	mov	r2, r4
 8002e52:	462b      	mov	r3, r5
 8002e54:	f04f 0000 	mov.w	r0, #0
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	0159      	lsls	r1, r3, #5
 8002e5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e62:	0150      	lsls	r0, r2, #5
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4621      	mov	r1, r4
 8002e6a:	1a51      	subs	r1, r2, r1
 8002e6c:	61b9      	str	r1, [r7, #24]
 8002e6e:	4629      	mov	r1, r5
 8002e70:	eb63 0301 	sbc.w	r3, r3, r1
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e82:	4659      	mov	r1, fp
 8002e84:	018b      	lsls	r3, r1, #6
 8002e86:	4651      	mov	r1, sl
 8002e88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e8c:	4651      	mov	r1, sl
 8002e8e:	018a      	lsls	r2, r1, #6
 8002e90:	4651      	mov	r1, sl
 8002e92:	ebb2 0801 	subs.w	r8, r2, r1
 8002e96:	4659      	mov	r1, fp
 8002e98:	eb63 0901 	sbc.w	r9, r3, r1
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ea8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eb0:	4690      	mov	r8, r2
 8002eb2:	4699      	mov	r9, r3
 8002eb4:	4623      	mov	r3, r4
 8002eb6:	eb18 0303 	adds.w	r3, r8, r3
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	462b      	mov	r3, r5
 8002ebe:	eb49 0303 	adc.w	r3, r9, r3
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	024b      	lsls	r3, r1, #9
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eda:	4621      	mov	r1, r4
 8002edc:	024a      	lsls	r2, r1, #9
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002eea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002eec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ef0:	f7fd fdd0 	bl	8000a94 <__aeabi_uldivmod>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4613      	mov	r3, r2
 8002efa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002efe:	e065      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x420>
 8002f00:	40023800 	.word	0x40023800
 8002f04:	00f42400 	.word	0x00f42400
 8002f08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0c:	4b3d      	ldr	r3, [pc, #244]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	2200      	movs	r2, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	4611      	mov	r1, r2
 8002f18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f1e:	2300      	movs	r3, #0
 8002f20:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002f26:	4642      	mov	r2, r8
 8002f28:	464b      	mov	r3, r9
 8002f2a:	f04f 0000 	mov.w	r0, #0
 8002f2e:	f04f 0100 	mov.w	r1, #0
 8002f32:	0159      	lsls	r1, r3, #5
 8002f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f38:	0150      	lsls	r0, r2, #5
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4641      	mov	r1, r8
 8002f40:	1a51      	subs	r1, r2, r1
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	4649      	mov	r1, r9
 8002f46:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f58:	4659      	mov	r1, fp
 8002f5a:	018b      	lsls	r3, r1, #6
 8002f5c:	4651      	mov	r1, sl
 8002f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f62:	4651      	mov	r1, sl
 8002f64:	018a      	lsls	r2, r1, #6
 8002f66:	4651      	mov	r1, sl
 8002f68:	1a54      	subs	r4, r2, r1
 8002f6a:	4659      	mov	r1, fp
 8002f6c:	eb63 0501 	sbc.w	r5, r3, r1
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	00eb      	lsls	r3, r5, #3
 8002f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f7e:	00e2      	lsls	r2, r4, #3
 8002f80:	4614      	mov	r4, r2
 8002f82:	461d      	mov	r5, r3
 8002f84:	4643      	mov	r3, r8
 8002f86:	18e3      	adds	r3, r4, r3
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	464b      	mov	r3, r9
 8002f8c:	eb45 0303 	adc.w	r3, r5, r3
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	028b      	lsls	r3, r1, #10
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fa8:	4621      	mov	r1, r4
 8002faa:	028a      	lsls	r2, r1, #10
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fb8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002fba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fbe:	f7fd fd69 	bl	8000a94 <__aeabi_uldivmod>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	0f1b      	lsrs	r3, r3, #28
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002fda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fea:	e003      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fec:	4b06      	ldr	r3, [pc, #24]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002fee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ff2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	37b8      	adds	r7, #184	@ 0xb8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800
 8003008:	00f42400 	.word	0x00f42400

0800300c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e28d      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8083 	beq.w	8003132 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800302c:	4b94      	ldr	r3, [pc, #592]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b04      	cmp	r3, #4
 8003036:	d019      	beq.n	800306c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003038:	4b91      	ldr	r3, [pc, #580]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003040:	2b08      	cmp	r3, #8
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003044:	4b8e      	ldr	r3, [pc, #568]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800304c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003050:	d00c      	beq.n	800306c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003052:	4b8b      	ldr	r3, [pc, #556]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800305a:	2b0c      	cmp	r3, #12
 800305c:	d112      	bne.n	8003084 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800305e:	4b88      	ldr	r3, [pc, #544]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003066:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800306a:	d10b      	bne.n	8003084 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	4b84      	ldr	r3, [pc, #528]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d05b      	beq.n	8003130 <HAL_RCC_OscConfig+0x124>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d157      	bne.n	8003130 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e25a      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800308c:	d106      	bne.n	800309c <HAL_RCC_OscConfig+0x90>
 800308e:	4b7c      	ldr	r3, [pc, #496]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a7b      	ldr	r2, [pc, #492]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e01d      	b.n	80030d8 <HAL_RCC_OscConfig+0xcc>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0xb4>
 80030a6:	4b76      	ldr	r3, [pc, #472]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a75      	ldr	r2, [pc, #468]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b73      	ldr	r3, [pc, #460]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a72      	ldr	r2, [pc, #456]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e00b      	b.n	80030d8 <HAL_RCC_OscConfig+0xcc>
 80030c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe fdca 	bl	8001c78 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e8:	f7fe fdc6 	bl	8001c78 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	@ 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e21f      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b61      	ldr	r3, [pc, #388]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0xdc>
 8003106:	e014      	b.n	8003132 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7fe fdb6 	bl	8001c78 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe fdb2 	bl	8001c78 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	@ 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e20b      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003122:	4b57      	ldr	r3, [pc, #348]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x104>
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d06f      	beq.n	800321e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800313e:	4b50      	ldr	r3, [pc, #320]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b00      	cmp	r3, #0
 8003148:	d017      	beq.n	800317a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800314a:	4b4d      	ldr	r3, [pc, #308]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003152:	2b08      	cmp	r3, #8
 8003154:	d105      	bne.n	8003162 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003156:	4b4a      	ldr	r3, [pc, #296]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003162:	4b47      	ldr	r3, [pc, #284]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800316a:	2b0c      	cmp	r3, #12
 800316c:	d11c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316e:	4b44      	ldr	r3, [pc, #272]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d116      	bne.n	80031a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317a:	4b41      	ldr	r3, [pc, #260]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_RCC_OscConfig+0x186>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d001      	beq.n	8003192 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e1d3      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4b3b      	ldr	r3, [pc, #236]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4937      	ldr	r1, [pc, #220]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a6:	e03a      	b.n	800321e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d020      	beq.n	80031f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b0:	4b34      	ldr	r3, [pc, #208]	@ (8003284 <HAL_RCC_OscConfig+0x278>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fe fd5f 	bl	8001c78 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031be:	f7fe fd5b 	bl	8001c78 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e1b4      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031dc:	4b28      	ldr	r3, [pc, #160]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4925      	ldr	r1, [pc, #148]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
 80031f0:	e015      	b.n	800321e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f2:	4b24      	ldr	r3, [pc, #144]	@ (8003284 <HAL_RCC_OscConfig+0x278>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe fd3e 	bl	8001c78 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003200:	f7fe fd3a 	bl	8001c78 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e193      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003212:	4b1b      	ldr	r3, [pc, #108]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d036      	beq.n	8003298 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d016      	beq.n	8003260 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003232:	4b15      	ldr	r3, [pc, #84]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fe fd1e 	bl	8001c78 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003240:	f7fe fd1a 	bl	8001c78 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e173      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003252:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x234>
 800325e:	e01b      	b.n	8003298 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003260:	4b09      	ldr	r3, [pc, #36]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003266:	f7fe fd07 	bl	8001c78 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	e00e      	b.n	800328c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800326e:	f7fe fd03 	bl	8001c78 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d907      	bls.n	800328c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e15c      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
 8003280:	40023800 	.word	0x40023800
 8003284:	42470000 	.word	0x42470000
 8003288:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	4b8a      	ldr	r3, [pc, #552]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 800328e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ea      	bne.n	800326e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8097 	beq.w	80033d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032aa:	4b83      	ldr	r3, [pc, #524]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	4b7f      	ldr	r3, [pc, #508]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	4a7e      	ldr	r2, [pc, #504]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032c6:	4b7c      	ldr	r3, [pc, #496]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d2:	2301      	movs	r3, #1
 80032d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d6:	4b79      	ldr	r3, [pc, #484]	@ (80034bc <HAL_RCC_OscConfig+0x4b0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d118      	bne.n	8003314 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e2:	4b76      	ldr	r3, [pc, #472]	@ (80034bc <HAL_RCC_OscConfig+0x4b0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a75      	ldr	r2, [pc, #468]	@ (80034bc <HAL_RCC_OscConfig+0x4b0>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ee:	f7fe fcc3 	bl	8001c78 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f6:	f7fe fcbf 	bl	8001c78 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e118      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	4b6c      	ldr	r3, [pc, #432]	@ (80034bc <HAL_RCC_OscConfig+0x4b0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d106      	bne.n	800332a <HAL_RCC_OscConfig+0x31e>
 800331c:	4b66      	ldr	r3, [pc, #408]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003320:	4a65      	ldr	r2, [pc, #404]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6713      	str	r3, [r2, #112]	@ 0x70
 8003328:	e01c      	b.n	8003364 <HAL_RCC_OscConfig+0x358>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b05      	cmp	r3, #5
 8003330:	d10c      	bne.n	800334c <HAL_RCC_OscConfig+0x340>
 8003332:	4b61      	ldr	r3, [pc, #388]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003336:	4a60      	ldr	r2, [pc, #384]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	6713      	str	r3, [r2, #112]	@ 0x70
 800333e:	4b5e      	ldr	r3, [pc, #376]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003342:	4a5d      	ldr	r2, [pc, #372]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6713      	str	r3, [r2, #112]	@ 0x70
 800334a:	e00b      	b.n	8003364 <HAL_RCC_OscConfig+0x358>
 800334c:	4b5a      	ldr	r3, [pc, #360]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003350:	4a59      	ldr	r2, [pc, #356]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	@ 0x70
 8003358:	4b57      	ldr	r3, [pc, #348]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335c:	4a56      	ldr	r2, [pc, #344]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 800335e:	f023 0304 	bic.w	r3, r3, #4
 8003362:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d015      	beq.n	8003398 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fe fc84 	bl	8001c78 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003372:	e00a      	b.n	800338a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003374:	f7fe fc80 	bl	8001c78 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e0d7      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338a:	4b4b      	ldr	r3, [pc, #300]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0ee      	beq.n	8003374 <HAL_RCC_OscConfig+0x368>
 8003396:	e014      	b.n	80033c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003398:	f7fe fc6e 	bl	8001c78 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fe fc6a 	bl	8001c78 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0c1      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b6:	4b40      	ldr	r3, [pc, #256]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ee      	bne.n	80033a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c8:	4b3b      	ldr	r3, [pc, #236]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	4a3a      	ldr	r2, [pc, #232]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80ad 	beq.w	8003538 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033de:	4b36      	ldr	r3, [pc, #216]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d060      	beq.n	80034ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d145      	bne.n	800347e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b33      	ldr	r3, [pc, #204]	@ (80034c0 <HAL_RCC_OscConfig+0x4b4>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe fc3e 	bl	8001c78 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe fc3a 	bl	8001c78 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e093      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b29      	ldr	r3, [pc, #164]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	3b01      	subs	r3, #1
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	071b      	lsls	r3, r3, #28
 800344a:	491b      	ldr	r1, [pc, #108]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003450:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <HAL_RCC_OscConfig+0x4b4>)
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7fe fc0f 	bl	8001c78 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345e:	f7fe fc0b 	bl	8001c78 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e064      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003470:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x452>
 800347c:	e05c      	b.n	8003538 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347e:	4b10      	ldr	r3, [pc, #64]	@ (80034c0 <HAL_RCC_OscConfig+0x4b4>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fe fbf8 	bl	8001c78 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe fbf4 	bl	8001c78 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e04d      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x480>
 80034aa:	e045      	b.n	8003538 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d107      	bne.n	80034c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e040      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40007000 	.word	0x40007000
 80034c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003544 <HAL_RCC_OscConfig+0x538>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d030      	beq.n	8003534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034dc:	429a      	cmp	r2, r3
 80034de:	d129      	bne.n	8003534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d122      	bne.n	8003534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034f4:	4013      	ands	r3, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d119      	bne.n	8003534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	3b01      	subs	r3, #1
 800350e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d10f      	bne.n	8003534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d107      	bne.n	8003534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800

08003548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e041      	b.n	80035de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fe fa04 	bl	800197c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	4619      	mov	r1, r3
 8003586:	4610      	mov	r0, r2
 8003588:	f000 fcf4 	bl	8003f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d001      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e04e      	b.n	800369e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a23      	ldr	r2, [pc, #140]	@ (80036ac <HAL_TIM_Base_Start_IT+0xc4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d022      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x80>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362a:	d01d      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x80>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1f      	ldr	r2, [pc, #124]	@ (80036b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d018      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x80>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1e      	ldr	r2, [pc, #120]	@ (80036b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d013      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x80>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1c      	ldr	r2, [pc, #112]	@ (80036b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00e      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x80>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1b      	ldr	r2, [pc, #108]	@ (80036bc <HAL_TIM_Base_Start_IT+0xd4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d009      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x80>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a19      	ldr	r2, [pc, #100]	@ (80036c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d004      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x80>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a18      	ldr	r2, [pc, #96]	@ (80036c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d111      	bne.n	800368c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b06      	cmp	r3, #6
 8003678:	d010      	beq.n	800369c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368a:	e007      	b.n	800369c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40010000 	.word	0x40010000
 80036b0:	40000400 	.word	0x40000400
 80036b4:	40000800 	.word	0x40000800
 80036b8:	40000c00 	.word	0x40000c00
 80036bc:	40010400 	.word	0x40010400
 80036c0:	40014000 	.word	0x40014000
 80036c4:	40001800 	.word	0x40001800

080036c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e041      	b.n	800375e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f839 	bl	8003766 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3304      	adds	r3, #4
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f000 fc34 	bl	8003f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_TIM_PWM_Start+0x24>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	bf14      	ite	ne
 8003798:	2301      	movne	r3, #1
 800379a:	2300      	moveq	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	e022      	b.n	80037e6 <HAL_TIM_PWM_Start+0x6a>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d109      	bne.n	80037ba <HAL_TIM_PWM_Start+0x3e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	bf14      	ite	ne
 80037b2:	2301      	movne	r3, #1
 80037b4:	2300      	moveq	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	e015      	b.n	80037e6 <HAL_TIM_PWM_Start+0x6a>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d109      	bne.n	80037d4 <HAL_TIM_PWM_Start+0x58>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	bf14      	ite	ne
 80037cc:	2301      	movne	r3, #1
 80037ce:	2300      	moveq	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e008      	b.n	80037e6 <HAL_TIM_PWM_Start+0x6a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	bf14      	ite	ne
 80037e0:	2301      	movne	r3, #1
 80037e2:	2300      	moveq	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07c      	b.n	80038e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d104      	bne.n	80037fe <HAL_TIM_PWM_Start+0x82>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037fc:	e013      	b.n	8003826 <HAL_TIM_PWM_Start+0xaa>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b04      	cmp	r3, #4
 8003802:	d104      	bne.n	800380e <HAL_TIM_PWM_Start+0x92>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800380c:	e00b      	b.n	8003826 <HAL_TIM_PWM_Start+0xaa>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b08      	cmp	r3, #8
 8003812:	d104      	bne.n	800381e <HAL_TIM_PWM_Start+0xa2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800381c:	e003      	b.n	8003826 <HAL_TIM_PWM_Start+0xaa>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2201      	movs	r2, #1
 800382c:	6839      	ldr	r1, [r7, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fe8a 	bl	8004548 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a2d      	ldr	r2, [pc, #180]	@ (80038f0 <HAL_TIM_PWM_Start+0x174>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d004      	beq.n	8003848 <HAL_TIM_PWM_Start+0xcc>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a2c      	ldr	r2, [pc, #176]	@ (80038f4 <HAL_TIM_PWM_Start+0x178>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d101      	bne.n	800384c <HAL_TIM_PWM_Start+0xd0>
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <HAL_TIM_PWM_Start+0xd2>
 800384c:	2300      	movs	r3, #0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003860:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a22      	ldr	r2, [pc, #136]	@ (80038f0 <HAL_TIM_PWM_Start+0x174>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d022      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x136>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003874:	d01d      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x136>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1f      	ldr	r2, [pc, #124]	@ (80038f8 <HAL_TIM_PWM_Start+0x17c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d018      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x136>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1d      	ldr	r2, [pc, #116]	@ (80038fc <HAL_TIM_PWM_Start+0x180>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x136>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1c      	ldr	r2, [pc, #112]	@ (8003900 <HAL_TIM_PWM_Start+0x184>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00e      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x136>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a16      	ldr	r2, [pc, #88]	@ (80038f4 <HAL_TIM_PWM_Start+0x178>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x136>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a18      	ldr	r2, [pc, #96]	@ (8003904 <HAL_TIM_PWM_Start+0x188>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x136>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a16      	ldr	r2, [pc, #88]	@ (8003908 <HAL_TIM_PWM_Start+0x18c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d111      	bne.n	80038d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b06      	cmp	r3, #6
 80038c2:	d010      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d4:	e007      	b.n	80038e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40010000 	.word	0x40010000
 80038f4:	40010400 	.word	0x40010400
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40000800 	.word	0x40000800
 8003900:	40000c00 	.word	0x40000c00
 8003904:	40014000 	.word	0x40014000
 8003908:	40001800 	.word	0x40001800

0800390c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2200      	movs	r2, #0
 800391c:	6839      	ldr	r1, [r7, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fe12 	bl	8004548 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a2e      	ldr	r2, [pc, #184]	@ (80039e4 <HAL_TIM_PWM_Stop+0xd8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_TIM_PWM_Stop+0x2c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2d      	ldr	r2, [pc, #180]	@ (80039e8 <HAL_TIM_PWM_Stop+0xdc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d101      	bne.n	800393c <HAL_TIM_PWM_Stop+0x30>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <HAL_TIM_PWM_Stop+0x32>
 800393c:	2300      	movs	r3, #0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d017      	beq.n	8003972 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6a1a      	ldr	r2, [r3, #32]
 8003948:	f241 1311 	movw	r3, #4369	@ 0x1111
 800394c:	4013      	ands	r3, r2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <HAL_TIM_PWM_Stop+0x66>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6a1a      	ldr	r2, [r3, #32]
 8003958:	f240 4344 	movw	r3, #1092	@ 0x444
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d107      	bne.n	8003972 <HAL_TIM_PWM_Stop+0x66>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	f241 1311 	movw	r3, #4369	@ 0x1111
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <HAL_TIM_PWM_Stop+0x96>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6a1a      	ldr	r2, [r3, #32]
 8003988:	f240 4344 	movw	r3, #1092	@ 0x444
 800398c:	4013      	ands	r3, r2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d107      	bne.n	80039a2 <HAL_TIM_PWM_Stop+0x96>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_PWM_Stop+0xa6>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039b0:	e013      	b.n	80039da <HAL_TIM_PWM_Stop+0xce>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_PWM_Stop+0xb6>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039c0:	e00b      	b.n	80039da <HAL_TIM_PWM_Stop+0xce>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d104      	bne.n	80039d2 <HAL_TIM_PWM_Stop+0xc6>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039d0:	e003      	b.n	80039da <HAL_TIM_PWM_Stop+0xce>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40010000 	.word	0x40010000
 80039e8:	40010400 	.word	0x40010400

080039ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d122      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d11b      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0202 	mvn.w	r2, #2
 8003a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fa81 	bl	8003f36 <HAL_TIM_IC_CaptureCallback>
 8003a34:	e005      	b.n	8003a42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa73 	bl	8003f22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fa84 	bl	8003f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d122      	bne.n	8003a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d11b      	bne.n	8003a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0204 	mvn.w	r2, #4
 8003a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fa57 	bl	8003f36 <HAL_TIM_IC_CaptureCallback>
 8003a88:	e005      	b.n	8003a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fa49 	bl	8003f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fa5a 	bl	8003f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d122      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d11b      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0208 	mvn.w	r2, #8
 8003ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fa2d 	bl	8003f36 <HAL_TIM_IC_CaptureCallback>
 8003adc:	e005      	b.n	8003aea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fa1f 	bl	8003f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fa30 	bl	8003f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b10      	cmp	r3, #16
 8003afc:	d122      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b10      	cmp	r3, #16
 8003b0a:	d11b      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0210 	mvn.w	r2, #16
 8003b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2208      	movs	r2, #8
 8003b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fa03 	bl	8003f36 <HAL_TIM_IC_CaptureCallback>
 8003b30:	e005      	b.n	8003b3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f9f5 	bl	8003f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fa06 	bl	8003f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d10e      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d107      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0201 	mvn.w	r2, #1
 8003b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f9cf 	bl	8003f0e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7a:	2b80      	cmp	r3, #128	@ 0x80
 8003b7c:	d10e      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b88:	2b80      	cmp	r3, #128	@ 0x80
 8003b8a:	d107      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fd82 	bl	80046a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba6:	2b40      	cmp	r3, #64	@ 0x40
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb4:	2b40      	cmp	r3, #64	@ 0x40
 8003bb6:	d107      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f9cb 	bl	8003f5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d10e      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d107      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0220 	mvn.w	r2, #32
 8003bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fd4c 	bl	800468c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e0ae      	b.n	8003d78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b0c      	cmp	r3, #12
 8003c26:	f200 809f 	bhi.w	8003d68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c30:	08003c65 	.word	0x08003c65
 8003c34:	08003d69 	.word	0x08003d69
 8003c38:	08003d69 	.word	0x08003d69
 8003c3c:	08003d69 	.word	0x08003d69
 8003c40:	08003ca5 	.word	0x08003ca5
 8003c44:	08003d69 	.word	0x08003d69
 8003c48:	08003d69 	.word	0x08003d69
 8003c4c:	08003d69 	.word	0x08003d69
 8003c50:	08003ce7 	.word	0x08003ce7
 8003c54:	08003d69 	.word	0x08003d69
 8003c58:	08003d69 	.word	0x08003d69
 8003c5c:	08003d69 	.word	0x08003d69
 8003c60:	08003d27 	.word	0x08003d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fa22 	bl	80040b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0208 	orr.w	r2, r2, #8
 8003c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0204 	bic.w	r2, r2, #4
 8003c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6999      	ldr	r1, [r3, #24]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	619a      	str	r2, [r3, #24]
      break;
 8003ca2:	e064      	b.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fa72 	bl	8004194 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6999      	ldr	r1, [r3, #24]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	021a      	lsls	r2, r3, #8
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	619a      	str	r2, [r3, #24]
      break;
 8003ce4:	e043      	b.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fac7 	bl	8004280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0208 	orr.w	r2, r2, #8
 8003d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0204 	bic.w	r2, r2, #4
 8003d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69d9      	ldr	r1, [r3, #28]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	61da      	str	r2, [r3, #28]
      break;
 8003d24:	e023      	b.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fb1b 	bl	8004368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69d9      	ldr	r1, [r3, #28]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	021a      	lsls	r2, r3, #8
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	61da      	str	r2, [r3, #28]
      break;
 8003d66:	e002      	b.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_TIM_ConfigClockSource+0x1c>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e0b4      	b.n	8003f06 <HAL_TIM_ConfigClockSource+0x186>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dd4:	d03e      	beq.n	8003e54 <HAL_TIM_ConfigClockSource+0xd4>
 8003dd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dda:	f200 8087 	bhi.w	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003de2:	f000 8086 	beq.w	8003ef2 <HAL_TIM_ConfigClockSource+0x172>
 8003de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dea:	d87f      	bhi.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003dec:	2b70      	cmp	r3, #112	@ 0x70
 8003dee:	d01a      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0xa6>
 8003df0:	2b70      	cmp	r3, #112	@ 0x70
 8003df2:	d87b      	bhi.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003df4:	2b60      	cmp	r3, #96	@ 0x60
 8003df6:	d050      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0x11a>
 8003df8:	2b60      	cmp	r3, #96	@ 0x60
 8003dfa:	d877      	bhi.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003dfc:	2b50      	cmp	r3, #80	@ 0x50
 8003dfe:	d03c      	beq.n	8003e7a <HAL_TIM_ConfigClockSource+0xfa>
 8003e00:	2b50      	cmp	r3, #80	@ 0x50
 8003e02:	d873      	bhi.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003e04:	2b40      	cmp	r3, #64	@ 0x40
 8003e06:	d058      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0x13a>
 8003e08:	2b40      	cmp	r3, #64	@ 0x40
 8003e0a:	d86f      	bhi.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003e0c:	2b30      	cmp	r3, #48	@ 0x30
 8003e0e:	d064      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0x15a>
 8003e10:	2b30      	cmp	r3, #48	@ 0x30
 8003e12:	d86b      	bhi.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d060      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0x15a>
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d867      	bhi.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d05c      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0x15a>
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	d05a      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0x15a>
 8003e24:	e062      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6899      	ldr	r1, [r3, #8]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f000 fb67 	bl	8004508 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	609a      	str	r2, [r3, #8]
      break;
 8003e52:	e04f      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6818      	ldr	r0, [r3, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	6899      	ldr	r1, [r3, #8]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f000 fb50 	bl	8004508 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e76:	609a      	str	r2, [r3, #8]
      break;
 8003e78:	e03c      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6859      	ldr	r1, [r3, #4]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f000 fac4 	bl	8004414 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2150      	movs	r1, #80	@ 0x50
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fb1d 	bl	80044d2 <TIM_ITRx_SetConfig>
      break;
 8003e98:	e02c      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6859      	ldr	r1, [r3, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f000 fae3 	bl	8004472 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2160      	movs	r1, #96	@ 0x60
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fb0d 	bl	80044d2 <TIM_ITRx_SetConfig>
      break;
 8003eb8:	e01c      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6859      	ldr	r1, [r3, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f000 faa4 	bl	8004414 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2140      	movs	r1, #64	@ 0x40
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fafd 	bl	80044d2 <TIM_ITRx_SetConfig>
      break;
 8003ed8:	e00c      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	f000 faf4 	bl	80044d2 <TIM_ITRx_SetConfig>
      break;
 8003eea:	e003      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef0:	e000      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
	...

08003f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a40      	ldr	r2, [pc, #256]	@ (8004088 <TIM_Base_SetConfig+0x114>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d013      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f92:	d00f      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a3d      	ldr	r2, [pc, #244]	@ (800408c <TIM_Base_SetConfig+0x118>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00b      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a3c      	ldr	r2, [pc, #240]	@ (8004090 <TIM_Base_SetConfig+0x11c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d007      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a3b      	ldr	r2, [pc, #236]	@ (8004094 <TIM_Base_SetConfig+0x120>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a3a      	ldr	r2, [pc, #232]	@ (8004098 <TIM_Base_SetConfig+0x124>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d108      	bne.n	8003fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8004088 <TIM_Base_SetConfig+0x114>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d02b      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fd4:	d027      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800408c <TIM_Base_SetConfig+0x118>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d023      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8004090 <TIM_Base_SetConfig+0x11c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01f      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8004094 <TIM_Base_SetConfig+0x120>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01b      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a29      	ldr	r2, [pc, #164]	@ (8004098 <TIM_Base_SetConfig+0x124>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d017      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a28      	ldr	r2, [pc, #160]	@ (800409c <TIM_Base_SetConfig+0x128>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a27      	ldr	r2, [pc, #156]	@ (80040a0 <TIM_Base_SetConfig+0x12c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00f      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a26      	ldr	r2, [pc, #152]	@ (80040a4 <TIM_Base_SetConfig+0x130>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00b      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a25      	ldr	r2, [pc, #148]	@ (80040a8 <TIM_Base_SetConfig+0x134>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d007      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a24      	ldr	r2, [pc, #144]	@ (80040ac <TIM_Base_SetConfig+0x138>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d003      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a23      	ldr	r2, [pc, #140]	@ (80040b0 <TIM_Base_SetConfig+0x13c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d108      	bne.n	8004038 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800402c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a0a      	ldr	r2, [pc, #40]	@ (8004088 <TIM_Base_SetConfig+0x114>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_Base_SetConfig+0xf8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a0c      	ldr	r2, [pc, #48]	@ (8004098 <TIM_Base_SetConfig+0x124>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d103      	bne.n	8004074 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	615a      	str	r2, [r3, #20]
}
 800407a:	bf00      	nop
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40010000 	.word	0x40010000
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800
 8004094:	40000c00 	.word	0x40000c00
 8004098:	40010400 	.word	0x40010400
 800409c:	40014000 	.word	0x40014000
 80040a0:	40014400 	.word	0x40014400
 80040a4:	40014800 	.word	0x40014800
 80040a8:	40001800 	.word	0x40001800
 80040ac:	40001c00 	.word	0x40001c00
 80040b0:	40002000 	.word	0x40002000

080040b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f023 0201 	bic.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0303 	bic.w	r3, r3, #3
 80040ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f023 0302 	bic.w	r3, r3, #2
 80040fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a20      	ldr	r2, [pc, #128]	@ (800418c <TIM_OC1_SetConfig+0xd8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_OC1_SetConfig+0x64>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a1f      	ldr	r2, [pc, #124]	@ (8004190 <TIM_OC1_SetConfig+0xdc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d10c      	bne.n	8004132 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0308 	bic.w	r3, r3, #8
 800411e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f023 0304 	bic.w	r3, r3, #4
 8004130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a15      	ldr	r2, [pc, #84]	@ (800418c <TIM_OC1_SetConfig+0xd8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d003      	beq.n	8004142 <TIM_OC1_SetConfig+0x8e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a14      	ldr	r2, [pc, #80]	@ (8004190 <TIM_OC1_SetConfig+0xdc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d111      	bne.n	8004166 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	621a      	str	r2, [r3, #32]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	40010000 	.word	0x40010000
 8004190:	40010400 	.word	0x40010400

08004194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f023 0210 	bic.w	r2, r3, #16
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f023 0320 	bic.w	r3, r3, #32
 80041de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a22      	ldr	r2, [pc, #136]	@ (8004278 <TIM_OC2_SetConfig+0xe4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d003      	beq.n	80041fc <TIM_OC2_SetConfig+0x68>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a21      	ldr	r2, [pc, #132]	@ (800427c <TIM_OC2_SetConfig+0xe8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d10d      	bne.n	8004218 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004216:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a17      	ldr	r2, [pc, #92]	@ (8004278 <TIM_OC2_SetConfig+0xe4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_OC2_SetConfig+0x94>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a16      	ldr	r2, [pc, #88]	@ (800427c <TIM_OC2_SetConfig+0xe8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d113      	bne.n	8004250 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800422e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40010000 	.word	0x40010000
 800427c:	40010400 	.word	0x40010400

08004280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a21      	ldr	r2, [pc, #132]	@ (8004360 <TIM_OC3_SetConfig+0xe0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d003      	beq.n	80042e6 <TIM_OC3_SetConfig+0x66>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a20      	ldr	r2, [pc, #128]	@ (8004364 <TIM_OC3_SetConfig+0xe4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d10d      	bne.n	8004302 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a16      	ldr	r2, [pc, #88]	@ (8004360 <TIM_OC3_SetConfig+0xe0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_OC3_SetConfig+0x92>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a15      	ldr	r2, [pc, #84]	@ (8004364 <TIM_OC3_SetConfig+0xe4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d113      	bne.n	800433a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40010000 	.word	0x40010000
 8004364:	40010400 	.word	0x40010400

08004368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800439e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	031b      	lsls	r3, r3, #12
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a12      	ldr	r2, [pc, #72]	@ (800440c <TIM_OC4_SetConfig+0xa4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d003      	beq.n	80043d0 <TIM_OC4_SetConfig+0x68>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a11      	ldr	r2, [pc, #68]	@ (8004410 <TIM_OC4_SetConfig+0xa8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d109      	bne.n	80043e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	019b      	lsls	r3, r3, #6
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40010000 	.word	0x40010000
 8004410:	40010400 	.word	0x40010400

08004414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f023 0201 	bic.w	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800443e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f023 030a 	bic.w	r3, r3, #10
 8004450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	621a      	str	r2, [r3, #32]
}
 8004466:	bf00      	nop
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004472:	b480      	push	{r7}
 8004474:	b087      	sub	sp, #28
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f023 0210 	bic.w	r2, r3, #16
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800449c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	031b      	lsls	r3, r3, #12
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	621a      	str	r2, [r3, #32]
}
 80044c6:	bf00      	nop
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b085      	sub	sp, #20
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f043 0307 	orr.w	r3, r3, #7
 80044f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	609a      	str	r2, [r3, #8]
}
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004522:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	021a      	lsls	r2, r3, #8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	431a      	orrs	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4313      	orrs	r3, r2
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	609a      	str	r2, [r3, #8]
}
 800453c:	bf00      	nop
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	2201      	movs	r2, #1
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a1a      	ldr	r2, [r3, #32]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	43db      	mvns	r3, r3
 800456a:	401a      	ands	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a1a      	ldr	r2, [r3, #32]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	fa01 f303 	lsl.w	r3, r1, r3
 8004580:	431a      	orrs	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e05a      	b.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a21      	ldr	r2, [pc, #132]	@ (8004670 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d022      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f8:	d01d      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004674 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d018      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1b      	ldr	r2, [pc, #108]	@ (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1a      	ldr	r2, [pc, #104]	@ (800467c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a18      	ldr	r2, [pc, #96]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a17      	ldr	r2, [pc, #92]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a15      	ldr	r2, [pc, #84]	@ (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10c      	bne.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800463c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	4313      	orrs	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40010000 	.word	0x40010000
 8004674:	40000400 	.word	0x40000400
 8004678:	40000800 	.word	0x40000800
 800467c:	40000c00 	.word	0x40000c00
 8004680:	40010400 	.word	0x40010400
 8004684:	40014000 	.word	0x40014000
 8004688:	40001800 	.word	0x40001800

0800468c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <memset>:
 80046b4:	4402      	add	r2, r0
 80046b6:	4603      	mov	r3, r0
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d100      	bne.n	80046be <memset+0xa>
 80046bc:	4770      	bx	lr
 80046be:	f803 1b01 	strb.w	r1, [r3], #1
 80046c2:	e7f9      	b.n	80046b8 <memset+0x4>

080046c4 <__libc_init_array>:
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	4d0d      	ldr	r5, [pc, #52]	@ (80046fc <__libc_init_array+0x38>)
 80046c8:	4c0d      	ldr	r4, [pc, #52]	@ (8004700 <__libc_init_array+0x3c>)
 80046ca:	1b64      	subs	r4, r4, r5
 80046cc:	10a4      	asrs	r4, r4, #2
 80046ce:	2600      	movs	r6, #0
 80046d0:	42a6      	cmp	r6, r4
 80046d2:	d109      	bne.n	80046e8 <__libc_init_array+0x24>
 80046d4:	4d0b      	ldr	r5, [pc, #44]	@ (8004704 <__libc_init_array+0x40>)
 80046d6:	4c0c      	ldr	r4, [pc, #48]	@ (8004708 <__libc_init_array+0x44>)
 80046d8:	f000 f826 	bl	8004728 <_init>
 80046dc:	1b64      	subs	r4, r4, r5
 80046de:	10a4      	asrs	r4, r4, #2
 80046e0:	2600      	movs	r6, #0
 80046e2:	42a6      	cmp	r6, r4
 80046e4:	d105      	bne.n	80046f2 <__libc_init_array+0x2e>
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
 80046e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ec:	4798      	blx	r3
 80046ee:	3601      	adds	r6, #1
 80046f0:	e7ee      	b.n	80046d0 <__libc_init_array+0xc>
 80046f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f6:	4798      	blx	r3
 80046f8:	3601      	adds	r6, #1
 80046fa:	e7f2      	b.n	80046e2 <__libc_init_array+0x1e>
 80046fc:	08004760 	.word	0x08004760
 8004700:	08004760 	.word	0x08004760
 8004704:	08004760 	.word	0x08004760
 8004708:	08004768 	.word	0x08004768

0800470c <memcpy>:
 800470c:	440a      	add	r2, r1
 800470e:	4291      	cmp	r1, r2
 8004710:	f100 33ff 	add.w	r3, r0, #4294967295
 8004714:	d100      	bne.n	8004718 <memcpy+0xc>
 8004716:	4770      	bx	lr
 8004718:	b510      	push	{r4, lr}
 800471a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800471e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004722:	4291      	cmp	r1, r2
 8004724:	d1f9      	bne.n	800471a <memcpy+0xe>
 8004726:	bd10      	pop	{r4, pc}

08004728 <_init>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	bf00      	nop
 800472c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472e:	bc08      	pop	{r3}
 8004730:	469e      	mov	lr, r3
 8004732:	4770      	bx	lr

08004734 <_fini>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr
