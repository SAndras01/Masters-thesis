
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003518  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036dc  080036dc  000136dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f4  080036f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080036f4  080036f4  000136f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036fc  080036fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036fc  080036fc  000136fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003700  08003700  00013700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003710  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003710  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2b5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b3f  00000000  00000000  0002d2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002ee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b19  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d47d  00000000  00000000  00050dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c830c  00000000  00000000  0005e256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00126562  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c0c  00000000  00000000  001265b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080036c4 	.word	0x080036c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080036c4 	.word	0x080036c4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <_ZN7SSD1305C1EP17I2C_HandleTypeDefhhh>:
 *      Author: SNA1BP
 */

#include "SSD1305.hpp"

SSD1305::SSD1305(
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	4611      	mov	r1, r2
 8000514:	461a      	mov	r2, r3
 8000516:	460b      	mov	r3, r1
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	4613      	mov	r3, r2
 800051c:	71bb      	strb	r3, [r7, #6]
		I2C_HandleTypeDef* hi2c_p,
		uint8_t address_p,
		uint8_t width_p,
		uint8_t height_p)
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	2204      	movs	r2, #4
 8000522:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
{
	this->hi2c = hi2c_p;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	68ba      	ldr	r2, [r7, #8]
 800052a:	601a      	str	r2, [r3, #0]
	this->address = address_p;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	79fa      	ldrb	r2, [r7, #7]
 8000530:	711a      	strb	r2, [r3, #4]
	this->width = width_p;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	79ba      	ldrb	r2, [r7, #6]
 8000536:	715a      	strb	r2, [r3, #5]
	this->height = height_p;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	7e3a      	ldrb	r2, [r7, #24]
 800053c:	719a      	strb	r2, [r3, #6]
}
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4618      	mov	r0, r3
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <_ZN7SSD13054InitEv>:

bool SSD1305::Init()
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af02      	add	r7, sp, #8
 8000552:	6078      	str	r0, [r7, #4]


    int status = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]

	status += SetDisplayON_OFF(DisplayOffSleepMode);
 8000558:	21ae      	movs	r1, #174	; 0xae
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 faa1 	bl	8000aa2 <_ZN7SSD130516SetDisplayON_OFFE11DisplayMode>
 8000560:	4603      	mov	r3, r0
 8000562:	461a      	mov	r2, r3
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	4413      	add	r3, r2
 8000568:	60fb      	str	r3, [r7, #12]
	status += SetMultiplexRatio(height-1);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	799b      	ldrb	r3, [r3, #6]
 800056e:	3b01      	subs	r3, #1
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4619      	mov	r1, r3
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f000 fa7a 	bl	8000a6e <_ZN7SSD130517SetMultiplexRatioEh>
 800057a:	4603      	mov	r3, r0
 800057c:	461a      	mov	r2, r3
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	4413      	add	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]
	status += SetDisplayOffset(0);
 8000584:	2100      	movs	r1, #0
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f000 faaf 	bl	8000aea <_ZN7SSD130516SetDisplayOffsetEh>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4413      	add	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
	status += SetDisplayStartLine(0);
 8000596:	2100      	movs	r1, #0
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f000 f9b3 	bl	8000904 <_ZN7SSD130519SetDisplayStartLineEh>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	4413      	add	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]
	status += SetColorAndPowerMode(monochromeMode, normalPowerMode);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2100      	movs	r1, #0
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 fab6 	bl	8000b1e <_ZN7SSD130520SetColorAndPowerModeE9ColorMode9PowerMode>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	4413      	add	r3, r2
 80005ba:	60fb      	str	r3, [r7, #12]
	status += SetMemoryAddressingMode(horizontal);
 80005bc:	2100      	movs	r1, #0
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f000 f943 	bl	800084a <_ZN7SSD130523SetMemoryAddressingModeE20MemoryAddressingMode>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
	status += SetSegmentReMap(columnAddress131toSEG0);
 80005ce:	2101      	movs	r1, #1
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 fa13 	bl	80009fc <_ZN7SSD130515SetSegmentReMapE12SegmentRemap>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	4413      	add	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
	status += SetLUT(0x3F, 0x3F, 0x3F, 0x3F);
 80005e0:	233f      	movs	r3, #63	; 0x3f
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	233f      	movs	r3, #63	; 0x3f
 80005e6:	223f      	movs	r2, #63	; 0x3f
 80005e8:	213f      	movs	r1, #63	; 0x3f
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f000 f9b9 	bl	8000962 <_ZN7SSD13056SetLUTEhhhh>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4413      	add	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
	status += SetPrechargePeriod(13, 2);
 80005fa:	2202      	movs	r2, #2
 80005fc:	210d      	movs	r1, #13
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 faab 	bl	8000b5a <_ZN7SSD130518SetPrechargePeriodEhh>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
	status += SetDisplayOffset(0);
 800060e:	2100      	movs	r1, #0
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f000 fa6a 	bl	8000aea <_ZN7SSD130516SetDisplayOffsetEh>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	4413      	add	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
	status += SetComOutputScanDirection(remappedMode);
 8000620:	21c8      	movs	r1, #200	; 0xc8
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 fa4f 	bl	8000ac6 <_ZN7SSD130525SetComOutputScanDirectionE22ComOutputScanDirection>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4413      	add	r3, r2
 8000630:	60fb      	str	r3, [r7, #12]
	status += SetNormalInverse(normal);
 8000632:	21a6      	movs	r1, #166	; 0xa6
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 fa08 	bl	8000a4a <_ZN7SSD130516SetNormalInverseE18DisplayInverseMode>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	4413      	add	r3, r2
 8000642:	60fb      	str	r3, [r7, #12]

    status += SetColumnAddress(v_offset, (width - 1) + v_offset);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f893 1211 	ldrb.w	r1, [r3, #529]	; 0x211
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	795a      	ldrb	r2, [r3, #5]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8000654:	4413      	add	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	3b01      	subs	r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	461a      	mov	r2, r3
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f000 f908 	bl	8000874 <_ZN7SSD130516SetColumnAddressEhh>
 8000664:	4603      	mov	r3, r0
 8000666:	461a      	mov	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
	status += SetPageAddress(0, 3);
 800066e:	2203      	movs	r2, #3
 8000670:	2100      	movs	r1, #0
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f922 	bl	80008bc <_ZN7SSD130514SetPageAddressEhh>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4413      	add	r3, r2
 8000680:	60fb      	str	r3, [r7, #12]

	status += Fill(Black);
 8000682:	2100      	movs	r1, #0
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f867 	bl	8000758 <_ZN7SSD13054FillE13SSD1305_COLOR>
 800068a:	4603      	mov	r3, r0
 800068c:	461a      	mov	r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]

    status += SetDisplayON_OFF(DisplayOnNormalMode);
 8000694:	21af      	movs	r1, #175	; 0xaf
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 fa03 	bl	8000aa2 <_ZN7SSD130516SetDisplayON_OFFE11DisplayMode>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4413      	add	r3, r2
 80006a4:	60fb      	str	r3, [r7, #12]
    status += EntireDisplayON(ResumeToRAMContent);
 80006a6:	21a4      	movs	r1, #164	; 0xa4
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 f9bc 	bl	8000a26 <_ZN7SSD130515EntireDisplayONE13DisplayONMode>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4413      	add	r3, r2
 80006b6:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <_ZN7SSD13054InitEv+0x176>
        return false;
 80006be:	2300      	movs	r3, #0
 80006c0:	e000      	b.n	80006c4 <_ZN7SSD13054InitEv+0x178>
    }

    return true;
 80006c2:	2301      	movs	r3, #1
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <_ZN7SSD13059GetHeightEv>:

uint8_t SSD1305::GetHeight(){return height;}
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	799b      	ldrb	r3, [r3, #6]
 80006d8:	4618      	mov	r0, r3
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <_ZN7SSD13058GetWidthEv>:
uint8_t SSD1305::GetWidth(){return width;}
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	795b      	ldrb	r3, [r3, #5]
 80006f0:	4618      	mov	r0, r3
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <_ZN7SSD130519WriteBitmapToScreenEPhj>:
		return HAL_I2C_Mem_Write(hi2c, address<<1, DATA_ADDRESS, 1, bitmapBuffer, size, size*10);
    }
}

HAL_StatusTypeDef SSD1305::WriteBitmapToScreen(uint8_t* bitmap, size_t size)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b08b      	sub	sp, #44	; 0x2c
 8000700:	af04      	add	r7, sp, #16
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;

    status =  SetMemoryAddressingMode(horizontal);
 8000708:	2100      	movs	r1, #0
 800070a:	68f8      	ldr	r0, [r7, #12]
 800070c:	f000 f89d 	bl	800084a <_ZN7SSD130523SetMemoryAddressingModeE20MemoryAddressingMode>
 8000710:	4603      	mov	r3, r0
 8000712:	75fb      	strb	r3, [r7, #23]

    if (status != HAL_OK)
 8000714:	7dfb      	ldrb	r3, [r7, #23]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <_ZN7SSD130519WriteBitmapToScreenEPhj+0x22>
    {
    	return status;
 800071a:	7dfb      	ldrb	r3, [r7, #23]
 800071c:	e018      	b.n	8000750 <_ZN7SSD130519WriteBitmapToScreenEPhj+0x54>
    }
    else
    {
		return HAL_I2C_Mem_Write(hi2c, address<<1, DATA_ADDRESS, 1, bitmap, size, size*10);
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	b29b      	uxth	r3, r3
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	b29c      	uxth	r4, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	b299      	uxth	r1, r3
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4613      	mov	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	9302      	str	r3, [sp, #8]
 800073c:	9101      	str	r1, [sp, #4]
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2301      	movs	r3, #1
 8000744:	2240      	movs	r2, #64	; 0x40
 8000746:	4621      	mov	r1, r4
 8000748:	f001 faa0 	bl	8001c8c <HAL_I2C_Mem_Write>
 800074c:	4603      	mov	r3, r0
 800074e:	bf00      	nop
    }
}
 8000750:	4618      	mov	r0, r3
 8000752:	371c      	adds	r7, #28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd90      	pop	{r4, r7, pc}

08000758 <_ZN7SSD13054FillE13SSD1305_COLOR>:

HAL_StatusTypeDef SSD1305::Fill(SSD1305_COLOR color_p)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af04      	add	r7, sp, #16
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;
	status = EnterReadModifyWrite();
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f000 fa20 	bl	8000baa <_ZN7SSD130520EnterReadModifyWriteEv>
 800076a:	4603      	mov	r3, r0
 800076c:	72fb      	strb	r3, [r7, #11]

    if (status != HAL_OK)
 800076e:	7afb      	ldrb	r3, [r7, #11]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <_ZN7SSD13054FillE13SSD1305_COLOR+0x20>
    {
    	return status;
 8000774:	7afb      	ldrb	r3, [r7, #11]
 8000776:	e046      	b.n	8000806 <_ZN7SSD13054FillE13SSD1305_COLOR+0xae>
    }
    else
    {
		uint8_t data = (color_p == Black) ? 0x00 : 0xFF;
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <_ZN7SSD13054FillE13SSD1305_COLOR+0x2a>
 800077e:	2300      	movs	r3, #0
 8000780:	e000      	b.n	8000784 <_ZN7SSD13054FillE13SSD1305_COLOR+0x2c>
 8000782:	23ff      	movs	r3, #255	; 0xff
 8000784:	72bb      	strb	r3, [r7, #10]

		for(int i = 0; i<(width * height) / 8; i++)
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	795b      	ldrb	r3, [r3, #5]
 800078e:	461a      	mov	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	799b      	ldrb	r3, [r3, #6]
 8000794:	fb02 f303 	mul.w	r3, r2, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	da00      	bge.n	800079e <_ZN7SSD13054FillE13SSD1305_COLOR+0x46>
 800079c:	3307      	adds	r3, #7
 800079e:	10db      	asrs	r3, r3, #3
 80007a0:	461a      	mov	r2, r3
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	4293      	cmp	r3, r2
 80007a6:	da23      	bge.n	80007f0 <_ZN7SSD13054FillE13SSD1305_COLOR+0x98>
		{
			bitmapBuffer[i] = data;
 80007a8:	7ab9      	ldrb	r1, [r7, #10]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4413      	add	r3, r2
 80007b0:	3311      	adds	r3, #17
 80007b2:	460a      	mov	r2, r1
 80007b4:	701a      	strb	r2, [r3, #0]
			status = HAL_I2C_Mem_Write(hi2c, address<<1, DATA_ADDRESS, 1, &data, 1, 10);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6818      	ldr	r0, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	791b      	ldrb	r3, [r3, #4]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	b299      	uxth	r1, r3
 80007c4:	230a      	movs	r3, #10
 80007c6:	9302      	str	r3, [sp, #8]
 80007c8:	2301      	movs	r3, #1
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	f107 030a 	add.w	r3, r7, #10
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2301      	movs	r3, #1
 80007d4:	2240      	movs	r2, #64	; 0x40
 80007d6:	f001 fa59 	bl	8001c8c <HAL_I2C_Mem_Write>
 80007da:	4603      	mov	r3, r0
 80007dc:	72fb      	strb	r3, [r7, #11]
		    if (status != HAL_OK)
 80007de:	7afb      	ldrb	r3, [r7, #11]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <_ZN7SSD13054FillE13SSD1305_COLOR+0x90>
		    {
		    	return status;
 80007e4:	7afb      	ldrb	r3, [r7, #11]
 80007e6:	e00e      	b.n	8000806 <_ZN7SSD13054FillE13SSD1305_COLOR+0xae>
		for(int i = 0; i<(width * height) / 8; i++)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	e7cc      	b.n	800078a <_ZN7SSD13054FillE13SSD1305_COLOR+0x32>
		    }
		}
    }

	status = ExitReadModifyWrite();
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f000 f9ea 	bl	8000bca <_ZN7SSD130519ExitReadModifyWriteEv>
 80007f6:	4603      	mov	r3, r0
 80007f8:	72fb      	strb	r3, [r7, #11]

    if (status != HAL_OK)
 80007fa:	7afb      	ldrb	r3, [r7, #11]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <_ZN7SSD13054FillE13SSD1305_COLOR+0xac>
    {
    	return status;
 8000800:	7afb      	ldrb	r3, [r7, #11]
 8000802:	e000      	b.n	8000806 <_ZN7SSD13054FillE13SSD1305_COLOR+0xae>
    }
	return status;
 8000804:	7afb      	ldrb	r3, [r7, #11]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <_ZN7SSD130511SendCommandEh>:
////REALISE THE METHODS OF THE IC////
/////////////////////////////////////


HAL_StatusTypeDef SSD1305::SendCommand(uint8_t commandSize)
{
 800080e:	b590      	push	{r4, r7, lr}
 8000810:	b087      	sub	sp, #28
 8000812:	af04      	add	r7, sp, #16
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	460b      	mov	r3, r1
 8000818:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(hi2c, address<<1, COMMAND_ADDRESS, 1, commandBuffer, commandSize, 10);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	791b      	ldrb	r3, [r3, #4]
 8000822:	b29b      	uxth	r3, r3
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	b299      	uxth	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	330c      	adds	r3, #12
 800082c:	78fa      	ldrb	r2, [r7, #3]
 800082e:	b292      	uxth	r2, r2
 8000830:	240a      	movs	r4, #10
 8000832:	9402      	str	r4, [sp, #8]
 8000834:	9201      	str	r2, [sp, #4]
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	2200      	movs	r2, #0
 800083c:	f001 fa26 	bl	8001c8c <HAL_I2C_Mem_Write>
 8000840:	4603      	mov	r3, r0
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bd90      	pop	{r4, r7, pc}

0800084a <_ZN7SSD130523SetMemoryAddressingModeE20MemoryAddressingMode>:
	commandBuffer[0] = SSD1305_SET_HIGHER_COLUMN | startAddress_p;
	return SendCommand(1);
}

HAL_StatusTypeDef SSD1305::SetMemoryAddressingMode(MemoryAddressingMode mode_p)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	460b      	mov	r3, r1
 8000854:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = SSD1305_MEMORY_ADDR_MODE;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2220      	movs	r2, #32
 800085a:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = mode_p;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	78fa      	ldrb	r2, [r7, #3]
 8000860:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000862:	2102      	movs	r1, #2
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ffd2 	bl	800080e <_ZN7SSD130511SendCommandEh>
 800086a:	4603      	mov	r3, r0
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <_ZN7SSD130516SetColumnAddressEhh>:

HAL_StatusTypeDef SSD1305::SetColumnAddress(uint8_t startAddres_p, uint8_t endAddres_p)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	70fb      	strb	r3, [r7, #3]
 8000880:	4613      	mov	r3, r2
 8000882:	70bb      	strb	r3, [r7, #2]
	if(startAddres_p > 131)
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	2b83      	cmp	r3, #131	; 0x83
 8000888:	d901      	bls.n	800088e <_ZN7SSD130516SetColumnAddressEhh+0x1a>
	{
		startAddres_p = 130;
 800088a:	2382      	movs	r3, #130	; 0x82
 800088c:	70fb      	strb	r3, [r7, #3]
	}
	if(endAddres_p > 131)
 800088e:	78bb      	ldrb	r3, [r7, #2]
 8000890:	2b83      	cmp	r3, #131	; 0x83
 8000892:	d901      	bls.n	8000898 <_ZN7SSD130516SetColumnAddressEhh+0x24>
	{
		endAddres_p =  131;
 8000894:	2383      	movs	r3, #131	; 0x83
 8000896:	70bb      	strb	r3, [r7, #2]
	}

	commandBuffer[0] = SSD1305_SET_COLUMN_ADDR;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2221      	movs	r2, #33	; 0x21
 800089c:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = startAddres_p;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	78fa      	ldrb	r2, [r7, #3]
 80008a2:	735a      	strb	r2, [r3, #13]
	commandBuffer[2] = endAddres_p;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	78ba      	ldrb	r2, [r7, #2]
 80008a8:	739a      	strb	r2, [r3, #14]

	return SendCommand(3);
 80008aa:	2103      	movs	r1, #3
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ffae 	bl	800080e <_ZN7SSD130511SendCommandEh>
 80008b2:	4603      	mov	r3, r0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <_ZN7SSD130514SetPageAddressEhh>:

HAL_StatusTypeDef SSD1305::SetPageAddress(uint8_t startAddres_p, uint8_t endAddres_p)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
 80008c8:	4613      	mov	r3, r2
 80008ca:	70bb      	strb	r3, [r7, #2]
	if(startAddres_p > 7)
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	2b07      	cmp	r3, #7
 80008d0:	d901      	bls.n	80008d6 <_ZN7SSD130514SetPageAddressEhh+0x1a>
	{
		startAddres_p = 7;
 80008d2:	2307      	movs	r3, #7
 80008d4:	70fb      	strb	r3, [r7, #3]
	}
	if(endAddres_p > 7)
 80008d6:	78bb      	ldrb	r3, [r7, #2]
 80008d8:	2b07      	cmp	r3, #7
 80008da:	d901      	bls.n	80008e0 <_ZN7SSD130514SetPageAddressEhh+0x24>
	{
		endAddres_p =  7;
 80008dc:	2307      	movs	r3, #7
 80008de:	70bb      	strb	r3, [r7, #2]
	}

	commandBuffer[0] = SSD1305_SET_PAGE_ADDR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2222      	movs	r2, #34	; 0x22
 80008e4:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = startAddres_p;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	78fa      	ldrb	r2, [r7, #3]
 80008ea:	735a      	strb	r2, [r3, #13]
	commandBuffer[2] = endAddres_p;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	78ba      	ldrb	r2, [r7, #2]
 80008f0:	739a      	strb	r2, [r3, #14]

	return SendCommand(3);
 80008f2:	2103      	movs	r1, #3
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff8a 	bl	800080e <_ZN7SSD130511SendCommandEh>
 80008fa:	4603      	mov	r3, r0
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <_ZN7SSD130519SetDisplayStartLineEh>:

HAL_StatusTypeDef SSD1305::SetDisplayStartLine(uint8_t line_p)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
	if(line_p > 63)
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b3f      	cmp	r3, #63	; 0x3f
 8000914:	d901      	bls.n	800091a <_ZN7SSD130519SetDisplayStartLineEh+0x16>
	{
		line_p = 63;
 8000916:	233f      	movs	r3, #63	; 0x3f
 8000918:	70fb      	strb	r3, [r7, #3]
	}

	commandBuffer[0] = SSD1305_SET_START_LINE | line_p;
 800091a:	78fb      	ldrb	r3, [r7, #3]
 800091c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000920:	b2da      	uxtb	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000926:	2101      	movs	r1, #1
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff ff70 	bl	800080e <_ZN7SSD130511SendCommandEh>
 800092e:	4603      	mov	r3, r0
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <_ZN7SSD130530SetBrightnessForAreaColorBanksEh>:

	return SendCommand(2);
}

HAL_StatusTypeDef SSD1305::SetBrightnessForAreaColorBanks(uint8_t brightness_p)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = SSD1305_SET_BRIGHTNESS;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2282      	movs	r2, #130	; 0x82
 8000948:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = brightness_p;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	78fa      	ldrb	r2, [r7, #3]
 800094e:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000950:	2102      	movs	r1, #2
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ff5b 	bl	800080e <_ZN7SSD130511SendCommandEh>
 8000958:	4603      	mov	r3, r0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <_ZN7SSD13056SetLUTEhhhh>:

HAL_StatusTypeDef SSD1305::SetLUT(uint8_t LUT_BANK0_p, uint8_t LUT_ColorA_p, uint8_t LUT_ColorB_p, uint8_t LUT_ColorC_p)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	4608      	mov	r0, r1
 800096c:	4611      	mov	r1, r2
 800096e:	461a      	mov	r2, r3
 8000970:	4603      	mov	r3, r0
 8000972:	70fb      	strb	r3, [r7, #3]
 8000974:	460b      	mov	r3, r1
 8000976:	70bb      	strb	r3, [r7, #2]
 8000978:	4613      	mov	r3, r2
 800097a:	707b      	strb	r3, [r7, #1]
	if(LUT_BANK0_p < 32){
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	2b1f      	cmp	r3, #31
 8000980:	d801      	bhi.n	8000986 <_ZN7SSD13056SetLUTEhhhh+0x24>
		LUT_BANK0_p = 32;
 8000982:	2320      	movs	r3, #32
 8000984:	70fb      	strb	r3, [r7, #3]
	}
	if(LUT_BANK0_p > 63){
 8000986:	78fb      	ldrb	r3, [r7, #3]
 8000988:	2b3f      	cmp	r3, #63	; 0x3f
 800098a:	d901      	bls.n	8000990 <_ZN7SSD13056SetLUTEhhhh+0x2e>
		LUT_BANK0_p = 63;
 800098c:	233f      	movs	r3, #63	; 0x3f
 800098e:	70fb      	strb	r3, [r7, #3]
	}
	//--//
	if(LUT_ColorA_p < 32){
 8000990:	78bb      	ldrb	r3, [r7, #2]
 8000992:	2b1f      	cmp	r3, #31
 8000994:	d801      	bhi.n	800099a <_ZN7SSD13056SetLUTEhhhh+0x38>
		LUT_ColorA_p = 32;
 8000996:	2320      	movs	r3, #32
 8000998:	70bb      	strb	r3, [r7, #2]
	}
	if(LUT_ColorA_p > 63){
 800099a:	78bb      	ldrb	r3, [r7, #2]
 800099c:	2b3f      	cmp	r3, #63	; 0x3f
 800099e:	d901      	bls.n	80009a4 <_ZN7SSD13056SetLUTEhhhh+0x42>
		LUT_ColorA_p = 63;
 80009a0:	233f      	movs	r3, #63	; 0x3f
 80009a2:	70bb      	strb	r3, [r7, #2]
	}
	//--//
	if(LUT_ColorB_p < 32){
 80009a4:	787b      	ldrb	r3, [r7, #1]
 80009a6:	2b1f      	cmp	r3, #31
 80009a8:	d801      	bhi.n	80009ae <_ZN7SSD13056SetLUTEhhhh+0x4c>
		LUT_ColorB_p = 32;
 80009aa:	2320      	movs	r3, #32
 80009ac:	707b      	strb	r3, [r7, #1]
	}
	if(LUT_ColorB_p > 63){
 80009ae:	787b      	ldrb	r3, [r7, #1]
 80009b0:	2b3f      	cmp	r3, #63	; 0x3f
 80009b2:	d901      	bls.n	80009b8 <_ZN7SSD13056SetLUTEhhhh+0x56>
		LUT_ColorB_p = 63;
 80009b4:	233f      	movs	r3, #63	; 0x3f
 80009b6:	707b      	strb	r3, [r7, #1]
	}
	//--//
	if(LUT_ColorC_p < 32){
 80009b8:	7c3b      	ldrb	r3, [r7, #16]
 80009ba:	2b1f      	cmp	r3, #31
 80009bc:	d801      	bhi.n	80009c2 <_ZN7SSD13056SetLUTEhhhh+0x60>
		LUT_ColorC_p = 32;
 80009be:	2320      	movs	r3, #32
 80009c0:	743b      	strb	r3, [r7, #16]
	}
	if(LUT_ColorC_p > 63){
 80009c2:	7c3b      	ldrb	r3, [r7, #16]
 80009c4:	2b3f      	cmp	r3, #63	; 0x3f
 80009c6:	d901      	bls.n	80009cc <_ZN7SSD13056SetLUTEhhhh+0x6a>
		LUT_ColorC_p = 63;
 80009c8:	233f      	movs	r3, #63	; 0x3f
 80009ca:	743b      	strb	r3, [r7, #16]
	}

	commandBuffer[0] = SSD1305_SET_LUT;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2291      	movs	r2, #145	; 0x91
 80009d0:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = LUT_BANK0_p;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	78fa      	ldrb	r2, [r7, #3]
 80009d6:	735a      	strb	r2, [r3, #13]
	commandBuffer[2] = LUT_ColorA_p;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	78ba      	ldrb	r2, [r7, #2]
 80009dc:	739a      	strb	r2, [r3, #14]
	commandBuffer[3] = LUT_ColorB_p;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	787a      	ldrb	r2, [r7, #1]
 80009e2:	73da      	strb	r2, [r3, #15]
	commandBuffer[4] = LUT_ColorC_p;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	7c3a      	ldrb	r2, [r7, #16]
 80009e8:	741a      	strb	r2, [r3, #16]

	return SendCommand(5);
 80009ea:	2105      	movs	r1, #5
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff0e 	bl	800080e <_ZN7SSD130511SendCommandEh>
 80009f2:	4603      	mov	r3, r0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_ZN7SSD130515SetSegmentReMapE12SegmentRemap>:

HAL_StatusTypeDef SSD1305::SetSegmentReMap(SegmentRemap remap_p)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = SSD1305_SEG_REMAP | remap_p;
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000a14:	2101      	movs	r1, #1
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff fef9 	bl	800080e <_ZN7SSD130511SendCommandEh>
 8000a1c:	4603      	mov	r3, r0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <_ZN7SSD130515EntireDisplayONE13DisplayONMode>:

HAL_StatusTypeDef SSD1305::EntireDisplayON(DisplayONMode displayONMode_p)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = displayONMode_p;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	78fa      	ldrb	r2, [r7, #3]
 8000a36:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000a38:	2101      	movs	r1, #1
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff fee7 	bl	800080e <_ZN7SSD130511SendCommandEh>
 8000a40:	4603      	mov	r3, r0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_ZN7SSD130516SetNormalInverseE18DisplayInverseMode>:

HAL_StatusTypeDef SSD1305::SetNormalInverse(DisplayInverseMode inversMode_p)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = inversMode_p;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	78fa      	ldrb	r2, [r7, #3]
 8000a5a:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fed5 	bl	800080e <_ZN7SSD130511SendCommandEh>
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_ZN7SSD130517SetMultiplexRatioEh>:

HAL_StatusTypeDef SSD1305::SetMultiplexRatio(uint8_t ratio_p)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	460b      	mov	r3, r1
 8000a78:	70fb      	strb	r3, [r7, #3]
	if(ratio_p < 15)
 8000a7a:	78fb      	ldrb	r3, [r7, #3]
 8000a7c:	2b0e      	cmp	r3, #14
 8000a7e:	d801      	bhi.n	8000a84 <_ZN7SSD130517SetMultiplexRatioEh+0x16>
	{
		ratio_p = 15;
 8000a80:	230f      	movs	r3, #15
 8000a82:	70fb      	strb	r3, [r7, #3]
	}

	commandBuffer[0] = 	SSD1305_SET_MULTIPLEX_RATIO;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	22a8      	movs	r2, #168	; 0xa8
 8000a88:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = ratio_p;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	78fa      	ldrb	r2, [r7, #3]
 8000a8e:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000a90:	2102      	movs	r1, #2
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff febb 	bl	800080e <_ZN7SSD130511SendCommandEh>
 8000a98:	4603      	mov	r3, r0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_ZN7SSD130516SetDisplayON_OFFE11DisplayMode>:

	return SendCommand(4);
}

HAL_StatusTypeDef SSD1305::SetDisplayON_OFF(DisplayMode mode_p)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = mode_p;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	78fa      	ldrb	r2, [r7, #3]
 8000ab2:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fea9 	bl	800080e <_ZN7SSD130511SendCommandEh>
 8000abc:	4603      	mov	r3, r0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <_ZN7SSD130525SetComOutputScanDirectionE22ComOutputScanDirection>:

	return SendCommand(1);
}

HAL_StatusTypeDef SSD1305::SetComOutputScanDirection(ComOutputScanDirection scanDirection_p)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = scanDirection_p;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	78fa      	ldrb	r2, [r7, #3]
 8000ad6:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000ad8:	2101      	movs	r1, #1
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff fe97 	bl	800080e <_ZN7SSD130511SendCommandEh>
 8000ae0:	4603      	mov	r3, r0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <_ZN7SSD130516SetDisplayOffsetEh>:

HAL_StatusTypeDef SSD1305::SetDisplayOffset(uint8_t verticalShift_p)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	70fb      	strb	r3, [r7, #3]
	if (verticalShift_p > 63)
 8000af6:	78fb      	ldrb	r3, [r7, #3]
 8000af8:	2b3f      	cmp	r3, #63	; 0x3f
 8000afa:	d901      	bls.n	8000b00 <_ZN7SSD130516SetDisplayOffsetEh+0x16>
	{
		verticalShift_p = 63;
 8000afc:	233f      	movs	r3, #63	; 0x3f
 8000afe:	70fb      	strb	r3, [r7, #3]
	}

	commandBuffer[0] = SSD1305_SET_DISPLAY_OFFSET;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	22d3      	movs	r2, #211	; 0xd3
 8000b04:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = verticalShift_p;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	78fa      	ldrb	r2, [r7, #3]
 8000b0a:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff fe7d 	bl	800080e <_ZN7SSD130511SendCommandEh>
 8000b14:	4603      	mov	r3, r0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_ZN7SSD130520SetColorAndPowerModeE9ColorMode9PowerMode>:

	return SendCommand(2);
}

HAL_StatusTypeDef SSD1305::SetColorAndPowerMode(ColorMode colorMode_p, PowerMode powerMode_p)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	460b      	mov	r3, r1
 8000b28:	70fb      	strb	r3, [r7, #3]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	70bb      	strb	r3, [r7, #2]
	commandBuffer[0] = SSD1305_SET_COLOR_n_POWER_MODE;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	22d8      	movs	r2, #216	; 0xd8
 8000b32:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = (colorMode_p << 4) | powerMode_p;
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	011b      	lsls	r3, r3, #4
 8000b38:	b25a      	sxtb	r2, r3
 8000b3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000b48:	2102      	movs	r1, #2
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fe5f 	bl	800080e <_ZN7SSD130511SendCommandEh>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_ZN7SSD130518SetPrechargePeriodEhh>:

HAL_StatusTypeDef SSD1305::SetPrechargePeriod(uint8_t phase1_p, uint8_t phase2_p)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	460b      	mov	r3, r1
 8000b64:	70fb      	strb	r3, [r7, #3]
 8000b66:	4613      	mov	r3, r2
 8000b68:	70bb      	strb	r3, [r7, #2]
	if(phase1_p > 0xF)
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d901      	bls.n	8000b74 <_ZN7SSD130518SetPrechargePeriodEhh+0x1a>
	{
		phase1_p = 0xF;
 8000b70:	230f      	movs	r3, #15
 8000b72:	70fb      	strb	r3, [r7, #3]
	}

	if(phase2_p > 0xF)
 8000b74:	78bb      	ldrb	r3, [r7, #2]
 8000b76:	2b0f      	cmp	r3, #15
 8000b78:	d901      	bls.n	8000b7e <_ZN7SSD130518SetPrechargePeriodEhh+0x24>
	{
		phase2_p = 0xF;
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	70bb      	strb	r3, [r7, #2]
	}

	commandBuffer[0] = SSD1305_SET_PRECHARGE_PERIOD;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	22d9      	movs	r2, #217	; 0xd9
 8000b82:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = (phase2_p << 4) | phase1_p;
 8000b84:	78bb      	ldrb	r3, [r7, #2]
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	b25a      	sxtb	r2, r3
 8000b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000b98:	2102      	movs	r1, #2
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fe37 	bl	800080e <_ZN7SSD130511SendCommandEh>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_ZN7SSD130520EnterReadModifyWriteEv>:

	return SendCommand(2);
}

HAL_StatusTypeDef SSD1305::EnterReadModifyWrite()
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
	commandBuffer[0] = SSD1305_READ_MODIFY_WRITE;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	22e0      	movs	r2, #224	; 0xe0
 8000bb6:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000bb8:	2101      	movs	r1, #1
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fe27 	bl	800080e <_ZN7SSD130511SendCommandEh>
 8000bc0:	4603      	mov	r3, r0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_ZN7SSD130519ExitReadModifyWriteEv>:

	return SendCommand(1);
}

HAL_StatusTypeDef SSD1305::ExitReadModifyWrite()
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
	commandBuffer[0] = SSD1305_EXIT_RMW;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	22ee      	movs	r2, #238	; 0xee
 8000bd6:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000bd8:	2101      	movs	r1, #1
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff fe17 	bl	800080e <_ZN7SSD130511SendCommandEh>
 8000be0:	4603      	mov	r3, r0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <_Z17available_devicesPi>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void available_devices(int* devices)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	int j = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<128; i++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8000c00:	dc1a      	bgt.n	8000c38 <_Z17available_devicesPi+0x4c>
	{
		status = HAL_I2C_IsDeviceReady(&hi2c1, i<<1, 2, 100);
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	b299      	uxth	r1, r3
 8000c0a:	2364      	movs	r3, #100	; 0x64
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	480c      	ldr	r0, [pc, #48]	; (8000c40 <_Z17available_devicesPi+0x54>)
 8000c10:	f001 f936 	bl	8001e80 <HAL_I2C_IsDeviceReady>
 8000c14:	4603      	mov	r3, r0
 8000c16:	73fb      	strb	r3, [r7, #15]
		if(status == HAL_OK)
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d108      	bne.n	8000c30 <_Z17available_devicesPi+0x44>
			{
				devices[j] = i;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	601a      	str	r2, [r3, #0]
				j++;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<128; i++)
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	3301      	adds	r3, #1
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	e7e1      	b.n	8000bfc <_Z17available_devicesPi+0x10>
			}
	}
}
 8000c38:	bf00      	nop
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000028 	.word	0x20000028

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c46:	f2ad 6d2c 	subw	sp, sp, #1580	; 0x62c
 8000c4a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4c:	f000 fbd4 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c50:	f000 f966 	bl	8000f20 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c54:	f000 fa3e 	bl	80010d4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000c58:	f000 fa0e 	bl	8001078 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8000c5c:	f000 f9d8 	bl	8001010 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  int devices[128];
  for(int i = 0; i<128; i++){devices[i] = 0;}
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8000c66:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8000c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c6c:	dc0e      	bgt.n	8000c8c <main+0x48>
 8000c6e:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8000c72:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000c76:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000c80:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8000c84:	3301      	adds	r3, #1
 8000c86:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8000c8a:	e7ec      	b.n	8000c66 <main+0x22>

  available_devices(devices);
 8000c8c:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ffab 	bl	8000bec <_Z17available_devicesPi>

  SSD1305 display(&hi2c1, 0x3C, 128, 32);
 8000c96:	f507 7000 	add.w	r0, r7, #512	; 0x200
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	2380      	movs	r3, #128	; 0x80
 8000ca0:	223c      	movs	r2, #60	; 0x3c
 8000ca2:	499e      	ldr	r1, [pc, #632]	; (8000f1c <main+0x2d8>)
 8000ca4:	f7ff fc30 	bl	8000508 <_ZN7SSD1305C1EP17I2C_HandleTypeDefhhh>
  display.Init();
 8000ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fc4d 	bl	800054c <_ZN7SSD13054InitEv>
  //display.WriteBitmapToScreen(Misato_sfw, sizeof(Misato_sfw));

  // 2) Kapcsoljuk a kijelzőt area color módba

  uint8_t bitmapBuffer[512];
  for(int i = 0; i < 512; i++){bitmapBuffer[i] = 0;}
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8000cb8:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8000cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cc0:	da0e      	bge.n	8000ce0 <main+0x9c>
 8000cc2:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8000cc6:	f5a3 62c4 	sub.w	r2, r3, #1568	; 0x620
 8000cca:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8000cce:	4413      	add	r3, r2
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8000cd8:	3301      	adds	r3, #1
 8000cda:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8000cde:	e7eb      	b.n	8000cb8 <main+0x74>
  display.SetColorAndPowerMode(colorMode, normalPowerMode);
 8000ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2130      	movs	r1, #48	; 0x30
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff18 	bl	8000b1e <_ZN7SSD130520SetColorAndPowerModeE9ColorMode9PowerMode>

  // 3) LUT beállítása (32–63 közötti értékek)
  // Például: Bank0 nagyon halvány, ColorA közepes, ColorB erősebb, ColorC maximális
  display.SetLUT(35, 45, 55, 63);
 8000cee:	f507 7000 	add.w	r0, r7, #512	; 0x200
 8000cf2:	233f      	movs	r3, #63	; 0x3f
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	2337      	movs	r3, #55	; 0x37
 8000cf8:	222d      	movs	r2, #45	; 0x2d
 8000cfa:	2123      	movs	r1, #35	; 0x23
 8000cfc:	f7ff fe31 	bl	8000962 <_ZN7SSD13056SetLUTEhhhh>

  // 4) Fényerő finomhangolása (0x00–0xFF)
  display.SetBrightnessForAreaColorBanks(0x80);
 8000d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fe16 	bl	8000938 <_ZN7SSD130530SetBrightnessForAreaColorBanksEh>

  // 5) RAM kitöltése tesztmintával:
  // 4 függőleges sáv (mind más bankhoz tartozzon)
  for (uint8_t x = 0; x < display.GetWidth(); x++) {
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 3617 	strb.w	r3, [r7, #1559]	; 0x617
 8000d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fce4 	bl	80006e4 <_ZN7SSD13058GetWidthEv>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	f897 3617 	ldrb.w	r3, [r7, #1559]	; 0x617
 8000d24:	4293      	cmp	r3, r2
 8000d26:	bf34      	ite	cc
 8000d28:	2301      	movcc	r3, #1
 8000d2a:	2300      	movcs	r3, #0
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 80ea 	beq.w	8000f08 <main+0x2c4>
	  for (uint8_t y = 0; y < display.GetHeight(); y++) {
 8000d34:	2300      	movs	r3, #0
 8000d36:	f887 3616 	strb.w	r3, [r7, #1558]	; 0x616
 8000d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fcc4 	bl	80006cc <_ZN7SSD13059GetHeightEv>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	f897 3616 	ldrb.w	r3, [r7, #1558]	; 0x616
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	bf34      	ite	cc
 8000d50:	2301      	movcc	r3, #1
 8000d52:	2300      	movcs	r3, #0
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 80d0 	beq.w	8000efc <main+0x2b8>

		  SSD1305_COLOR pixelColor = White;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	f887 3615 	strb.w	r3, [r7, #1557]	; 0x615

		  if (x < 32) {
 8000d62:	f897 3617 	ldrb.w	r3, [r7, #1559]	; 0x617
 8000d66:	2b1f      	cmp	r3, #31
 8000d68:	d82e      	bhi.n	8000dc8 <main+0x184>
			  // Bank0 → halvány
			  bitmapBuffer[x + (y / 8) * display.GetWidth()] |= (1 << (y % 8));
 8000d6a:	f897 4617 	ldrb.w	r4, [r7, #1559]	; 0x617
 8000d6e:	f897 3616 	ldrb.w	r3, [r7, #1558]	; 0x616
 8000d72:	08db      	lsrs	r3, r3, #3
 8000d74:	b2dd      	uxtb	r5, r3
 8000d76:	462e      	mov	r6, r5
 8000d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcb1 	bl	80006e4 <_ZN7SSD13058GetWidthEv>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4618      	mov	r0, r3
 8000d86:	4603      	mov	r3, r0
 8000d88:	fb06 f303 	mul.w	r3, r6, r3
 8000d8c:	4423      	add	r3, r4
 8000d8e:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8000d92:	f5a2 62c4 	sub.w	r2, r2, #1568	; 0x620
 8000d96:	5cd3      	ldrb	r3, [r2, r3]
 8000d98:	b25a      	sxtb	r2, r3
 8000d9a:	f897 3616 	ldrb.w	r3, [r7, #1558]	; 0x616
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	2101      	movs	r1, #1
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b259      	sxtb	r1, r3
 8000dae:	f897 2617 	ldrb.w	r2, [r7, #1559]	; 0x617
 8000db2:	462b      	mov	r3, r5
 8000db4:	fb00 f303 	mul.w	r3, r0, r3
 8000db8:	4413      	add	r3, r2
 8000dba:	b2c9      	uxtb	r1, r1
 8000dbc:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8000dc0:	f5a2 62c4 	sub.w	r2, r2, #1568	; 0x620
 8000dc4:	54d1      	strb	r1, [r2, r3]
 8000dc6:	e093      	b.n	8000ef0 <main+0x2ac>
		  } else if (x < 64) {
 8000dc8:	f897 3617 	ldrb.w	r3, [r7, #1559]	; 0x617
 8000dcc:	2b3f      	cmp	r3, #63	; 0x3f
 8000dce:	d82e      	bhi.n	8000e2e <main+0x1ea>
			  // Color A
			  bitmapBuffer[x + (y / 8) * display.GetWidth()] |= (1 << (y % 8));
 8000dd0:	f897 4617 	ldrb.w	r4, [r7, #1559]	; 0x617
 8000dd4:	f897 3616 	ldrb.w	r3, [r7, #1558]	; 0x616
 8000dd8:	08db      	lsrs	r3, r3, #3
 8000dda:	b2dd      	uxtb	r5, r3
 8000ddc:	462e      	mov	r6, r5
 8000dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fc7e 	bl	80006e4 <_ZN7SSD13058GetWidthEv>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4618      	mov	r0, r3
 8000dec:	4603      	mov	r3, r0
 8000dee:	fb06 f303 	mul.w	r3, r6, r3
 8000df2:	4423      	add	r3, r4
 8000df4:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8000df8:	f5a2 62c4 	sub.w	r2, r2, #1568	; 0x620
 8000dfc:	5cd3      	ldrb	r3, [r2, r3]
 8000dfe:	b25a      	sxtb	r2, r3
 8000e00:	f897 3616 	ldrb.w	r3, [r7, #1558]	; 0x616
 8000e04:	f003 0307 	and.w	r3, r3, #7
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	b259      	sxtb	r1, r3
 8000e14:	f897 2617 	ldrb.w	r2, [r7, #1559]	; 0x617
 8000e18:	462b      	mov	r3, r5
 8000e1a:	fb00 f303 	mul.w	r3, r0, r3
 8000e1e:	4413      	add	r3, r2
 8000e20:	b2c9      	uxtb	r1, r1
 8000e22:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8000e26:	f5a2 62c4 	sub.w	r2, r2, #1568	; 0x620
 8000e2a:	54d1      	strb	r1, [r2, r3]
 8000e2c:	e060      	b.n	8000ef0 <main+0x2ac>
		  } else if (x < 96) {
 8000e2e:	f897 3617 	ldrb.w	r3, [r7, #1559]	; 0x617
 8000e32:	2b5f      	cmp	r3, #95	; 0x5f
 8000e34:	d82e      	bhi.n	8000e94 <main+0x250>
			  // Color B
			  bitmapBuffer[x + (y / 8) * display.GetWidth()] |= (1 << (y % 8));
 8000e36:	f897 4617 	ldrb.w	r4, [r7, #1559]	; 0x617
 8000e3a:	f897 3616 	ldrb.w	r3, [r7, #1558]	; 0x616
 8000e3e:	08db      	lsrs	r3, r3, #3
 8000e40:	b2dd      	uxtb	r5, r3
 8000e42:	462e      	mov	r6, r5
 8000e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fc4b 	bl	80006e4 <_ZN7SSD13058GetWidthEv>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4618      	mov	r0, r3
 8000e52:	4603      	mov	r3, r0
 8000e54:	fb06 f303 	mul.w	r3, r6, r3
 8000e58:	4423      	add	r3, r4
 8000e5a:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8000e5e:	f5a2 62c4 	sub.w	r2, r2, #1568	; 0x620
 8000e62:	5cd3      	ldrb	r3, [r2, r3]
 8000e64:	b25a      	sxtb	r2, r3
 8000e66:	f897 3616 	ldrb.w	r3, [r7, #1558]	; 0x616
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	b259      	sxtb	r1, r3
 8000e7a:	f897 2617 	ldrb.w	r2, [r7, #1559]	; 0x617
 8000e7e:	462b      	mov	r3, r5
 8000e80:	fb00 f303 	mul.w	r3, r0, r3
 8000e84:	4413      	add	r3, r2
 8000e86:	b2c9      	uxtb	r1, r1
 8000e88:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8000e8c:	f5a2 62c4 	sub.w	r2, r2, #1568	; 0x620
 8000e90:	54d1      	strb	r1, [r2, r3]
 8000e92:	e02d      	b.n	8000ef0 <main+0x2ac>
		  } else {
			  // Color C
			  bitmapBuffer[x + (y / 8) * display.GetWidth()] |= (1 << (y % 8));
 8000e94:	f897 4617 	ldrb.w	r4, [r7, #1559]	; 0x617
 8000e98:	f897 3616 	ldrb.w	r3, [r7, #1558]	; 0x616
 8000e9c:	08db      	lsrs	r3, r3, #3
 8000e9e:	b2dd      	uxtb	r5, r3
 8000ea0:	462e      	mov	r6, r5
 8000ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fc1c 	bl	80006e4 <_ZN7SSD13058GetWidthEv>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	fb06 f303 	mul.w	r3, r6, r3
 8000eb6:	4423      	add	r3, r4
 8000eb8:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8000ebc:	f5a2 62c4 	sub.w	r2, r2, #1568	; 0x620
 8000ec0:	5cd3      	ldrb	r3, [r2, r3]
 8000ec2:	b25a      	sxtb	r2, r3
 8000ec4:	f897 3616 	ldrb.w	r3, [r7, #1558]	; 0x616
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	b259      	sxtb	r1, r3
 8000ed8:	f897 2617 	ldrb.w	r2, [r7, #1559]	; 0x617
 8000edc:	462b      	mov	r3, r5
 8000ede:	fb00 f303 	mul.w	r3, r0, r3
 8000ee2:	4413      	add	r3, r2
 8000ee4:	b2c9      	uxtb	r1, r1
 8000ee6:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8000eea:	f5a2 62c4 	sub.w	r2, r2, #1568	; 0x620
 8000eee:	54d1      	strb	r1, [r2, r3]
	  for (uint8_t y = 0; y < display.GetHeight(); y++) {
 8000ef0:	f897 3616 	ldrb.w	r3, [r7, #1558]	; 0x616
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	f887 3616 	strb.w	r3, [r7, #1558]	; 0x616
 8000efa:	e71e      	b.n	8000d3a <main+0xf6>
  for (uint8_t x = 0; x < display.GetWidth(); x++) {
 8000efc:	f897 3617 	ldrb.w	r3, [r7, #1559]	; 0x617
 8000f00:	3301      	adds	r3, #1
 8000f02:	f887 3617 	strb.w	r3, [r7, #1559]	; 0x617
 8000f06:	e704      	b.n	8000d12 <main+0xce>
		  }
	  }
  }

  // 6) Kiírás a kijelzőre
  display.WriteBitmapToScreen(bitmapBuffer, sizeof(bitmapBuffer));
 8000f08:	4639      	mov	r1, r7
 8000f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fbf2 	bl	80006fc <_ZN7SSD130519WriteBitmapToScreenEPhj>
*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <main+0x2d4>
 8000f1a:	bf00      	nop
 8000f1c:	20000028 	.word	0x20000028

08000f20 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b094      	sub	sp, #80	; 0x50
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	2234      	movs	r2, #52	; 0x34
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 fbc0 	bl	80036b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <_Z18SystemClock_Configv+0xe8>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	4a2e      	ldr	r2, [pc, #184]	; (8001008 <_Z18SystemClock_Configv+0xe8>)
 8000f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f52:	6413      	str	r3, [r2, #64]	; 0x40
 8000f54:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <_Z18SystemClock_Configv+0xe8>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f60:	2300      	movs	r3, #0
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <_Z18SystemClock_Configv+0xec>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f6c:	4a27      	ldr	r2, [pc, #156]	; (800100c <_Z18SystemClock_Configv+0xec>)
 8000f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b25      	ldr	r3, [pc, #148]	; (800100c <_Z18SystemClock_Configv+0xec>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f84:	2301      	movs	r3, #1
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f88:	2310      	movs	r3, #16
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f90:	2300      	movs	r3, #0
 8000f92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f94:	2310      	movs	r3, #16
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f98:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fdfc 	bl	8002bac <HAL_RCC_OscConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bf14      	ite	ne
 8000fba:	2301      	movne	r3, #1
 8000fbc:	2300      	moveq	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8000fc4:	f000 f8f4 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	230f      	movs	r3, #15
 8000fca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 fa97 	bl	8002518 <HAL_RCC_ClockConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	bf14      	ite	ne
 8000ff0:	2301      	movne	r3, #1
 8000ff2:	2300      	moveq	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8000ffa:	f000 f8d9 	bl	80011b0 <Error_Handler>
  }
}
 8000ffe:	bf00      	nop
 8001000:	3750      	adds	r7, #80	; 0x50
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000

08001010 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <_ZL12MX_I2C1_Initv+0x5c>)
 8001016:	4a16      	ldr	r2, [pc, #88]	; (8001070 <_ZL12MX_I2C1_Initv+0x60>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <_ZL12MX_I2C1_Initv+0x5c>)
 800101c:	4a15      	ldr	r2, [pc, #84]	; (8001074 <_ZL12MX_I2C1_Initv+0x64>)
 800101e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <_ZL12MX_I2C1_Initv+0x5c>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <_ZL12MX_I2C1_Initv+0x5c>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <_ZL12MX_I2C1_Initv+0x5c>)
 800102e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001032:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <_ZL12MX_I2C1_Initv+0x5c>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <_ZL12MX_I2C1_Initv+0x5c>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <_ZL12MX_I2C1_Initv+0x5c>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <_ZL12MX_I2C1_Initv+0x5c>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <_ZL12MX_I2C1_Initv+0x5c>)
 800104e:	f000 fcd9 	bl	8001a04 <HAL_I2C_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	bf14      	ite	ne
 8001058:	2301      	movne	r3, #1
 800105a:	2300      	moveq	r3, #0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001062:	f000 f8a5 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000028 	.word	0x20000028
 8001070:	40005400 	.word	0x40005400
 8001074:	000186a0 	.word	0x000186a0

08001078 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <_ZL19MX_USART2_UART_Initv+0x54>)
 800107e:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <_ZL19MX_USART2_UART_Initv+0x54>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <_ZL19MX_USART2_UART_Initv+0x54>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <_ZL19MX_USART2_UART_Initv+0x54>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <_ZL19MX_USART2_UART_Initv+0x54>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <_ZL19MX_USART2_UART_Initv+0x54>)
 80010b0:	f002 f81a 	bl	80030e8 <HAL_UART_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bf14      	ite	ne
 80010ba:	2301      	movne	r3, #1
 80010bc:	2300      	moveq	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80010c4:	f000 f874 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000007c 	.word	0x2000007c
 80010d0:	40004400 	.word	0x40004400

080010d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <_ZL12MX_GPIO_Initv+0xd0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a2c      	ldr	r2, [pc, #176]	; (80011a4 <_ZL12MX_GPIO_Initv+0xd0>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <_ZL12MX_GPIO_Initv+0xd0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <_ZL12MX_GPIO_Initv+0xd0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a25      	ldr	r2, [pc, #148]	; (80011a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <_ZL12MX_GPIO_Initv+0xd0>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2120      	movs	r1, #32
 800115e:	4812      	ldr	r0, [pc, #72]	; (80011a8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001160:	f000 fc36 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800116a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800116e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	480c      	ldr	r0, [pc, #48]	; (80011ac <_ZL12MX_GPIO_Initv+0xd8>)
 800117c:	f000 fa94 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001180:	2320      	movs	r3, #32
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	4804      	ldr	r0, [pc, #16]	; (80011a8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001198:	f000 fa86 	bl	80016a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000
 80011ac:	40020800 	.word	0x40020800

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <Error_Handler+0x8>
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011fa:	2007      	movs	r0, #7
 80011fc:	f000 fa20 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800

0800120c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a19      	ldr	r2, [pc, #100]	; (8001290 <HAL_I2C_MspInit+0x84>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d12c      	bne.n	8001288 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a17      	ldr	r2, [pc, #92]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800124a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001250:	2312      	movs	r3, #18
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800125c:	2304      	movs	r3, #4
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <HAL_I2C_MspInit+0x8c>)
 8001268:	f000 fa1e 	bl	80016a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800127a:	6413      	str	r3, [r2, #64]	; 0x40
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_I2C_MspInit+0x88>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40005400 	.word	0x40005400
 8001294:	40023800 	.word	0x40023800
 8001298:	40020400 	.word	0x40020400

0800129c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a19      	ldr	r2, [pc, #100]	; (8001320 <HAL_UART_MspInit+0x84>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d12b      	bne.n	8001316 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_UART_MspInit+0x88>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a17      	ldr	r2, [pc, #92]	; (8001324 <HAL_UART_MspInit+0x88>)
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_UART_MspInit+0x88>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_UART_MspInit+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <HAL_UART_MspInit+0x88>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_UART_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012f6:	230c      	movs	r3, #12
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001306:	2307      	movs	r3, #7
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_UART_MspInit+0x8c>)
 8001312:	f000 f9c9 	bl	80016a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	; 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40004400 	.word	0x40004400
 8001324:	40023800 	.word	0x40023800
 8001328:	40020000 	.word	0x40020000

0800132c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <NMI_Handler+0x4>

08001332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <MemManage_Handler+0x4>

0800133e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <UsageFault_Handler+0x4>

0800134a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001378:	f000 f890 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}

08001380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <SystemInit+0x20>)
 8001386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <SystemInit+0x20>)
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013aa:	490e      	ldr	r1, [pc, #56]	; (80013e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013c0:	4c0b      	ldr	r4, [pc, #44]	; (80013f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ce:	f7ff ffd7 	bl	8001380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d2:	f002 f94b 	bl	800366c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d6:	f7ff fc35 	bl	8000c44 <main>
  bx  lr    
 80013da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013e8:	08003704 	.word	0x08003704
  ldr r2, =_sbss
 80013ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013f0:	200000c4 	.word	0x200000c4

080013f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_Init+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <HAL_Init+0x40>)
 8001402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <HAL_Init+0x40>)
 800140e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_Init+0x40>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001420:	2003      	movs	r0, #3
 8001422:	f000 f90d 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f808 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142c:	f7ff fec6 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023c00 	.word	0x40023c00

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x54>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_InitTick+0x58>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f917 	bl	800168e <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d80a      	bhi.n	8001486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f000 f8ed 	bl	8001656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <HAL_InitTick+0x5c>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000000 	.word	0x20000000
 8001494:	20000008 	.word	0x20000008
 8001498:	20000004 	.word	0x20000004

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000008 	.word	0x20000008
 80014c0:	200000c0 	.word	0x200000c0

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	200000c0 	.word	0x200000c0

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	; (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	; (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f1c3 0307 	rsb	r3, r3, #7
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf28      	it	cs
 80015b2:	2304      	movcs	r3, #4
 80015b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3304      	adds	r3, #4
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d902      	bls.n	80015c4 <NVIC_EncodePriority+0x30>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3b03      	subs	r3, #3
 80015c2:	e000      	b.n	80015c6 <NVIC_EncodePriority+0x32>
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	4313      	orrs	r3, r2
         );
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800160c:	d301      	bcc.n	8001612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160e:	2301      	movs	r3, #1
 8001610:	e00f      	b.n	8001632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <SysTick_Config+0x40>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161a:	210f      	movs	r1, #15
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f7ff ff8e 	bl	8001540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <SysTick_Config+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <SysTick_Config+0x40>)
 800162c:	2207      	movs	r2, #7
 800162e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	e000e010 	.word	0xe000e010

08001640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff47 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001668:	f7ff ff5c 	bl	8001524 <__NVIC_GetPriorityGrouping>
 800166c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	6978      	ldr	r0, [r7, #20]
 8001674:	f7ff ff8e 	bl	8001594 <NVIC_EncodePriority>
 8001678:	4602      	mov	r2, r0
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff5d 	bl	8001540 <__NVIC_SetPriority>
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffb0 	bl	80015fc <SysTick_Config>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e165      	b.n	8001990 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016c4:	2201      	movs	r2, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f040 8154 	bne.w	800198a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d005      	beq.n	80016fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d130      	bne.n	800175c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 0201 	and.w	r2, r3, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b03      	cmp	r3, #3
 8001766:	d017      	beq.n	8001798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d123      	bne.n	80017ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	08da      	lsrs	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3208      	adds	r2, #8
 80017ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	220f      	movs	r2, #15
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	08da      	lsrs	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3208      	adds	r2, #8
 80017e6:	69b9      	ldr	r1, [r7, #24]
 80017e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0203 	and.w	r2, r3, #3
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80ae 	beq.w	800198a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b5d      	ldr	r3, [pc, #372]	; (80019a8 <HAL_GPIO_Init+0x300>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a5c      	ldr	r2, [pc, #368]	; (80019a8 <HAL_GPIO_Init+0x300>)
 8001838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b5a      	ldr	r3, [pc, #360]	; (80019a8 <HAL_GPIO_Init+0x300>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800184a:	4a58      	ldr	r2, [pc, #352]	; (80019ac <HAL_GPIO_Init+0x304>)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	3302      	adds	r3, #2
 8001852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4f      	ldr	r2, [pc, #316]	; (80019b0 <HAL_GPIO_Init+0x308>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d025      	beq.n	80018c2 <HAL_GPIO_Init+0x21a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4e      	ldr	r2, [pc, #312]	; (80019b4 <HAL_GPIO_Init+0x30c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d01f      	beq.n	80018be <HAL_GPIO_Init+0x216>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4d      	ldr	r2, [pc, #308]	; (80019b8 <HAL_GPIO_Init+0x310>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d019      	beq.n	80018ba <HAL_GPIO_Init+0x212>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4c      	ldr	r2, [pc, #304]	; (80019bc <HAL_GPIO_Init+0x314>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0x20e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <HAL_GPIO_Init+0x318>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00d      	beq.n	80018b2 <HAL_GPIO_Init+0x20a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4a      	ldr	r2, [pc, #296]	; (80019c4 <HAL_GPIO_Init+0x31c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d007      	beq.n	80018ae <HAL_GPIO_Init+0x206>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a49      	ldr	r2, [pc, #292]	; (80019c8 <HAL_GPIO_Init+0x320>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_GPIO_Init+0x202>
 80018a6:	2306      	movs	r3, #6
 80018a8:	e00c      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018aa:	2307      	movs	r3, #7
 80018ac:	e00a      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018ae:	2305      	movs	r3, #5
 80018b0:	e008      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018b2:	2304      	movs	r3, #4
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018b6:	2303      	movs	r3, #3
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018c2:	2300      	movs	r3, #0
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4093      	lsls	r3, r2
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d4:	4935      	ldr	r1, [pc, #212]	; (80019ac <HAL_GPIO_Init+0x304>)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e2:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <HAL_GPIO_Init+0x324>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001906:	4a31      	ldr	r2, [pc, #196]	; (80019cc <HAL_GPIO_Init+0x324>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800190c:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <HAL_GPIO_Init+0x324>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001930:	4a26      	ldr	r2, [pc, #152]	; (80019cc <HAL_GPIO_Init+0x324>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001936:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_GPIO_Init+0x324>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195a:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <HAL_GPIO_Init+0x324>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001960:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <HAL_GPIO_Init+0x324>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001984:	4a11      	ldr	r2, [pc, #68]	; (80019cc <HAL_GPIO_Init+0x324>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b0f      	cmp	r3, #15
 8001994:	f67f ae96 	bls.w	80016c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40013800 	.word	0x40013800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40021400 	.word	0x40021400
 80019c8:	40021800 	.word	0x40021800
 80019cc:	40013c00 	.word	0x40013c00

080019d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
 80019dc:	4613      	mov	r3, r2
 80019de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e0:	787b      	ldrb	r3, [r7, #1]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e6:	887a      	ldrh	r2, [r7, #2]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019ec:	e003      	b.n	80019f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	041a      	lsls	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	619a      	str	r2, [r3, #24]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e12b      	b.n	8001c6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fbee 	bl	800120c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2224      	movs	r2, #36	; 0x24
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0201 	bic.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a68:	f000 fe48 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8001a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a81      	ldr	r2, [pc, #516]	; (8001c78 <HAL_I2C_Init+0x274>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d807      	bhi.n	8001a88 <HAL_I2C_Init+0x84>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4a80      	ldr	r2, [pc, #512]	; (8001c7c <HAL_I2C_Init+0x278>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	bf94      	ite	ls
 8001a80:	2301      	movls	r3, #1
 8001a82:	2300      	movhi	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	e006      	b.n	8001a96 <HAL_I2C_Init+0x92>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4a7d      	ldr	r2, [pc, #500]	; (8001c80 <HAL_I2C_Init+0x27c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	bf94      	ite	ls
 8001a90:	2301      	movls	r3, #1
 8001a92:	2300      	movhi	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0e7      	b.n	8001c6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4a78      	ldr	r2, [pc, #480]	; (8001c84 <HAL_I2C_Init+0x280>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0c9b      	lsrs	r3, r3, #18
 8001aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4a6a      	ldr	r2, [pc, #424]	; (8001c78 <HAL_I2C_Init+0x274>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d802      	bhi.n	8001ad8 <HAL_I2C_Init+0xd4>
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	e009      	b.n	8001aec <HAL_I2C_Init+0xe8>
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	4a69      	ldr	r2, [pc, #420]	; (8001c88 <HAL_I2C_Init+0x284>)
 8001ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae8:	099b      	lsrs	r3, r3, #6
 8001aea:	3301      	adds	r3, #1
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001afe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	495c      	ldr	r1, [pc, #368]	; (8001c78 <HAL_I2C_Init+0x274>)
 8001b08:	428b      	cmp	r3, r1
 8001b0a:	d819      	bhi.n	8001b40 <HAL_I2C_Init+0x13c>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1e59      	subs	r1, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b1a:	1c59      	adds	r1, r3, #1
 8001b1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b20:	400b      	ands	r3, r1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00a      	beq.n	8001b3c <HAL_I2C_Init+0x138>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1e59      	subs	r1, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3a:	e051      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	e04f      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d111      	bne.n	8001b6c <HAL_I2C_Init+0x168>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1e58      	subs	r0, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	440b      	add	r3, r1
 8001b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf0c      	ite	eq
 8001b64:	2301      	moveq	r3, #1
 8001b66:	2300      	movne	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	e012      	b.n	8001b92 <HAL_I2C_Init+0x18e>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6859      	ldr	r1, [r3, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	0099      	lsls	r1, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b82:	3301      	adds	r3, #1
 8001b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_Init+0x196>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e022      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_I2C_Init+0x1bc>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1e58      	subs	r0, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6859      	ldr	r1, [r3, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	440b      	add	r3, r1
 8001bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bbe:	e00f      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1e58      	subs	r0, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	0099      	lsls	r1, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	6809      	ldr	r1, [r1, #0]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69da      	ldr	r2, [r3, #28]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6911      	ldr	r1, [r2, #16]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68d2      	ldr	r2, [r2, #12]
 8001c1a:	4311      	orrs	r1, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	430b      	orrs	r3, r1
 8001c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	000186a0 	.word	0x000186a0
 8001c7c:	001e847f 	.word	0x001e847f
 8001c80:	003d08ff 	.word	0x003d08ff
 8001c84:	431bde83 	.word	0x431bde83
 8001c88:	10624dd3 	.word	0x10624dd3

08001c8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	4608      	mov	r0, r1
 8001c96:	4611      	mov	r1, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	817b      	strh	r3, [r7, #10]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	813b      	strh	r3, [r7, #8]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ca6:	f7ff fc0d 	bl	80014c4 <HAL_GetTick>
 8001caa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	f040 80d9 	bne.w	8001e6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2319      	movs	r3, #25
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	496d      	ldr	r1, [pc, #436]	; (8001e78 <HAL_I2C_Mem_Write+0x1ec>)
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 fa9f 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e0cc      	b.n	8001e6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_I2C_Mem_Write+0x56>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e0c5      	b.n	8001e6e <HAL_I2C_Mem_Write+0x1e2>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d007      	beq.n	8001d08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2221      	movs	r2, #33	; 0x21
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2240      	movs	r2, #64	; 0x40
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a3a      	ldr	r2, [r7, #32]
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4a4d      	ldr	r2, [pc, #308]	; (8001e7c <HAL_I2C_Mem_Write+0x1f0>)
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d4a:	88f8      	ldrh	r0, [r7, #6]
 8001d4c:	893a      	ldrh	r2, [r7, #8]
 8001d4e:	8979      	ldrh	r1, [r7, #10]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	4603      	mov	r3, r0
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f9be 	bl	80020dc <I2C_RequestMemoryWrite>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d052      	beq.n	8001e0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e081      	b.n	8001e6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 fb20 	bl	80023b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00d      	beq.n	8001d96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d107      	bne.n	8001d92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e06b      	b.n	8001e6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d11b      	bne.n	8001e0c <HAL_I2C_Mem_Write+0x180>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d017      	beq.n	8001e0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	3b01      	subs	r3, #1
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1aa      	bne.n	8001d6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fb0c 	bl	8002436 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00d      	beq.n	8001e40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d107      	bne.n	8001e3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e016      	b.n	8001e6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e000      	b.n	8001e6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001e6c:	2302      	movs	r3, #2
  }
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	00100002 	.word	0x00100002
 8001e7c:	ffff0000 	.word	0xffff0000

08001e80 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff fb18 	bl	80014c4 <HAL_GetTick>
 8001e94:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	f040 8111 	bne.w	80020ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	2319      	movs	r3, #25
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4988      	ldr	r1, [pc, #544]	; (80020d4 <HAL_I2C_IsDeviceReady+0x254>)
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f9a8 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e104      	b.n	80020cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_I2C_IsDeviceReady+0x50>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e0fd      	b.n	80020cc <HAL_I2C_IsDeviceReady+0x24c>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d007      	beq.n	8001ef6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0201 	orr.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2224      	movs	r2, #36	; 0x24
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4a70      	ldr	r2, [pc, #448]	; (80020d8 <HAL_I2C_IsDeviceReady+0x258>)
 8001f18:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f28:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f966 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00d      	beq.n	8001f5e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f50:	d103      	bne.n	8001f5a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e0b6      	b.n	80020cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f5e:	897b      	ldrh	r3, [r7, #10]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f6c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff faa9 	bl	80014c4 <HAL_GetTick>
 8001f72:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	bf0c      	ite	eq
 8001f82:	2301      	moveq	r3, #1
 8001f84:	2300      	movne	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f98:	bf0c      	ite	eq
 8001f9a:	2301      	moveq	r3, #1
 8001f9c:	2300      	movne	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001fa2:	e025      	b.n	8001ff0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fa4:	f7ff fa8e 	bl	80014c4 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d302      	bcc.n	8001fba <HAL_I2C_IsDeviceReady+0x13a>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d103      	bne.n	8001fc2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	22a0      	movs	r2, #160	; 0xa0
 8001fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe6:	bf0c      	ite	eq
 8001fe8:	2301      	moveq	r3, #1
 8001fea:	2300      	movne	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2ba0      	cmp	r3, #160	; 0xa0
 8001ffa:	d005      	beq.n	8002008 <HAL_I2C_IsDeviceReady+0x188>
 8001ffc:	7dfb      	ldrb	r3, [r7, #23]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <HAL_I2C_IsDeviceReady+0x188>
 8002002:	7dbb      	ldrb	r3, [r7, #22]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0cd      	beq.n	8001fa4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b02      	cmp	r3, #2
 800201c:	d129      	bne.n	8002072 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800202c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2319      	movs	r3, #25
 800204a:	2201      	movs	r2, #1
 800204c:	4921      	ldr	r1, [pc, #132]	; (80020d4 <HAL_I2C_IsDeviceReady+0x254>)
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 f8da 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e036      	b.n	80020cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2220      	movs	r2, #32
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	e02c      	b.n	80020cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002080:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800208a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	2319      	movs	r3, #25
 8002092:	2201      	movs	r2, #1
 8002094:	490f      	ldr	r1, [pc, #60]	; (80020d4 <HAL_I2C_IsDeviceReady+0x254>)
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f8b6 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e012      	b.n	80020cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	3301      	adds	r3, #1
 80020aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	f4ff af32 	bcc.w	8001f1a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80020ca:	2302      	movs	r3, #2
  }
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	00100002 	.word	0x00100002
 80020d8:	ffff0000 	.word	0xffff0000

080020dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	817b      	strh	r3, [r7, #10]
 80020ee:	460b      	mov	r3, r1
 80020f0:	813b      	strh	r3, [r7, #8]
 80020f2:	4613      	mov	r3, r2
 80020f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002104:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	2200      	movs	r2, #0
 800210e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f878 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00d      	beq.n	800213a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800212c:	d103      	bne.n	8002136 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002134:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e05f      	b.n	80021fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800213a:	897b      	ldrh	r3, [r7, #10]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002148:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	6a3a      	ldr	r2, [r7, #32]
 800214e:	492d      	ldr	r1, [pc, #180]	; (8002204 <I2C_RequestMemoryWrite+0x128>)
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 f8b0 	bl	80022b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e04c      	b.n	80021fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	6a39      	ldr	r1, [r7, #32]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f91a 	bl	80023b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00d      	beq.n	80021a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2b04      	cmp	r3, #4
 800218c:	d107      	bne.n	800219e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e02b      	b.n	80021fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d105      	bne.n	80021b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021a8:	893b      	ldrh	r3, [r7, #8]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	611a      	str	r2, [r3, #16]
 80021b2:	e021      	b.n	80021f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021b4:	893b      	ldrh	r3, [r7, #8]
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c4:	6a39      	ldr	r1, [r7, #32]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f8f4 	bl	80023b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00d      	beq.n	80021ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d107      	bne.n	80021ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e005      	b.n	80021fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021ee:	893b      	ldrh	r3, [r7, #8]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	00010002 	.word	0x00010002

08002208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002218:	e025      	b.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002220:	d021      	beq.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002222:	f7ff f94f 	bl	80014c4 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d302      	bcc.n	8002238 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d116      	bne.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f043 0220 	orr.w	r2, r3, #32
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e023      	b.n	80022ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d10d      	bne.n	800228c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4013      	ands	r3, r2
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	bf0c      	ite	eq
 8002282:	2301      	moveq	r3, #1
 8002284:	2300      	movne	r3, #0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	e00c      	b.n	80022a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4013      	ands	r3, r2
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	bf0c      	ite	eq
 800229e:	2301      	moveq	r3, #1
 80022a0:	2300      	movne	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d0b6      	beq.n	800221a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022c4:	e051      	b.n	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d4:	d123      	bne.n	800231e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2220      	movs	r2, #32
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f043 0204 	orr.w	r2, r3, #4
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e046      	b.n	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d021      	beq.n	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002326:	f7ff f8cd 	bl	80014c4 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d302      	bcc.n	800233c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d116      	bne.n	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f043 0220 	orr.w	r2, r3, #32
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e020      	b.n	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d10c      	bne.n	800238e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4013      	ands	r3, r2
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	bf14      	ite	ne
 8002386:	2301      	movne	r3, #1
 8002388:	2300      	moveq	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	e00b      	b.n	80023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	43da      	mvns	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4013      	ands	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf14      	ite	ne
 80023a0:	2301      	movne	r3, #1
 80023a2:	2300      	moveq	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d18d      	bne.n	80022c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023c0:	e02d      	b.n	800241e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f878 	bl	80024b8 <I2C_IsAcknowledgeFailed>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e02d      	b.n	800242e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d021      	beq.n	800241e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023da:	f7ff f873 	bl	80014c4 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d302      	bcc.n	80023f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d116      	bne.n	800241e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f043 0220 	orr.w	r2, r3, #32
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e007      	b.n	800242e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002428:	2b80      	cmp	r3, #128	; 0x80
 800242a:	d1ca      	bne.n	80023c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002442:	e02d      	b.n	80024a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f837 	bl	80024b8 <I2C_IsAcknowledgeFailed>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e02d      	b.n	80024b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245a:	d021      	beq.n	80024a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245c:	f7ff f832 	bl	80014c4 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	429a      	cmp	r2, r3
 800246a:	d302      	bcc.n	8002472 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e007      	b.n	80024b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d1ca      	bne.n	8002444 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ce:	d11b      	bne.n	8002508 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f043 0204 	orr.w	r2, r3, #4
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0cc      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800252c:	4b68      	ldr	r3, [pc, #416]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d90c      	bls.n	8002554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b63      	ldr	r3, [pc, #396]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0b8      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800256c:	4b59      	ldr	r3, [pc, #356]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002584:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a52      	ldr	r2, [pc, #328]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800258e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002590:	4b50      	ldr	r3, [pc, #320]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	494d      	ldr	r1, [pc, #308]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d044      	beq.n	8002638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d119      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d003      	beq.n	80025d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e067      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f6:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f023 0203 	bic.w	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4934      	ldr	r1, [pc, #208]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002608:	f7fe ff5c 	bl	80014c4 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	e00a      	b.n	8002626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002610:	f7fe ff58 	bl	80014c4 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e04f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 020c 	and.w	r2, r3, #12
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	429a      	cmp	r2, r3
 8002636:	d1eb      	bne.n	8002610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002638:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d20c      	bcs.n	8002660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e032      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4916      	ldr	r1, [pc, #88]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	490e      	ldr	r1, [pc, #56]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800269e:	f000 f855 	bl	800274c <HAL_RCC_GetSysClockFreq>
 80026a2:	4602      	mov	r2, r0
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	490a      	ldr	r1, [pc, #40]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	5ccb      	ldrb	r3, [r1, r3]
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe febc 	bl	800143c <HAL_InitTick>

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023c00 	.word	0x40023c00
 80026d4:	40023800 	.word	0x40023800
 80026d8:	080036dc 	.word	0x080036dc
 80026dc:	20000000 	.word	0x20000000
 80026e0:	20000004 	.word	0x20000004

080026e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000000 	.word	0x20000000

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002700:	f7ff fff0 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	0a9b      	lsrs	r3, r3, #10
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4903      	ldr	r1, [pc, #12]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800
 8002720:	080036ec 	.word	0x080036ec

08002724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002728:	f7ff ffdc 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	0b5b      	lsrs	r3, r3, #13
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4903      	ldr	r1, [pc, #12]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	080036ec 	.word	0x080036ec

0800274c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800274c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002750:	b0ae      	sub	sp, #184	; 0xb8
 8002752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002772:	4bcb      	ldr	r3, [pc, #812]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b0c      	cmp	r3, #12
 800277c:	f200 8206 	bhi.w	8002b8c <HAL_RCC_GetSysClockFreq+0x440>
 8002780:	a201      	add	r2, pc, #4	; (adr r2, 8002788 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002786:	bf00      	nop
 8002788:	080027bd 	.word	0x080027bd
 800278c:	08002b8d 	.word	0x08002b8d
 8002790:	08002b8d 	.word	0x08002b8d
 8002794:	08002b8d 	.word	0x08002b8d
 8002798:	080027c5 	.word	0x080027c5
 800279c:	08002b8d 	.word	0x08002b8d
 80027a0:	08002b8d 	.word	0x08002b8d
 80027a4:	08002b8d 	.word	0x08002b8d
 80027a8:	080027cd 	.word	0x080027cd
 80027ac:	08002b8d 	.word	0x08002b8d
 80027b0:	08002b8d 	.word	0x08002b8d
 80027b4:	08002b8d 	.word	0x08002b8d
 80027b8:	080029bd 	.word	0x080029bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4bb9      	ldr	r3, [pc, #740]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x358>)
 80027be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80027c2:	e1e7      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027c4:	4bb8      	ldr	r3, [pc, #736]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80027c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027ca:	e1e3      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027cc:	4bb4      	ldr	r3, [pc, #720]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027d8:	4bb1      	ldr	r3, [pc, #708]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d071      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e4:	4bae      	ldr	r3, [pc, #696]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	099b      	lsrs	r3, r3, #6
 80027ea:	2200      	movs	r2, #0
 80027ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80027f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800280a:	4622      	mov	r2, r4
 800280c:	462b      	mov	r3, r5
 800280e:	f04f 0000 	mov.w	r0, #0
 8002812:	f04f 0100 	mov.w	r1, #0
 8002816:	0159      	lsls	r1, r3, #5
 8002818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800281c:	0150      	lsls	r0, r2, #5
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4621      	mov	r1, r4
 8002824:	1a51      	subs	r1, r2, r1
 8002826:	6439      	str	r1, [r7, #64]	; 0x40
 8002828:	4629      	mov	r1, r5
 800282a:	eb63 0301 	sbc.w	r3, r3, r1
 800282e:	647b      	str	r3, [r7, #68]	; 0x44
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800283c:	4649      	mov	r1, r9
 800283e:	018b      	lsls	r3, r1, #6
 8002840:	4641      	mov	r1, r8
 8002842:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002846:	4641      	mov	r1, r8
 8002848:	018a      	lsls	r2, r1, #6
 800284a:	4641      	mov	r1, r8
 800284c:	1a51      	subs	r1, r2, r1
 800284e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002850:	4649      	mov	r1, r9
 8002852:	eb63 0301 	sbc.w	r3, r3, r1
 8002856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002864:	4649      	mov	r1, r9
 8002866:	00cb      	lsls	r3, r1, #3
 8002868:	4641      	mov	r1, r8
 800286a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800286e:	4641      	mov	r1, r8
 8002870:	00ca      	lsls	r2, r1, #3
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	4603      	mov	r3, r0
 8002878:	4622      	mov	r2, r4
 800287a:	189b      	adds	r3, r3, r2
 800287c:	633b      	str	r3, [r7, #48]	; 0x30
 800287e:	462b      	mov	r3, r5
 8002880:	460a      	mov	r2, r1
 8002882:	eb42 0303 	adc.w	r3, r2, r3
 8002886:	637b      	str	r3, [r7, #52]	; 0x34
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002894:	4629      	mov	r1, r5
 8002896:	024b      	lsls	r3, r1, #9
 8002898:	4621      	mov	r1, r4
 800289a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800289e:	4621      	mov	r1, r4
 80028a0:	024a      	lsls	r2, r1, #9
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028aa:	2200      	movs	r2, #0
 80028ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80028b8:	f7fd fca4 	bl	8000204 <__aeabi_uldivmod>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4613      	mov	r3, r2
 80028c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028c6:	e067      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c8:	4b75      	ldr	r3, [pc, #468]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	099b      	lsrs	r3, r3, #6
 80028ce:	2200      	movs	r2, #0
 80028d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028d4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80028d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80028e2:	2300      	movs	r3, #0
 80028e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80028ea:	4622      	mov	r2, r4
 80028ec:	462b      	mov	r3, r5
 80028ee:	f04f 0000 	mov.w	r0, #0
 80028f2:	f04f 0100 	mov.w	r1, #0
 80028f6:	0159      	lsls	r1, r3, #5
 80028f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028fc:	0150      	lsls	r0, r2, #5
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4621      	mov	r1, r4
 8002904:	1a51      	subs	r1, r2, r1
 8002906:	62b9      	str	r1, [r7, #40]	; 0x28
 8002908:	4629      	mov	r1, r5
 800290a:	eb63 0301 	sbc.w	r3, r3, r1
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800291c:	4649      	mov	r1, r9
 800291e:	018b      	lsls	r3, r1, #6
 8002920:	4641      	mov	r1, r8
 8002922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002926:	4641      	mov	r1, r8
 8002928:	018a      	lsls	r2, r1, #6
 800292a:	4641      	mov	r1, r8
 800292c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002930:	4649      	mov	r1, r9
 8002932:	eb63 0b01 	sbc.w	fp, r3, r1
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002942:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002946:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800294a:	4692      	mov	sl, r2
 800294c:	469b      	mov	fp, r3
 800294e:	4623      	mov	r3, r4
 8002950:	eb1a 0303 	adds.w	r3, sl, r3
 8002954:	623b      	str	r3, [r7, #32]
 8002956:	462b      	mov	r3, r5
 8002958:	eb4b 0303 	adc.w	r3, fp, r3
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800296a:	4629      	mov	r1, r5
 800296c:	028b      	lsls	r3, r1, #10
 800296e:	4621      	mov	r1, r4
 8002970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002974:	4621      	mov	r1, r4
 8002976:	028a      	lsls	r2, r1, #10
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002980:	2200      	movs	r2, #0
 8002982:	673b      	str	r3, [r7, #112]	; 0x70
 8002984:	677a      	str	r2, [r7, #116]	; 0x74
 8002986:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800298a:	f7fd fc3b 	bl	8000204 <__aeabi_uldivmod>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4613      	mov	r3, r2
 8002994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002998:	4b41      	ldr	r3, [pc, #260]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	0c1b      	lsrs	r3, r3, #16
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	3301      	adds	r3, #1
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80029aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029ba:	e0eb      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029bc:	4b38      	ldr	r3, [pc, #224]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c8:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d06b      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d4:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	099b      	lsrs	r3, r3, #6
 80029da:	2200      	movs	r2, #0
 80029dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80029de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e6:	663b      	str	r3, [r7, #96]	; 0x60
 80029e8:	2300      	movs	r3, #0
 80029ea:	667b      	str	r3, [r7, #100]	; 0x64
 80029ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80029f0:	4622      	mov	r2, r4
 80029f2:	462b      	mov	r3, r5
 80029f4:	f04f 0000 	mov.w	r0, #0
 80029f8:	f04f 0100 	mov.w	r1, #0
 80029fc:	0159      	lsls	r1, r3, #5
 80029fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a02:	0150      	lsls	r0, r2, #5
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4621      	mov	r1, r4
 8002a0a:	1a51      	subs	r1, r2, r1
 8002a0c:	61b9      	str	r1, [r7, #24]
 8002a0e:	4629      	mov	r1, r5
 8002a10:	eb63 0301 	sbc.w	r3, r3, r1
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a22:	4659      	mov	r1, fp
 8002a24:	018b      	lsls	r3, r1, #6
 8002a26:	4651      	mov	r1, sl
 8002a28:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a2c:	4651      	mov	r1, sl
 8002a2e:	018a      	lsls	r2, r1, #6
 8002a30:	4651      	mov	r1, sl
 8002a32:	ebb2 0801 	subs.w	r8, r2, r1
 8002a36:	4659      	mov	r1, fp
 8002a38:	eb63 0901 	sbc.w	r9, r3, r1
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a50:	4690      	mov	r8, r2
 8002a52:	4699      	mov	r9, r3
 8002a54:	4623      	mov	r3, r4
 8002a56:	eb18 0303 	adds.w	r3, r8, r3
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	462b      	mov	r3, r5
 8002a5e:	eb49 0303 	adc.w	r3, r9, r3
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a70:	4629      	mov	r1, r5
 8002a72:	024b      	lsls	r3, r1, #9
 8002a74:	4621      	mov	r1, r4
 8002a76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	024a      	lsls	r2, r1, #9
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a86:	2200      	movs	r2, #0
 8002a88:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a8a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a90:	f7fd fbb8 	bl	8000204 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4613      	mov	r3, r2
 8002a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a9e:	e065      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x420>
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aac:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	099b      	lsrs	r3, r3, #6
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002abc:	653b      	str	r3, [r7, #80]	; 0x50
 8002abe:	2300      	movs	r3, #0
 8002ac0:	657b      	str	r3, [r7, #84]	; 0x54
 8002ac2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002ac6:	4642      	mov	r2, r8
 8002ac8:	464b      	mov	r3, r9
 8002aca:	f04f 0000 	mov.w	r0, #0
 8002ace:	f04f 0100 	mov.w	r1, #0
 8002ad2:	0159      	lsls	r1, r3, #5
 8002ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ad8:	0150      	lsls	r0, r2, #5
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4641      	mov	r1, r8
 8002ae0:	1a51      	subs	r1, r2, r1
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	4649      	mov	r1, r9
 8002ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002af8:	4659      	mov	r1, fp
 8002afa:	018b      	lsls	r3, r1, #6
 8002afc:	4651      	mov	r1, sl
 8002afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b02:	4651      	mov	r1, sl
 8002b04:	018a      	lsls	r2, r1, #6
 8002b06:	4651      	mov	r1, sl
 8002b08:	1a54      	subs	r4, r2, r1
 8002b0a:	4659      	mov	r1, fp
 8002b0c:	eb63 0501 	sbc.w	r5, r3, r1
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	00eb      	lsls	r3, r5, #3
 8002b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b1e:	00e2      	lsls	r2, r4, #3
 8002b20:	4614      	mov	r4, r2
 8002b22:	461d      	mov	r5, r3
 8002b24:	4643      	mov	r3, r8
 8002b26:	18e3      	adds	r3, r4, r3
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	464b      	mov	r3, r9
 8002b2c:	eb45 0303 	adc.w	r3, r5, r3
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b3e:	4629      	mov	r1, r5
 8002b40:	028b      	lsls	r3, r1, #10
 8002b42:	4621      	mov	r1, r4
 8002b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b48:	4621      	mov	r1, r4
 8002b4a:	028a      	lsls	r2, r1, #10
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b54:	2200      	movs	r2, #0
 8002b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b58:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002b5a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b5e:	f7fd fb51 	bl	8000204 <__aeabi_uldivmod>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4613      	mov	r3, r2
 8002b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	0f1b      	lsrs	r3, r3, #28
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002b7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b8a:	e003      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	37b8      	adds	r7, #184	; 0xb8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	00f42400 	.word	0x00f42400

08002bac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e28d      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8083 	beq.w	8002cd2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bcc:	4b94      	ldr	r3, [pc, #592]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d019      	beq.n	8002c0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bd8:	4b91      	ldr	r3, [pc, #580]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002be4:	4b8e      	ldr	r3, [pc, #568]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf0:	d00c      	beq.n	8002c0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf2:	4b8b      	ldr	r3, [pc, #556]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d112      	bne.n	8002c24 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4b88      	ldr	r3, [pc, #544]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	4b84      	ldr	r3, [pc, #528]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d05b      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x124>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d157      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e25a      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d106      	bne.n	8002c3c <HAL_RCC_OscConfig+0x90>
 8002c2e:	4b7c      	ldr	r3, [pc, #496]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a7b      	ldr	r2, [pc, #492]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e01d      	b.n	8002c78 <HAL_RCC_OscConfig+0xcc>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0xb4>
 8002c46:	4b76      	ldr	r3, [pc, #472]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a75      	ldr	r2, [pc, #468]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b73      	ldr	r3, [pc, #460]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a72      	ldr	r2, [pc, #456]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0xcc>
 8002c60:	4b6f      	ldr	r3, [pc, #444]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6e      	ldr	r2, [pc, #440]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b6c      	ldr	r3, [pc, #432]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a6b      	ldr	r2, [pc, #428]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fc20 	bl	80014c4 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe fc1c 	bl	80014c4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e21f      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0xdc>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fc0c 	bl	80014c4 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fe fc08 	bl	80014c4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e20b      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	4b57      	ldr	r3, [pc, #348]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x104>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d06f      	beq.n	8002dbe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cde:	4b50      	ldr	r3, [pc, #320]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d017      	beq.n	8002d1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cea:	4b4d      	ldr	r3, [pc, #308]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d105      	bne.n	8002d02 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cf6:	4b4a      	ldr	r3, [pc, #296]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d11c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0e:	4b44      	ldr	r3, [pc, #272]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x186>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1d3      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4937      	ldr	r1, [pc, #220]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	e03a      	b.n	8002dbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d50:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_RCC_OscConfig+0x278>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe fbb5 	bl	80014c4 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7fe fbb1 	bl	80014c4 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e1b4      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4925      	ldr	r1, [pc, #148]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
 8002d90:	e015      	b.n	8002dbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_OscConfig+0x278>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe fb94 	bl	80014c4 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da0:	f7fe fb90 	bl	80014c4 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e193      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d036      	beq.n	8002e38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_RCC_OscConfig+0x27c>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fe fb74 	bl	80014c4 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe fb70 	bl	80014c4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e173      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x234>
 8002dfe:	e01b      	b.n	8002e38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_OscConfig+0x27c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e06:	f7fe fb5d 	bl	80014c4 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	e00e      	b.n	8002e2c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7fe fb59 	bl	80014c4 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d907      	bls.n	8002e2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e15c      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
 8002e20:	40023800 	.word	0x40023800
 8002e24:	42470000 	.word	0x42470000
 8002e28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	4b8a      	ldr	r3, [pc, #552]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ea      	bne.n	8002e0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8097 	beq.w	8002f74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b83      	ldr	r3, [pc, #524]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10f      	bne.n	8002e76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	4b7f      	ldr	r3, [pc, #508]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	4a7e      	ldr	r2, [pc, #504]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e64:	6413      	str	r3, [r2, #64]	; 0x40
 8002e66:	4b7c      	ldr	r3, [pc, #496]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e76:	4b79      	ldr	r3, [pc, #484]	; (800305c <HAL_RCC_OscConfig+0x4b0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e82:	4b76      	ldr	r3, [pc, #472]	; (800305c <HAL_RCC_OscConfig+0x4b0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a75      	ldr	r2, [pc, #468]	; (800305c <HAL_RCC_OscConfig+0x4b0>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7fe fb19 	bl	80014c4 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7fe fb15 	bl	80014c4 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e118      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	4b6c      	ldr	r3, [pc, #432]	; (800305c <HAL_RCC_OscConfig+0x4b0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x31e>
 8002ebc:	4b66      	ldr	r3, [pc, #408]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	4a65      	ldr	r2, [pc, #404]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec8:	e01c      	b.n	8002f04 <HAL_RCC_OscConfig+0x358>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x340>
 8002ed2:	4b61      	ldr	r3, [pc, #388]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a60      	ldr	r2, [pc, #384]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ede:	4b5e      	ldr	r3, [pc, #376]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a5d      	ldr	r2, [pc, #372]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0x358>
 8002eec:	4b5a      	ldr	r3, [pc, #360]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a59      	ldr	r2, [pc, #356]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	4b57      	ldr	r3, [pc, #348]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a56      	ldr	r2, [pc, #344]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002efe:	f023 0304 	bic.w	r3, r3, #4
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d015      	beq.n	8002f38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe fada 	bl	80014c4 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fe fad6 	bl	80014c4 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0d7      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	4b4b      	ldr	r3, [pc, #300]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ee      	beq.n	8002f14 <HAL_RCC_OscConfig+0x368>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f38:	f7fe fac4 	bl	80014c4 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f40:	f7fe fac0 	bl	80014c4 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e0c1      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f56:	4b40      	ldr	r3, [pc, #256]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ee      	bne.n	8002f40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f68:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	4a3a      	ldr	r2, [pc, #232]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80ad 	beq.w	80030d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f7e:	4b36      	ldr	r3, [pc, #216]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d060      	beq.n	800304c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d145      	bne.n	800301e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b33      	ldr	r3, [pc, #204]	; (8003060 <HAL_RCC_OscConfig+0x4b4>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fa94 	bl	80014c4 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe fa90 	bl	80014c4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e093      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	071b      	lsls	r3, r3, #28
 8002fea:	491b      	ldr	r1, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x4b4>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fa65 	bl	80014c4 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fe fa61 	bl	80014c4 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e064      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x452>
 800301c:	e05c      	b.n	80030d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_RCC_OscConfig+0x4b4>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe fa4e 	bl	80014c4 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe fa4a 	bl	80014c4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e04d      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x480>
 800304a:	e045      	b.n	80030d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e040      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
 8003058:	40023800 	.word	0x40023800
 800305c:	40007000 	.word	0x40007000
 8003060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003064:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <HAL_RCC_OscConfig+0x538>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d030      	beq.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d129      	bne.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d122      	bne.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003094:	4013      	ands	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800309c:	4293      	cmp	r3, r2
 800309e:	d119      	bne.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	3b01      	subs	r3, #1
 80030ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d10f      	bne.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d107      	bne.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800

080030e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e03f      	b.n	800317a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fe f8c4 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2224      	movs	r2, #36	; 0x24
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800312a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f829 	bl	8003184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003188:	b0c0      	sub	sp, #256	; 0x100
 800318a:	af00      	add	r7, sp, #0
 800318c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a0:	68d9      	ldr	r1, [r3, #12]
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	ea40 0301 	orr.w	r3, r0, r1
 80031ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031dc:	f021 010c 	bic.w	r1, r1, #12
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031ea:	430b      	orrs	r3, r1
 80031ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fe:	6999      	ldr	r1, [r3, #24]
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	ea40 0301 	orr.w	r3, r0, r1
 800320a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	4b8f      	ldr	r3, [pc, #572]	; (8003450 <UART_SetConfig+0x2cc>)
 8003214:	429a      	cmp	r2, r3
 8003216:	d005      	beq.n	8003224 <UART_SetConfig+0xa0>
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b8d      	ldr	r3, [pc, #564]	; (8003454 <UART_SetConfig+0x2d0>)
 8003220:	429a      	cmp	r2, r3
 8003222:	d104      	bne.n	800322e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7ff fa7e 	bl	8002724 <HAL_RCC_GetPCLK2Freq>
 8003228:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800322c:	e003      	b.n	8003236 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800322e:	f7ff fa65 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8003232:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003240:	f040 810c 	bne.w	800345c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003248:	2200      	movs	r2, #0
 800324a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800324e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003252:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003256:	4622      	mov	r2, r4
 8003258:	462b      	mov	r3, r5
 800325a:	1891      	adds	r1, r2, r2
 800325c:	65b9      	str	r1, [r7, #88]	; 0x58
 800325e:	415b      	adcs	r3, r3
 8003260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003262:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003266:	4621      	mov	r1, r4
 8003268:	eb12 0801 	adds.w	r8, r2, r1
 800326c:	4629      	mov	r1, r5
 800326e:	eb43 0901 	adc.w	r9, r3, r1
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800327e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003286:	4690      	mov	r8, r2
 8003288:	4699      	mov	r9, r3
 800328a:	4623      	mov	r3, r4
 800328c:	eb18 0303 	adds.w	r3, r8, r3
 8003290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003294:	462b      	mov	r3, r5
 8003296:	eb49 0303 	adc.w	r3, r9, r3
 800329a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800329e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032b2:	460b      	mov	r3, r1
 80032b4:	18db      	adds	r3, r3, r3
 80032b6:	653b      	str	r3, [r7, #80]	; 0x50
 80032b8:	4613      	mov	r3, r2
 80032ba:	eb42 0303 	adc.w	r3, r2, r3
 80032be:	657b      	str	r3, [r7, #84]	; 0x54
 80032c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032c8:	f7fc ff9c 	bl	8000204 <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4b61      	ldr	r3, [pc, #388]	; (8003458 <UART_SetConfig+0x2d4>)
 80032d2:	fba3 2302 	umull	r2, r3, r3, r2
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	011c      	lsls	r4, r3, #4
 80032da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032de:	2200      	movs	r2, #0
 80032e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032ec:	4642      	mov	r2, r8
 80032ee:	464b      	mov	r3, r9
 80032f0:	1891      	adds	r1, r2, r2
 80032f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80032f4:	415b      	adcs	r3, r3
 80032f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032fc:	4641      	mov	r1, r8
 80032fe:	eb12 0a01 	adds.w	sl, r2, r1
 8003302:	4649      	mov	r1, r9
 8003304:	eb43 0b01 	adc.w	fp, r3, r1
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003314:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800331c:	4692      	mov	sl, r2
 800331e:	469b      	mov	fp, r3
 8003320:	4643      	mov	r3, r8
 8003322:	eb1a 0303 	adds.w	r3, sl, r3
 8003326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800332a:	464b      	mov	r3, r9
 800332c:	eb4b 0303 	adc.w	r3, fp, r3
 8003330:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003340:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003344:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003348:	460b      	mov	r3, r1
 800334a:	18db      	adds	r3, r3, r3
 800334c:	643b      	str	r3, [r7, #64]	; 0x40
 800334e:	4613      	mov	r3, r2
 8003350:	eb42 0303 	adc.w	r3, r2, r3
 8003354:	647b      	str	r3, [r7, #68]	; 0x44
 8003356:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800335a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800335e:	f7fc ff51 	bl	8000204 <__aeabi_uldivmod>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4611      	mov	r1, r2
 8003368:	4b3b      	ldr	r3, [pc, #236]	; (8003458 <UART_SetConfig+0x2d4>)
 800336a:	fba3 2301 	umull	r2, r3, r3, r1
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2264      	movs	r2, #100	; 0x64
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	1acb      	subs	r3, r1, r3
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800337e:	4b36      	ldr	r3, [pc, #216]	; (8003458 <UART_SetConfig+0x2d4>)
 8003380:	fba3 2302 	umull	r2, r3, r3, r2
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800338c:	441c      	add	r4, r3
 800338e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003392:	2200      	movs	r2, #0
 8003394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003398:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800339c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033a0:	4642      	mov	r2, r8
 80033a2:	464b      	mov	r3, r9
 80033a4:	1891      	adds	r1, r2, r2
 80033a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80033a8:	415b      	adcs	r3, r3
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033b0:	4641      	mov	r1, r8
 80033b2:	1851      	adds	r1, r2, r1
 80033b4:	6339      	str	r1, [r7, #48]	; 0x30
 80033b6:	4649      	mov	r1, r9
 80033b8:	414b      	adcs	r3, r1
 80033ba:	637b      	str	r3, [r7, #52]	; 0x34
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033c8:	4659      	mov	r1, fp
 80033ca:	00cb      	lsls	r3, r1, #3
 80033cc:	4651      	mov	r1, sl
 80033ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033d2:	4651      	mov	r1, sl
 80033d4:	00ca      	lsls	r2, r1, #3
 80033d6:	4610      	mov	r0, r2
 80033d8:	4619      	mov	r1, r3
 80033da:	4603      	mov	r3, r0
 80033dc:	4642      	mov	r2, r8
 80033de:	189b      	adds	r3, r3, r2
 80033e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033e4:	464b      	mov	r3, r9
 80033e6:	460a      	mov	r2, r1
 80033e8:	eb42 0303 	adc.w	r3, r2, r3
 80033ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003400:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003404:	460b      	mov	r3, r1
 8003406:	18db      	adds	r3, r3, r3
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
 800340a:	4613      	mov	r3, r2
 800340c:	eb42 0303 	adc.w	r3, r2, r3
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003412:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003416:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800341a:	f7fc fef3 	bl	8000204 <__aeabi_uldivmod>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <UART_SetConfig+0x2d4>)
 8003424:	fba3 1302 	umull	r1, r3, r3, r2
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	2164      	movs	r1, #100	; 0x64
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	3332      	adds	r3, #50	; 0x32
 8003436:	4a08      	ldr	r2, [pc, #32]	; (8003458 <UART_SetConfig+0x2d4>)
 8003438:	fba2 2303 	umull	r2, r3, r2, r3
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	f003 0207 	and.w	r2, r3, #7
 8003442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4422      	add	r2, r4
 800344a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800344c:	e105      	b.n	800365a <UART_SetConfig+0x4d6>
 800344e:	bf00      	nop
 8003450:	40011000 	.word	0x40011000
 8003454:	40011400 	.word	0x40011400
 8003458:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800345c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003460:	2200      	movs	r2, #0
 8003462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003466:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800346a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800346e:	4642      	mov	r2, r8
 8003470:	464b      	mov	r3, r9
 8003472:	1891      	adds	r1, r2, r2
 8003474:	6239      	str	r1, [r7, #32]
 8003476:	415b      	adcs	r3, r3
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
 800347a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800347e:	4641      	mov	r1, r8
 8003480:	1854      	adds	r4, r2, r1
 8003482:	4649      	mov	r1, r9
 8003484:	eb43 0501 	adc.w	r5, r3, r1
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	00eb      	lsls	r3, r5, #3
 8003492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003496:	00e2      	lsls	r2, r4, #3
 8003498:	4614      	mov	r4, r2
 800349a:	461d      	mov	r5, r3
 800349c:	4643      	mov	r3, r8
 800349e:	18e3      	adds	r3, r4, r3
 80034a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034a4:	464b      	mov	r3, r9
 80034a6:	eb45 0303 	adc.w	r3, r5, r3
 80034aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034ca:	4629      	mov	r1, r5
 80034cc:	008b      	lsls	r3, r1, #2
 80034ce:	4621      	mov	r1, r4
 80034d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034d4:	4621      	mov	r1, r4
 80034d6:	008a      	lsls	r2, r1, #2
 80034d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034dc:	f7fc fe92 	bl	8000204 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4b60      	ldr	r3, [pc, #384]	; (8003668 <UART_SetConfig+0x4e4>)
 80034e6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	011c      	lsls	r4, r3, #4
 80034ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003500:	4642      	mov	r2, r8
 8003502:	464b      	mov	r3, r9
 8003504:	1891      	adds	r1, r2, r2
 8003506:	61b9      	str	r1, [r7, #24]
 8003508:	415b      	adcs	r3, r3
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003510:	4641      	mov	r1, r8
 8003512:	1851      	adds	r1, r2, r1
 8003514:	6139      	str	r1, [r7, #16]
 8003516:	4649      	mov	r1, r9
 8003518:	414b      	adcs	r3, r1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003528:	4659      	mov	r1, fp
 800352a:	00cb      	lsls	r3, r1, #3
 800352c:	4651      	mov	r1, sl
 800352e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003532:	4651      	mov	r1, sl
 8003534:	00ca      	lsls	r2, r1, #3
 8003536:	4610      	mov	r0, r2
 8003538:	4619      	mov	r1, r3
 800353a:	4603      	mov	r3, r0
 800353c:	4642      	mov	r2, r8
 800353e:	189b      	adds	r3, r3, r2
 8003540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003544:	464b      	mov	r3, r9
 8003546:	460a      	mov	r2, r1
 8003548:	eb42 0303 	adc.w	r3, r2, r3
 800354c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	67bb      	str	r3, [r7, #120]	; 0x78
 800355a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003568:	4649      	mov	r1, r9
 800356a:	008b      	lsls	r3, r1, #2
 800356c:	4641      	mov	r1, r8
 800356e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003572:	4641      	mov	r1, r8
 8003574:	008a      	lsls	r2, r1, #2
 8003576:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800357a:	f7fc fe43 	bl	8000204 <__aeabi_uldivmod>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4b39      	ldr	r3, [pc, #228]	; (8003668 <UART_SetConfig+0x4e4>)
 8003584:	fba3 1302 	umull	r1, r3, r3, r2
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	2164      	movs	r1, #100	; 0x64
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	3332      	adds	r3, #50	; 0x32
 8003596:	4a34      	ldr	r2, [pc, #208]	; (8003668 <UART_SetConfig+0x4e4>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a2:	441c      	add	r4, r3
 80035a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a8:	2200      	movs	r2, #0
 80035aa:	673b      	str	r3, [r7, #112]	; 0x70
 80035ac:	677a      	str	r2, [r7, #116]	; 0x74
 80035ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035b2:	4642      	mov	r2, r8
 80035b4:	464b      	mov	r3, r9
 80035b6:	1891      	adds	r1, r2, r2
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	415b      	adcs	r3, r3
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035c2:	4641      	mov	r1, r8
 80035c4:	1851      	adds	r1, r2, r1
 80035c6:	6039      	str	r1, [r7, #0]
 80035c8:	4649      	mov	r1, r9
 80035ca:	414b      	adcs	r3, r1
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035da:	4659      	mov	r1, fp
 80035dc:	00cb      	lsls	r3, r1, #3
 80035de:	4651      	mov	r1, sl
 80035e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035e4:	4651      	mov	r1, sl
 80035e6:	00ca      	lsls	r2, r1, #3
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	4603      	mov	r3, r0
 80035ee:	4642      	mov	r2, r8
 80035f0:	189b      	adds	r3, r3, r2
 80035f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035f4:	464b      	mov	r3, r9
 80035f6:	460a      	mov	r2, r1
 80035f8:	eb42 0303 	adc.w	r3, r2, r3
 80035fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	663b      	str	r3, [r7, #96]	; 0x60
 8003608:	667a      	str	r2, [r7, #100]	; 0x64
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003616:	4649      	mov	r1, r9
 8003618:	008b      	lsls	r3, r1, #2
 800361a:	4641      	mov	r1, r8
 800361c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003620:	4641      	mov	r1, r8
 8003622:	008a      	lsls	r2, r1, #2
 8003624:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003628:	f7fc fdec 	bl	8000204 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <UART_SetConfig+0x4e4>)
 8003632:	fba3 1302 	umull	r1, r3, r3, r2
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	2164      	movs	r1, #100	; 0x64
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	3332      	adds	r3, #50	; 0x32
 8003644:	4a08      	ldr	r2, [pc, #32]	; (8003668 <UART_SetConfig+0x4e4>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	f003 020f 	and.w	r2, r3, #15
 8003650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4422      	add	r2, r4
 8003658:	609a      	str	r2, [r3, #8]
}
 800365a:	bf00      	nop
 800365c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003660:	46bd      	mov	sp, r7
 8003662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003666:	bf00      	nop
 8003668:	51eb851f 	.word	0x51eb851f

0800366c <__libc_init_array>:
 800366c:	b570      	push	{r4, r5, r6, lr}
 800366e:	4d0d      	ldr	r5, [pc, #52]	; (80036a4 <__libc_init_array+0x38>)
 8003670:	4c0d      	ldr	r4, [pc, #52]	; (80036a8 <__libc_init_array+0x3c>)
 8003672:	1b64      	subs	r4, r4, r5
 8003674:	10a4      	asrs	r4, r4, #2
 8003676:	2600      	movs	r6, #0
 8003678:	42a6      	cmp	r6, r4
 800367a:	d109      	bne.n	8003690 <__libc_init_array+0x24>
 800367c:	4d0b      	ldr	r5, [pc, #44]	; (80036ac <__libc_init_array+0x40>)
 800367e:	4c0c      	ldr	r4, [pc, #48]	; (80036b0 <__libc_init_array+0x44>)
 8003680:	f000 f820 	bl	80036c4 <_init>
 8003684:	1b64      	subs	r4, r4, r5
 8003686:	10a4      	asrs	r4, r4, #2
 8003688:	2600      	movs	r6, #0
 800368a:	42a6      	cmp	r6, r4
 800368c:	d105      	bne.n	800369a <__libc_init_array+0x2e>
 800368e:	bd70      	pop	{r4, r5, r6, pc}
 8003690:	f855 3b04 	ldr.w	r3, [r5], #4
 8003694:	4798      	blx	r3
 8003696:	3601      	adds	r6, #1
 8003698:	e7ee      	b.n	8003678 <__libc_init_array+0xc>
 800369a:	f855 3b04 	ldr.w	r3, [r5], #4
 800369e:	4798      	blx	r3
 80036a0:	3601      	adds	r6, #1
 80036a2:	e7f2      	b.n	800368a <__libc_init_array+0x1e>
 80036a4:	080036fc 	.word	0x080036fc
 80036a8:	080036fc 	.word	0x080036fc
 80036ac:	080036fc 	.word	0x080036fc
 80036b0:	08003700 	.word	0x08003700

080036b4 <memset>:
 80036b4:	4402      	add	r2, r0
 80036b6:	4603      	mov	r3, r0
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d100      	bne.n	80036be <memset+0xa>
 80036bc:	4770      	bx	lr
 80036be:	f803 1b01 	strb.w	r1, [r3], #1
 80036c2:	e7f9      	b.n	80036b8 <memset+0x4>

080036c4 <_init>:
 80036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c6:	bf00      	nop
 80036c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ca:	bc08      	pop	{r3}
 80036cc:	469e      	mov	lr, r3
 80036ce:	4770      	bx	lr

080036d0 <_fini>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	bf00      	nop
 80036d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d6:	bc08      	pop	{r3}
 80036d8:	469e      	mov	lr, r3
 80036da:	4770      	bx	lr
