
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003558  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800371c  0800371c  0000471c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003734  08003734  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003734  08003734  00004734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800373c  0800373c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800373c  0800373c  0000473c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003740  08003740  00004740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003744  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003750  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003750  000050c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7eb  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c06  00000000  00000000  00011827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00013430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083f  00000000  00000000  00013eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b6a  00000000  00000000  000146f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc54  00000000  00000000  00035261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8444  00000000  00000000  00042eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b2f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c0c  00000000  00000000  0010b33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0010df48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003704 	.word	0x08003704

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003704 	.word	0x08003704

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <_ZN7SSD1305C1EP17I2C_HandleTypeDefhhh>:
 *      Author: SNA1BP
 */

#include "SSD1305.hpp"

SSD1305::SSD1305(
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	4611      	mov	r1, r2
 8000500:	461a      	mov	r2, r3
 8000502:	460b      	mov	r3, r1
 8000504:	71fb      	strb	r3, [r7, #7]
 8000506:	4613      	mov	r3, r2
 8000508:	71bb      	strb	r3, [r7, #6]
		I2C_HandleTypeDef* hi2c_p,
		uint8_t address_p,
		uint8_t width_p,
		uint8_t height_p)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2204      	movs	r2, #4
 800050e:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
{
	this->hi2c = hi2c_p;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	68ba      	ldr	r2, [r7, #8]
 8000516:	601a      	str	r2, [r3, #0]
	this->address = address_p;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	79fa      	ldrb	r2, [r7, #7]
 800051c:	711a      	strb	r2, [r3, #4]
	this->width = width_p;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	79ba      	ldrb	r2, [r7, #6]
 8000522:	715a      	strb	r2, [r3, #5]
	this->height = height_p;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	7e3a      	ldrb	r2, [r7, #24]
 8000528:	719a      	strb	r2, [r3, #6]
}
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	4618      	mov	r0, r3
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <_ZN7SSD13054InitEv>:

bool SSD1305::Init()
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af02      	add	r7, sp, #8
 800053e:	6078      	str	r0, [r7, #4]


    int status = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]

	status += SetDisplayON_OFF(DisplayOffSleepMode);
 8000544:	21ae      	movs	r1, #174	@ 0xae
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f000 fa9e 	bl	8000a88 <_ZN7SSD130516SetDisplayON_OFFE11DisplayMode>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	4413      	add	r3, r2
 8000554:	60fb      	str	r3, [r7, #12]
	status += SetMultiplexRatio(height-1);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	799b      	ldrb	r3, [r3, #6]
 800055a:	3b01      	subs	r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	4619      	mov	r1, r3
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 fa77 	bl	8000a54 <_ZN7SSD130517SetMultiplexRatioEh>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	4413      	add	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
	status += SetDisplayOffset(0);
 8000570:	2100      	movs	r1, #0
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f000 faac 	bl	8000ad0 <_ZN7SSD130516SetDisplayOffsetEh>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4413      	add	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
	status += SetDisplayStartLine(0);
 8000582:	2100      	movs	r1, #0
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 f9b0 	bl	80008ea <_ZN7SSD130519SetDisplayStartLineEh>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4413      	add	r3, r2
 8000592:	60fb      	str	r3, [r7, #12]
	status += SetColorAndPowerMode(monochromeMode, normalPowerMode);
 8000594:	2200      	movs	r2, #0
 8000596:	2100      	movs	r1, #0
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f000 fab3 	bl	8000b04 <_ZN7SSD130520SetColorAndPowerModeE9ColorMode9PowerMode>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	4413      	add	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]
	status += SetMemoryAddressingMode(horizontal);
 80005a8:	2100      	movs	r1, #0
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f000 f940 	bl	8000830 <_ZN7SSD130523SetMemoryAddressingModeE20MemoryAddressingMode>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	4413      	add	r3, r2
 80005b8:	60fb      	str	r3, [r7, #12]
	status += SetSegmentReMap(columnAddress131toSEG0);
 80005ba:	2101      	movs	r1, #1
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 fa10 	bl	80009e2 <_ZN7SSD130515SetSegmentReMapE12SegmentRemap>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	4413      	add	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
	status += SetLUT(0x3F, 0x3F, 0x3F, 0x3F);
 80005cc:	233f      	movs	r3, #63	@ 0x3f
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	233f      	movs	r3, #63	@ 0x3f
 80005d2:	223f      	movs	r2, #63	@ 0x3f
 80005d4:	213f      	movs	r1, #63	@ 0x3f
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 f9b6 	bl	8000948 <_ZN7SSD13056SetLUTEhhhh>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]
	status += SetPrechargePeriod(13, 2);
 80005e6:	2202      	movs	r2, #2
 80005e8:	210d      	movs	r1, #13
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f000 faa8 	bl	8000b40 <_ZN7SSD130518SetPrechargePeriodEhh>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4413      	add	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
	status += SetDisplayOffset(0);
 80005fa:	2100      	movs	r1, #0
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 fa67 	bl	8000ad0 <_ZN7SSD130516SetDisplayOffsetEh>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	4413      	add	r3, r2
 800060a:	60fb      	str	r3, [r7, #12]
	status += SetComOutputScanDirection(remappedMode);
 800060c:	21c8      	movs	r1, #200	@ 0xc8
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 fa4c 	bl	8000aac <_ZN7SSD130525SetComOutputScanDirectionE22ComOutputScanDirection>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
	status += SetNormalInverse(normal);
 800061e:	21a6      	movs	r1, #166	@ 0xa6
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f000 fa05 	bl	8000a30 <_ZN7SSD130516SetNormalInverseE18DisplayInverseMode>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4413      	add	r3, r2
 800062e:	60fb      	str	r3, [r7, #12]

    status += SetColumnAddress(v_offset, (width - 1) + v_offset);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f893 1211 	ldrb.w	r1, [r3, #529]	@ 0x211
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	795a      	ldrb	r2, [r3, #5]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f893 3211 	ldrb.w	r3, [r3, #529]	@ 0x211
 8000640:	4413      	add	r3, r2
 8000642:	b2db      	uxtb	r3, r3
 8000644:	3b01      	subs	r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f905 	bl	800085a <_ZN7SSD130516SetColumnAddressEhh>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4413      	add	r3, r2
 8000658:	60fb      	str	r3, [r7, #12]
	status += SetPageAddress(0, 3);
 800065a:	2203      	movs	r2, #3
 800065c:	2100      	movs	r1, #0
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f000 f91f 	bl	80008a2 <_ZN7SSD130514SetPageAddressEhh>
 8000664:	4603      	mov	r3, r0
 8000666:	461a      	mov	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]

	status += Fill(Black);
 800066e:	2100      	movs	r1, #0
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f866 	bl	8000742 <_ZN7SSD13054FillE13SSD1305_COLOR>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	4413      	add	r3, r2
 800067e:	60fb      	str	r3, [r7, #12]

    status += SetDisplayON_OFF(DisplayOnNormalMode);
 8000680:	21af      	movs	r1, #175	@ 0xaf
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 fa00 	bl	8000a88 <_ZN7SSD130516SetDisplayON_OFFE11DisplayMode>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4413      	add	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
    status += EntireDisplayON(ResumeToRAMContent);
 8000692:	21a4      	movs	r1, #164	@ 0xa4
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 f9b9 	bl	8000a0c <_ZN7SSD130515EntireDisplayONE13DisplayONMode>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4413      	add	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <_ZN7SSD13054InitEv+0x176>
        return false;
 80006aa:	2300      	movs	r3, #0
 80006ac:	e000      	b.n	80006b0 <_ZN7SSD13054InitEv+0x178>
    }

    return true;
 80006ae:	2301      	movs	r3, #1
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <_ZN7SSD13059GetHeightEv>:

uint8_t SSD1305::GetHeight(){return height;}
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	799b      	ldrb	r3, [r3, #6]
 80006c4:	4618      	mov	r0, r3
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <_ZN7SSD13058GetWidthEv>:
uint8_t SSD1305::GetWidth(){return width;}
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	795b      	ldrb	r3, [r3, #5]
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <_ZN7SSD130519WriteBitmapToScreenEPhj>:
		return HAL_I2C_Mem_Write(hi2c, address<<1, DATA_ADDRESS, 1, bitmapBuffer, size, size*10);
    }
}

HAL_StatusTypeDef SSD1305::WriteBitmapToScreen(uint8_t* bitmap, size_t size)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b08b      	sub	sp, #44	@ 0x2c
 80006ec:	af04      	add	r7, sp, #16
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;

    status =  SetMemoryAddressingMode(horizontal);
 80006f4:	2100      	movs	r1, #0
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f000 f89a 	bl	8000830 <_ZN7SSD130523SetMemoryAddressingModeE20MemoryAddressingMode>
 80006fc:	4603      	mov	r3, r0
 80006fe:	75fb      	strb	r3, [r7, #23]

    if (status != HAL_OK)
 8000700:	7dfb      	ldrb	r3, [r7, #23]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <_ZN7SSD130519WriteBitmapToScreenEPhj+0x22>
    {
    	return status;
 8000706:	7dfb      	ldrb	r3, [r7, #23]
 8000708:	e017      	b.n	800073a <_ZN7SSD130519WriteBitmapToScreenEPhj+0x52>
    }
    else
    {
		return HAL_I2C_Mem_Write(hi2c, address<<1, DATA_ADDRESS, 1, bitmap, size, size*10);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	b29c      	uxth	r4, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b299      	uxth	r1, r3
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	9302      	str	r3, [sp, #8]
 8000726:	9101      	str	r1, [sp, #4]
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	2240      	movs	r2, #64	@ 0x40
 8000730:	4621      	mov	r1, r4
 8000732:	f001 facb 	bl	8001ccc <HAL_I2C_Mem_Write>
 8000736:	4603      	mov	r3, r0
 8000738:	bf00      	nop
    }
}
 800073a:	4618      	mov	r0, r3
 800073c:	371c      	adds	r7, #28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd90      	pop	{r4, r7, pc}

08000742 <_ZN7SSD13054FillE13SSD1305_COLOR>:

HAL_StatusTypeDef SSD1305::Fill(SSD1305_COLOR color_p)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b088      	sub	sp, #32
 8000746:	af04      	add	r7, sp, #16
 8000748:	6078      	str	r0, [r7, #4]
 800074a:	460b      	mov	r3, r1
 800074c:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;
	status = EnterReadModifyWrite();
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f000 fa1e 	bl	8000b90 <_ZN7SSD130520EnterReadModifyWriteEv>
 8000754:	4603      	mov	r3, r0
 8000756:	72fb      	strb	r3, [r7, #11]

    if (status != HAL_OK)
 8000758:	7afb      	ldrb	r3, [r7, #11]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <_ZN7SSD13054FillE13SSD1305_COLOR+0x20>
    {
    	return status;
 800075e:	7afb      	ldrb	r3, [r7, #11]
 8000760:	e045      	b.n	80007ee <_ZN7SSD13054FillE13SSD1305_COLOR+0xac>
    }
    else
    {
		uint8_t data = (color_p == Black) ? 0x00 : 0xFF;
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d101      	bne.n	800076c <_ZN7SSD13054FillE13SSD1305_COLOR+0x2a>
 8000768:	2300      	movs	r3, #0
 800076a:	e000      	b.n	800076e <_ZN7SSD13054FillE13SSD1305_COLOR+0x2c>
 800076c:	23ff      	movs	r3, #255	@ 0xff
 800076e:	72bb      	strb	r3, [r7, #10]

		for(int i = 0; i<(width * height) / 8; i++)
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	e021      	b.n	80007ba <_ZN7SSD13054FillE13SSD1305_COLOR+0x78>
		{
			bitmapBuffer[i] = data;
 8000776:	7ab9      	ldrb	r1, [r7, #10]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	3311      	adds	r3, #17
 8000780:	460a      	mov	r2, r1
 8000782:	701a      	strb	r2, [r3, #0]
			status = HAL_I2C_Mem_Write(hi2c, address<<1, DATA_ADDRESS, 1, &data, 1, 10);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791b      	ldrb	r3, [r3, #4]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	b299      	uxth	r1, r3
 8000790:	230a      	movs	r3, #10
 8000792:	9302      	str	r3, [sp, #8]
 8000794:	2301      	movs	r3, #1
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	f107 030a 	add.w	r3, r7, #10
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	2301      	movs	r3, #1
 80007a0:	2240      	movs	r2, #64	@ 0x40
 80007a2:	f001 fa93 	bl	8001ccc <HAL_I2C_Mem_Write>
 80007a6:	4603      	mov	r3, r0
 80007a8:	72fb      	strb	r3, [r7, #11]
		    if (status != HAL_OK)
 80007aa:	7afb      	ldrb	r3, [r7, #11]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <_ZN7SSD13054FillE13SSD1305_COLOR+0x72>
		    {
		    	return status;
 80007b0:	7afb      	ldrb	r3, [r7, #11]
 80007b2:	e01c      	b.n	80007ee <_ZN7SSD13054FillE13SSD1305_COLOR+0xac>
		for(int i = 0; i<(width * height) / 8; i++)
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	3301      	adds	r3, #1
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	795b      	ldrb	r3, [r3, #5]
 80007be:	461a      	mov	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	799b      	ldrb	r3, [r3, #6]
 80007c4:	fb02 f303 	mul.w	r3, r2, r3
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	da00      	bge.n	80007ce <_ZN7SSD13054FillE13SSD1305_COLOR+0x8c>
 80007cc:	3307      	adds	r3, #7
 80007ce:	10db      	asrs	r3, r3, #3
 80007d0:	461a      	mov	r2, r3
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	4293      	cmp	r3, r2
 80007d6:	dbce      	blt.n	8000776 <_ZN7SSD13054FillE13SSD1305_COLOR+0x34>
		    }
		}
    }

	status = ExitReadModifyWrite();
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 f9e9 	bl	8000bb0 <_ZN7SSD130519ExitReadModifyWriteEv>
 80007de:	4603      	mov	r3, r0
 80007e0:	72fb      	strb	r3, [r7, #11]

    if (status != HAL_OK)
 80007e2:	7afb      	ldrb	r3, [r7, #11]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <_ZN7SSD13054FillE13SSD1305_COLOR+0xaa>
    {
    	return status;
 80007e8:	7afb      	ldrb	r3, [r7, #11]
 80007ea:	e000      	b.n	80007ee <_ZN7SSD13054FillE13SSD1305_COLOR+0xac>
    }
	return status;
 80007ec:	7afb      	ldrb	r3, [r7, #11]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <_ZN7SSD130511SendCommandEh>:
////REALISE THE METHODS OF THE IC////
/////////////////////////////////////


HAL_StatusTypeDef SSD1305::SendCommand(uint8_t commandSize)
{
 80007f6:	b590      	push	{r4, r7, lr}
 80007f8:	b087      	sub	sp, #28
 80007fa:	af04      	add	r7, sp, #16
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	460b      	mov	r3, r1
 8000800:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(hi2c, address<<1, COMMAND_ADDRESS, 1, commandBuffer, commandSize, 10);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6818      	ldr	r0, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	b299      	uxth	r1, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	330c      	adds	r3, #12
 8000812:	78fa      	ldrb	r2, [r7, #3]
 8000814:	b292      	uxth	r2, r2
 8000816:	240a      	movs	r4, #10
 8000818:	9402      	str	r4, [sp, #8]
 800081a:	9201      	str	r2, [sp, #4]
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2301      	movs	r3, #1
 8000820:	2200      	movs	r2, #0
 8000822:	f001 fa53 	bl	8001ccc <HAL_I2C_Mem_Write>
 8000826:	4603      	mov	r3, r0
}
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bd90      	pop	{r4, r7, pc}

08000830 <_ZN7SSD130523SetMemoryAddressingModeE20MemoryAddressingMode>:
	commandBuffer[0] = SSD1305_SET_HIGHER_COLUMN | startAddress_p;
	return SendCommand(1);
}

HAL_StatusTypeDef SSD1305::SetMemoryAddressingMode(MemoryAddressingMode mode_p)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = SSD1305_MEMORY_ADDR_MODE;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2220      	movs	r2, #32
 8000840:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = mode_p;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	78fa      	ldrb	r2, [r7, #3]
 8000846:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000848:	2102      	movs	r1, #2
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ffd3 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 8000850:	4603      	mov	r3, r0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <_ZN7SSD130516SetColumnAddressEhh>:

HAL_StatusTypeDef SSD1305::SetColumnAddress(uint8_t startAddres_p, uint8_t endAddres_p)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	460b      	mov	r3, r1
 8000864:	70fb      	strb	r3, [r7, #3]
 8000866:	4613      	mov	r3, r2
 8000868:	70bb      	strb	r3, [r7, #2]
	if(startAddres_p > 131)
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	2b83      	cmp	r3, #131	@ 0x83
 800086e:	d901      	bls.n	8000874 <_ZN7SSD130516SetColumnAddressEhh+0x1a>
	{
		startAddres_p = 130;
 8000870:	2382      	movs	r3, #130	@ 0x82
 8000872:	70fb      	strb	r3, [r7, #3]
	}
	if(endAddres_p > 131)
 8000874:	78bb      	ldrb	r3, [r7, #2]
 8000876:	2b83      	cmp	r3, #131	@ 0x83
 8000878:	d901      	bls.n	800087e <_ZN7SSD130516SetColumnAddressEhh+0x24>
	{
		endAddres_p =  131;
 800087a:	2383      	movs	r3, #131	@ 0x83
 800087c:	70bb      	strb	r3, [r7, #2]
	}

	commandBuffer[0] = SSD1305_SET_COLUMN_ADDR;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2221      	movs	r2, #33	@ 0x21
 8000882:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = startAddres_p;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	78fa      	ldrb	r2, [r7, #3]
 8000888:	735a      	strb	r2, [r3, #13]
	commandBuffer[2] = endAddres_p;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	78ba      	ldrb	r2, [r7, #2]
 800088e:	739a      	strb	r2, [r3, #14]

	return SendCommand(3);
 8000890:	2103      	movs	r1, #3
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ffaf 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 8000898:	4603      	mov	r3, r0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <_ZN7SSD130514SetPageAddressEhh>:

HAL_StatusTypeDef SSD1305::SetPageAddress(uint8_t startAddres_p, uint8_t endAddres_p)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
 80008aa:	460b      	mov	r3, r1
 80008ac:	70fb      	strb	r3, [r7, #3]
 80008ae:	4613      	mov	r3, r2
 80008b0:	70bb      	strb	r3, [r7, #2]
	if(startAddres_p > 7)
 80008b2:	78fb      	ldrb	r3, [r7, #3]
 80008b4:	2b07      	cmp	r3, #7
 80008b6:	d901      	bls.n	80008bc <_ZN7SSD130514SetPageAddressEhh+0x1a>
	{
		startAddres_p = 7;
 80008b8:	2307      	movs	r3, #7
 80008ba:	70fb      	strb	r3, [r7, #3]
	}
	if(endAddres_p > 7)
 80008bc:	78bb      	ldrb	r3, [r7, #2]
 80008be:	2b07      	cmp	r3, #7
 80008c0:	d901      	bls.n	80008c6 <_ZN7SSD130514SetPageAddressEhh+0x24>
	{
		endAddres_p =  7;
 80008c2:	2307      	movs	r3, #7
 80008c4:	70bb      	strb	r3, [r7, #2]
	}

	commandBuffer[0] = SSD1305_SET_PAGE_ADDR;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2222      	movs	r2, #34	@ 0x22
 80008ca:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = startAddres_p;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	78fa      	ldrb	r2, [r7, #3]
 80008d0:	735a      	strb	r2, [r3, #13]
	commandBuffer[2] = endAddres_p;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	78ba      	ldrb	r2, [r7, #2]
 80008d6:	739a      	strb	r2, [r3, #14]

	return SendCommand(3);
 80008d8:	2103      	movs	r1, #3
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ff8b 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 80008e0:	4603      	mov	r3, r0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <_ZN7SSD130519SetDisplayStartLineEh>:

HAL_StatusTypeDef SSD1305::SetDisplayStartLine(uint8_t line_p)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	70fb      	strb	r3, [r7, #3]
	if(line_p > 63)
 80008f6:	78fb      	ldrb	r3, [r7, #3]
 80008f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80008fa:	d901      	bls.n	8000900 <_ZN7SSD130519SetDisplayStartLineEh+0x16>
	{
		line_p = 63;
 80008fc:	233f      	movs	r3, #63	@ 0x3f
 80008fe:	70fb      	strb	r3, [r7, #3]
	}

	commandBuffer[0] = SSD1305_SET_START_LINE | line_p;
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000906:	b2da      	uxtb	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 800090c:	2101      	movs	r1, #1
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ff71 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 8000914:	4603      	mov	r3, r0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_ZN7SSD130530SetBrightnessForAreaColorBanksEh>:

	return SendCommand(2);
}

HAL_StatusTypeDef SSD1305::SetBrightnessForAreaColorBanks(uint8_t brightness_p)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	460b      	mov	r3, r1
 8000928:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = SSD1305_SET_BRIGHTNESS;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2282      	movs	r2, #130	@ 0x82
 800092e:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = brightness_p;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	78fa      	ldrb	r2, [r7, #3]
 8000934:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000936:	2102      	movs	r1, #2
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff5c 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 800093e:	4603      	mov	r3, r0
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <_ZN7SSD13056SetLUTEhhhh>:

HAL_StatusTypeDef SSD1305::SetLUT(uint8_t LUT_BANK0_p, uint8_t LUT_ColorA_p, uint8_t LUT_ColorB_p, uint8_t LUT_ColorC_p)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	4608      	mov	r0, r1
 8000952:	4611      	mov	r1, r2
 8000954:	461a      	mov	r2, r3
 8000956:	4603      	mov	r3, r0
 8000958:	70fb      	strb	r3, [r7, #3]
 800095a:	460b      	mov	r3, r1
 800095c:	70bb      	strb	r3, [r7, #2]
 800095e:	4613      	mov	r3, r2
 8000960:	707b      	strb	r3, [r7, #1]
	if(LUT_BANK0_p < 32){
 8000962:	78fb      	ldrb	r3, [r7, #3]
 8000964:	2b1f      	cmp	r3, #31
 8000966:	d801      	bhi.n	800096c <_ZN7SSD13056SetLUTEhhhh+0x24>
		LUT_BANK0_p = 32;
 8000968:	2320      	movs	r3, #32
 800096a:	70fb      	strb	r3, [r7, #3]
	}
	if(LUT_BANK0_p > 63){
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000970:	d901      	bls.n	8000976 <_ZN7SSD13056SetLUTEhhhh+0x2e>
		LUT_BANK0_p = 63;
 8000972:	233f      	movs	r3, #63	@ 0x3f
 8000974:	70fb      	strb	r3, [r7, #3]
	}
	//--//
	if(LUT_ColorA_p < 32){
 8000976:	78bb      	ldrb	r3, [r7, #2]
 8000978:	2b1f      	cmp	r3, #31
 800097a:	d801      	bhi.n	8000980 <_ZN7SSD13056SetLUTEhhhh+0x38>
		LUT_ColorA_p = 32;
 800097c:	2320      	movs	r3, #32
 800097e:	70bb      	strb	r3, [r7, #2]
	}
	if(LUT_ColorA_p > 63){
 8000980:	78bb      	ldrb	r3, [r7, #2]
 8000982:	2b3f      	cmp	r3, #63	@ 0x3f
 8000984:	d901      	bls.n	800098a <_ZN7SSD13056SetLUTEhhhh+0x42>
		LUT_ColorA_p = 63;
 8000986:	233f      	movs	r3, #63	@ 0x3f
 8000988:	70bb      	strb	r3, [r7, #2]
	}
	//--//
	if(LUT_ColorB_p < 32){
 800098a:	787b      	ldrb	r3, [r7, #1]
 800098c:	2b1f      	cmp	r3, #31
 800098e:	d801      	bhi.n	8000994 <_ZN7SSD13056SetLUTEhhhh+0x4c>
		LUT_ColorB_p = 32;
 8000990:	2320      	movs	r3, #32
 8000992:	707b      	strb	r3, [r7, #1]
	}
	if(LUT_ColorB_p > 63){
 8000994:	787b      	ldrb	r3, [r7, #1]
 8000996:	2b3f      	cmp	r3, #63	@ 0x3f
 8000998:	d901      	bls.n	800099e <_ZN7SSD13056SetLUTEhhhh+0x56>
		LUT_ColorB_p = 63;
 800099a:	233f      	movs	r3, #63	@ 0x3f
 800099c:	707b      	strb	r3, [r7, #1]
	}
	//--//
	if(LUT_ColorC_p < 32){
 800099e:	7c3b      	ldrb	r3, [r7, #16]
 80009a0:	2b1f      	cmp	r3, #31
 80009a2:	d801      	bhi.n	80009a8 <_ZN7SSD13056SetLUTEhhhh+0x60>
		LUT_ColorC_p = 32;
 80009a4:	2320      	movs	r3, #32
 80009a6:	743b      	strb	r3, [r7, #16]
	}
	if(LUT_ColorC_p > 63){
 80009a8:	7c3b      	ldrb	r3, [r7, #16]
 80009aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80009ac:	d901      	bls.n	80009b2 <_ZN7SSD13056SetLUTEhhhh+0x6a>
		LUT_ColorC_p = 63;
 80009ae:	233f      	movs	r3, #63	@ 0x3f
 80009b0:	743b      	strb	r3, [r7, #16]
	}

	commandBuffer[0] = SSD1305_SET_LUT;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2291      	movs	r2, #145	@ 0x91
 80009b6:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = LUT_BANK0_p;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	78fa      	ldrb	r2, [r7, #3]
 80009bc:	735a      	strb	r2, [r3, #13]
	commandBuffer[2] = LUT_ColorA_p;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	78ba      	ldrb	r2, [r7, #2]
 80009c2:	739a      	strb	r2, [r3, #14]
	commandBuffer[3] = LUT_ColorB_p;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	787a      	ldrb	r2, [r7, #1]
 80009c8:	73da      	strb	r2, [r3, #15]
	commandBuffer[4] = LUT_ColorC_p;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7c3a      	ldrb	r2, [r7, #16]
 80009ce:	741a      	strb	r2, [r3, #16]

	return SendCommand(5);
 80009d0:	2105      	movs	r1, #5
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ff0f 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 80009d8:	4603      	mov	r3, r0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_ZN7SSD130515SetSegmentReMapE12SegmentRemap>:

HAL_StatusTypeDef SSD1305::SetSegmentReMap(SegmentRemap remap_p)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	460b      	mov	r3, r1
 80009ec:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = SSD1305_SEG_REMAP | remap_p;
 80009ee:	78fb      	ldrb	r3, [r7, #3]
 80009f0:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 80009fa:	2101      	movs	r1, #1
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff fefa 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 8000a02:	4603      	mov	r3, r0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_ZN7SSD130515EntireDisplayONE13DisplayONMode>:

HAL_StatusTypeDef SSD1305::EntireDisplayON(DisplayONMode displayONMode_p)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = displayONMode_p;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	78fa      	ldrb	r2, [r7, #3]
 8000a1c:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000a1e:	2101      	movs	r1, #1
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff fee8 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 8000a26:	4603      	mov	r3, r0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <_ZN7SSD130516SetNormalInverseE18DisplayInverseMode>:

HAL_StatusTypeDef SSD1305::SetNormalInverse(DisplayInverseMode inversMode_p)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = inversMode_p;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	78fa      	ldrb	r2, [r7, #3]
 8000a40:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000a42:	2101      	movs	r1, #1
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff fed6 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 8000a4a:	4603      	mov	r3, r0
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <_ZN7SSD130517SetMultiplexRatioEh>:

HAL_StatusTypeDef SSD1305::SetMultiplexRatio(uint8_t ratio_p)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	70fb      	strb	r3, [r7, #3]
	if(ratio_p < 15)
 8000a60:	78fb      	ldrb	r3, [r7, #3]
 8000a62:	2b0e      	cmp	r3, #14
 8000a64:	d801      	bhi.n	8000a6a <_ZN7SSD130517SetMultiplexRatioEh+0x16>
	{
		ratio_p = 15;
 8000a66:	230f      	movs	r3, #15
 8000a68:	70fb      	strb	r3, [r7, #3]
	}

	commandBuffer[0] = 	SSD1305_SET_MULTIPLEX_RATIO;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	22a8      	movs	r2, #168	@ 0xa8
 8000a6e:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = ratio_p;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	78fa      	ldrb	r2, [r7, #3]
 8000a74:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000a76:	2102      	movs	r1, #2
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff febc 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 8000a7e:	4603      	mov	r3, r0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_ZN7SSD130516SetDisplayON_OFFE11DisplayMode>:

	return SendCommand(4);
}

HAL_StatusTypeDef SSD1305::SetDisplayON_OFF(DisplayMode mode_p)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = mode_p;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	78fa      	ldrb	r2, [r7, #3]
 8000a98:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff feaa 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 8000aa2:	4603      	mov	r3, r0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_ZN7SSD130525SetComOutputScanDirectionE22ComOutputScanDirection>:

	return SendCommand(1);
}

HAL_StatusTypeDef SSD1305::SetComOutputScanDirection(ComOutputScanDirection scanDirection_p)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = scanDirection_p;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	78fa      	ldrb	r2, [r7, #3]
 8000abc:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000abe:	2101      	movs	r1, #1
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fe98 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 8000ac6:	4603      	mov	r3, r0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_ZN7SSD130516SetDisplayOffsetEh>:

HAL_StatusTypeDef SSD1305::SetDisplayOffset(uint8_t verticalShift_p)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	70fb      	strb	r3, [r7, #3]
	if (verticalShift_p > 63)
 8000adc:	78fb      	ldrb	r3, [r7, #3]
 8000ade:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ae0:	d901      	bls.n	8000ae6 <_ZN7SSD130516SetDisplayOffsetEh+0x16>
	{
		verticalShift_p = 63;
 8000ae2:	233f      	movs	r3, #63	@ 0x3f
 8000ae4:	70fb      	strb	r3, [r7, #3]
	}

	commandBuffer[0] = SSD1305_SET_DISPLAY_OFFSET;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	22d3      	movs	r2, #211	@ 0xd3
 8000aea:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = verticalShift_p;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	78fa      	ldrb	r2, [r7, #3]
 8000af0:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000af2:	2102      	movs	r1, #2
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff fe7e 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 8000afa:	4603      	mov	r3, r0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <_ZN7SSD130520SetColorAndPowerModeE9ColorMode9PowerMode>:

	return SendCommand(2);
}

HAL_StatusTypeDef SSD1305::SetColorAndPowerMode(ColorMode colorMode_p, PowerMode powerMode_p)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]
 8000b10:	4613      	mov	r3, r2
 8000b12:	70bb      	strb	r3, [r7, #2]
	commandBuffer[0] = SSD1305_SET_COLOR_n_POWER_MODE;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	22d8      	movs	r2, #216	@ 0xd8
 8000b18:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = (colorMode_p << 4) | powerMode_p;
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	b25a      	sxtb	r2, r3
 8000b20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000b2e:	2102      	movs	r1, #2
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff fe60 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 8000b36:	4603      	mov	r3, r0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_ZN7SSD130518SetPrechargePeriodEhh>:

HAL_StatusTypeDef SSD1305::SetPrechargePeriod(uint8_t phase1_p, uint8_t phase2_p)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	70bb      	strb	r3, [r7, #2]
	if(phase1_p > 0xF)
 8000b50:	78fb      	ldrb	r3, [r7, #3]
 8000b52:	2b0f      	cmp	r3, #15
 8000b54:	d901      	bls.n	8000b5a <_ZN7SSD130518SetPrechargePeriodEhh+0x1a>
	{
		phase1_p = 0xF;
 8000b56:	230f      	movs	r3, #15
 8000b58:	70fb      	strb	r3, [r7, #3]
	}

	if(phase2_p > 0xF)
 8000b5a:	78bb      	ldrb	r3, [r7, #2]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d901      	bls.n	8000b64 <_ZN7SSD130518SetPrechargePeriodEhh+0x24>
	{
		phase2_p = 0xF;
 8000b60:	230f      	movs	r3, #15
 8000b62:	70bb      	strb	r3, [r7, #2]
	}

	commandBuffer[0] = SSD1305_SET_PRECHARGE_PERIOD;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	22d9      	movs	r2, #217	@ 0xd9
 8000b68:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = (phase2_p << 4) | phase1_p;
 8000b6a:	78bb      	ldrb	r3, [r7, #2]
 8000b6c:	011b      	lsls	r3, r3, #4
 8000b6e:	b25a      	sxtb	r2, r3
 8000b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	b25b      	sxtb	r3, r3
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000b7e:	2102      	movs	r1, #2
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fe38 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 8000b86:	4603      	mov	r3, r0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_ZN7SSD130520EnterReadModifyWriteEv>:

	return SendCommand(2);
}

HAL_StatusTypeDef SSD1305::EnterReadModifyWrite()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	commandBuffer[0] = SSD1305_READ_MODIFY_WRITE;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	22e0      	movs	r2, #224	@ 0xe0
 8000b9c:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fe28 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 8000ba6:	4603      	mov	r3, r0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <_ZN7SSD130519ExitReadModifyWriteEv>:

	return SendCommand(1);
}

HAL_StatusTypeDef SSD1305::ExitReadModifyWrite()
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	commandBuffer[0] = SSD1305_EXIT_RMW;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	22ee      	movs	r2, #238	@ 0xee
 8000bbc:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fe18 	bl	80007f6 <_ZN7SSD130511SendCommandEh>
 8000bc6:	4603      	mov	r3, r0
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <_Z17available_devicesPi>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void available_devices(int* devices)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	int j = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<128; i++)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	e01c      	b.n	8000c1c <_Z17available_devicesPi+0x4c>
	{
		HAL_Delay(100);
 8000be2:	2064      	movs	r0, #100	@ 0x64
 8000be4:	f000 fc76 	bl	80014d4 <HAL_Delay>
		status = HAL_I2C_IsDeviceReady(&hi2c1, i<<1, 2, 100);
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	b299      	uxth	r1, r3
 8000bf0:	2364      	movs	r3, #100	@ 0x64
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <_Z17available_devicesPi+0x5c>)
 8000bf6:	f001 f963 	bl	8001ec0 <HAL_I2C_IsDeviceReady>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	73fb      	strb	r3, [r7, #15]
		if(status == HAL_OK)
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d108      	bne.n	8000c16 <_Z17available_devicesPi+0x46>
			{
				devices[j] = i;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	601a      	str	r2, [r3, #0]
				j++;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	3301      	adds	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<128; i++)
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c20:	dddf      	ble.n	8000be2 <_Z17available_devicesPi+0x12>
			}
	}
}
 8000c22:	bf00      	nop
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000028 	.word	0x20000028

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c32:	f2ad 6d2c 	subw	sp, sp, #1580	@ 0x62c
 8000c36:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c38:	f000 fbda 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3c:	f000 f966 	bl	8000f0c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c40:	f000 fa3e 	bl	80010c0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000c44:	f000 fa0e 	bl	8001064 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8000c48:	f000 f9d8 	bl	8000ffc <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  int devices[128];
  for(int i = 0; i<128; i++){devices[i] = 0;}
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 8000c52:	e00d      	b.n	8000c70 <main+0x40>
 8000c54:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 8000c58:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000c5c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	@ 0x61c
 8000c60:	2100      	movs	r1, #0
 8000c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000c66:	f8d7 361c 	ldr.w	r3, [r7, #1564]	@ 0x61c
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 8000c70:	f8d7 361c 	ldr.w	r3, [r7, #1564]	@ 0x61c
 8000c74:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c76:	dded      	ble.n	8000c54 <main+0x24>

  available_devices(devices);
 8000c78:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ffa7 	bl	8000bd0 <_Z17available_devicesPi>

  SSD1305 display(&hi2c1, 0x3C, 128, 32);
 8000c82:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 8000c86:	2320      	movs	r3, #32
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2380      	movs	r3, #128	@ 0x80
 8000c8c:	223c      	movs	r2, #60	@ 0x3c
 8000c8e:	499e      	ldr	r1, [pc, #632]	@ (8000f08 <main+0x2d8>)
 8000c90:	f7ff fc30 	bl	80004f4 <_ZN7SSD1305C1EP17I2C_HandleTypeDefhhh>
  display.Init();
 8000c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fc4d 	bl	8000538 <_ZN7SSD13054InitEv>
  //display.WriteBitmapToScreen(Misato_sfw, sizeof(Misato_sfw));

  // 2) Kapcsoljuk a kijelzőt area color módba

  uint8_t bitmapBuffer[512];
  for(int i = 0; i < 512; i++){bitmapBuffer[i] = 0;}
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 3618 	str.w	r3, [r7, #1560]	@ 0x618
 8000ca4:	e00d      	b.n	8000cc2 <main+0x92>
 8000ca6:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 8000caa:	f5a3 62c4 	sub.w	r2, r3, #1568	@ 0x620
 8000cae:	f8d7 3618 	ldr.w	r3, [r7, #1560]	@ 0x618
 8000cb2:	4413      	add	r3, r2
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	f8d7 3618 	ldr.w	r3, [r7, #1560]	@ 0x618
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	f8c7 3618 	str.w	r3, [r7, #1560]	@ 0x618
 8000cc2:	f8d7 3618 	ldr.w	r3, [r7, #1560]	@ 0x618
 8000cc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cca:	dbec      	blt.n	8000ca6 <main+0x76>
  display.SetColorAndPowerMode(colorMode, normalPowerMode);
 8000ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2130      	movs	r1, #48	@ 0x30
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff15 	bl	8000b04 <_ZN7SSD130520SetColorAndPowerModeE9ColorMode9PowerMode>

  // 3) LUT beállítása (32–63 közötti értékek)
  // Például: Bank0 nagyon halvány, ColorA közepes, ColorB erősebb, ColorC maximális
  display.SetLUT(35, 45, 55, 63);
 8000cda:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 8000cde:	233f      	movs	r3, #63	@ 0x3f
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2337      	movs	r3, #55	@ 0x37
 8000ce4:	222d      	movs	r2, #45	@ 0x2d
 8000ce6:	2123      	movs	r1, #35	@ 0x23
 8000ce8:	f7ff fe2e 	bl	8000948 <_ZN7SSD13056SetLUTEhhhh>

  // 4) Fényerő finomhangolása (0x00–0xFF)
  display.SetBrightnessForAreaColorBanks(0x80);
 8000cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cf0:	2180      	movs	r1, #128	@ 0x80
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fe13 	bl	800091e <_ZN7SSD130530SetBrightnessForAreaColorBanksEh>

  // 5) RAM kitöltése tesztmintával:
  // 4 függőleges sáv (mind más bankhoz tartozzon)
  for (uint8_t x = 0; x < display.GetWidth(); x++) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f887 3617 	strb.w	r3, [r7, #1559]	@ 0x617
 8000cfe:	e0e8      	b.n	8000ed2 <main+0x2a2>
	  for (uint8_t y = 0; y < display.GetHeight(); y++) {
 8000d00:	2300      	movs	r3, #0
 8000d02:	f887 3616 	strb.w	r3, [r7, #1558]	@ 0x616
 8000d06:	e0ce      	b.n	8000ea6 <main+0x276>

		  SSD1305_COLOR pixelColor = White;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	f887 3615 	strb.w	r3, [r7, #1557]	@ 0x615

		  if (x < 32) {
 8000d0e:	f897 3617 	ldrb.w	r3, [r7, #1559]	@ 0x617
 8000d12:	2b1f      	cmp	r3, #31
 8000d14:	d82e      	bhi.n	8000d74 <main+0x144>
			  // Bank0 → halvány
			  bitmapBuffer[x + (y / 8) * display.GetWidth()] |= (1 << (y % 8));
 8000d16:	f897 4617 	ldrb.w	r4, [r7, #1559]	@ 0x617
 8000d1a:	f897 3616 	ldrb.w	r3, [r7, #1558]	@ 0x616
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	b2dd      	uxtb	r5, r3
 8000d22:	462e      	mov	r6, r5
 8000d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fcd1 	bl	80006d0 <_ZN7SSD13058GetWidthEv>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4618      	mov	r0, r3
 8000d32:	4603      	mov	r3, r0
 8000d34:	fb06 f303 	mul.w	r3, r6, r3
 8000d38:	4423      	add	r3, r4
 8000d3a:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 8000d3e:	f5a2 62c4 	sub.w	r2, r2, #1568	@ 0x620
 8000d42:	5cd3      	ldrb	r3, [r2, r3]
 8000d44:	b25a      	sxtb	r2, r3
 8000d46:	f897 3616 	ldrb.w	r3, [r7, #1558]	@ 0x616
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	2101      	movs	r1, #1
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b259      	sxtb	r1, r3
 8000d5a:	f897 2617 	ldrb.w	r2, [r7, #1559]	@ 0x617
 8000d5e:	462b      	mov	r3, r5
 8000d60:	fb00 f303 	mul.w	r3, r0, r3
 8000d64:	4413      	add	r3, r2
 8000d66:	b2c9      	uxtb	r1, r1
 8000d68:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 8000d6c:	f5a2 62c4 	sub.w	r2, r2, #1568	@ 0x620
 8000d70:	54d1      	strb	r1, [r2, r3]
 8000d72:	e093      	b.n	8000e9c <main+0x26c>
		  } else if (x < 64) {
 8000d74:	f897 3617 	ldrb.w	r3, [r7, #1559]	@ 0x617
 8000d78:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d7a:	d82e      	bhi.n	8000dda <main+0x1aa>
			  // Color A
			  bitmapBuffer[x + (y / 8) * display.GetWidth()] |= (1 << (y % 8));
 8000d7c:	f897 4617 	ldrb.w	r4, [r7, #1559]	@ 0x617
 8000d80:	f897 3616 	ldrb.w	r3, [r7, #1558]	@ 0x616
 8000d84:	08db      	lsrs	r3, r3, #3
 8000d86:	b2dd      	uxtb	r5, r3
 8000d88:	462e      	mov	r6, r5
 8000d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fc9e 	bl	80006d0 <_ZN7SSD13058GetWidthEv>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4618      	mov	r0, r3
 8000d98:	4603      	mov	r3, r0
 8000d9a:	fb06 f303 	mul.w	r3, r6, r3
 8000d9e:	4423      	add	r3, r4
 8000da0:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 8000da4:	f5a2 62c4 	sub.w	r2, r2, #1568	@ 0x620
 8000da8:	5cd3      	ldrb	r3, [r2, r3]
 8000daa:	b25a      	sxtb	r2, r3
 8000dac:	f897 3616 	ldrb.w	r3, [r7, #1558]	@ 0x616
 8000db0:	f003 0307 	and.w	r3, r3, #7
 8000db4:	2101      	movs	r1, #1
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b259      	sxtb	r1, r3
 8000dc0:	f897 2617 	ldrb.w	r2, [r7, #1559]	@ 0x617
 8000dc4:	462b      	mov	r3, r5
 8000dc6:	fb00 f303 	mul.w	r3, r0, r3
 8000dca:	4413      	add	r3, r2
 8000dcc:	b2c9      	uxtb	r1, r1
 8000dce:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 8000dd2:	f5a2 62c4 	sub.w	r2, r2, #1568	@ 0x620
 8000dd6:	54d1      	strb	r1, [r2, r3]
 8000dd8:	e060      	b.n	8000e9c <main+0x26c>
		  } else if (x < 96) {
 8000dda:	f897 3617 	ldrb.w	r3, [r7, #1559]	@ 0x617
 8000dde:	2b5f      	cmp	r3, #95	@ 0x5f
 8000de0:	d82e      	bhi.n	8000e40 <main+0x210>
			  // Color B
			  bitmapBuffer[x + (y / 8) * display.GetWidth()] |= (1 << (y % 8));
 8000de2:	f897 4617 	ldrb.w	r4, [r7, #1559]	@ 0x617
 8000de6:	f897 3616 	ldrb.w	r3, [r7, #1558]	@ 0x616
 8000dea:	08db      	lsrs	r3, r3, #3
 8000dec:	b2dd      	uxtb	r5, r3
 8000dee:	462e      	mov	r6, r5
 8000df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fc6b 	bl	80006d0 <_ZN7SSD13058GetWidthEv>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	4603      	mov	r3, r0
 8000e00:	fb06 f303 	mul.w	r3, r6, r3
 8000e04:	4423      	add	r3, r4
 8000e06:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 8000e0a:	f5a2 62c4 	sub.w	r2, r2, #1568	@ 0x620
 8000e0e:	5cd3      	ldrb	r3, [r2, r3]
 8000e10:	b25a      	sxtb	r2, r3
 8000e12:	f897 3616 	ldrb.w	r3, [r7, #1558]	@ 0x616
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b259      	sxtb	r1, r3
 8000e26:	f897 2617 	ldrb.w	r2, [r7, #1559]	@ 0x617
 8000e2a:	462b      	mov	r3, r5
 8000e2c:	fb00 f303 	mul.w	r3, r0, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	b2c9      	uxtb	r1, r1
 8000e34:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 8000e38:	f5a2 62c4 	sub.w	r2, r2, #1568	@ 0x620
 8000e3c:	54d1      	strb	r1, [r2, r3]
 8000e3e:	e02d      	b.n	8000e9c <main+0x26c>
		  } else {
			  // Color C
			  bitmapBuffer[x + (y / 8) * display.GetWidth()] |= (1 << (y % 8));
 8000e40:	f897 4617 	ldrb.w	r4, [r7, #1559]	@ 0x617
 8000e44:	f897 3616 	ldrb.w	r3, [r7, #1558]	@ 0x616
 8000e48:	08db      	lsrs	r3, r3, #3
 8000e4a:	b2dd      	uxtb	r5, r3
 8000e4c:	462e      	mov	r6, r5
 8000e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fc3c 	bl	80006d0 <_ZN7SSD13058GetWidthEv>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	fb06 f303 	mul.w	r3, r6, r3
 8000e62:	4423      	add	r3, r4
 8000e64:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 8000e68:	f5a2 62c4 	sub.w	r2, r2, #1568	@ 0x620
 8000e6c:	5cd3      	ldrb	r3, [r2, r3]
 8000e6e:	b25a      	sxtb	r2, r3
 8000e70:	f897 3616 	ldrb.w	r3, [r7, #1558]	@ 0x616
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	2101      	movs	r1, #1
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b259      	sxtb	r1, r3
 8000e84:	f897 2617 	ldrb.w	r2, [r7, #1559]	@ 0x617
 8000e88:	462b      	mov	r3, r5
 8000e8a:	fb00 f303 	mul.w	r3, r0, r3
 8000e8e:	4413      	add	r3, r2
 8000e90:	b2c9      	uxtb	r1, r1
 8000e92:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 8000e96:	f5a2 62c4 	sub.w	r2, r2, #1568	@ 0x620
 8000e9a:	54d1      	strb	r1, [r2, r3]
	  for (uint8_t y = 0; y < display.GetHeight(); y++) {
 8000e9c:	f897 3616 	ldrb.w	r3, [r7, #1558]	@ 0x616
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	f887 3616 	strb.w	r3, [r7, #1558]	@ 0x616
 8000ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fc04 	bl	80006b8 <_ZN7SSD13059GetHeightEv>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	f897 3616 	ldrb.w	r3, [r7, #1558]	@ 0x616
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	bf34      	ite	cc
 8000ebc:	2301      	movcc	r3, #1
 8000ebe:	2300      	movcs	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f47f af20 	bne.w	8000d08 <main+0xd8>
  for (uint8_t x = 0; x < display.GetWidth(); x++) {
 8000ec8:	f897 3617 	ldrb.w	r3, [r7, #1559]	@ 0x617
 8000ecc:	3301      	adds	r3, #1
 8000ece:	f887 3617 	strb.w	r3, [r7, #1559]	@ 0x617
 8000ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fbfa 	bl	80006d0 <_ZN7SSD13058GetWidthEv>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	f897 3617 	ldrb.w	r3, [r7, #1559]	@ 0x617
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	bf34      	ite	cc
 8000ee8:	2301      	movcc	r3, #1
 8000eea:	2300      	movcs	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f47f af06 	bne.w	8000d00 <main+0xd0>
		  }
	  }
  }

  // 6) Kiírás a kijelzőre
  display.WriteBitmapToScreen(bitmapBuffer, sizeof(bitmapBuffer));
 8000ef4:	4639      	mov	r1, r7
 8000ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000efa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fbf2 	bl	80006e8 <_ZN7SSD130519WriteBitmapToScreenEPhj>
*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <main+0x2d4>
 8000f08:	20000028 	.word	0x20000028

08000f0c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	@ 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	2234      	movs	r2, #52	@ 0x34
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 fbc6 	bl	80036ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff4 <_Z18SystemClock_Configv+0xe8>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f38:	4a2e      	ldr	r2, [pc, #184]	@ (8000ff4 <_Z18SystemClock_Configv+0xe8>)
 8000f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f40:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff4 <_Z18SystemClock_Configv+0xe8>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <_Z18SystemClock_Configv+0xec>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f58:	4a27      	ldr	r2, [pc, #156]	@ (8000ff8 <_Z18SystemClock_Configv+0xec>)
 8000f5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b25      	ldr	r3, [pc, #148]	@ (8000ff8 <_Z18SystemClock_Configv+0xec>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f70:	2301      	movs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f74:	2310      	movs	r3, #16
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f80:	2310      	movs	r3, #16
 8000f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f84:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f88:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fe26 	bl	8002bec <HAL_RCC_OscConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf14      	ite	ne
 8000fa6:	2301      	movne	r3, #1
 8000fa8:	2300      	moveq	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8000fb0:	f000 f8f4 	bl	800119c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	2102      	movs	r1, #2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fac1 	bl	8002558 <HAL_RCC_ClockConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	bf14      	ite	ne
 8000fdc:	2301      	movne	r3, #1
 8000fde:	2300      	moveq	r3, #0
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8000fe6:	f000 f8d9 	bl	800119c <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3750      	adds	r7, #80	@ 0x50
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40007000 	.word	0x40007000

08000ffc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 8001002:	4a16      	ldr	r2, [pc, #88]	@ (800105c <_ZL12MX_I2C1_Initv+0x60>)
 8001004:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 8001008:	4a15      	ldr	r2, [pc, #84]	@ (8001060 <_ZL12MX_I2C1_Initv+0x64>)
 800100a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 800101a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800101e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001020:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 8001022:	2200      	movs	r2, #0
 8001024:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800102c:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001038:	4807      	ldr	r0, [pc, #28]	@ (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 800103a:	f000 fd03 	bl	8001a44 <HAL_I2C_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800104e:	f000 f8a5 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000028 	.word	0x20000028
 800105c:	40005400 	.word	0x40005400
 8001060:	000186a0 	.word	0x000186a0

08001064 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800106a:	4a14      	ldr	r2, [pc, #80]	@ (80010bc <_ZL19MX_USART2_UART_Initv+0x58>)
 800106c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800109a:	4807      	ldr	r0, [pc, #28]	@ (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800109c:	f002 f844 	bl	8003128 <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bf14      	ite	ne
 80010a6:	2301      	movne	r3, #1
 80010a8:	2300      	moveq	r3, #0
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80010b0:	f000 f874 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000007c 	.word	0x2000007c
 80010bc:	40004400 	.word	0x40004400

080010c0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	@ 0x28
 80010c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b2d      	ldr	r3, [pc, #180]	@ (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a2c      	ldr	r2, [pc, #176]	@ (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a25      	ldr	r2, [pc, #148]	@ (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 80010fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a1e      	ldr	r2, [pc, #120]	@ (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a17      	ldr	r2, [pc, #92]	@ (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2120      	movs	r1, #32
 800114a:	4812      	ldr	r0, [pc, #72]	@ (8001194 <_ZL12MX_GPIO_Initv+0xd4>)
 800114c:	f000 fc60 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001150:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001156:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	480c      	ldr	r0, [pc, #48]	@ (8001198 <_ZL12MX_GPIO_Initv+0xd8>)
 8001168:	f000 fabe 	bl	80016e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800116c:	2320      	movs	r3, #32
 800116e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4804      	ldr	r0, [pc, #16]	@ (8001194 <_ZL12MX_GPIO_Initv+0xd4>)
 8001184:	f000 fab0 	bl	80016e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	@ 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000
 8001198:	40020800 	.word	0x40020800

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <Error_Handler+0x8>

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	4a0f      	ldr	r2, [pc, #60]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011be:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	4a08      	ldr	r2, [pc, #32]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011e6:	2007      	movs	r0, #7
 80011e8:	f000 fa4a 	bl	8001680 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a19      	ldr	r2, [pc, #100]	@ (800127c <HAL_I2C_MspInit+0x84>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d12c      	bne.n	8001274 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <HAL_I2C_MspInit+0x88>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a17      	ldr	r2, [pc, #92]	@ (8001280 <HAL_I2C_MspInit+0x88>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <HAL_I2C_MspInit+0x88>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001236:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123c:	2312      	movs	r3, #18
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001248:	2304      	movs	r3, #4
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	480c      	ldr	r0, [pc, #48]	@ (8001284 <HAL_I2C_MspInit+0x8c>)
 8001254:	f000 fa48 	bl	80016e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <HAL_I2C_MspInit+0x88>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	4a07      	ldr	r2, [pc, #28]	@ (8001280 <HAL_I2C_MspInit+0x88>)
 8001262:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001266:	6413      	str	r3, [r2, #64]	@ 0x40
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <HAL_I2C_MspInit+0x88>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	@ 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40005400 	.word	0x40005400
 8001280:	40023800 	.word	0x40023800
 8001284:	40020400 	.word	0x40020400

08001288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a19      	ldr	r2, [pc, #100]	@ (800130c <HAL_UART_MspInit+0x84>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d12b      	bne.n	8001302 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <HAL_UART_MspInit+0x88>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	4a17      	ldr	r2, [pc, #92]	@ (8001310 <HAL_UART_MspInit+0x88>)
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <HAL_UART_MspInit+0x88>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <HAL_UART_MspInit+0x88>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a10      	ldr	r2, [pc, #64]	@ (8001310 <HAL_UART_MspInit+0x88>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <HAL_UART_MspInit+0x88>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012e2:	230c      	movs	r3, #12
 80012e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f2:	2307      	movs	r3, #7
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	@ (8001314 <HAL_UART_MspInit+0x8c>)
 80012fe:	f000 f9f3 	bl	80016e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	@ 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40004400 	.word	0x40004400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <NMI_Handler+0x4>

08001320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <MemManage_Handler+0x4>

08001330 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <UsageFault_Handler+0x4>

08001340 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136e:	f000 f891 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <SystemInit+0x20>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001382:	4a05      	ldr	r2, [pc, #20]	@ (8001398 <SystemInit+0x20>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a0:	480d      	ldr	r0, [pc, #52]	@ (80013d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013a2:	490e      	ldr	r1, [pc, #56]	@ (80013dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013a4:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0b      	ldr	r2, [pc, #44]	@ (80013e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013b8:	4c0b      	ldr	r4, [pc, #44]	@ (80013e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013c6:	f7ff ffd7 	bl	8001378 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ca:	f002 f977 	bl	80036bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ce:	f7ff fc2f 	bl	8000c30 <main>
  bx  lr    
 80013d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013e0:	08003744 	.word	0x08003744
  ldr r2, =_sbss
 80013e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013e8:	200000c4 	.word	0x200000c4

080013ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001430 <HAL_Init+0x40>)
 80013fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0a      	ldr	r2, [pc, #40]	@ (8001430 <HAL_Init+0x40>)
 8001406:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800140a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a07      	ldr	r2, [pc, #28]	@ (8001430 <HAL_Init+0x40>)
 8001412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f931 	bl	8001680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141e:	2000      	movs	r0, #0
 8001420:	f000 f808 	bl	8001434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001424:	f7ff fec0 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023c00 	.word	0x40023c00

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <HAL_InitTick+0x54>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b12      	ldr	r3, [pc, #72]	@ (800148c <HAL_InitTick+0x58>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f93b 	bl	80016ce <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e00e      	b.n	8001480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d80a      	bhi.n	800147e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 f911 	bl	8001696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001474:	4a06      	ldr	r2, [pc, #24]	@ (8001490 <HAL_InitTick+0x5c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000000 	.word	0x20000000
 800148c:	20000008 	.word	0x20000008
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008
 80014b8:	200000c0 	.word	0x200000c0

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	@ (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	200000c0 	.word	0x200000c0

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff ffee 	bl	80014bc <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <HAL_Delay+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014fa:	bf00      	nop
 80014fc:	f7ff ffde 	bl	80014bc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000008 	.word	0x20000008

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	@ (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	@ (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	@ (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	@ 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	@ 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800164c:	d301      	bcc.n	8001652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164e:	2301      	movs	r3, #1
 8001650:	e00f      	b.n	8001672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <SysTick_Config+0x40>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165a:	210f      	movs	r1, #15
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f7ff ff8e 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001664:	4b05      	ldr	r3, [pc, #20]	@ (800167c <SysTick_Config+0x40>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166a:	4b04      	ldr	r3, [pc, #16]	@ (800167c <SysTick_Config+0x40>)
 800166c:	2207      	movs	r2, #7
 800166e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	e000e010 	.word	0xe000e010

08001680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff47 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a8:	f7ff ff5c 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff ff8e 	bl	80015d4 <NVIC_EncodePriority>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff5d 	bl	8001580 <__NVIC_SetPriority>
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ffb0 	bl	800163c <SysTick_Config>
 80016dc:	4603      	mov	r3, r0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	@ 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
 8001702:	e165      	b.n	80019d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001704:	2201      	movs	r2, #1
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	429a      	cmp	r2, r3
 800171e:	f040 8154 	bne.w	80019ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	2b01      	cmp	r3, #1
 800172c:	d005      	beq.n	800173a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001736:	2b02      	cmp	r3, #2
 8001738:	d130      	bne.n	800179c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	2203      	movs	r2, #3
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001770:	2201      	movs	r2, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 0201 	and.w	r2, r3, #1
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d017      	beq.n	80017d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d123      	bne.n	800182c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	08da      	lsrs	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3208      	adds	r2, #8
 80017ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	220f      	movs	r2, #15
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	08da      	lsrs	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3208      	adds	r2, #8
 8001826:	69b9      	ldr	r1, [r7, #24]
 8001828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0203 	and.w	r2, r3, #3
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 80ae 	beq.w	80019ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b5d      	ldr	r3, [pc, #372]	@ (80019e8 <HAL_GPIO_Init+0x300>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001876:	4a5c      	ldr	r2, [pc, #368]	@ (80019e8 <HAL_GPIO_Init+0x300>)
 8001878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800187c:	6453      	str	r3, [r2, #68]	@ 0x44
 800187e:	4b5a      	ldr	r3, [pc, #360]	@ (80019e8 <HAL_GPIO_Init+0x300>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800188a:	4a58      	ldr	r2, [pc, #352]	@ (80019ec <HAL_GPIO_Init+0x304>)
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	3302      	adds	r3, #2
 8001892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	220f      	movs	r2, #15
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4f      	ldr	r2, [pc, #316]	@ (80019f0 <HAL_GPIO_Init+0x308>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d025      	beq.n	8001902 <HAL_GPIO_Init+0x21a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4e      	ldr	r2, [pc, #312]	@ (80019f4 <HAL_GPIO_Init+0x30c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d01f      	beq.n	80018fe <HAL_GPIO_Init+0x216>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4d      	ldr	r2, [pc, #308]	@ (80019f8 <HAL_GPIO_Init+0x310>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d019      	beq.n	80018fa <HAL_GPIO_Init+0x212>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a4c      	ldr	r2, [pc, #304]	@ (80019fc <HAL_GPIO_Init+0x314>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d013      	beq.n	80018f6 <HAL_GPIO_Init+0x20e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001a00 <HAL_GPIO_Init+0x318>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00d      	beq.n	80018f2 <HAL_GPIO_Init+0x20a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001a04 <HAL_GPIO_Init+0x31c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d007      	beq.n	80018ee <HAL_GPIO_Init+0x206>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a49      	ldr	r2, [pc, #292]	@ (8001a08 <HAL_GPIO_Init+0x320>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d101      	bne.n	80018ea <HAL_GPIO_Init+0x202>
 80018e6:	2306      	movs	r3, #6
 80018e8:	e00c      	b.n	8001904 <HAL_GPIO_Init+0x21c>
 80018ea:	2307      	movs	r3, #7
 80018ec:	e00a      	b.n	8001904 <HAL_GPIO_Init+0x21c>
 80018ee:	2305      	movs	r3, #5
 80018f0:	e008      	b.n	8001904 <HAL_GPIO_Init+0x21c>
 80018f2:	2304      	movs	r3, #4
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x21c>
 80018f6:	2303      	movs	r3, #3
 80018f8:	e004      	b.n	8001904 <HAL_GPIO_Init+0x21c>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_Init+0x21c>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_GPIO_Init+0x21c>
 8001902:	2300      	movs	r3, #0
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	f002 0203 	and.w	r2, r2, #3
 800190a:	0092      	lsls	r2, r2, #2
 800190c:	4093      	lsls	r3, r2
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001914:	4935      	ldr	r1, [pc, #212]	@ (80019ec <HAL_GPIO_Init+0x304>)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001922:	4b3a      	ldr	r3, [pc, #232]	@ (8001a0c <HAL_GPIO_Init+0x324>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001946:	4a31      	ldr	r2, [pc, #196]	@ (8001a0c <HAL_GPIO_Init+0x324>)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800194c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a0c <HAL_GPIO_Init+0x324>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001970:	4a26      	ldr	r2, [pc, #152]	@ (8001a0c <HAL_GPIO_Init+0x324>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001976:	4b25      	ldr	r3, [pc, #148]	@ (8001a0c <HAL_GPIO_Init+0x324>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800199a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a0c <HAL_GPIO_Init+0x324>)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a0c <HAL_GPIO_Init+0x324>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c4:	4a11      	ldr	r2, [pc, #68]	@ (8001a0c <HAL_GPIO_Init+0x324>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3301      	adds	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	2b0f      	cmp	r3, #15
 80019d4:	f67f ae96 	bls.w	8001704 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	3724      	adds	r7, #36	@ 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40013800 	.word	0x40013800
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40020400 	.word	0x40020400
 80019f8:	40020800 	.word	0x40020800
 80019fc:	40020c00 	.word	0x40020c00
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40021400 	.word	0x40021400
 8001a08:	40021800 	.word	0x40021800
 8001a0c:	40013c00 	.word	0x40013c00

08001a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a20:	787b      	ldrb	r3, [r7, #1]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a2c:	e003      	b.n	8001a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a2e:	887b      	ldrh	r3, [r7, #2]
 8001a30:	041a      	lsls	r2, r3, #16
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	619a      	str	r2, [r3, #24]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e12b      	b.n	8001cae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fbc4 	bl	80011f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2224      	movs	r2, #36	@ 0x24
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0201 	bic.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001aa8:	f000 fe48 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8001aac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4a81      	ldr	r2, [pc, #516]	@ (8001cb8 <HAL_I2C_Init+0x274>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d807      	bhi.n	8001ac8 <HAL_I2C_Init+0x84>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4a80      	ldr	r2, [pc, #512]	@ (8001cbc <HAL_I2C_Init+0x278>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	bf94      	ite	ls
 8001ac0:	2301      	movls	r3, #1
 8001ac2:	2300      	movhi	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	e006      	b.n	8001ad6 <HAL_I2C_Init+0x92>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4a7d      	ldr	r2, [pc, #500]	@ (8001cc0 <HAL_I2C_Init+0x27c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	bf94      	ite	ls
 8001ad0:	2301      	movls	r3, #1
 8001ad2:	2300      	movhi	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e0e7      	b.n	8001cae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4a78      	ldr	r2, [pc, #480]	@ (8001cc4 <HAL_I2C_Init+0x280>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	0c9b      	lsrs	r3, r3, #18
 8001ae8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a6a      	ldr	r2, [pc, #424]	@ (8001cb8 <HAL_I2C_Init+0x274>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d802      	bhi.n	8001b18 <HAL_I2C_Init+0xd4>
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3301      	adds	r3, #1
 8001b16:	e009      	b.n	8001b2c <HAL_I2C_Init+0xe8>
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b1e:	fb02 f303 	mul.w	r3, r2, r3
 8001b22:	4a69      	ldr	r2, [pc, #420]	@ (8001cc8 <HAL_I2C_Init+0x284>)
 8001b24:	fba2 2303 	umull	r2, r3, r2, r3
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	495c      	ldr	r1, [pc, #368]	@ (8001cb8 <HAL_I2C_Init+0x274>)
 8001b48:	428b      	cmp	r3, r1
 8001b4a:	d819      	bhi.n	8001b80 <HAL_I2C_Init+0x13c>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1e59      	subs	r1, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b5a:	1c59      	adds	r1, r3, #1
 8001b5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b60:	400b      	ands	r3, r1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <HAL_I2C_Init+0x138>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1e59      	subs	r1, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b74:	3301      	adds	r3, #1
 8001b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7a:	e051      	b.n	8001c20 <HAL_I2C_Init+0x1dc>
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	e04f      	b.n	8001c20 <HAL_I2C_Init+0x1dc>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d111      	bne.n	8001bac <HAL_I2C_Init+0x168>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1e58      	subs	r0, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	440b      	add	r3, r1
 8001b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	e012      	b.n	8001bd2 <HAL_I2C_Init+0x18e>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1e58      	subs	r0, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	0099      	lsls	r1, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bf0c      	ite	eq
 8001bcc:	2301      	moveq	r3, #1
 8001bce:	2300      	movne	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Init+0x196>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e022      	b.n	8001c20 <HAL_I2C_Init+0x1dc>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10e      	bne.n	8001c00 <HAL_I2C_Init+0x1bc>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1e58      	subs	r0, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6859      	ldr	r1, [r3, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	440b      	add	r3, r1
 8001bf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bfe:	e00f      	b.n	8001c20 <HAL_I2C_Init+0x1dc>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1e58      	subs	r0, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	0099      	lsls	r1, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	6809      	ldr	r1, [r1, #0]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69da      	ldr	r2, [r3, #28]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6911      	ldr	r1, [r2, #16]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68d2      	ldr	r2, [r2, #12]
 8001c5a:	4311      	orrs	r1, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	430b      	orrs	r3, r1
 8001c62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	000186a0 	.word	0x000186a0
 8001cbc:	001e847f 	.word	0x001e847f
 8001cc0:	003d08ff 	.word	0x003d08ff
 8001cc4:	431bde83 	.word	0x431bde83
 8001cc8:	10624dd3 	.word	0x10624dd3

08001ccc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	4608      	mov	r0, r1
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4603      	mov	r3, r0
 8001cdc:	817b      	strh	r3, [r7, #10]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	813b      	strh	r3, [r7, #8]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ce6:	f7ff fbe9 	bl	80014bc <HAL_GetTick>
 8001cea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	f040 80d9 	bne.w	8001eac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2319      	movs	r3, #25
 8001d00:	2201      	movs	r2, #1
 8001d02:	496d      	ldr	r1, [pc, #436]	@ (8001eb8 <HAL_I2C_Mem_Write+0x1ec>)
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 fa9f 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d10:	2302      	movs	r3, #2
 8001d12:	e0cc      	b.n	8001eae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_I2C_Mem_Write+0x56>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e0c5      	b.n	8001eae <HAL_I2C_Mem_Write+0x1e2>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d007      	beq.n	8001d48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2221      	movs	r2, #33	@ 0x21
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2240      	movs	r2, #64	@ 0x40
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a3a      	ldr	r2, [r7, #32]
 8001d72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4a4d      	ldr	r2, [pc, #308]	@ (8001ebc <HAL_I2C_Mem_Write+0x1f0>)
 8001d88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d8a:	88f8      	ldrh	r0, [r7, #6]
 8001d8c:	893a      	ldrh	r2, [r7, #8]
 8001d8e:	8979      	ldrh	r1, [r7, #10]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4603      	mov	r3, r0
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f9be 	bl	800211c <I2C_RequestMemoryWrite>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d052      	beq.n	8001e4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e081      	b.n	8001eae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 fb20 	bl	80023f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00d      	beq.n	8001dd6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d107      	bne.n	8001dd2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06b      	b.n	8001eae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dda:	781a      	ldrb	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d11b      	bne.n	8001e4c <HAL_I2C_Mem_Write+0x180>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d017      	beq.n	8001e4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1aa      	bne.n	8001daa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 fb0c 	bl	8002476 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00d      	beq.n	8001e80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d107      	bne.n	8001e7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e016      	b.n	8001eae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e000      	b.n	8001eae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001eac:	2302      	movs	r3, #2
  }
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	00100002 	.word	0x00100002
 8001ebc:	ffff0000 	.word	0xffff0000

08001ec0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	@ 0x28
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff faf4 	bl	80014bc <HAL_GetTick>
 8001ed4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	f040 8111 	bne.w	800210a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	2319      	movs	r3, #25
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4988      	ldr	r1, [pc, #544]	@ (8002114 <HAL_I2C_IsDeviceReady+0x254>)
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 f9a8 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001efe:	2302      	movs	r3, #2
 8001f00:	e104      	b.n	800210c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_I2C_IsDeviceReady+0x50>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e0fd      	b.n	800210c <HAL_I2C_IsDeviceReady+0x24c>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d007      	beq.n	8001f36 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0201 	orr.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2224      	movs	r2, #36	@ 0x24
 8001f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4a70      	ldr	r2, [pc, #448]	@ (8002118 <HAL_I2C_IsDeviceReady+0x258>)
 8001f58:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f68:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 f966 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00d      	beq.n	8001f9e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f90:	d103      	bne.n	8001f9a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f98:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e0b6      	b.n	800210c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f9e:	897b      	ldrh	r3, [r7, #10]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001fae:	f7ff fa85 	bl	80014bc <HAL_GetTick>
 8001fb2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	bf0c      	ite	eq
 8001fc2:	2301      	moveq	r3, #1
 8001fc4:	2300      	movne	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fd8:	bf0c      	ite	eq
 8001fda:	2301      	moveq	r3, #1
 8001fdc:	2300      	movne	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001fe2:	e025      	b.n	8002030 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fe4:	f7ff fa6a 	bl	80014bc <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d302      	bcc.n	8001ffa <HAL_I2C_IsDeviceReady+0x13a>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d103      	bne.n	8002002 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	22a0      	movs	r2, #160	@ 0xa0
 8001ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b02      	cmp	r3, #2
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2ba0      	cmp	r3, #160	@ 0xa0
 800203a:	d005      	beq.n	8002048 <HAL_I2C_IsDeviceReady+0x188>
 800203c:	7dfb      	ldrb	r3, [r7, #23]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_I2C_IsDeviceReady+0x188>
 8002042:	7dbb      	ldrb	r3, [r7, #22]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0cd      	beq.n	8001fe4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b02      	cmp	r3, #2
 800205c:	d129      	bne.n	80020b2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800206c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2319      	movs	r3, #25
 800208a:	2201      	movs	r2, #1
 800208c:	4921      	ldr	r1, [pc, #132]	@ (8002114 <HAL_I2C_IsDeviceReady+0x254>)
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f8da 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e036      	b.n	800210c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e02c      	b.n	800210c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020c0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020ca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2319      	movs	r3, #25
 80020d2:	2201      	movs	r2, #1
 80020d4:	490f      	ldr	r1, [pc, #60]	@ (8002114 <HAL_I2C_IsDeviceReady+0x254>)
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f8b6 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e012      	b.n	800210c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	3301      	adds	r3, #1
 80020ea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	f4ff af32 	bcc.w	8001f5a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800210a:	2302      	movs	r3, #2
  }
}
 800210c:	4618      	mov	r0, r3
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	00100002 	.word	0x00100002
 8002118:	ffff0000 	.word	0xffff0000

0800211c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	4608      	mov	r0, r1
 8002126:	4611      	mov	r1, r2
 8002128:	461a      	mov	r2, r3
 800212a:	4603      	mov	r3, r0
 800212c:	817b      	strh	r3, [r7, #10]
 800212e:	460b      	mov	r3, r1
 8002130:	813b      	strh	r3, [r7, #8]
 8002132:	4613      	mov	r3, r2
 8002134:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002144:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	2200      	movs	r2, #0
 800214e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 f878 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00d      	beq.n	800217a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002168:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800216c:	d103      	bne.n	8002176 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002174:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e05f      	b.n	800223a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800217a:	897b      	ldrh	r3, [r7, #10]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002188:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	6a3a      	ldr	r2, [r7, #32]
 800218e:	492d      	ldr	r1, [pc, #180]	@ (8002244 <I2C_RequestMemoryWrite+0x128>)
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f8b0 	bl	80022f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e04c      	b.n	800223a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b8:	6a39      	ldr	r1, [r7, #32]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f91a 	bl	80023f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00d      	beq.n	80021e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d107      	bne.n	80021de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e02b      	b.n	800223a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d105      	bne.n	80021f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021e8:	893b      	ldrh	r3, [r7, #8]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	611a      	str	r2, [r3, #16]
 80021f2:	e021      	b.n	8002238 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021f4:	893b      	ldrh	r3, [r7, #8]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002204:	6a39      	ldr	r1, [r7, #32]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f8f4 	bl	80023f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00d      	beq.n	800222e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	2b04      	cmp	r3, #4
 8002218:	d107      	bne.n	800222a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002228:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e005      	b.n	800223a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800222e:	893b      	ldrh	r3, [r7, #8]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	00010002 	.word	0x00010002

08002248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002258:	e025      	b.n	80022a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d021      	beq.n	80022a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002262:	f7ff f92b 	bl	80014bc <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d302      	bcc.n	8002278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d116      	bne.n	80022a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f043 0220 	orr.w	r2, r3, #32
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e023      	b.n	80022ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d10d      	bne.n	80022cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4013      	ands	r3, r2
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bf0c      	ite	eq
 80022c2:	2301      	moveq	r3, #1
 80022c4:	2300      	movne	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	e00c      	b.n	80022e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4013      	ands	r3, r2
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bf0c      	ite	eq
 80022de:	2301      	moveq	r3, #1
 80022e0:	2300      	movne	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d0b6      	beq.n	800225a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002304:	e051      	b.n	80023aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002314:	d123      	bne.n	800235e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002324:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800232e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	f043 0204 	orr.w	r2, r3, #4
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e046      	b.n	80023ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d021      	beq.n	80023aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002366:	f7ff f8a9 	bl	80014bc <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	d302      	bcc.n	800237c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d116      	bne.n	80023aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	f043 0220 	orr.w	r2, r3, #32
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e020      	b.n	80023ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d10c      	bne.n	80023ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	43da      	mvns	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4013      	ands	r3, r2
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bf14      	ite	ne
 80023c6:	2301      	movne	r3, #1
 80023c8:	2300      	moveq	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	e00b      	b.n	80023e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	43da      	mvns	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	4013      	ands	r3, r2
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf14      	ite	ne
 80023e0:	2301      	movne	r3, #1
 80023e2:	2300      	moveq	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d18d      	bne.n	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002400:	e02d      	b.n	800245e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f878 	bl	80024f8 <I2C_IsAcknowledgeFailed>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e02d      	b.n	800246e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002418:	d021      	beq.n	800245e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241a:	f7ff f84f 	bl	80014bc <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	429a      	cmp	r2, r3
 8002428:	d302      	bcc.n	8002430 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d116      	bne.n	800245e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	f043 0220 	orr.w	r2, r3, #32
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e007      	b.n	800246e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002468:	2b80      	cmp	r3, #128	@ 0x80
 800246a:	d1ca      	bne.n	8002402 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002482:	e02d      	b.n	80024e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f837 	bl	80024f8 <I2C_IsAcknowledgeFailed>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e02d      	b.n	80024f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249a:	d021      	beq.n	80024e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249c:	f7ff f80e 	bl	80014bc <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d302      	bcc.n	80024b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d116      	bne.n	80024e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	f043 0220 	orr.w	r2, r3, #32
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e007      	b.n	80024f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d1ca      	bne.n	8002484 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800250a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800250e:	d11b      	bne.n	8002548 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002518:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	f043 0204 	orr.w	r2, r3, #4
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0cc      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800256c:	4b68      	ldr	r3, [pc, #416]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d90c      	bls.n	8002594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b65      	ldr	r3, [pc, #404]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b63      	ldr	r3, [pc, #396]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0b8      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025ac:	4b59      	ldr	r3, [pc, #356]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4a58      	ldr	r2, [pc, #352]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c4:	4b53      	ldr	r3, [pc, #332]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a52      	ldr	r2, [pc, #328]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b50      	ldr	r3, [pc, #320]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	494d      	ldr	r1, [pc, #308]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d044      	beq.n	8002678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d119      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e07f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d003      	beq.n	8002616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002612:	2b03      	cmp	r3, #3
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002616:	4b3f      	ldr	r3, [pc, #252]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e06f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	4b3b      	ldr	r3, [pc, #236]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e067      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002636:	4b37      	ldr	r3, [pc, #220]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f023 0203 	bic.w	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4934      	ldr	r1, [pc, #208]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	4313      	orrs	r3, r2
 8002646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002648:	f7fe ff38 	bl	80014bc <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	e00a      	b.n	8002666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002650:	f7fe ff34 	bl	80014bc <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e04f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	4b2b      	ldr	r3, [pc, #172]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 020c 	and.w	r2, r3, #12
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	429a      	cmp	r2, r3
 8002676:	d1eb      	bne.n	8002650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002678:	4b25      	ldr	r3, [pc, #148]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d20c      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b22      	ldr	r3, [pc, #136]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b20      	ldr	r3, [pc, #128]	@ (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e032      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ac:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4916      	ldr	r1, [pc, #88]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ca:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	490e      	ldr	r1, [pc, #56]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026de:	f000 f855 	bl	800278c <HAL_RCC_GetSysClockFreq>
 80026e2:	4602      	mov	r2, r0
 80026e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	490a      	ldr	r1, [pc, #40]	@ (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	5ccb      	ldrb	r3, [r1, r3]
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	4a09      	ldr	r2, [pc, #36]	@ (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026fa:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fe98 	bl	8001434 <HAL_InitTick>

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023c00 	.word	0x40023c00
 8002714:	40023800 	.word	0x40023800
 8002718:	0800371c 	.word	0x0800371c
 800271c:	20000000 	.word	0x20000000
 8002720:	20000004 	.word	0x20000004

08002724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002728:	4b03      	ldr	r3, [pc, #12]	@ (8002738 <HAL_RCC_GetHCLKFreq+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000000 	.word	0x20000000

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002740:	f7ff fff0 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b05      	ldr	r3, [pc, #20]	@ (800275c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	0a9b      	lsrs	r3, r3, #10
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4903      	ldr	r1, [pc, #12]	@ (8002760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40023800 	.word	0x40023800
 8002760:	0800372c 	.word	0x0800372c

08002764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002768:	f7ff ffdc 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b05      	ldr	r3, [pc, #20]	@ (8002784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	0b5b      	lsrs	r3, r3, #13
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	4903      	ldr	r1, [pc, #12]	@ (8002788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	0800372c 	.word	0x0800372c

0800278c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800278c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002790:	b0ae      	sub	sp, #184	@ 0xb8
 8002792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b2:	4bcb      	ldr	r3, [pc, #812]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	f200 8206 	bhi.w	8002bcc <HAL_RCC_GetSysClockFreq+0x440>
 80027c0:	a201      	add	r2, pc, #4	@ (adr r2, 80027c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80027c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c6:	bf00      	nop
 80027c8:	080027fd 	.word	0x080027fd
 80027cc:	08002bcd 	.word	0x08002bcd
 80027d0:	08002bcd 	.word	0x08002bcd
 80027d4:	08002bcd 	.word	0x08002bcd
 80027d8:	08002805 	.word	0x08002805
 80027dc:	08002bcd 	.word	0x08002bcd
 80027e0:	08002bcd 	.word	0x08002bcd
 80027e4:	08002bcd 	.word	0x08002bcd
 80027e8:	0800280d 	.word	0x0800280d
 80027ec:	08002bcd 	.word	0x08002bcd
 80027f0:	08002bcd 	.word	0x08002bcd
 80027f4:	08002bcd 	.word	0x08002bcd
 80027f8:	080029fd 	.word	0x080029fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027fc:	4bb9      	ldr	r3, [pc, #740]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x358>)
 80027fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002802:	e1e7      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002804:	4bb8      	ldr	r3, [pc, #736]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002806:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800280a:	e1e3      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800280c:	4bb4      	ldr	r3, [pc, #720]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002814:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002818:	4bb1      	ldr	r3, [pc, #708]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d071      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002824:	4bae      	ldr	r3, [pc, #696]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	2200      	movs	r2, #0
 800282c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002830:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002834:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002846:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800284a:	4622      	mov	r2, r4
 800284c:	462b      	mov	r3, r5
 800284e:	f04f 0000 	mov.w	r0, #0
 8002852:	f04f 0100 	mov.w	r1, #0
 8002856:	0159      	lsls	r1, r3, #5
 8002858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800285c:	0150      	lsls	r0, r2, #5
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4621      	mov	r1, r4
 8002864:	1a51      	subs	r1, r2, r1
 8002866:	6439      	str	r1, [r7, #64]	@ 0x40
 8002868:	4629      	mov	r1, r5
 800286a:	eb63 0301 	sbc.w	r3, r3, r1
 800286e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800287c:	4649      	mov	r1, r9
 800287e:	018b      	lsls	r3, r1, #6
 8002880:	4641      	mov	r1, r8
 8002882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002886:	4641      	mov	r1, r8
 8002888:	018a      	lsls	r2, r1, #6
 800288a:	4641      	mov	r1, r8
 800288c:	1a51      	subs	r1, r2, r1
 800288e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002890:	4649      	mov	r1, r9
 8002892:	eb63 0301 	sbc.w	r3, r3, r1
 8002896:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80028a4:	4649      	mov	r1, r9
 80028a6:	00cb      	lsls	r3, r1, #3
 80028a8:	4641      	mov	r1, r8
 80028aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ae:	4641      	mov	r1, r8
 80028b0:	00ca      	lsls	r2, r1, #3
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	4622      	mov	r2, r4
 80028ba:	189b      	adds	r3, r3, r2
 80028bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80028be:	462b      	mov	r3, r5
 80028c0:	460a      	mov	r2, r1
 80028c2:	eb42 0303 	adc.w	r3, r2, r3
 80028c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028d4:	4629      	mov	r1, r5
 80028d6:	024b      	lsls	r3, r1, #9
 80028d8:	4621      	mov	r1, r4
 80028da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028de:	4621      	mov	r1, r4
 80028e0:	024a      	lsls	r2, r1, #9
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028ea:	2200      	movs	r2, #0
 80028ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80028f8:	f7fd fc84 	bl	8000204 <__aeabi_uldivmod>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4613      	mov	r3, r2
 8002902:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002906:	e067      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002908:	4b75      	ldr	r3, [pc, #468]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	2200      	movs	r2, #0
 8002910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002914:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002918:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800291c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002920:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002922:	2300      	movs	r3, #0
 8002924:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002926:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800292a:	4622      	mov	r2, r4
 800292c:	462b      	mov	r3, r5
 800292e:	f04f 0000 	mov.w	r0, #0
 8002932:	f04f 0100 	mov.w	r1, #0
 8002936:	0159      	lsls	r1, r3, #5
 8002938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800293c:	0150      	lsls	r0, r2, #5
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4621      	mov	r1, r4
 8002944:	1a51      	subs	r1, r2, r1
 8002946:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002948:	4629      	mov	r1, r5
 800294a:	eb63 0301 	sbc.w	r3, r3, r1
 800294e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800295c:	4649      	mov	r1, r9
 800295e:	018b      	lsls	r3, r1, #6
 8002960:	4641      	mov	r1, r8
 8002962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002966:	4641      	mov	r1, r8
 8002968:	018a      	lsls	r2, r1, #6
 800296a:	4641      	mov	r1, r8
 800296c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002970:	4649      	mov	r1, r9
 8002972:	eb63 0b01 	sbc.w	fp, r3, r1
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002982:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002986:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800298a:	4692      	mov	sl, r2
 800298c:	469b      	mov	fp, r3
 800298e:	4623      	mov	r3, r4
 8002990:	eb1a 0303 	adds.w	r3, sl, r3
 8002994:	623b      	str	r3, [r7, #32]
 8002996:	462b      	mov	r3, r5
 8002998:	eb4b 0303 	adc.w	r3, fp, r3
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029aa:	4629      	mov	r1, r5
 80029ac:	028b      	lsls	r3, r1, #10
 80029ae:	4621      	mov	r1, r4
 80029b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029b4:	4621      	mov	r1, r4
 80029b6:	028a      	lsls	r2, r1, #10
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029c0:	2200      	movs	r2, #0
 80029c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80029c4:	677a      	str	r2, [r7, #116]	@ 0x74
 80029c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80029ca:	f7fd fc1b 	bl	8000204 <__aeabi_uldivmod>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4613      	mov	r3, r2
 80029d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029d8:	4b41      	ldr	r3, [pc, #260]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	0c1b      	lsrs	r3, r3, #16
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	3301      	adds	r3, #1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80029ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029fa:	e0eb      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029fc:	4b38      	ldr	r3, [pc, #224]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a08:	4b35      	ldr	r3, [pc, #212]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d06b      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a14:	4b32      	ldr	r3, [pc, #200]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	099b      	lsrs	r3, r3, #6
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a26:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a28:	2300      	movs	r3, #0
 8002a2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a30:	4622      	mov	r2, r4
 8002a32:	462b      	mov	r3, r5
 8002a34:	f04f 0000 	mov.w	r0, #0
 8002a38:	f04f 0100 	mov.w	r1, #0
 8002a3c:	0159      	lsls	r1, r3, #5
 8002a3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a42:	0150      	lsls	r0, r2, #5
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4621      	mov	r1, r4
 8002a4a:	1a51      	subs	r1, r2, r1
 8002a4c:	61b9      	str	r1, [r7, #24]
 8002a4e:	4629      	mov	r1, r5
 8002a50:	eb63 0301 	sbc.w	r3, r3, r1
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a62:	4659      	mov	r1, fp
 8002a64:	018b      	lsls	r3, r1, #6
 8002a66:	4651      	mov	r1, sl
 8002a68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a6c:	4651      	mov	r1, sl
 8002a6e:	018a      	lsls	r2, r1, #6
 8002a70:	4651      	mov	r1, sl
 8002a72:	ebb2 0801 	subs.w	r8, r2, r1
 8002a76:	4659      	mov	r1, fp
 8002a78:	eb63 0901 	sbc.w	r9, r3, r1
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a90:	4690      	mov	r8, r2
 8002a92:	4699      	mov	r9, r3
 8002a94:	4623      	mov	r3, r4
 8002a96:	eb18 0303 	adds.w	r3, r8, r3
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	462b      	mov	r3, r5
 8002a9e:	eb49 0303 	adc.w	r3, r9, r3
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	024b      	lsls	r3, r1, #9
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aba:	4621      	mov	r1, r4
 8002abc:	024a      	lsls	r2, r1, #9
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002aca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002acc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ad0:	f7fd fb98 	bl	8000204 <__aeabi_uldivmod>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4613      	mov	r3, r2
 8002ada:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ade:	e065      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x420>
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	00f42400 	.word	0x00f42400
 8002ae8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aec:	4b3d      	ldr	r3, [pc, #244]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	2200      	movs	r2, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	4611      	mov	r1, r2
 8002af8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002afc:	653b      	str	r3, [r7, #80]	@ 0x50
 8002afe:	2300      	movs	r3, #0
 8002b00:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b06:	4642      	mov	r2, r8
 8002b08:	464b      	mov	r3, r9
 8002b0a:	f04f 0000 	mov.w	r0, #0
 8002b0e:	f04f 0100 	mov.w	r1, #0
 8002b12:	0159      	lsls	r1, r3, #5
 8002b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b18:	0150      	lsls	r0, r2, #5
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4641      	mov	r1, r8
 8002b20:	1a51      	subs	r1, r2, r1
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	4649      	mov	r1, r9
 8002b26:	eb63 0301 	sbc.w	r3, r3, r1
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b38:	4659      	mov	r1, fp
 8002b3a:	018b      	lsls	r3, r1, #6
 8002b3c:	4651      	mov	r1, sl
 8002b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b42:	4651      	mov	r1, sl
 8002b44:	018a      	lsls	r2, r1, #6
 8002b46:	4651      	mov	r1, sl
 8002b48:	1a54      	subs	r4, r2, r1
 8002b4a:	4659      	mov	r1, fp
 8002b4c:	eb63 0501 	sbc.w	r5, r3, r1
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	00eb      	lsls	r3, r5, #3
 8002b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b5e:	00e2      	lsls	r2, r4, #3
 8002b60:	4614      	mov	r4, r2
 8002b62:	461d      	mov	r5, r3
 8002b64:	4643      	mov	r3, r8
 8002b66:	18e3      	adds	r3, r4, r3
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	eb45 0303 	adc.w	r3, r5, r3
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b7e:	4629      	mov	r1, r5
 8002b80:	028b      	lsls	r3, r1, #10
 8002b82:	4621      	mov	r1, r4
 8002b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b88:	4621      	mov	r1, r4
 8002b8a:	028a      	lsls	r2, r1, #10
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b94:	2200      	movs	r2, #0
 8002b96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b98:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002b9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b9e:	f7fd fb31 	bl	8000204 <__aeabi_uldivmod>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bac:	4b0d      	ldr	r3, [pc, #52]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	0f1b      	lsrs	r3, r3, #28
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002bba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bca:	e003      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002bce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	37b8      	adds	r7, #184	@ 0xb8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	00f42400 	.word	0x00f42400

08002bec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e28d      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8083 	beq.w	8002d12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c0c:	4b94      	ldr	r3, [pc, #592]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d019      	beq.n	8002c4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c18:	4b91      	ldr	r3, [pc, #580]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c24:	4b8e      	ldr	r3, [pc, #568]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c30:	d00c      	beq.n	8002c4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c32:	4b8b      	ldr	r3, [pc, #556]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d112      	bne.n	8002c64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3e:	4b88      	ldr	r3, [pc, #544]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c4a:	d10b      	bne.n	8002c64 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4c:	4b84      	ldr	r3, [pc, #528]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d05b      	beq.n	8002d10 <HAL_RCC_OscConfig+0x124>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d157      	bne.n	8002d10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e25a      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c6c:	d106      	bne.n	8002c7c <HAL_RCC_OscConfig+0x90>
 8002c6e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a7b      	ldr	r2, [pc, #492]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e01d      	b.n	8002cb8 <HAL_RCC_OscConfig+0xcc>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0xb4>
 8002c86:	4b76      	ldr	r3, [pc, #472]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a75      	ldr	r2, [pc, #468]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b73      	ldr	r3, [pc, #460]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a72      	ldr	r2, [pc, #456]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_OscConfig+0xcc>
 8002ca0:	4b6f      	ldr	r3, [pc, #444]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a6e      	ldr	r2, [pc, #440]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b6c      	ldr	r3, [pc, #432]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a6b      	ldr	r2, [pc, #428]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d013      	beq.n	8002ce8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fbfc 	bl	80014bc <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fbf8 	bl	80014bc <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e21f      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b61      	ldr	r3, [pc, #388]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xdc>
 8002ce6:	e014      	b.n	8002d12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fbe8 	bl	80014bc <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7fe fbe4 	bl	80014bc <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	@ 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e20b      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	4b57      	ldr	r3, [pc, #348]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x104>
 8002d0e:	e000      	b.n	8002d12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d06f      	beq.n	8002dfe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d1e:	4b50      	ldr	r3, [pc, #320]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d017      	beq.n	8002d5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d2a:	4b4d      	ldr	r3, [pc, #308]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d105      	bne.n	8002d42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d36:	4b4a      	ldr	r3, [pc, #296]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d42:	4b47      	ldr	r3, [pc, #284]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d11c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4e:	4b44      	ldr	r3, [pc, #272]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d116      	bne.n	8002d88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5a:	4b41      	ldr	r3, [pc, #260]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_RCC_OscConfig+0x186>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e1d3      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d72:	4b3b      	ldr	r3, [pc, #236]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4937      	ldr	r1, [pc, #220]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d86:	e03a      	b.n	8002dfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d020      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d90:	4b34      	ldr	r3, [pc, #208]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d96:	f7fe fb91 	bl	80014bc <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d9e:	f7fe fb8d 	bl	80014bc <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e1b4      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbc:	4b28      	ldr	r3, [pc, #160]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4925      	ldr	r1, [pc, #148]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]
 8002dd0:	e015      	b.n	8002dfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd2:	4b24      	ldr	r3, [pc, #144]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fb70 	bl	80014bc <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de0:	f7fe fb6c 	bl	80014bc <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e193      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d036      	beq.n	8002e78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d016      	beq.n	8002e40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e12:	4b15      	ldr	r3, [pc, #84]	@ (8002e68 <HAL_RCC_OscConfig+0x27c>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e18:	f7fe fb50 	bl	80014bc <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e20:	f7fe fb4c 	bl	80014bc <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e173      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e32:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x234>
 8002e3e:	e01b      	b.n	8002e78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e40:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <HAL_RCC_OscConfig+0x27c>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e46:	f7fe fb39 	bl	80014bc <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	e00e      	b.n	8002e6c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e4e:	f7fe fb35 	bl	80014bc <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d907      	bls.n	8002e6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e15c      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
 8002e60:	40023800 	.word	0x40023800
 8002e64:	42470000 	.word	0x42470000
 8002e68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6c:	4b8a      	ldr	r3, [pc, #552]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ea      	bne.n	8002e4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8097 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e86:	2300      	movs	r3, #0
 8002e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8a:	4b83      	ldr	r3, [pc, #524]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10f      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ea6:	4b7c      	ldr	r3, [pc, #496]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb6:	4b79      	ldr	r3, [pc, #484]	@ (800309c <HAL_RCC_OscConfig+0x4b0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d118      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec2:	4b76      	ldr	r3, [pc, #472]	@ (800309c <HAL_RCC_OscConfig+0x4b0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a75      	ldr	r2, [pc, #468]	@ (800309c <HAL_RCC_OscConfig+0x4b0>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ece:	f7fe faf5 	bl	80014bc <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed6:	f7fe faf1 	bl	80014bc <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e118      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800309c <HAL_RCC_OscConfig+0x4b0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d106      	bne.n	8002f0a <HAL_RCC_OscConfig+0x31e>
 8002efc:	4b66      	ldr	r3, [pc, #408]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f00:	4a65      	ldr	r2, [pc, #404]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f08:	e01c      	b.n	8002f44 <HAL_RCC_OscConfig+0x358>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x340>
 8002f12:	4b61      	ldr	r3, [pc, #388]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f16:	4a60      	ldr	r2, [pc, #384]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f18:	f043 0304 	orr.w	r3, r3, #4
 8002f1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f1e:	4b5e      	ldr	r3, [pc, #376]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f22:	4a5d      	ldr	r2, [pc, #372]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCC_OscConfig+0x358>
 8002f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f30:	4a59      	ldr	r2, [pc, #356]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f38:	4b57      	ldr	r3, [pc, #348]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3c:	4a56      	ldr	r2, [pc, #344]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f3e:	f023 0304 	bic.w	r3, r3, #4
 8002f42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d015      	beq.n	8002f78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4c:	f7fe fab6 	bl	80014bc <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f54:	f7fe fab2 	bl	80014bc <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e0d7      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6a:	4b4b      	ldr	r3, [pc, #300]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0ee      	beq.n	8002f54 <HAL_RCC_OscConfig+0x368>
 8002f76:	e014      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f78:	f7fe faa0 	bl	80014bc <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f80:	f7fe fa9c 	bl	80014bc <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e0c1      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f96:	4b40      	ldr	r3, [pc, #256]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1ee      	bne.n	8002f80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d105      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fac:	4a3a      	ldr	r2, [pc, #232]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80ad 	beq.w	8003118 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fbe:	4b36      	ldr	r3, [pc, #216]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d060      	beq.n	800308c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d145      	bne.n	800305e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd2:	4b33      	ldr	r3, [pc, #204]	@ (80030a0 <HAL_RCC_OscConfig+0x4b4>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fa70 	bl	80014bc <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe fa6c 	bl	80014bc <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e093      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	4b29      	ldr	r3, [pc, #164]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	019b      	lsls	r3, r3, #6
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	3b01      	subs	r3, #1
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003028:	071b      	lsls	r3, r3, #28
 800302a:	491b      	ldr	r1, [pc, #108]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003030:	4b1b      	ldr	r3, [pc, #108]	@ (80030a0 <HAL_RCC_OscConfig+0x4b4>)
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fe fa41 	bl	80014bc <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303e:	f7fe fa3d 	bl	80014bc <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e064      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003050:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x452>
 800305c:	e05c      	b.n	8003118 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	4b10      	ldr	r3, [pc, #64]	@ (80030a0 <HAL_RCC_OscConfig+0x4b4>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe fa2a 	bl	80014bc <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306c:	f7fe fa26 	bl	80014bc <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e04d      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x480>
 800308a:	e045      	b.n	8003118 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e040      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
 8003098:	40023800 	.word	0x40023800
 800309c:	40007000 	.word	0x40007000
 80030a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003124 <HAL_RCC_OscConfig+0x538>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d030      	beq.n	8003114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d129      	bne.n	8003114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d122      	bne.n	8003114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030dc:	4293      	cmp	r3, r2
 80030de:	d119      	bne.n	8003114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	3b01      	subs	r3, #1
 80030ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d10f      	bne.n	8003114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003100:	429a      	cmp	r2, r3
 8003102:	d107      	bne.n	8003114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800

08003128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e03f      	b.n	80031ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fe f89a 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2224      	movs	r2, #36	@ 0x24
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800316a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f829 	bl	80031c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c8:	b0c0      	sub	sp, #256	@ 0x100
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e0:	68d9      	ldr	r1, [r3, #12]
 80031e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	ea40 0301 	orr.w	r3, r0, r1
 80031ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	431a      	orrs	r2, r3
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800321c:	f021 010c 	bic.w	r1, r1, #12
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800322a:	430b      	orrs	r3, r1
 800322c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323e:	6999      	ldr	r1, [r3, #24]
 8003240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	ea40 0301 	orr.w	r3, r0, r1
 800324a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4b8f      	ldr	r3, [pc, #572]	@ (8003490 <UART_SetConfig+0x2cc>)
 8003254:	429a      	cmp	r2, r3
 8003256:	d005      	beq.n	8003264 <UART_SetConfig+0xa0>
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b8d      	ldr	r3, [pc, #564]	@ (8003494 <UART_SetConfig+0x2d0>)
 8003260:	429a      	cmp	r2, r3
 8003262:	d104      	bne.n	800326e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003264:	f7ff fa7e 	bl	8002764 <HAL_RCC_GetPCLK2Freq>
 8003268:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800326c:	e003      	b.n	8003276 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800326e:	f7ff fa65 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8003272:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003280:	f040 810c 	bne.w	800349c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003288:	2200      	movs	r2, #0
 800328a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800328e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003292:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003296:	4622      	mov	r2, r4
 8003298:	462b      	mov	r3, r5
 800329a:	1891      	adds	r1, r2, r2
 800329c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800329e:	415b      	adcs	r3, r3
 80032a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032a6:	4621      	mov	r1, r4
 80032a8:	eb12 0801 	adds.w	r8, r2, r1
 80032ac:	4629      	mov	r1, r5
 80032ae:	eb43 0901 	adc.w	r9, r3, r1
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032c6:	4690      	mov	r8, r2
 80032c8:	4699      	mov	r9, r3
 80032ca:	4623      	mov	r3, r4
 80032cc:	eb18 0303 	adds.w	r3, r8, r3
 80032d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032d4:	462b      	mov	r3, r5
 80032d6:	eb49 0303 	adc.w	r3, r9, r3
 80032da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032f2:	460b      	mov	r3, r1
 80032f4:	18db      	adds	r3, r3, r3
 80032f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80032f8:	4613      	mov	r3, r2
 80032fa:	eb42 0303 	adc.w	r3, r2, r3
 80032fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003300:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003304:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003308:	f7fc ff7c 	bl	8000204 <__aeabi_uldivmod>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4b61      	ldr	r3, [pc, #388]	@ (8003498 <UART_SetConfig+0x2d4>)
 8003312:	fba3 2302 	umull	r2, r3, r3, r2
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	011c      	lsls	r4, r3, #4
 800331a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800331e:	2200      	movs	r2, #0
 8003320:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003324:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003328:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800332c:	4642      	mov	r2, r8
 800332e:	464b      	mov	r3, r9
 8003330:	1891      	adds	r1, r2, r2
 8003332:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003334:	415b      	adcs	r3, r3
 8003336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003338:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800333c:	4641      	mov	r1, r8
 800333e:	eb12 0a01 	adds.w	sl, r2, r1
 8003342:	4649      	mov	r1, r9
 8003344:	eb43 0b01 	adc.w	fp, r3, r1
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003354:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800335c:	4692      	mov	sl, r2
 800335e:	469b      	mov	fp, r3
 8003360:	4643      	mov	r3, r8
 8003362:	eb1a 0303 	adds.w	r3, sl, r3
 8003366:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800336a:	464b      	mov	r3, r9
 800336c:	eb4b 0303 	adc.w	r3, fp, r3
 8003370:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003380:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003384:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003388:	460b      	mov	r3, r1
 800338a:	18db      	adds	r3, r3, r3
 800338c:	643b      	str	r3, [r7, #64]	@ 0x40
 800338e:	4613      	mov	r3, r2
 8003390:	eb42 0303 	adc.w	r3, r2, r3
 8003394:	647b      	str	r3, [r7, #68]	@ 0x44
 8003396:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800339a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800339e:	f7fc ff31 	bl	8000204 <__aeabi_uldivmod>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003498 <UART_SetConfig+0x2d4>)
 80033aa:	fba3 2301 	umull	r2, r3, r3, r1
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	2264      	movs	r2, #100	@ 0x64
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	1acb      	subs	r3, r1, r3
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80033be:	4b36      	ldr	r3, [pc, #216]	@ (8003498 <UART_SetConfig+0x2d4>)
 80033c0:	fba3 2302 	umull	r2, r3, r3, r2
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80033cc:	441c      	add	r4, r3
 80033ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033e0:	4642      	mov	r2, r8
 80033e2:	464b      	mov	r3, r9
 80033e4:	1891      	adds	r1, r2, r2
 80033e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033e8:	415b      	adcs	r3, r3
 80033ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033f0:	4641      	mov	r1, r8
 80033f2:	1851      	adds	r1, r2, r1
 80033f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80033f6:	4649      	mov	r1, r9
 80033f8:	414b      	adcs	r3, r1
 80033fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003408:	4659      	mov	r1, fp
 800340a:	00cb      	lsls	r3, r1, #3
 800340c:	4651      	mov	r1, sl
 800340e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003412:	4651      	mov	r1, sl
 8003414:	00ca      	lsls	r2, r1, #3
 8003416:	4610      	mov	r0, r2
 8003418:	4619      	mov	r1, r3
 800341a:	4603      	mov	r3, r0
 800341c:	4642      	mov	r2, r8
 800341e:	189b      	adds	r3, r3, r2
 8003420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003424:	464b      	mov	r3, r9
 8003426:	460a      	mov	r2, r1
 8003428:	eb42 0303 	adc.w	r3, r2, r3
 800342c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800343c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003440:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003444:	460b      	mov	r3, r1
 8003446:	18db      	adds	r3, r3, r3
 8003448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800344a:	4613      	mov	r3, r2
 800344c:	eb42 0303 	adc.w	r3, r2, r3
 8003450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003456:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800345a:	f7fc fed3 	bl	8000204 <__aeabi_uldivmod>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4b0d      	ldr	r3, [pc, #52]	@ (8003498 <UART_SetConfig+0x2d4>)
 8003464:	fba3 1302 	umull	r1, r3, r3, r2
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	2164      	movs	r1, #100	@ 0x64
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	3332      	adds	r3, #50	@ 0x32
 8003476:	4a08      	ldr	r2, [pc, #32]	@ (8003498 <UART_SetConfig+0x2d4>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	f003 0207 	and.w	r2, r3, #7
 8003482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4422      	add	r2, r4
 800348a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800348c:	e106      	b.n	800369c <UART_SetConfig+0x4d8>
 800348e:	bf00      	nop
 8003490:	40011000 	.word	0x40011000
 8003494:	40011400 	.word	0x40011400
 8003498:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800349c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80034aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80034ae:	4642      	mov	r2, r8
 80034b0:	464b      	mov	r3, r9
 80034b2:	1891      	adds	r1, r2, r2
 80034b4:	6239      	str	r1, [r7, #32]
 80034b6:	415b      	adcs	r3, r3
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034be:	4641      	mov	r1, r8
 80034c0:	1854      	adds	r4, r2, r1
 80034c2:	4649      	mov	r1, r9
 80034c4:	eb43 0501 	adc.w	r5, r3, r1
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	00eb      	lsls	r3, r5, #3
 80034d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034d6:	00e2      	lsls	r2, r4, #3
 80034d8:	4614      	mov	r4, r2
 80034da:	461d      	mov	r5, r3
 80034dc:	4643      	mov	r3, r8
 80034de:	18e3      	adds	r3, r4, r3
 80034e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034e4:	464b      	mov	r3, r9
 80034e6:	eb45 0303 	adc.w	r3, r5, r3
 80034ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800350a:	4629      	mov	r1, r5
 800350c:	008b      	lsls	r3, r1, #2
 800350e:	4621      	mov	r1, r4
 8003510:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003514:	4621      	mov	r1, r4
 8003516:	008a      	lsls	r2, r1, #2
 8003518:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800351c:	f7fc fe72 	bl	8000204 <__aeabi_uldivmod>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4b60      	ldr	r3, [pc, #384]	@ (80036a8 <UART_SetConfig+0x4e4>)
 8003526:	fba3 2302 	umull	r2, r3, r3, r2
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	011c      	lsls	r4, r3, #4
 800352e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003532:	2200      	movs	r2, #0
 8003534:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003538:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800353c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003540:	4642      	mov	r2, r8
 8003542:	464b      	mov	r3, r9
 8003544:	1891      	adds	r1, r2, r2
 8003546:	61b9      	str	r1, [r7, #24]
 8003548:	415b      	adcs	r3, r3
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003550:	4641      	mov	r1, r8
 8003552:	1851      	adds	r1, r2, r1
 8003554:	6139      	str	r1, [r7, #16]
 8003556:	4649      	mov	r1, r9
 8003558:	414b      	adcs	r3, r1
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003568:	4659      	mov	r1, fp
 800356a:	00cb      	lsls	r3, r1, #3
 800356c:	4651      	mov	r1, sl
 800356e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003572:	4651      	mov	r1, sl
 8003574:	00ca      	lsls	r2, r1, #3
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	4603      	mov	r3, r0
 800357c:	4642      	mov	r2, r8
 800357e:	189b      	adds	r3, r3, r2
 8003580:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003584:	464b      	mov	r3, r9
 8003586:	460a      	mov	r2, r1
 8003588:	eb42 0303 	adc.w	r3, r2, r3
 800358c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	67bb      	str	r3, [r7, #120]	@ 0x78
 800359a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80035a8:	4649      	mov	r1, r9
 80035aa:	008b      	lsls	r3, r1, #2
 80035ac:	4641      	mov	r1, r8
 80035ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035b2:	4641      	mov	r1, r8
 80035b4:	008a      	lsls	r2, r1, #2
 80035b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035ba:	f7fc fe23 	bl	8000204 <__aeabi_uldivmod>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4611      	mov	r1, r2
 80035c4:	4b38      	ldr	r3, [pc, #224]	@ (80036a8 <UART_SetConfig+0x4e4>)
 80035c6:	fba3 2301 	umull	r2, r3, r3, r1
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	2264      	movs	r2, #100	@ 0x64
 80035ce:	fb02 f303 	mul.w	r3, r2, r3
 80035d2:	1acb      	subs	r3, r1, r3
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	3332      	adds	r3, #50	@ 0x32
 80035d8:	4a33      	ldr	r2, [pc, #204]	@ (80036a8 <UART_SetConfig+0x4e4>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035e4:	441c      	add	r4, r3
 80035e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ea:	2200      	movs	r2, #0
 80035ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80035ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80035f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035f4:	4642      	mov	r2, r8
 80035f6:	464b      	mov	r3, r9
 80035f8:	1891      	adds	r1, r2, r2
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	415b      	adcs	r3, r3
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003604:	4641      	mov	r1, r8
 8003606:	1851      	adds	r1, r2, r1
 8003608:	6039      	str	r1, [r7, #0]
 800360a:	4649      	mov	r1, r9
 800360c:	414b      	adcs	r3, r1
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800361c:	4659      	mov	r1, fp
 800361e:	00cb      	lsls	r3, r1, #3
 8003620:	4651      	mov	r1, sl
 8003622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003626:	4651      	mov	r1, sl
 8003628:	00ca      	lsls	r2, r1, #3
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	4603      	mov	r3, r0
 8003630:	4642      	mov	r2, r8
 8003632:	189b      	adds	r3, r3, r2
 8003634:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003636:	464b      	mov	r3, r9
 8003638:	460a      	mov	r2, r1
 800363a:	eb42 0303 	adc.w	r3, r2, r3
 800363e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	663b      	str	r3, [r7, #96]	@ 0x60
 800364a:	667a      	str	r2, [r7, #100]	@ 0x64
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003658:	4649      	mov	r1, r9
 800365a:	008b      	lsls	r3, r1, #2
 800365c:	4641      	mov	r1, r8
 800365e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003662:	4641      	mov	r1, r8
 8003664:	008a      	lsls	r2, r1, #2
 8003666:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800366a:	f7fc fdcb 	bl	8000204 <__aeabi_uldivmod>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4b0d      	ldr	r3, [pc, #52]	@ (80036a8 <UART_SetConfig+0x4e4>)
 8003674:	fba3 1302 	umull	r1, r3, r3, r2
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	2164      	movs	r1, #100	@ 0x64
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	3332      	adds	r3, #50	@ 0x32
 8003686:	4a08      	ldr	r2, [pc, #32]	@ (80036a8 <UART_SetConfig+0x4e4>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	f003 020f 	and.w	r2, r3, #15
 8003692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4422      	add	r2, r4
 800369a:	609a      	str	r2, [r3, #8]
}
 800369c:	bf00      	nop
 800369e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80036a2:	46bd      	mov	sp, r7
 80036a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036a8:	51eb851f 	.word	0x51eb851f

080036ac <memset>:
 80036ac:	4402      	add	r2, r0
 80036ae:	4603      	mov	r3, r0
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d100      	bne.n	80036b6 <memset+0xa>
 80036b4:	4770      	bx	lr
 80036b6:	f803 1b01 	strb.w	r1, [r3], #1
 80036ba:	e7f9      	b.n	80036b0 <memset+0x4>

080036bc <__libc_init_array>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	4d0d      	ldr	r5, [pc, #52]	@ (80036f4 <__libc_init_array+0x38>)
 80036c0:	4c0d      	ldr	r4, [pc, #52]	@ (80036f8 <__libc_init_array+0x3c>)
 80036c2:	1b64      	subs	r4, r4, r5
 80036c4:	10a4      	asrs	r4, r4, #2
 80036c6:	2600      	movs	r6, #0
 80036c8:	42a6      	cmp	r6, r4
 80036ca:	d109      	bne.n	80036e0 <__libc_init_array+0x24>
 80036cc:	4d0b      	ldr	r5, [pc, #44]	@ (80036fc <__libc_init_array+0x40>)
 80036ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003700 <__libc_init_array+0x44>)
 80036d0:	f000 f818 	bl	8003704 <_init>
 80036d4:	1b64      	subs	r4, r4, r5
 80036d6:	10a4      	asrs	r4, r4, #2
 80036d8:	2600      	movs	r6, #0
 80036da:	42a6      	cmp	r6, r4
 80036dc:	d105      	bne.n	80036ea <__libc_init_array+0x2e>
 80036de:	bd70      	pop	{r4, r5, r6, pc}
 80036e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e4:	4798      	blx	r3
 80036e6:	3601      	adds	r6, #1
 80036e8:	e7ee      	b.n	80036c8 <__libc_init_array+0xc>
 80036ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ee:	4798      	blx	r3
 80036f0:	3601      	adds	r6, #1
 80036f2:	e7f2      	b.n	80036da <__libc_init_array+0x1e>
 80036f4:	0800373c 	.word	0x0800373c
 80036f8:	0800373c 	.word	0x0800373c
 80036fc:	0800373c 	.word	0x0800373c
 8003700:	08003740 	.word	0x08003740

08003704 <_init>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	bf00      	nop
 8003708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	469e      	mov	lr, r3
 800370e:	4770      	bx	lr

08003710 <_fini>:
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003712:	bf00      	nop
 8003714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003716:	bc08      	pop	{r3}
 8003718:	469e      	mov	lr, r3
 800371a:	4770      	bx	lr
