
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003570  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08003734  08003734  00004734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee4  08003ee4  00005014  2**0
                  CONTENTS
  4 .ARM          00000008  08003ee4  08003ee4  00004ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003eec  08003eec  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eec  08003eec  00004eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ef0  08003ef0  00004ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003ef4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000014  08003f08  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08003f08  000050cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c904  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c45  00000000  00000000  00011948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00013590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083f  00000000  00000000  00014030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002168b  00000000  00000000  0001486f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df97  00000000  00000000  00035efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8498  00000000  00000000  00043e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c329  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c04  00000000  00000000  0010c36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0010ef70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800371c 	.word	0x0800371c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	0800371c 	.word	0x0800371c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <_ZN7SSD1305C1EP17I2C_HandleTypeDefhhh>:
 *      Author: SNA1BP
 */

#include "SSD1305.hpp"

SSD1305::SSD1305(
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	4611      	mov	r1, r2
 8000500:	461a      	mov	r2, r3
 8000502:	460b      	mov	r3, r1
 8000504:	71fb      	strb	r3, [r7, #7]
 8000506:	4613      	mov	r3, r2
 8000508:	71bb      	strb	r3, [r7, #6]
		I2C_HandleTypeDef* hi2c_p,
		uint8_t address_p,
		uint8_t width_p,
		uint8_t height_p)
{
	this->hi2c = hi2c_p;
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	68ba      	ldr	r2, [r7, #8]
 800050e:	601a      	str	r2, [r3, #0]
	this->address = address_p;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	79fa      	ldrb	r2, [r7, #7]
 8000514:	711a      	strb	r2, [r3, #4]
	this->width = width_p;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	79ba      	ldrb	r2, [r7, #6]
 800051a:	715a      	strb	r2, [r3, #5]
	this->height = height_p;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	7e3a      	ldrb	r2, [r7, #24]
 8000520:	719a      	strb	r2, [r3, #6]
}
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	4618      	mov	r0, r3
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <_ZN7SSD13054InitEv>:

bool SSD1305::Init()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af02      	add	r7, sp, #8
 8000536:	6078      	str	r0, [r7, #4]
    uint8_t v_offset = 4;
 8000538:	2304      	movs	r3, #4
 800053a:	73fb      	strb	r3, [r7, #15]

    int status = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]

	status += SetDisplayON_OFF(DisplayOffSleepMode);
 8000540:	21ae      	movs	r1, #174	@ 0xae
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 fbab 	bl	8000c9e <_ZN7SSD130516SetDisplayON_OFFE11DisplayMode>
 8000548:	4603      	mov	r3, r0
 800054a:	461a      	mov	r2, r3
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	4413      	add	r3, r2
 8000550:	60bb      	str	r3, [r7, #8]
	status += SetMultiplexRatio(height-1);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	799b      	ldrb	r3, [r3, #6]
 8000556:	3b01      	subs	r3, #1
 8000558:	b2db      	uxtb	r3, r3
 800055a:	4619      	mov	r1, r3
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f000 fb84 	bl	8000c6a <_ZN7SSD130517SetMultiplexRatioEh>
 8000562:	4603      	mov	r3, r0
 8000564:	461a      	mov	r2, r3
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	4413      	add	r3, r2
 800056a:	60bb      	str	r3, [r7, #8]
	status += SetDisplayOffset(0);
 800056c:	2100      	movs	r1, #0
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f000 fbb9 	bl	8000ce6 <_ZN7SSD130516SetDisplayOffsetEh>
 8000574:	4603      	mov	r3, r0
 8000576:	461a      	mov	r2, r3
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	4413      	add	r3, r2
 800057c:	60bb      	str	r3, [r7, #8]
	status += SetDisplayStartLine(0);
 800057e:	2100      	movs	r1, #0
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f000 fad2 	bl	8000b2a <_ZN7SSD130519SetDisplayStartLineEh>
 8000586:	4603      	mov	r3, r0
 8000588:	461a      	mov	r2, r3
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4413      	add	r3, r2
 800058e:	60bb      	str	r3, [r7, #8]
	status += SetColorAndPowerMode(monochromeMode, normalPowerMode);
 8000590:	2200      	movs	r2, #0
 8000592:	2100      	movs	r1, #0
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 fbc0 	bl	8000d1a <_ZN7SSD130520SetColorAndPowerModeE9ColorMode9PowerMode>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4413      	add	r3, r2
 80005a2:	60bb      	str	r3, [r7, #8]
	status += SetMemoryAddressingMode(horizontal);
 80005a4:	2100      	movs	r1, #0
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 fa62 	bl	8000a70 <_ZN7SSD130523SetMemoryAddressingModeE20MemoryAddressingMode>
 80005ac:	4603      	mov	r3, r0
 80005ae:	461a      	mov	r2, r3
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	4413      	add	r3, r2
 80005b4:	60bb      	str	r3, [r7, #8]
	status += SetSegmentReMap(columnAddress131toSEG0);
 80005b6:	2101      	movs	r1, #1
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f000 fb1d 	bl	8000bf8 <_ZN7SSD130515SetSegmentReMapE12SegmentRemap>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4413      	add	r3, r2
 80005c6:	60bb      	str	r3, [r7, #8]
	status += SetLUT(0x3F, 0x3F, 0x3F, 0x3F);
 80005c8:	233f      	movs	r3, #63	@ 0x3f
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	233f      	movs	r3, #63	@ 0x3f
 80005ce:	223f      	movs	r2, #63	@ 0x3f
 80005d0:	213f      	movs	r1, #63	@ 0x3f
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 fac3 	bl	8000b5e <_ZN7SSD13056SetLUTEhhhh>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	4413      	add	r3, r2
 80005e0:	60bb      	str	r3, [r7, #8]
	status += SetPrechargePeriod(13, 2);
 80005e2:	2202      	movs	r2, #2
 80005e4:	210d      	movs	r1, #13
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f000 fbb5 	bl	8000d56 <_ZN7SSD130518SetPrechargePeriodEhh>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	4413      	add	r3, r2
 80005f4:	60bb      	str	r3, [r7, #8]
	status += SetDisplayOffset(0);
 80005f6:	2100      	movs	r1, #0
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 fb74 	bl	8000ce6 <_ZN7SSD130516SetDisplayOffsetEh>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4413      	add	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
	status += SetComOutputScanDirection(remappedMode);
 8000608:	21c8      	movs	r1, #200	@ 0xc8
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 fb59 	bl	8000cc2 <_ZN7SSD130525SetComOutputScanDirectionE22ComOutputScanDirection>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4413      	add	r3, r2
 8000618:	60bb      	str	r3, [r7, #8]
	status += SetNormalInverse(normal);
 800061a:	21a6      	movs	r1, #166	@ 0xa6
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 fb12 	bl	8000c46 <_ZN7SSD130516SetNormalInverseE18DisplayInverseMode>
 8000622:	4603      	mov	r3, r0
 8000624:	461a      	mov	r2, r3
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	4413      	add	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]

    status += SetColumnAddress(v_offset, (width - 1) + v_offset);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	795a      	ldrb	r2, [r3, #5]
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	4413      	add	r3, r2
 8000634:	b2db      	uxtb	r3, r3
 8000636:	3b01      	subs	r3, #1
 8000638:	b2da      	uxtb	r2, r3
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 fa2b 	bl	8000a9a <_ZN7SSD130516SetColumnAddressEhh>
 8000644:	4603      	mov	r3, r0
 8000646:	461a      	mov	r2, r3
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4413      	add	r3, r2
 800064c:	60bb      	str	r3, [r7, #8]
	status += SetPageAddress(0, 3);
 800064e:	2203      	movs	r2, #3
 8000650:	2100      	movs	r1, #0
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f000 fa45 	bl	8000ae2 <_ZN7SSD130514SetPageAddressEhh>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4413      	add	r3, r2
 8000660:	60bb      	str	r3, [r7, #8]

	status += Fill(Black);
 8000662:	2100      	movs	r1, #0
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 f85e 	bl	8000726 <_ZN7SSD13054FillE13SSD1305_COLOR>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	4413      	add	r3, r2
 8000672:	60bb      	str	r3, [r7, #8]

    status += SetDisplayON_OFF(DisplayOnNormalMode);
 8000674:	21af      	movs	r1, #175	@ 0xaf
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 fb11 	bl	8000c9e <_ZN7SSD130516SetDisplayON_OFFE11DisplayMode>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	4413      	add	r3, r2
 8000684:	60bb      	str	r3, [r7, #8]
    status += EntireDisplayON(ResumeToRAMContent);
 8000686:	21a4      	movs	r1, #164	@ 0xa4
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 faca 	bl	8000c22 <_ZN7SSD130515EntireDisplayONE13DisplayONMode>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	4413      	add	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]

    if (status != 0) {
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <_ZN7SSD13054InitEv+0x172>
        return false;
 800069e:	2300      	movs	r3, #0
 80006a0:	e000      	b.n	80006a4 <_ZN7SSD13054InitEv+0x174>
    }

    return true;
 80006a2:	2301      	movs	r3, #1
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <_ZN7SSD13059GetHeightEv>:

uint8_t SSD1305::GetHeight(){return height;}
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	799b      	ldrb	r3, [r3, #6]
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <_ZN7SSD130519WriteBitmapToScreenEv>:
uint8_t SSD1305::GetWidth(){return width;}

HAL_StatusTypeDef SSD1305::WriteBitmapToScreen()
{
 80006c4:	b5b0      	push	{r4, r5, r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af04      	add	r7, sp, #16
 80006ca:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	size_t size = sizeof(bitmapBuffer);
 80006cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006d0:	60fb      	str	r3, [r7, #12]

    status =  SetMemoryAddressingMode(horizontal);
 80006d2:	2100      	movs	r1, #0
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f9cb 	bl	8000a70 <_ZN7SSD130523SetMemoryAddressingModeE20MemoryAddressingMode>
 80006da:	4603      	mov	r3, r0
 80006dc:	72fb      	strb	r3, [r7, #11]

    if (status != HAL_OK)
 80006de:	7afb      	ldrb	r3, [r7, #11]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <_ZN7SSD130519WriteBitmapToScreenEv+0x24>
    {
    	return status;
 80006e4:	7afb      	ldrb	r3, [r7, #11]
 80006e6:	e01a      	b.n	800071e <_ZN7SSD130519WriteBitmapToScreenEv+0x5a>
    }
    else
    {
		return HAL_I2C_Mem_Write(hi2c, address<<1, DATA_ADDRESS, 1, bitmapBuffer, size, size*10);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681c      	ldr	r4, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	791b      	ldrb	r3, [r3, #4]
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	b29d      	uxth	r5, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f103 0111 	add.w	r1, r3, #17
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	b298      	uxth	r0, r3
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	4613      	mov	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4413      	add	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	9302      	str	r3, [sp, #8]
 800070a:	9001      	str	r0, [sp, #4]
 800070c:	9100      	str	r1, [sp, #0]
 800070e:	2301      	movs	r3, #1
 8000710:	2240      	movs	r2, #64	@ 0x40
 8000712:	4629      	mov	r1, r5
 8000714:	4620      	mov	r0, r4
 8000716:	f001 fae5 	bl	8001ce4 <HAL_I2C_Mem_Write>
 800071a:	4603      	mov	r3, r0
 800071c:	bf00      	nop
    }
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bdb0      	pop	{r4, r5, r7, pc}

08000726 <_ZN7SSD13054FillE13SSD1305_COLOR>:
		return HAL_I2C_Mem_Write(hi2c, address<<1, DATA_ADDRESS, 1, bitmap, size, size*10);
    }
}

HAL_StatusTypeDef SSD1305::Fill(SSD1305_COLOR color_p)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b088      	sub	sp, #32
 800072a:	af04      	add	r7, sp, #16
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	460b      	mov	r3, r1
 8000730:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;
	status = EnterReadModifyWrite();
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 fb37 	bl	8000da6 <_ZN7SSD130520EnterReadModifyWriteEv>
 8000738:	4603      	mov	r3, r0
 800073a:	72fb      	strb	r3, [r7, #11]

    if (status != HAL_OK)
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <_ZN7SSD13054FillE13SSD1305_COLOR+0x20>
    {
    	return status;
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	e045      	b.n	80007d2 <_ZN7SSD13054FillE13SSD1305_COLOR+0xac>
    }
    else
    {
		uint8_t data = (color_p == Black) ? 0x00 : 0xFF;
 8000746:	78fb      	ldrb	r3, [r7, #3]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d101      	bne.n	8000750 <_ZN7SSD13054FillE13SSD1305_COLOR+0x2a>
 800074c:	2300      	movs	r3, #0
 800074e:	e000      	b.n	8000752 <_ZN7SSD13054FillE13SSD1305_COLOR+0x2c>
 8000750:	23ff      	movs	r3, #255	@ 0xff
 8000752:	72bb      	strb	r3, [r7, #10]

		for(int i = 0; i<(width * height) / 8; i++)
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	e021      	b.n	800079e <_ZN7SSD13054FillE13SSD1305_COLOR+0x78>
		{
			bitmapBuffer[i] = data;
 800075a:	7ab9      	ldrb	r1, [r7, #10]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	4413      	add	r3, r2
 8000762:	3311      	adds	r3, #17
 8000764:	460a      	mov	r2, r1
 8000766:	701a      	strb	r2, [r3, #0]
			status = HAL_I2C_Mem_Write(hi2c, address<<1, DATA_ADDRESS, 1, &data, 1, 10);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	b299      	uxth	r1, r3
 8000774:	230a      	movs	r3, #10
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2301      	movs	r3, #1
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	f107 030a 	add.w	r3, r7, #10
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2301      	movs	r3, #1
 8000784:	2240      	movs	r2, #64	@ 0x40
 8000786:	f001 faad 	bl	8001ce4 <HAL_I2C_Mem_Write>
 800078a:	4603      	mov	r3, r0
 800078c:	72fb      	strb	r3, [r7, #11]
		    if (status != HAL_OK)
 800078e:	7afb      	ldrb	r3, [r7, #11]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <_ZN7SSD13054FillE13SSD1305_COLOR+0x72>
		    {
		    	return status;
 8000794:	7afb      	ldrb	r3, [r7, #11]
 8000796:	e01c      	b.n	80007d2 <_ZN7SSD13054FillE13SSD1305_COLOR+0xac>
		for(int i = 0; i<(width * height) / 8; i++)
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3301      	adds	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	461a      	mov	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	799b      	ldrb	r3, [r3, #6]
 80007a8:	fb02 f303 	mul.w	r3, r2, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	da00      	bge.n	80007b2 <_ZN7SSD13054FillE13SSD1305_COLOR+0x8c>
 80007b0:	3307      	adds	r3, #7
 80007b2:	10db      	asrs	r3, r3, #3
 80007b4:	461a      	mov	r2, r3
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	4293      	cmp	r3, r2
 80007ba:	dbce      	blt.n	800075a <_ZN7SSD13054FillE13SSD1305_COLOR+0x34>
		    }
		}
    }

	status = ExitReadModifyWrite();
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f000 fb02 	bl	8000dc6 <_ZN7SSD130519ExitReadModifyWriteEv>
 80007c2:	4603      	mov	r3, r0
 80007c4:	72fb      	strb	r3, [r7, #11]

    if (status != HAL_OK)
 80007c6:	7afb      	ldrb	r3, [r7, #11]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <_ZN7SSD13054FillE13SSD1305_COLOR+0xaa>
    {
    	return status;
 80007cc:	7afb      	ldrb	r3, [r7, #11]
 80007ce:	e000      	b.n	80007d2 <_ZN7SSD13054FillE13SSD1305_COLOR+0xac>
    }
	return status;
 80007d0:	7afb      	ldrb	r3, [r7, #11]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR>:

//this method is based on the method void ssd1306_DrawPixel
bool SSD1305::DrawPixel(uint8_t x, uint8_t y, SSD1305_COLOR color_p)
{
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	4608      	mov	r0, r1
 80007e4:	4611      	mov	r1, r2
 80007e6:	461a      	mov	r2, r3
 80007e8:	4603      	mov	r3, r0
 80007ea:	70fb      	strb	r3, [r7, #3]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70bb      	strb	r3, [r7, #2]
 80007f0:	4613      	mov	r3, r2
 80007f2:	707b      	strb	r3, [r7, #1]
	if (x >= width || y >= height)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	795b      	ldrb	r3, [r3, #5]
 80007f8:	78fa      	ldrb	r2, [r7, #3]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d204      	bcs.n	8000808 <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR+0x2e>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	799b      	ldrb	r3, [r3, #6]
 8000802:	78ba      	ldrb	r2, [r7, #2]
 8000804:	429a      	cmp	r2, r3
 8000806:	d301      	bcc.n	800080c <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR+0x32>
	{
		// Don't write outside the buffer
		return 0;
 8000808:	2300      	movs	r3, #0
 800080a:	e04a      	b.n	80008a2 <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR+0xc8>
	}

	// Draw in the correct color
	if (color_p == White)
 800080c:	787b      	ldrb	r3, [r7, #1]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d122      	bne.n	8000858 <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR+0x7e>
	{
		bitmapBuffer[x + (y / 8) * width] |= 1 << (y % 8);
 8000812:	78fa      	ldrb	r2, [r7, #3]
 8000814:	78bb      	ldrb	r3, [r7, #2]
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	b2d8      	uxtb	r0, r3
 800081a:	4601      	mov	r1, r0
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	795b      	ldrb	r3, [r3, #5]
 8000820:	fb01 f303 	mul.w	r3, r1, r3
 8000824:	4413      	add	r3, r2
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	7c5b      	ldrb	r3, [r3, #17]
 800082c:	b25a      	sxtb	r2, r3
 800082e:	78bb      	ldrb	r3, [r7, #2]
 8000830:	f003 0307 	and.w	r3, r3, #7
 8000834:	2101      	movs	r1, #1
 8000836:	fa01 f303 	lsl.w	r3, r1, r3
 800083a:	b25b      	sxtb	r3, r3
 800083c:	4313      	orrs	r3, r2
 800083e:	b259      	sxtb	r1, r3
 8000840:	78fa      	ldrb	r2, [r7, #3]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	795b      	ldrb	r3, [r3, #5]
 8000846:	fb00 f303 	mul.w	r3, r0, r3
 800084a:	4413      	add	r3, r2
 800084c:	b2c9      	uxtb	r1, r1
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	460a      	mov	r2, r1
 8000854:	745a      	strb	r2, [r3, #17]
 8000856:	e023      	b.n	80008a0 <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR+0xc6>
	}
	else
	{
		bitmapBuffer[x + (y / 8) * width] &= ~(1 << (y % 8));
 8000858:	78fa      	ldrb	r2, [r7, #3]
 800085a:	78bb      	ldrb	r3, [r7, #2]
 800085c:	08db      	lsrs	r3, r3, #3
 800085e:	b2d8      	uxtb	r0, r3
 8000860:	4601      	mov	r1, r0
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	795b      	ldrb	r3, [r3, #5]
 8000866:	fb01 f303 	mul.w	r3, r1, r3
 800086a:	4413      	add	r3, r2
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	4413      	add	r3, r2
 8000870:	7c5b      	ldrb	r3, [r3, #17]
 8000872:	b25a      	sxtb	r2, r3
 8000874:	78bb      	ldrb	r3, [r7, #2]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	2101      	movs	r1, #1
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	b25b      	sxtb	r3, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	b25b      	sxtb	r3, r3
 8000886:	4013      	ands	r3, r2
 8000888:	b259      	sxtb	r1, r3
 800088a:	78fa      	ldrb	r2, [r7, #3]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	795b      	ldrb	r3, [r3, #5]
 8000890:	fb00 f303 	mul.w	r3, r0, r3
 8000894:	4413      	add	r3, r2
 8000896:	b2c9      	uxtb	r1, r1
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	4413      	add	r3, r2
 800089c:	460a      	mov	r2, r1
 800089e:	745a      	strb	r2, [r3, #17]
	}

	return 1;
 80008a0:	2301      	movs	r3, #1
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR>:

//this method is based on the method ssd1306_WriteChar
char SSD1305::WriteChar(char ch, FontDef Font, SSD1305_COLOR color)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b088      	sub	sp, #32
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	60f8      	str	r0, [r7, #12]
 80008b6:	4608      	mov	r0, r1
 80008b8:	4639      	mov	r1, r7
 80008ba:	e881 000c 	stmia.w	r1, {r2, r3}
 80008be:	4603      	mov	r3, r0
 80008c0:	72fb      	strb	r3, [r7, #11]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (width < (currentX + Font.FontWidth) ||
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	795b      	ldrb	r3, [r3, #5]
 80008c6:	461a      	mov	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	891b      	ldrh	r3, [r3, #8]
 80008cc:	4619      	mov	r1, r3
 80008ce:	783b      	ldrb	r3, [r7, #0]
 80008d0:	440b      	add	r3, r1
 80008d2:	429a      	cmp	r2, r3
 80008d4:	db09      	blt.n	80008ea <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0x3c>
        height < (currentY + Font.FontHeight))
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	799b      	ldrb	r3, [r3, #6]
 80008da:	461a      	mov	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	895b      	ldrh	r3, [r3, #10]
 80008e0:	4619      	mov	r1, r3
 80008e2:	787b      	ldrb	r3, [r7, #1]
 80008e4:	440b      	add	r3, r1
    if (width < (currentX + Font.FontWidth) ||
 80008e6:	429a      	cmp	r2, r3
 80008e8:	da01      	bge.n	80008ee <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0x40>
    {
        // Not enough space on current line
        return 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e05e      	b.n	80009ac <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0xfe>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
 80008f2:	e04e      	b.n	8000992 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0xe4>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	7afb      	ldrb	r3, [r7, #11]
 80008f8:	3b20      	subs	r3, #32
 80008fa:	7879      	ldrb	r1, [r7, #1]
 80008fc:	fb01 f303 	mul.w	r3, r1, r3
 8000900:	4619      	mov	r1, r3
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	440b      	add	r3, r1
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	4413      	add	r3, r2
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
 8000912:	e036      	b.n	8000982 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0xd4>
        {
            if ((b << j) & 0x8000)
 8000914:	697a      	ldr	r2, [r7, #20]
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000920:	2b00      	cmp	r3, #0
 8000922:	d013      	beq.n	800094c <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0x9e>
            {
            	DrawPixel(currentX + j, (currentY + i), color);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	891b      	ldrh	r3, [r3, #8]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4413      	add	r3, r2
 8000930:	b2d9      	uxtb	r1, r3
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	895b      	ldrh	r3, [r3, #10]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4413      	add	r3, r2
 800093e:	b2da      	uxtb	r2, r3
 8000940:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f7ff ff48 	bl	80007da <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR>
 800094a:	e017      	b.n	800097c <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0xce>
            }
            else
            {
            	DrawPixel(currentX + j, (currentY + i), (SSD1305_COLOR)!color);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	891b      	ldrh	r3, [r3, #8]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	69bb      	ldr	r3, [r7, #24]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4413      	add	r3, r2
 8000958:	b2d9      	uxtb	r1, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	895b      	ldrh	r3, [r3, #10]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	4413      	add	r3, r2
 8000966:	b2da      	uxtb	r2, r3
 8000968:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800096c:	2b00      	cmp	r3, #0
 800096e:	bf0c      	ite	eq
 8000970:	2301      	moveq	r3, #1
 8000972:	2300      	movne	r3, #0
 8000974:	b2db      	uxtb	r3, r3
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f7ff ff2f 	bl	80007da <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR>
        for (j = 0; j < Font.FontWidth; j++)
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	3301      	adds	r3, #1
 8000980:	61bb      	str	r3, [r7, #24]
 8000982:	783b      	ldrb	r3, [r7, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	4293      	cmp	r3, r2
 800098a:	d3c3      	bcc.n	8000914 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0x66>
    for (i = 0; i < Font.FontHeight; i++)
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	3301      	adds	r3, #1
 8000990:	61fb      	str	r3, [r7, #28]
 8000992:	787b      	ldrb	r3, [r7, #1]
 8000994:	461a      	mov	r2, r3
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	4293      	cmp	r3, r2
 800099a:	d3ab      	bcc.n	80008f4 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0x46>
            }
        }
    }

    // The current space is now taken
    currentX += Font.FontWidth;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	891b      	ldrh	r3, [r3, #8]
 80009a0:	783a      	ldrb	r2, [r7, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	811a      	strh	r2, [r3, #8]

    // Return written char for validation
    return ch;
 80009aa:	7afb      	ldrb	r3, [r7, #11]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>:

//this method is based on the method ssd1306_WriteString
bool SSD1305::WriteString(const char* str, FontDef Font, SSD1305_COLOR color)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	4639      	mov	r1, r7
 80009c0:	e881 000c 	stmia.w	r1, {r2, r3}
    // Write until null-byte
    while (*str)
 80009c4:	e018      	b.n	80009f8 <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR+0x44>
    {
        if (WriteChar(*str, Font, color) != *str)
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	7819      	ldrb	r1, [r3, #0]
 80009ca:	7e3b      	ldrb	r3, [r7, #24]
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	463b      	mov	r3, r7
 80009d0:	cb0c      	ldmia	r3, {r2, r3}
 80009d2:	68f8      	ldr	r0, [r7, #12]
 80009d4:	f7ff ff6b 	bl	80008ae <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	bf14      	ite	ne
 80009e4:	2301      	movne	r3, #1
 80009e6:	2300      	moveq	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR+0x3e>
        {
            // Char could not be written
            return 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e007      	b.n	8000a02 <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR+0x4e>
        }

        // Next char
        str++;
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	3301      	adds	r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
    while (*str)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1e2      	bne.n	80009c6 <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR+0x12>
    }

    // Everything ok
    return 1;
 8000a00:	2301      	movs	r3, #1
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <_ZN7SSD13059SetCursorEhh>:

void SSD1305::SetCursor(uint8_t x, uint8_t y)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	460b      	mov	r3, r1
 8000a14:	70fb      	strb	r3, [r7, #3]
 8000a16:	4613      	mov	r3, r2
 8000a18:	70bb      	strb	r3, [r7, #2]
	currentX = x;
 8000a1a:	78fb      	ldrb	r3, [r7, #3]
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	811a      	strh	r2, [r3, #8]
	currentY = y;
 8000a22:	78bb      	ldrb	r3, [r7, #2]
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	815a      	strh	r2, [r3, #10]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <_ZN7SSD130511SendCommandEh>:
////REALISE THE METHODS OF THE IC////
/////////////////////////////////////


HAL_StatusTypeDef SSD1305::SendCommand(uint8_t commandSize)
{
 8000a36:	b590      	push	{r4, r7, lr}
 8000a38:	b087      	sub	sp, #28
 8000a3a:	af04      	add	r7, sp, #16
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(hi2c, address<<1, COMMAND_ADDRESS, 1, commandBuffer, commandSize, 10);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6818      	ldr	r0, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	791b      	ldrb	r3, [r3, #4]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	b299      	uxth	r1, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	330c      	adds	r3, #12
 8000a52:	78fa      	ldrb	r2, [r7, #3]
 8000a54:	b292      	uxth	r2, r2
 8000a56:	240a      	movs	r4, #10
 8000a58:	9402      	str	r4, [sp, #8]
 8000a5a:	9201      	str	r2, [sp, #4]
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	2200      	movs	r2, #0
 8000a62:	f001 f93f 	bl	8001ce4 <HAL_I2C_Mem_Write>
 8000a66:	4603      	mov	r3, r0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}

08000a70 <_ZN7SSD130523SetMemoryAddressingModeE20MemoryAddressingMode>:
	commandBuffer[0] = SSD1305_SET_HIGHER_COLUMN | startAddress_p;
	return SendCommand(1);
}

HAL_StatusTypeDef SSD1305::SetMemoryAddressingMode(MemoryAddressingMode mode_p)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = SSD1305_MEMORY_ADDR_MODE;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2220      	movs	r2, #32
 8000a80:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = mode_p;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	78fa      	ldrb	r2, [r7, #3]
 8000a86:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000a88:	2102      	movs	r1, #2
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff ffd3 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000a90:	4603      	mov	r3, r0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_ZN7SSD130516SetColumnAddressEhh>:

HAL_StatusTypeDef SSD1305::SetColumnAddress(uint8_t startAddres_p, uint8_t endAddres_p)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	70fb      	strb	r3, [r7, #3]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	70bb      	strb	r3, [r7, #2]
	if(startAddres_p > 131)
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	2b83      	cmp	r3, #131	@ 0x83
 8000aae:	d901      	bls.n	8000ab4 <_ZN7SSD130516SetColumnAddressEhh+0x1a>
	{
		startAddres_p = 130;
 8000ab0:	2382      	movs	r3, #130	@ 0x82
 8000ab2:	70fb      	strb	r3, [r7, #3]
	}
	if(endAddres_p > 131)
 8000ab4:	78bb      	ldrb	r3, [r7, #2]
 8000ab6:	2b83      	cmp	r3, #131	@ 0x83
 8000ab8:	d901      	bls.n	8000abe <_ZN7SSD130516SetColumnAddressEhh+0x24>
	{
		endAddres_p =  131;
 8000aba:	2383      	movs	r3, #131	@ 0x83
 8000abc:	70bb      	strb	r3, [r7, #2]
	}

	commandBuffer[0] = SSD1305_SET_COLUMN_ADDR;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2221      	movs	r2, #33	@ 0x21
 8000ac2:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = startAddres_p;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	78fa      	ldrb	r2, [r7, #3]
 8000ac8:	735a      	strb	r2, [r3, #13]
	commandBuffer[2] = endAddres_p;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	78ba      	ldrb	r2, [r7, #2]
 8000ace:	739a      	strb	r2, [r3, #14]

	return SendCommand(3);
 8000ad0:	2103      	movs	r1, #3
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ffaf 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000ad8:	4603      	mov	r3, r0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_ZN7SSD130514SetPageAddressEhh>:

HAL_StatusTypeDef SSD1305::SetPageAddress(uint8_t startAddres_p, uint8_t endAddres_p)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	460b      	mov	r3, r1
 8000aec:	70fb      	strb	r3, [r7, #3]
 8000aee:	4613      	mov	r3, r2
 8000af0:	70bb      	strb	r3, [r7, #2]
	if(startAddres_p > 7)
 8000af2:	78fb      	ldrb	r3, [r7, #3]
 8000af4:	2b07      	cmp	r3, #7
 8000af6:	d901      	bls.n	8000afc <_ZN7SSD130514SetPageAddressEhh+0x1a>
	{
		startAddres_p = 7;
 8000af8:	2307      	movs	r3, #7
 8000afa:	70fb      	strb	r3, [r7, #3]
	}
	if(endAddres_p > 7)
 8000afc:	78bb      	ldrb	r3, [r7, #2]
 8000afe:	2b07      	cmp	r3, #7
 8000b00:	d901      	bls.n	8000b06 <_ZN7SSD130514SetPageAddressEhh+0x24>
	{
		endAddres_p =  7;
 8000b02:	2307      	movs	r3, #7
 8000b04:	70bb      	strb	r3, [r7, #2]
	}

	commandBuffer[0] = SSD1305_SET_PAGE_ADDR;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2222      	movs	r2, #34	@ 0x22
 8000b0a:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = startAddres_p;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	78fa      	ldrb	r2, [r7, #3]
 8000b10:	735a      	strb	r2, [r3, #13]
	commandBuffer[2] = endAddres_p;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	78ba      	ldrb	r2, [r7, #2]
 8000b16:	739a      	strb	r2, [r3, #14]

	return SendCommand(3);
 8000b18:	2103      	movs	r1, #3
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff8b 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000b20:	4603      	mov	r3, r0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_ZN7SSD130519SetDisplayStartLineEh>:

HAL_StatusTypeDef SSD1305::SetDisplayStartLine(uint8_t line_p)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	460b      	mov	r3, r1
 8000b34:	70fb      	strb	r3, [r7, #3]
	if(line_p > 63)
 8000b36:	78fb      	ldrb	r3, [r7, #3]
 8000b38:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b3a:	d901      	bls.n	8000b40 <_ZN7SSD130519SetDisplayStartLineEh+0x16>
	{
		line_p = 63;
 8000b3c:	233f      	movs	r3, #63	@ 0x3f
 8000b3e:	70fb      	strb	r3, [r7, #3]
	}

	commandBuffer[0] = SSD1305_SET_START_LINE | line_p;
 8000b40:	78fb      	ldrb	r3, [r7, #3]
 8000b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ff71 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_ZN7SSD13056SetLUTEhhhh>:

	return SendCommand(2);
}

HAL_StatusTypeDef SSD1305::SetLUT(uint8_t LUT_BANK0_p, uint8_t LUT_ColorA_p, uint8_t LUT_ColorB_p, uint8_t LUT_ColorC_p)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	4608      	mov	r0, r1
 8000b68:	4611      	mov	r1, r2
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	70fb      	strb	r3, [r7, #3]
 8000b70:	460b      	mov	r3, r1
 8000b72:	70bb      	strb	r3, [r7, #2]
 8000b74:	4613      	mov	r3, r2
 8000b76:	707b      	strb	r3, [r7, #1]
	if(LUT_BANK0_p < 32){
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	2b1f      	cmp	r3, #31
 8000b7c:	d801      	bhi.n	8000b82 <_ZN7SSD13056SetLUTEhhhh+0x24>
		LUT_BANK0_p = 32;
 8000b7e:	2320      	movs	r3, #32
 8000b80:	70fb      	strb	r3, [r7, #3]
	}
	if(LUT_BANK0_p > 63){
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b86:	d901      	bls.n	8000b8c <_ZN7SSD13056SetLUTEhhhh+0x2e>
		LUT_BANK0_p = 63;
 8000b88:	233f      	movs	r3, #63	@ 0x3f
 8000b8a:	70fb      	strb	r3, [r7, #3]
	}
	//--//
	if(LUT_ColorA_p < 32){
 8000b8c:	78bb      	ldrb	r3, [r7, #2]
 8000b8e:	2b1f      	cmp	r3, #31
 8000b90:	d801      	bhi.n	8000b96 <_ZN7SSD13056SetLUTEhhhh+0x38>
		LUT_ColorA_p = 32;
 8000b92:	2320      	movs	r3, #32
 8000b94:	70bb      	strb	r3, [r7, #2]
	}
	if(LUT_ColorA_p > 63){
 8000b96:	78bb      	ldrb	r3, [r7, #2]
 8000b98:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b9a:	d901      	bls.n	8000ba0 <_ZN7SSD13056SetLUTEhhhh+0x42>
		LUT_ColorA_p = 63;
 8000b9c:	233f      	movs	r3, #63	@ 0x3f
 8000b9e:	70bb      	strb	r3, [r7, #2]
	}
	//--//
	if(LUT_ColorB_p < 32){
 8000ba0:	787b      	ldrb	r3, [r7, #1]
 8000ba2:	2b1f      	cmp	r3, #31
 8000ba4:	d801      	bhi.n	8000baa <_ZN7SSD13056SetLUTEhhhh+0x4c>
		LUT_ColorB_p = 32;
 8000ba6:	2320      	movs	r3, #32
 8000ba8:	707b      	strb	r3, [r7, #1]
	}
	if(LUT_ColorB_p > 63){
 8000baa:	787b      	ldrb	r3, [r7, #1]
 8000bac:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bae:	d901      	bls.n	8000bb4 <_ZN7SSD13056SetLUTEhhhh+0x56>
		LUT_ColorB_p = 63;
 8000bb0:	233f      	movs	r3, #63	@ 0x3f
 8000bb2:	707b      	strb	r3, [r7, #1]
	}
	//--//
	if(LUT_ColorC_p < 32){
 8000bb4:	7c3b      	ldrb	r3, [r7, #16]
 8000bb6:	2b1f      	cmp	r3, #31
 8000bb8:	d801      	bhi.n	8000bbe <_ZN7SSD13056SetLUTEhhhh+0x60>
		LUT_ColorC_p = 32;
 8000bba:	2320      	movs	r3, #32
 8000bbc:	743b      	strb	r3, [r7, #16]
	}
	if(LUT_ColorC_p > 63){
 8000bbe:	7c3b      	ldrb	r3, [r7, #16]
 8000bc0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bc2:	d901      	bls.n	8000bc8 <_ZN7SSD13056SetLUTEhhhh+0x6a>
		LUT_ColorC_p = 63;
 8000bc4:	233f      	movs	r3, #63	@ 0x3f
 8000bc6:	743b      	strb	r3, [r7, #16]
	}

	commandBuffer[0] = SSD1305_SET_LUT;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2291      	movs	r2, #145	@ 0x91
 8000bcc:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = LUT_BANK0_p;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	78fa      	ldrb	r2, [r7, #3]
 8000bd2:	735a      	strb	r2, [r3, #13]
	commandBuffer[2] = LUT_ColorA_p;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	78ba      	ldrb	r2, [r7, #2]
 8000bd8:	739a      	strb	r2, [r3, #14]
	commandBuffer[3] = LUT_ColorB_p;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	787a      	ldrb	r2, [r7, #1]
 8000bde:	73da      	strb	r2, [r3, #15]
	commandBuffer[4] = LUT_ColorC_p;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7c3a      	ldrb	r2, [r7, #16]
 8000be4:	741a      	strb	r2, [r3, #16]

	return SendCommand(5);
 8000be6:	2105      	movs	r1, #5
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff24 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000bee:	4603      	mov	r3, r0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_ZN7SSD130515SetSegmentReMapE12SegmentRemap>:

HAL_StatusTypeDef SSD1305::SetSegmentReMap(SegmentRemap remap_p)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = SSD1305_SEG_REMAP | remap_p;
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000c10:	2101      	movs	r1, #1
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff ff0f 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000c18:	4603      	mov	r3, r0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_ZN7SSD130515EntireDisplayONE13DisplayONMode>:

HAL_StatusTypeDef SSD1305::EntireDisplayON(DisplayONMode displayONMode_p)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = displayONMode_p;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	78fa      	ldrb	r2, [r7, #3]
 8000c32:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000c34:	2101      	movs	r1, #1
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fefd 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_ZN7SSD130516SetNormalInverseE18DisplayInverseMode>:

HAL_StatusTypeDef SSD1305::SetNormalInverse(DisplayInverseMode inversMode_p)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = inversMode_p;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	78fa      	ldrb	r2, [r7, #3]
 8000c56:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000c58:	2101      	movs	r1, #1
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff feeb 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000c60:	4603      	mov	r3, r0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_ZN7SSD130517SetMultiplexRatioEh>:

HAL_StatusTypeDef SSD1305::SetMultiplexRatio(uint8_t ratio_p)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	460b      	mov	r3, r1
 8000c74:	70fb      	strb	r3, [r7, #3]
	if(ratio_p < 15)
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	2b0e      	cmp	r3, #14
 8000c7a:	d801      	bhi.n	8000c80 <_ZN7SSD130517SetMultiplexRatioEh+0x16>
	{
		ratio_p = 15;
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	70fb      	strb	r3, [r7, #3]
	}

	commandBuffer[0] = 	SSD1305_SET_MULTIPLEX_RATIO;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	22a8      	movs	r2, #168	@ 0xa8
 8000c84:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = ratio_p;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	78fa      	ldrb	r2, [r7, #3]
 8000c8a:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fed1 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <_ZN7SSD130516SetDisplayON_OFFE11DisplayMode>:

	return SendCommand(4);
}

HAL_StatusTypeDef SSD1305::SetDisplayON_OFF(DisplayMode mode_p)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = mode_p;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	78fa      	ldrb	r2, [r7, #3]
 8000cae:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff febf 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000cb8:	4603      	mov	r3, r0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_ZN7SSD130525SetComOutputScanDirectionE22ComOutputScanDirection>:

	return SendCommand(1);
}

HAL_StatusTypeDef SSD1305::SetComOutputScanDirection(ComOutputScanDirection scanDirection_p)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = scanDirection_p;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	78fa      	ldrb	r2, [r7, #3]
 8000cd2:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fead 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_ZN7SSD130516SetDisplayOffsetEh>:

HAL_StatusTypeDef SSD1305::SetDisplayOffset(uint8_t verticalShift_p)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	70fb      	strb	r3, [r7, #3]
	if (verticalShift_p > 63)
 8000cf2:	78fb      	ldrb	r3, [r7, #3]
 8000cf4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cf6:	d901      	bls.n	8000cfc <_ZN7SSD130516SetDisplayOffsetEh+0x16>
	{
		verticalShift_p = 63;
 8000cf8:	233f      	movs	r3, #63	@ 0x3f
 8000cfa:	70fb      	strb	r3, [r7, #3]
	}

	commandBuffer[0] = SSD1305_SET_DISPLAY_OFFSET;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	22d3      	movs	r2, #211	@ 0xd3
 8000d00:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = verticalShift_p;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	78fa      	ldrb	r2, [r7, #3]
 8000d06:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000d08:	2102      	movs	r1, #2
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff fe93 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_ZN7SSD130520SetColorAndPowerModeE9ColorMode9PowerMode>:

	return SendCommand(2);
}

HAL_StatusTypeDef SSD1305::SetColorAndPowerMode(ColorMode colorMode_p, PowerMode powerMode_p)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	460b      	mov	r3, r1
 8000d24:	70fb      	strb	r3, [r7, #3]
 8000d26:	4613      	mov	r3, r2
 8000d28:	70bb      	strb	r3, [r7, #2]
	commandBuffer[0] = SSD1305_SET_COLOR_n_POWER_MODE;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	22d8      	movs	r2, #216	@ 0xd8
 8000d2e:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = (colorMode_p << 4) | powerMode_p;
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	b25a      	sxtb	r2, r3
 8000d36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b25b      	sxtb	r3, r3
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000d44:	2102      	movs	r1, #2
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff fe75 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_ZN7SSD130518SetPrechargePeriodEhh>:

HAL_StatusTypeDef SSD1305::SetPrechargePeriod(uint8_t phase1_p, uint8_t phase2_p)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	70fb      	strb	r3, [r7, #3]
 8000d62:	4613      	mov	r3, r2
 8000d64:	70bb      	strb	r3, [r7, #2]
	if(phase1_p > 0xF)
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d901      	bls.n	8000d70 <_ZN7SSD130518SetPrechargePeriodEhh+0x1a>
	{
		phase1_p = 0xF;
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	70fb      	strb	r3, [r7, #3]
	}

	if(phase2_p > 0xF)
 8000d70:	78bb      	ldrb	r3, [r7, #2]
 8000d72:	2b0f      	cmp	r3, #15
 8000d74:	d901      	bls.n	8000d7a <_ZN7SSD130518SetPrechargePeriodEhh+0x24>
	{
		phase2_p = 0xF;
 8000d76:	230f      	movs	r3, #15
 8000d78:	70bb      	strb	r3, [r7, #2]
	}

	commandBuffer[0] = SSD1305_SET_PRECHARGE_PERIOD;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	22d9      	movs	r2, #217	@ 0xd9
 8000d7e:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = (phase2_p << 4) | phase1_p;
 8000d80:	78bb      	ldrb	r3, [r7, #2]
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	b25a      	sxtb	r2, r3
 8000d86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8000d94:	2102      	movs	r1, #2
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff fe4d 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000d9c:	4603      	mov	r3, r0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_ZN7SSD130520EnterReadModifyWriteEv>:

	return SendCommand(2);
}

HAL_StatusTypeDef SSD1305::EnterReadModifyWrite()
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
	commandBuffer[0] = SSD1305_READ_MODIFY_WRITE;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	22e0      	movs	r2, #224	@ 0xe0
 8000db2:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000db4:	2101      	movs	r1, #1
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff fe3d 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_ZN7SSD130519ExitReadModifyWriteEv>:

	return SendCommand(1);
}

HAL_StatusTypeDef SSD1305::ExitReadModifyWrite()
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
	commandBuffer[0] = SSD1305_EXIT_RMW;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	22ee      	movs	r2, #238	@ 0xee
 8000dd2:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff fe2d 	bl	8000a36 <_ZN7SSD130511SendCommandEh>
 8000ddc:	4603      	mov	r3, r0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <_Z17available_devicesPi>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void available_devices(int* devices)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	int j = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<128; i++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	e019      	b.n	8000e2e <_Z17available_devicesPi+0x46>
	{
		status = HAL_I2C_IsDeviceReady(&hi2c1, i<<1, 2, 100);
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	b299      	uxth	r1, r3
 8000e02:	2364      	movs	r3, #100	@ 0x64
 8000e04:	2202      	movs	r2, #2
 8000e06:	480e      	ldr	r0, [pc, #56]	@ (8000e40 <_Z17available_devicesPi+0x58>)
 8000e08:	f001 f866 	bl	8001ed8 <HAL_I2C_IsDeviceReady>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	73fb      	strb	r3, [r7, #15]
		if(status == HAL_OK)
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d108      	bne.n	8000e28 <_Z17available_devicesPi+0x40>
			{
				devices[j] = i;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	601a      	str	r2, [r3, #0]
				j++;
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	3301      	adds	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<128; i++)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e32:	dde2      	ble.n	8000dfa <_Z17available_devicesPi+0x12>
			}
	}
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000030 	.word	0x20000030

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	f5ad 6d85 	sub.w	sp, sp, #1064	@ 0x428
 8000e4a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f000 fb00 	bl	8001450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f000 f88c 	bl	8000f6c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 f964 	bl	8001120 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000e58:	f000 f934 	bl	80010c4 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8000e5c:	f000 f8fe 	bl	800105c <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  int devices[128];
  for(int i = 0; i<128; i++){devices[i] = 0;}
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8000e66:	e00d      	b.n	8000e84 <main+0x40>
 8000e68:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000e6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e70:	f8d7 241c 	ldr.w	r2, [r7, #1052]	@ 0x41c
 8000e74:	2100      	movs	r1, #0
 8000e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000e7a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000e7e:	3301      	adds	r3, #1
 8000e80:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8000e84:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000e88:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e8a:	dded      	ble.n	8000e68 <main+0x24>

  available_devices(devices);
 8000e8c:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ffa9 	bl	8000de8 <_Z17available_devicesPi>

  SSD1305 OLED(&hi2c1, 0x3C, 128, 32);
 8000e96:	f107 0008 	add.w	r0, r7, #8
 8000e9a:	2320      	movs	r3, #32
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2380      	movs	r3, #128	@ 0x80
 8000ea0:	223c      	movs	r2, #60	@ 0x3c
 8000ea2:	492d      	ldr	r1, [pc, #180]	@ (8000f58 <main+0x114>)
 8000ea4:	f7ff fb26 	bl	80004f4 <_ZN7SSD1305C1EP17I2C_HandleTypeDefhhh>
  OLED.Init();
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fb3f 	bl	8000530 <_ZN7SSD13054InitEv>
  //OLED.WriteBitmapToScreen(Misato_sfw, sizeof(Misato_sfw));

  FontDef font = Font_7x10;
 8000eb2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000eb6:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8000eba:	4a28      	ldr	r2, [pc, #160]	@ (8000f5c <main+0x118>)
 8000ebc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ec0:	e883 0003 	stmia.w	r3, {r0, r1}
  OLED.SetCursor(0, 0);
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fd9c 	bl	8000a0a <_ZN7SSD13059SetCursorEhh>
  OLED.WriteString("thequickbrownfox", Font_7x10, White);
 8000ed2:	4b22      	ldr	r3, [pc, #136]	@ (8000f5c <main+0x118>)
 8000ed4:	f107 0008 	add.w	r0, r7, #8
 8000ed8:	2201      	movs	r2, #1
 8000eda:	9200      	str	r2, [sp, #0]
 8000edc:	cb0c      	ldmia	r3, {r2, r3}
 8000ede:	4920      	ldr	r1, [pc, #128]	@ (8000f60 <main+0x11c>)
 8000ee0:	f7ff fd68 	bl	80009b4 <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
  OLED.SetCursor(0, font.FontHeight+1);
 8000ee4:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000ee8:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8000eec:	785b      	ldrb	r3, [r3, #1]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fd86 	bl	8000a0a <_ZN7SSD13059SetCursorEhh>
  OLED.WriteString("jumpedover", Font_7x10, White);
 8000efe:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <main+0x118>)
 8000f00:	f107 0008 	add.w	r0, r7, #8
 8000f04:	2201      	movs	r2, #1
 8000f06:	9200      	str	r2, [sp, #0]
 8000f08:	cb0c      	ldmia	r3, {r2, r3}
 8000f0a:	4916      	ldr	r1, [pc, #88]	@ (8000f64 <main+0x120>)
 8000f0c:	f7ff fd52 	bl	80009b4 <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
  OLED.SetCursor(0, OLED.GetHeight()-font.FontHeight);
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fbc9 	bl	80006ac <_ZN7SSD13059GetHeightEv>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000f22:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8000f26:	785b      	ldrb	r3, [r3, #1]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fd69 	bl	8000a0a <_ZN7SSD13059SetCursorEhh>
  OLED.WriteString("thelazyfrog", Font_7x10, White);
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <main+0x118>)
 8000f3a:	f107 0008 	add.w	r0, r7, #8
 8000f3e:	2201      	movs	r2, #1
 8000f40:	9200      	str	r2, [sp, #0]
 8000f42:	cb0c      	ldmia	r3, {r2, r3}
 8000f44:	4908      	ldr	r1, [pc, #32]	@ (8000f68 <main+0x124>)
 8000f46:	f7ff fd35 	bl	80009b4 <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
  OLED.WriteBitmapToScreen();
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fbb8 	bl	80006c4 <_ZN7SSD130519WriteBitmapToScreenEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <main+0x110>
 8000f58:	20000030 	.word	0x20000030
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	08003734 	.word	0x08003734
 8000f64:	08003748 	.word	0x08003748
 8000f68:	08003754 	.word	0x08003754

08000f6c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	@ 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	2234      	movs	r2, #52	@ 0x34
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 fba2 	bl	80036c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	4b2f      	ldr	r3, [pc, #188]	@ (8001054 <_Z18SystemClock_Configv+0xe8>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	4a2e      	ldr	r2, [pc, #184]	@ (8001054 <_Z18SystemClock_Configv+0xe8>)
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	@ (8001054 <_Z18SystemClock_Configv+0xe8>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fac:	2300      	movs	r3, #0
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	4b29      	ldr	r3, [pc, #164]	@ (8001058 <_Z18SystemClock_Configv+0xec>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fb8:	4a27      	ldr	r2, [pc, #156]	@ (8001058 <_Z18SystemClock_Configv+0xec>)
 8000fba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b25      	ldr	r3, [pc, #148]	@ (8001058 <_Z18SystemClock_Configv+0xec>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fe4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fe8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 fe02 	bl	8002c04 <HAL_RCC_OscConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	bf14      	ite	ne
 8001006:	2301      	movne	r3, #1
 8001008:	2300      	moveq	r3, #0
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8001010:	f000 f8f4 	bl	80011fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001014:	230f      	movs	r3, #15
 8001016:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001018:	2302      	movs	r3, #2
 800101a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001024:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2102      	movs	r1, #2
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fa9d 	bl	8002570 <HAL_RCC_ClockConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	bf14      	ite	ne
 800103c:	2301      	movne	r3, #1
 800103e:	2300      	moveq	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8001046:	f000 f8d9 	bl	80011fc <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	3750      	adds	r7, #80	@ 0x50
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40007000 	.word	0x40007000

0800105c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001062:	4a16      	ldr	r2, [pc, #88]	@ (80010bc <_ZL12MX_I2C1_Initv+0x60>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001068:	4a15      	ldr	r2, [pc, #84]	@ (80010c0 <_ZL12MX_I2C1_Initv+0x64>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <_ZL12MX_I2C1_Initv+0x5c>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <_ZL12MX_I2C1_Initv+0x5c>)
 800107a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800107e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108c:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <_ZL12MX_I2C1_Initv+0x5c>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001098:	4807      	ldr	r0, [pc, #28]	@ (80010b8 <_ZL12MX_I2C1_Initv+0x5c>)
 800109a:	f000 fcdf 	bl	8001a5c <HAL_I2C_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf14      	ite	ne
 80010a4:	2301      	movne	r3, #1
 80010a6:	2300      	moveq	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80010ae:	f000 f8a5 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000030 	.word	0x20000030
 80010bc:	40005400 	.word	0x40005400
 80010c0:	000186a0 	.word	0x000186a0

080010c4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c8:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010ca:	4a14      	ldr	r2, [pc, #80]	@ (800111c <_ZL19MX_USART2_UART_Initv+0x58>)
 80010cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010fa:	4807      	ldr	r0, [pc, #28]	@ (8001118 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010fc:	f002 f820 	bl	8003140 <HAL_UART_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	bf14      	ite	ne
 8001106:	2301      	movne	r3, #1
 8001108:	2300      	moveq	r3, #0
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001110:	f000 f874 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000084 	.word	0x20000084
 800111c:	40004400 	.word	0x40004400

08001120 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	@ 0x28
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <_ZL12MX_GPIO_Initv+0xd0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a2c      	ldr	r2, [pc, #176]	@ (80011f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a25      	ldr	r2, [pc, #148]	@ (80011f0 <_ZL12MX_GPIO_Initv+0xd0>)
 800115c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a1e      	ldr	r2, [pc, #120]	@ (80011f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a17      	ldr	r2, [pc, #92]	@ (80011f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <_ZL12MX_GPIO_Initv+0xd0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2120      	movs	r1, #32
 80011aa:	4812      	ldr	r0, [pc, #72]	@ (80011f4 <_ZL12MX_GPIO_Initv+0xd4>)
 80011ac:	f000 fc3c 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <_ZL12MX_GPIO_Initv+0xd8>)
 80011c8:	f000 fa9a 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011cc:	2320      	movs	r3, #32
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4804      	ldr	r0, [pc, #16]	@ (80011f4 <_ZL12MX_GPIO_Initv+0xd4>)
 80011e4:	f000 fa8c 	bl	8001700 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	@ 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020800 	.word	0x40020800

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
}
 8001202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <Error_Handler+0x8>

08001208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <HAL_MspInit+0x4c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <HAL_MspInit+0x4c>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121c:	6453      	str	r3, [r2, #68]	@ 0x44
 800121e:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <HAL_MspInit+0x4c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <HAL_MspInit+0x4c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	4a08      	ldr	r2, [pc, #32]	@ (8001254 <HAL_MspInit+0x4c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001238:	6413      	str	r3, [r2, #64]	@ 0x40
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_MspInit+0x4c>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001246:	2007      	movs	r0, #7
 8001248:	f000 fa26 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800

08001258 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	@ 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a19      	ldr	r2, [pc, #100]	@ (80012dc <HAL_I2C_MspInit+0x84>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d12c      	bne.n	80012d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <HAL_I2C_MspInit+0x88>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a17      	ldr	r2, [pc, #92]	@ (80012e0 <HAL_I2C_MspInit+0x88>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <HAL_I2C_MspInit+0x88>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001296:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129c:	2312      	movs	r3, #18
 800129e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012a8:	2304      	movs	r3, #4
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	480c      	ldr	r0, [pc, #48]	@ (80012e4 <HAL_I2C_MspInit+0x8c>)
 80012b4:	f000 fa24 	bl	8001700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_I2C_MspInit+0x88>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	4a07      	ldr	r2, [pc, #28]	@ (80012e0 <HAL_I2C_MspInit+0x88>)
 80012c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_I2C_MspInit+0x88>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	@ 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40005400 	.word	0x40005400
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020400 	.word	0x40020400

080012e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	@ 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a19      	ldr	r2, [pc, #100]	@ (800136c <HAL_UART_MspInit+0x84>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d12b      	bne.n	8001362 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <HAL_UART_MspInit+0x88>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	4a17      	ldr	r2, [pc, #92]	@ (8001370 <HAL_UART_MspInit+0x88>)
 8001314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001318:	6413      	str	r3, [r2, #64]	@ 0x40
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <HAL_UART_MspInit+0x88>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <HAL_UART_MspInit+0x88>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a10      	ldr	r2, [pc, #64]	@ (8001370 <HAL_UART_MspInit+0x88>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <HAL_UART_MspInit+0x88>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001342:	230c      	movs	r3, #12
 8001344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001352:	2307      	movs	r3, #7
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	@ (8001374 <HAL_UART_MspInit+0x8c>)
 800135e:	f000 f9cf 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	@ 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40004400 	.word	0x40004400
 8001370:	40023800 	.word	0x40023800
 8001374:	40020000 	.word	0x40020000

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <NMI_Handler+0x4>

08001380 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <HardFault_Handler+0x4>

08001388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <MemManage_Handler+0x4>

08001390 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <UsageFault_Handler+0x4>

080013a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ce:	f000 f891 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001434 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001400:	480d      	ldr	r0, [pc, #52]	@ (8001438 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001402:	490e      	ldr	r1, [pc, #56]	@ (800143c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001404:	4a0e      	ldr	r2, [pc, #56]	@ (8001440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0b      	ldr	r2, [pc, #44]	@ (8001444 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001418:	4c0b      	ldr	r4, [pc, #44]	@ (8001448 <LoopFillZerobss+0x26>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001426:	f7ff ffd7 	bl	80013d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800142a:	f002 f953 	bl	80036d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7ff fd09 	bl	8000e44 <main>
  bx  lr    
 8001432:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800143c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001440:	08003ef4 	.word	0x08003ef4
  ldr r2, =_sbss
 8001444:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001448:	200000cc 	.word	0x200000cc

0800144c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC_IRQHandler>
	...

08001450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001454:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0d      	ldr	r2, [pc, #52]	@ (8001490 <HAL_Init+0x40>)
 800145a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800145e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001460:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <HAL_Init+0x40>)
 8001466:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800146a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800146c:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a07      	ldr	r2, [pc, #28]	@ (8001490 <HAL_Init+0x40>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001478:	2003      	movs	r0, #3
 800147a:	f000 f90d 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147e:	2000      	movs	r0, #0
 8001480:	f000 f808 	bl	8001494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001484:	f7ff fec0 	bl	8001208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023c00 	.word	0x40023c00

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800149c:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <HAL_InitTick+0x54>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_InitTick+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f917 	bl	80016e6 <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f000 f8ed 	bl	80016ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	@ (80014f0 <HAL_InitTick+0x5c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000008 	.word	0x20000008
 80014ec:	20000010 	.word	0x20000010
 80014f0:	2000000c 	.word	0x2000000c

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000010 	.word	0x20000010
 8001518:	200000c8 	.word	0x200000c8

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	200000c8 	.word	0x200000c8

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	@ (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	@ (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	@ 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
         );
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	@ 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001664:	d301      	bcc.n	800166a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001666:	2301      	movs	r3, #1
 8001668:	e00f      	b.n	800168a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <SysTick_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001672:	210f      	movs	r1, #15
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f7ff ff8e 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <SysTick_Config+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <SysTick_Config+0x40>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff47 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c0:	f7ff ff5c 	bl	800157c <__NVIC_GetPriorityGrouping>
 80016c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	6978      	ldr	r0, [r7, #20]
 80016cc:	f7ff ff8e 	bl	80015ec <NVIC_EncodePriority>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff5d 	bl	8001598 <__NVIC_SetPriority>
}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffb0 	bl	8001654 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	@ 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	e165      	b.n	80019e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800171c:	2201      	movs	r2, #1
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	429a      	cmp	r2, r3
 8001736:	f040 8154 	bne.w	80019e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d005      	beq.n	8001752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174e:	2b02      	cmp	r3, #2
 8001750:	d130      	bne.n	80017b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001788:	2201      	movs	r2, #1
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	f003 0201 	and.w	r2, r3, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d017      	beq.n	80017f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d123      	bne.n	8001844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	08da      	lsrs	r2, r3, #3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3208      	adds	r2, #8
 8001804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	220f      	movs	r2, #15
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	08da      	lsrs	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3208      	adds	r2, #8
 800183e:	69b9      	ldr	r1, [r7, #24]
 8001840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0203 	and.w	r2, r3, #3
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80ae 	beq.w	80019e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b5d      	ldr	r3, [pc, #372]	@ (8001a00 <HAL_GPIO_Init+0x300>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	4a5c      	ldr	r2, [pc, #368]	@ (8001a00 <HAL_GPIO_Init+0x300>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001894:	6453      	str	r3, [r2, #68]	@ 0x44
 8001896:	4b5a      	ldr	r3, [pc, #360]	@ (8001a00 <HAL_GPIO_Init+0x300>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018a2:	4a58      	ldr	r2, [pc, #352]	@ (8001a04 <HAL_GPIO_Init+0x304>)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001a08 <HAL_GPIO_Init+0x308>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d025      	beq.n	800191a <HAL_GPIO_Init+0x21a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a4e      	ldr	r2, [pc, #312]	@ (8001a0c <HAL_GPIO_Init+0x30c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d01f      	beq.n	8001916 <HAL_GPIO_Init+0x216>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001a10 <HAL_GPIO_Init+0x310>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d019      	beq.n	8001912 <HAL_GPIO_Init+0x212>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001a14 <HAL_GPIO_Init+0x314>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d013      	beq.n	800190e <HAL_GPIO_Init+0x20e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001a18 <HAL_GPIO_Init+0x318>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d00d      	beq.n	800190a <HAL_GPIO_Init+0x20a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4a      	ldr	r2, [pc, #296]	@ (8001a1c <HAL_GPIO_Init+0x31c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d007      	beq.n	8001906 <HAL_GPIO_Init+0x206>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a49      	ldr	r2, [pc, #292]	@ (8001a20 <HAL_GPIO_Init+0x320>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d101      	bne.n	8001902 <HAL_GPIO_Init+0x202>
 80018fe:	2306      	movs	r3, #6
 8001900:	e00c      	b.n	800191c <HAL_GPIO_Init+0x21c>
 8001902:	2307      	movs	r3, #7
 8001904:	e00a      	b.n	800191c <HAL_GPIO_Init+0x21c>
 8001906:	2305      	movs	r3, #5
 8001908:	e008      	b.n	800191c <HAL_GPIO_Init+0x21c>
 800190a:	2304      	movs	r3, #4
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x21c>
 800190e:	2303      	movs	r3, #3
 8001910:	e004      	b.n	800191c <HAL_GPIO_Init+0x21c>
 8001912:	2302      	movs	r3, #2
 8001914:	e002      	b.n	800191c <HAL_GPIO_Init+0x21c>
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <HAL_GPIO_Init+0x21c>
 800191a:	2300      	movs	r3, #0
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	f002 0203 	and.w	r2, r2, #3
 8001922:	0092      	lsls	r2, r2, #2
 8001924:	4093      	lsls	r3, r2
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800192c:	4935      	ldr	r1, [pc, #212]	@ (8001a04 <HAL_GPIO_Init+0x304>)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	089b      	lsrs	r3, r3, #2
 8001932:	3302      	adds	r3, #2
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800193a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a24 <HAL_GPIO_Init+0x324>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800195e:	4a31      	ldr	r2, [pc, #196]	@ (8001a24 <HAL_GPIO_Init+0x324>)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001964:	4b2f      	ldr	r3, [pc, #188]	@ (8001a24 <HAL_GPIO_Init+0x324>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001988:	4a26      	ldr	r2, [pc, #152]	@ (8001a24 <HAL_GPIO_Init+0x324>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800198e:	4b25      	ldr	r3, [pc, #148]	@ (8001a24 <HAL_GPIO_Init+0x324>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a24 <HAL_GPIO_Init+0x324>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <HAL_GPIO_Init+0x324>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019dc:	4a11      	ldr	r2, [pc, #68]	@ (8001a24 <HAL_GPIO_Init+0x324>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3301      	adds	r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	2b0f      	cmp	r3, #15
 80019ec:	f67f ae96 	bls.w	800171c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3724      	adds	r7, #36	@ 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40013800 	.word	0x40013800
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	40020800 	.word	0x40020800
 8001a14:	40020c00 	.word	0x40020c00
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40021400 	.word	0x40021400
 8001a20:	40021800 	.word	0x40021800
 8001a24:	40013c00 	.word	0x40013c00

08001a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
 8001a34:	4613      	mov	r3, r2
 8001a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a38:	787b      	ldrb	r3, [r7, #1]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a44:	e003      	b.n	8001a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a46:	887b      	ldrh	r3, [r7, #2]
 8001a48:	041a      	lsls	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	619a      	str	r2, [r3, #24]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e12b      	b.n	8001cc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fbe8 	bl	8001258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2224      	movs	r2, #36	@ 0x24
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0201 	bic.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001aae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001abe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ac0:	f000 fe48 	bl	8002754 <HAL_RCC_GetPCLK1Freq>
 8001ac4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4a81      	ldr	r2, [pc, #516]	@ (8001cd0 <HAL_I2C_Init+0x274>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d807      	bhi.n	8001ae0 <HAL_I2C_Init+0x84>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4a80      	ldr	r2, [pc, #512]	@ (8001cd4 <HAL_I2C_Init+0x278>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	bf94      	ite	ls
 8001ad8:	2301      	movls	r3, #1
 8001ada:	2300      	movhi	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	e006      	b.n	8001aee <HAL_I2C_Init+0x92>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4a7d      	ldr	r2, [pc, #500]	@ (8001cd8 <HAL_I2C_Init+0x27c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	bf94      	ite	ls
 8001ae8:	2301      	movls	r3, #1
 8001aea:	2300      	movhi	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0e7      	b.n	8001cc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4a78      	ldr	r2, [pc, #480]	@ (8001cdc <HAL_I2C_Init+0x280>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	0c9b      	lsrs	r3, r3, #18
 8001b00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4a6a      	ldr	r2, [pc, #424]	@ (8001cd0 <HAL_I2C_Init+0x274>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d802      	bhi.n	8001b30 <HAL_I2C_Init+0xd4>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	e009      	b.n	8001b44 <HAL_I2C_Init+0xe8>
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b36:	fb02 f303 	mul.w	r3, r2, r3
 8001b3a:	4a69      	ldr	r2, [pc, #420]	@ (8001ce0 <HAL_I2C_Init+0x284>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	099b      	lsrs	r3, r3, #6
 8001b42:	3301      	adds	r3, #1
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	495c      	ldr	r1, [pc, #368]	@ (8001cd0 <HAL_I2C_Init+0x274>)
 8001b60:	428b      	cmp	r3, r1
 8001b62:	d819      	bhi.n	8001b98 <HAL_I2C_Init+0x13c>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1e59      	subs	r1, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b72:	1c59      	adds	r1, r3, #1
 8001b74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b78:	400b      	ands	r3, r1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00a      	beq.n	8001b94 <HAL_I2C_Init+0x138>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1e59      	subs	r1, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b92:	e051      	b.n	8001c38 <HAL_I2C_Init+0x1dc>
 8001b94:	2304      	movs	r3, #4
 8001b96:	e04f      	b.n	8001c38 <HAL_I2C_Init+0x1dc>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d111      	bne.n	8001bc4 <HAL_I2C_Init+0x168>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1e58      	subs	r0, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6859      	ldr	r1, [r3, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	440b      	add	r3, r1
 8001bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	e012      	b.n	8001bea <HAL_I2C_Init+0x18e>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1e58      	subs	r0, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6859      	ldr	r1, [r3, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	0099      	lsls	r1, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_I2C_Init+0x196>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e022      	b.n	8001c38 <HAL_I2C_Init+0x1dc>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10e      	bne.n	8001c18 <HAL_I2C_Init+0x1bc>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1e58      	subs	r0, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6859      	ldr	r1, [r3, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	440b      	add	r3, r1
 8001c08:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c16:	e00f      	b.n	8001c38 <HAL_I2C_Init+0x1dc>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1e58      	subs	r0, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6859      	ldr	r1, [r3, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	0099      	lsls	r1, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	6809      	ldr	r1, [r1, #0]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69da      	ldr	r2, [r3, #28]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6911      	ldr	r1, [r2, #16]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68d2      	ldr	r2, [r2, #12]
 8001c72:	4311      	orrs	r1, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	000186a0 	.word	0x000186a0
 8001cd4:	001e847f 	.word	0x001e847f
 8001cd8:	003d08ff 	.word	0x003d08ff
 8001cdc:	431bde83 	.word	0x431bde83
 8001ce0:	10624dd3 	.word	0x10624dd3

08001ce4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	4608      	mov	r0, r1
 8001cee:	4611      	mov	r1, r2
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	817b      	strh	r3, [r7, #10]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	813b      	strh	r3, [r7, #8]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cfe:	f7ff fc0d 	bl	800151c <HAL_GetTick>
 8001d02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	f040 80d9 	bne.w	8001ec4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2319      	movs	r3, #25
 8001d18:	2201      	movs	r2, #1
 8001d1a:	496d      	ldr	r1, [pc, #436]	@ (8001ed0 <HAL_I2C_Mem_Write+0x1ec>)
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 fa9f 	bl	8002260 <I2C_WaitOnFlagUntilTimeout>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e0cc      	b.n	8001ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <HAL_I2C_Mem_Write+0x56>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e0c5      	b.n	8001ec6 <HAL_I2C_Mem_Write+0x1e2>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d007      	beq.n	8001d60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2221      	movs	r2, #33	@ 0x21
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2240      	movs	r2, #64	@ 0x40
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6a3a      	ldr	r2, [r7, #32]
 8001d8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed4 <HAL_I2C_Mem_Write+0x1f0>)
 8001da0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001da2:	88f8      	ldrh	r0, [r7, #6]
 8001da4:	893a      	ldrh	r2, [r7, #8]
 8001da6:	8979      	ldrh	r1, [r7, #10]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	9301      	str	r3, [sp, #4]
 8001dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	4603      	mov	r3, r0
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f9be 	bl	8002134 <I2C_RequestMemoryWrite>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d052      	beq.n	8001e64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e081      	b.n	8001ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 fb20 	bl	800240c <I2C_WaitOnTXEFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00d      	beq.n	8001dee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d107      	bne.n	8001dea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001de8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e06b      	b.n	8001ec6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d11b      	bne.n	8001e64 <HAL_I2C_Mem_Write+0x180>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d017      	beq.n	8001e64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1aa      	bne.n	8001dc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 fb0c 	bl	800248e <I2C_WaitOnBTFFlagUntilTimeout>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00d      	beq.n	8001e98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d107      	bne.n	8001e94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e016      	b.n	8001ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e000      	b.n	8001ec6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ec4:	2302      	movs	r3, #2
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	00100002 	.word	0x00100002
 8001ed4:	ffff0000 	.word	0xffff0000

08001ed8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	@ 0x28
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001ee8:	f7ff fb18 	bl	800151c <HAL_GetTick>
 8001eec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b20      	cmp	r3, #32
 8001efc:	f040 8111 	bne.w	8002122 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2319      	movs	r3, #25
 8001f06:	2201      	movs	r2, #1
 8001f08:	4988      	ldr	r1, [pc, #544]	@ (800212c <HAL_I2C_IsDeviceReady+0x254>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f9a8 	bl	8002260 <I2C_WaitOnFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
 8001f18:	e104      	b.n	8002124 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_I2C_IsDeviceReady+0x50>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e0fd      	b.n	8002124 <HAL_I2C_IsDeviceReady+0x24c>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d007      	beq.n	8001f4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0201 	orr.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2224      	movs	r2, #36	@ 0x24
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a70      	ldr	r2, [pc, #448]	@ (8002130 <HAL_I2C_IsDeviceReady+0x258>)
 8001f70:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f966 	bl	8002260 <I2C_WaitOnFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00d      	beq.n	8001fb6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fa8:	d103      	bne.n	8001fb2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e0b6      	b.n	8002124 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fb6:	897b      	ldrh	r3, [r7, #10]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fc4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff faa9 	bl	800151c <HAL_GetTick>
 8001fca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	bf0c      	ite	eq
 8001fda:	2301      	moveq	r3, #1
 8001fdc:	2300      	movne	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff0:	bf0c      	ite	eq
 8001ff2:	2301      	moveq	r3, #1
 8001ff4:	2300      	movne	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ffa:	e025      	b.n	8002048 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ffc:	f7ff fa8e 	bl	800151c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d302      	bcc.n	8002012 <HAL_I2C_IsDeviceReady+0x13a>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d103      	bne.n	800201a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	22a0      	movs	r2, #160	@ 0xa0
 8002016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b02      	cmp	r3, #2
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800203e:	bf0c      	ite	eq
 8002040:	2301      	moveq	r3, #1
 8002042:	2300      	movne	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2ba0      	cmp	r3, #160	@ 0xa0
 8002052:	d005      	beq.n	8002060 <HAL_I2C_IsDeviceReady+0x188>
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d102      	bne.n	8002060 <HAL_I2C_IsDeviceReady+0x188>
 800205a:	7dbb      	ldrb	r3, [r7, #22]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0cd      	beq.n	8001ffc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b02      	cmp	r3, #2
 8002074:	d129      	bne.n	80020ca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002084:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2319      	movs	r3, #25
 80020a2:	2201      	movs	r2, #1
 80020a4:	4921      	ldr	r1, [pc, #132]	@ (800212c <HAL_I2C_IsDeviceReady+0x254>)
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f8da 	bl	8002260 <I2C_WaitOnFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e036      	b.n	8002124 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e02c      	b.n	8002124 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020d8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020e2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2319      	movs	r3, #25
 80020ea:	2201      	movs	r2, #1
 80020ec:	490f      	ldr	r1, [pc, #60]	@ (800212c <HAL_I2C_IsDeviceReady+0x254>)
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f8b6 	bl	8002260 <I2C_WaitOnFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e012      	b.n	8002124 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	3301      	adds	r3, #1
 8002102:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	f4ff af32 	bcc.w	8001f72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002122:	2302      	movs	r3, #2
  }
}
 8002124:	4618      	mov	r0, r3
 8002126:	3720      	adds	r7, #32
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	00100002 	.word	0x00100002
 8002130:	ffff0000 	.word	0xffff0000

08002134 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	4608      	mov	r0, r1
 800213e:	4611      	mov	r1, r2
 8002140:	461a      	mov	r2, r3
 8002142:	4603      	mov	r3, r0
 8002144:	817b      	strh	r3, [r7, #10]
 8002146:	460b      	mov	r3, r1
 8002148:	813b      	strh	r3, [r7, #8]
 800214a:	4613      	mov	r3, r2
 800214c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800215c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	2200      	movs	r2, #0
 8002166:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 f878 	bl	8002260 <I2C_WaitOnFlagUntilTimeout>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00d      	beq.n	8002192 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002180:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002184:	d103      	bne.n	800218e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800218c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e05f      	b.n	8002252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002192:	897b      	ldrh	r3, [r7, #10]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	6a3a      	ldr	r2, [r7, #32]
 80021a6:	492d      	ldr	r1, [pc, #180]	@ (800225c <I2C_RequestMemoryWrite+0x128>)
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 f8b0 	bl	800230e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e04c      	b.n	8002252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d0:	6a39      	ldr	r1, [r7, #32]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f91a 	bl	800240c <I2C_WaitOnTXEFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d107      	bne.n	80021f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e02b      	b.n	8002252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002200:	893b      	ldrh	r3, [r7, #8]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	611a      	str	r2, [r3, #16]
 800220a:	e021      	b.n	8002250 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800220c:	893b      	ldrh	r3, [r7, #8]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	b29b      	uxth	r3, r3
 8002212:	b2da      	uxtb	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800221a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800221c:	6a39      	ldr	r1, [r7, #32]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f8f4 	bl	800240c <I2C_WaitOnTXEFlagUntilTimeout>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00d      	beq.n	8002246 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	2b04      	cmp	r3, #4
 8002230:	d107      	bne.n	8002242 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002240:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e005      	b.n	8002252 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002246:	893b      	ldrh	r3, [r7, #8]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	00010002 	.word	0x00010002

08002260 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	4613      	mov	r3, r2
 800226e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002270:	e025      	b.n	80022be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d021      	beq.n	80022be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227a:	f7ff f94f 	bl	800151c <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d302      	bcc.n	8002290 <I2C_WaitOnFlagUntilTimeout+0x30>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d116      	bne.n	80022be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2220      	movs	r2, #32
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f043 0220 	orr.w	r2, r3, #32
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e023      	b.n	8002306 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	0c1b      	lsrs	r3, r3, #16
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d10d      	bne.n	80022e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	43da      	mvns	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	4013      	ands	r3, r2
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	bf0c      	ite	eq
 80022da:	2301      	moveq	r3, #1
 80022dc:	2300      	movne	r3, #0
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	e00c      	b.n	80022fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4013      	ands	r3, r2
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bf0c      	ite	eq
 80022f6:	2301      	moveq	r3, #1
 80022f8:	2300      	movne	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	429a      	cmp	r2, r3
 8002302:	d0b6      	beq.n	8002272 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800231c:	e051      	b.n	80023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800232c:	d123      	bne.n	8002376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800233c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002346:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2220      	movs	r2, #32
 8002352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f043 0204 	orr.w	r2, r3, #4
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e046      	b.n	8002404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d021      	beq.n	80023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237e:	f7ff f8cd 	bl	800151c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	429a      	cmp	r2, r3
 800238c:	d302      	bcc.n	8002394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d116      	bne.n	80023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	f043 0220 	orr.w	r2, r3, #32
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e020      	b.n	8002404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d10c      	bne.n	80023e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	43da      	mvns	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4013      	ands	r3, r2
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	bf14      	ite	ne
 80023de:	2301      	movne	r3, #1
 80023e0:	2300      	moveq	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	e00b      	b.n	80023fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	43da      	mvns	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	4013      	ands	r3, r2
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d18d      	bne.n	800231e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002418:	e02d      	b.n	8002476 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f878 	bl	8002510 <I2C_IsAcknowledgeFailed>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e02d      	b.n	8002486 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d021      	beq.n	8002476 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002432:	f7ff f873 	bl	800151c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	429a      	cmp	r2, r3
 8002440:	d302      	bcc.n	8002448 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d116      	bne.n	8002476 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	f043 0220 	orr.w	r2, r3, #32
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e007      	b.n	8002486 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002480:	2b80      	cmp	r3, #128	@ 0x80
 8002482:	d1ca      	bne.n	800241a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800249a:	e02d      	b.n	80024f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 f837 	bl	8002510 <I2C_IsAcknowledgeFailed>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e02d      	b.n	8002508 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b2:	d021      	beq.n	80024f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b4:	f7ff f832 	bl	800151c <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d302      	bcc.n	80024ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d116      	bne.n	80024f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e007      	b.n	8002508 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b04      	cmp	r3, #4
 8002504:	d1ca      	bne.n	800249c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002526:	d11b      	bne.n	8002560 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002530:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	f043 0204 	orr.w	r2, r3, #4
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0cc      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002584:	4b68      	ldr	r3, [pc, #416]	@ (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d90c      	bls.n	80025ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b65      	ldr	r3, [pc, #404]	@ (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b63      	ldr	r3, [pc, #396]	@ (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0b8      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c4:	4b59      	ldr	r3, [pc, #356]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a58      	ldr	r2, [pc, #352]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025dc:	4b53      	ldr	r3, [pc, #332]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	4a52      	ldr	r2, [pc, #328]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e8:	4b50      	ldr	r3, [pc, #320]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	494d      	ldr	r1, [pc, #308]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d044      	beq.n	8002690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b47      	ldr	r3, [pc, #284]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d119      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e07f      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d003      	beq.n	800262e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262a:	2b03      	cmp	r3, #3
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262e:	4b3f      	ldr	r3, [pc, #252]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e06f      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263e:	4b3b      	ldr	r3, [pc, #236]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e067      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264e:	4b37      	ldr	r3, [pc, #220]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f023 0203 	bic.w	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4934      	ldr	r1, [pc, #208]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	4313      	orrs	r3, r2
 800265e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002660:	f7fe ff5c 	bl	800151c <HAL_GetTick>
 8002664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	e00a      	b.n	800267e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002668:	f7fe ff58 	bl	800151c <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e04f      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	4b2b      	ldr	r3, [pc, #172]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 020c 	and.w	r2, r3, #12
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	429a      	cmp	r2, r3
 800268e:	d1eb      	bne.n	8002668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002690:	4b25      	ldr	r3, [pc, #148]	@ (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d20c      	bcs.n	80026b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b22      	ldr	r3, [pc, #136]	@ (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b20      	ldr	r3, [pc, #128]	@ (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e032      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c4:	4b19      	ldr	r3, [pc, #100]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4916      	ldr	r1, [pc, #88]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e2:	4b12      	ldr	r3, [pc, #72]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	490e      	ldr	r1, [pc, #56]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026f6:	f000 f855 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 80026fa:	4602      	mov	r2, r0
 80026fc:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	490a      	ldr	r1, [pc, #40]	@ (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	5ccb      	ldrb	r3, [r1, r3]
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	4a09      	ldr	r2, [pc, #36]	@ (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002712:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe febc 	bl	8001494 <HAL_InitTick>

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40023c00 	.word	0x40023c00
 800272c:	40023800 	.word	0x40023800
 8002730:	08003ecc 	.word	0x08003ecc
 8002734:	20000008 	.word	0x20000008
 8002738:	2000000c 	.word	0x2000000c

0800273c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002740:	4b03      	ldr	r3, [pc, #12]	@ (8002750 <HAL_RCC_GetHCLKFreq+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000008 	.word	0x20000008

08002754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002758:	f7ff fff0 	bl	800273c <HAL_RCC_GetHCLKFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	0a9b      	lsrs	r3, r3, #10
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4903      	ldr	r1, [pc, #12]	@ (8002778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800
 8002778:	08003edc 	.word	0x08003edc

0800277c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002780:	f7ff ffdc 	bl	800273c <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b05      	ldr	r3, [pc, #20]	@ (800279c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	0b5b      	lsrs	r3, r3, #13
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4903      	ldr	r1, [pc, #12]	@ (80027a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40023800 	.word	0x40023800
 80027a0:	08003edc 	.word	0x08003edc

080027a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a8:	b0ae      	sub	sp, #184	@ 0xb8
 80027aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ca:	4bcb      	ldr	r3, [pc, #812]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	f200 8206 	bhi.w	8002be4 <HAL_RCC_GetSysClockFreq+0x440>
 80027d8:	a201      	add	r2, pc, #4	@ (adr r2, 80027e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	08002815 	.word	0x08002815
 80027e4:	08002be5 	.word	0x08002be5
 80027e8:	08002be5 	.word	0x08002be5
 80027ec:	08002be5 	.word	0x08002be5
 80027f0:	0800281d 	.word	0x0800281d
 80027f4:	08002be5 	.word	0x08002be5
 80027f8:	08002be5 	.word	0x08002be5
 80027fc:	08002be5 	.word	0x08002be5
 8002800:	08002825 	.word	0x08002825
 8002804:	08002be5 	.word	0x08002be5
 8002808:	08002be5 	.word	0x08002be5
 800280c:	08002be5 	.word	0x08002be5
 8002810:	08002a15 	.word	0x08002a15
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002814:	4bb9      	ldr	r3, [pc, #740]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x358>)
 8002816:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800281a:	e1e7      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800281c:	4bb8      	ldr	r3, [pc, #736]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x35c>)
 800281e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002822:	e1e3      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002824:	4bb4      	ldr	r3, [pc, #720]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800282c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002830:	4bb1      	ldr	r3, [pc, #708]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d071      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283c:	4bae      	ldr	r3, [pc, #696]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x354>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	2200      	movs	r2, #0
 8002844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002848:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800284c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002854:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800285e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002862:	4622      	mov	r2, r4
 8002864:	462b      	mov	r3, r5
 8002866:	f04f 0000 	mov.w	r0, #0
 800286a:	f04f 0100 	mov.w	r1, #0
 800286e:	0159      	lsls	r1, r3, #5
 8002870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002874:	0150      	lsls	r0, r2, #5
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4621      	mov	r1, r4
 800287c:	1a51      	subs	r1, r2, r1
 800287e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002880:	4629      	mov	r1, r5
 8002882:	eb63 0301 	sbc.w	r3, r3, r1
 8002886:	647b      	str	r3, [r7, #68]	@ 0x44
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002894:	4649      	mov	r1, r9
 8002896:	018b      	lsls	r3, r1, #6
 8002898:	4641      	mov	r1, r8
 800289a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800289e:	4641      	mov	r1, r8
 80028a0:	018a      	lsls	r2, r1, #6
 80028a2:	4641      	mov	r1, r8
 80028a4:	1a51      	subs	r1, r2, r1
 80028a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028a8:	4649      	mov	r1, r9
 80028aa:	eb63 0301 	sbc.w	r3, r3, r1
 80028ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80028bc:	4649      	mov	r1, r9
 80028be:	00cb      	lsls	r3, r1, #3
 80028c0:	4641      	mov	r1, r8
 80028c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028c6:	4641      	mov	r1, r8
 80028c8:	00ca      	lsls	r2, r1, #3
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	4603      	mov	r3, r0
 80028d0:	4622      	mov	r2, r4
 80028d2:	189b      	adds	r3, r3, r2
 80028d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80028d6:	462b      	mov	r3, r5
 80028d8:	460a      	mov	r2, r1
 80028da:	eb42 0303 	adc.w	r3, r2, r3
 80028de:	637b      	str	r3, [r7, #52]	@ 0x34
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028ec:	4629      	mov	r1, r5
 80028ee:	024b      	lsls	r3, r1, #9
 80028f0:	4621      	mov	r1, r4
 80028f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028f6:	4621      	mov	r1, r4
 80028f8:	024a      	lsls	r2, r1, #9
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002902:	2200      	movs	r2, #0
 8002904:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002908:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800290c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002910:	f7fd fc78 	bl	8000204 <__aeabi_uldivmod>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4613      	mov	r3, r2
 800291a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800291e:	e067      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002920:	4b75      	ldr	r3, [pc, #468]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	099b      	lsrs	r3, r3, #6
 8002926:	2200      	movs	r2, #0
 8002928:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800292c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002930:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002938:	67bb      	str	r3, [r7, #120]	@ 0x78
 800293a:	2300      	movs	r3, #0
 800293c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800293e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002942:	4622      	mov	r2, r4
 8002944:	462b      	mov	r3, r5
 8002946:	f04f 0000 	mov.w	r0, #0
 800294a:	f04f 0100 	mov.w	r1, #0
 800294e:	0159      	lsls	r1, r3, #5
 8002950:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002954:	0150      	lsls	r0, r2, #5
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4621      	mov	r1, r4
 800295c:	1a51      	subs	r1, r2, r1
 800295e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002960:	4629      	mov	r1, r5
 8002962:	eb63 0301 	sbc.w	r3, r3, r1
 8002966:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002974:	4649      	mov	r1, r9
 8002976:	018b      	lsls	r3, r1, #6
 8002978:	4641      	mov	r1, r8
 800297a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800297e:	4641      	mov	r1, r8
 8002980:	018a      	lsls	r2, r1, #6
 8002982:	4641      	mov	r1, r8
 8002984:	ebb2 0a01 	subs.w	sl, r2, r1
 8002988:	4649      	mov	r1, r9
 800298a:	eb63 0b01 	sbc.w	fp, r3, r1
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800299a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800299e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029a2:	4692      	mov	sl, r2
 80029a4:	469b      	mov	fp, r3
 80029a6:	4623      	mov	r3, r4
 80029a8:	eb1a 0303 	adds.w	r3, sl, r3
 80029ac:	623b      	str	r3, [r7, #32]
 80029ae:	462b      	mov	r3, r5
 80029b0:	eb4b 0303 	adc.w	r3, fp, r3
 80029b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029c2:	4629      	mov	r1, r5
 80029c4:	028b      	lsls	r3, r1, #10
 80029c6:	4621      	mov	r1, r4
 80029c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029cc:	4621      	mov	r1, r4
 80029ce:	028a      	lsls	r2, r1, #10
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029d8:	2200      	movs	r2, #0
 80029da:	673b      	str	r3, [r7, #112]	@ 0x70
 80029dc:	677a      	str	r2, [r7, #116]	@ 0x74
 80029de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80029e2:	f7fd fc0f 	bl	8000204 <__aeabi_uldivmod>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4613      	mov	r3, r2
 80029ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029f0:	4b41      	ldr	r3, [pc, #260]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	0c1b      	lsrs	r3, r3, #16
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	3301      	adds	r3, #1
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002a02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a12:	e0eb      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a14:	4b38      	ldr	r3, [pc, #224]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a20:	4b35      	ldr	r3, [pc, #212]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d06b      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a2c:	4b32      	ldr	r3, [pc, #200]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	2200      	movs	r2, #0
 8002a34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a40:	2300      	movs	r3, #0
 8002a42:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a44:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a48:	4622      	mov	r2, r4
 8002a4a:	462b      	mov	r3, r5
 8002a4c:	f04f 0000 	mov.w	r0, #0
 8002a50:	f04f 0100 	mov.w	r1, #0
 8002a54:	0159      	lsls	r1, r3, #5
 8002a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a5a:	0150      	lsls	r0, r2, #5
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4621      	mov	r1, r4
 8002a62:	1a51      	subs	r1, r2, r1
 8002a64:	61b9      	str	r1, [r7, #24]
 8002a66:	4629      	mov	r1, r5
 8002a68:	eb63 0301 	sbc.w	r3, r3, r1
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a7a:	4659      	mov	r1, fp
 8002a7c:	018b      	lsls	r3, r1, #6
 8002a7e:	4651      	mov	r1, sl
 8002a80:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a84:	4651      	mov	r1, sl
 8002a86:	018a      	lsls	r2, r1, #6
 8002a88:	4651      	mov	r1, sl
 8002a8a:	ebb2 0801 	subs.w	r8, r2, r1
 8002a8e:	4659      	mov	r1, fp
 8002a90:	eb63 0901 	sbc.w	r9, r3, r1
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aa0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aa4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aa8:	4690      	mov	r8, r2
 8002aaa:	4699      	mov	r9, r3
 8002aac:	4623      	mov	r3, r4
 8002aae:	eb18 0303 	adds.w	r3, r8, r3
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	462b      	mov	r3, r5
 8002ab6:	eb49 0303 	adc.w	r3, r9, r3
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ac8:	4629      	mov	r1, r5
 8002aca:	024b      	lsls	r3, r1, #9
 8002acc:	4621      	mov	r1, r4
 8002ace:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	024a      	lsls	r2, r1, #9
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ade:	2200      	movs	r2, #0
 8002ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ae2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ae4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ae8:	f7fd fb8c 	bl	8000204 <__aeabi_uldivmod>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4613      	mov	r3, r2
 8002af2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002af6:	e065      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x420>
 8002af8:	40023800 	.word	0x40023800
 8002afc:	00f42400 	.word	0x00f42400
 8002b00:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b04:	4b3d      	ldr	r3, [pc, #244]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x458>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	4611      	mov	r1, r2
 8002b10:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b14:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b16:	2300      	movs	r3, #0
 8002b18:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b1a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b1e:	4642      	mov	r2, r8
 8002b20:	464b      	mov	r3, r9
 8002b22:	f04f 0000 	mov.w	r0, #0
 8002b26:	f04f 0100 	mov.w	r1, #0
 8002b2a:	0159      	lsls	r1, r3, #5
 8002b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b30:	0150      	lsls	r0, r2, #5
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4641      	mov	r1, r8
 8002b38:	1a51      	subs	r1, r2, r1
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	4649      	mov	r1, r9
 8002b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b50:	4659      	mov	r1, fp
 8002b52:	018b      	lsls	r3, r1, #6
 8002b54:	4651      	mov	r1, sl
 8002b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b5a:	4651      	mov	r1, sl
 8002b5c:	018a      	lsls	r2, r1, #6
 8002b5e:	4651      	mov	r1, sl
 8002b60:	1a54      	subs	r4, r2, r1
 8002b62:	4659      	mov	r1, fp
 8002b64:	eb63 0501 	sbc.w	r5, r3, r1
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	00eb      	lsls	r3, r5, #3
 8002b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b76:	00e2      	lsls	r2, r4, #3
 8002b78:	4614      	mov	r4, r2
 8002b7a:	461d      	mov	r5, r3
 8002b7c:	4643      	mov	r3, r8
 8002b7e:	18e3      	adds	r3, r4, r3
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	464b      	mov	r3, r9
 8002b84:	eb45 0303 	adc.w	r3, r5, r3
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b96:	4629      	mov	r1, r5
 8002b98:	028b      	lsls	r3, r1, #10
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	028a      	lsls	r2, r1, #10
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bac:	2200      	movs	r2, #0
 8002bae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bb0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002bb2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002bb6:	f7fd fb25 	bl	8000204 <__aeabi_uldivmod>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x458>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	0f1b      	lsrs	r3, r3, #28
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002bd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002be2:	e003      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002be6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	37b8      	adds	r7, #184	@ 0xb8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	00f42400 	.word	0x00f42400

08002c04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e28d      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8083 	beq.w	8002d2a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c24:	4b94      	ldr	r3, [pc, #592]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d019      	beq.n	8002c64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c30:	4b91      	ldr	r3, [pc, #580]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c3c:	4b8e      	ldr	r3, [pc, #568]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c48:	d00c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4a:	4b8b      	ldr	r3, [pc, #556]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c52:	2b0c      	cmp	r3, #12
 8002c54:	d112      	bne.n	8002c7c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c56:	4b88      	ldr	r3, [pc, #544]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c62:	d10b      	bne.n	8002c7c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	4b84      	ldr	r3, [pc, #528]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d05b      	beq.n	8002d28 <HAL_RCC_OscConfig+0x124>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d157      	bne.n	8002d28 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e25a      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c84:	d106      	bne.n	8002c94 <HAL_RCC_OscConfig+0x90>
 8002c86:	4b7c      	ldr	r3, [pc, #496]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a7b      	ldr	r2, [pc, #492]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e01d      	b.n	8002cd0 <HAL_RCC_OscConfig+0xcc>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xb4>
 8002c9e:	4b76      	ldr	r3, [pc, #472]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a75      	ldr	r2, [pc, #468]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002ca4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b73      	ldr	r3, [pc, #460]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a72      	ldr	r2, [pc, #456]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e00b      	b.n	8002cd0 <HAL_RCC_OscConfig+0xcc>
 8002cb8:	4b6f      	ldr	r3, [pc, #444]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a6e      	ldr	r2, [pc, #440]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002cbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	4b6c      	ldr	r3, [pc, #432]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a6b      	ldr	r2, [pc, #428]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002cca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d013      	beq.n	8002d00 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fc20 	bl	800151c <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7fe fc1c 	bl	800151c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	@ 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e21f      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	4b61      	ldr	r3, [pc, #388]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0xdc>
 8002cfe:	e014      	b.n	8002d2a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fc0c 	bl	800151c <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fe fc08 	bl	800151c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	@ 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e20b      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1a:	4b57      	ldr	r3, [pc, #348]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x104>
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d06f      	beq.n	8002e16 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d36:	4b50      	ldr	r3, [pc, #320]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d017      	beq.n	8002d72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d42:	4b4d      	ldr	r3, [pc, #308]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d105      	bne.n	8002d5a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5a:	4b47      	ldr	r3, [pc, #284]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d62:	2b0c      	cmp	r3, #12
 8002d64:	d11c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d66:	4b44      	ldr	r3, [pc, #272]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d116      	bne.n	8002da0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d72:	4b41      	ldr	r3, [pc, #260]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_RCC_OscConfig+0x186>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d001      	beq.n	8002d8a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e1d3      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4937      	ldr	r1, [pc, #220]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9e:	e03a      	b.n	8002e16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d020      	beq.n	8002dea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da8:	4b34      	ldr	r3, [pc, #208]	@ (8002e7c <HAL_RCC_OscConfig+0x278>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f7fe fbb5 	bl	800151c <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db6:	f7fe fbb1 	bl	800151c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e1b4      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd4:	4b28      	ldr	r3, [pc, #160]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4925      	ldr	r1, [pc, #148]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	600b      	str	r3, [r1, #0]
 8002de8:	e015      	b.n	8002e16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dea:	4b24      	ldr	r3, [pc, #144]	@ (8002e7c <HAL_RCC_OscConfig+0x278>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe fb94 	bl	800151c <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df8:	f7fe fb90 	bl	800151c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e193      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d036      	beq.n	8002e90 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d016      	beq.n	8002e58 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2a:	4b15      	ldr	r3, [pc, #84]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fe fb74 	bl	800151c <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e38:	f7fe fb70 	bl	800151c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e173      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x234>
 8002e56:	e01b      	b.n	8002e90 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e58:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fb5d 	bl	800151c <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e64:	e00e      	b.n	8002e84 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e66:	f7fe fb59 	bl	800151c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d907      	bls.n	8002e84 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e15c      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	42470000 	.word	0x42470000
 8002e80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e84:	4b8a      	ldr	r3, [pc, #552]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1ea      	bne.n	8002e66 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 8097 	beq.w	8002fcc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea2:	4b83      	ldr	r3, [pc, #524]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10f      	bne.n	8002ece <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ece:	4b79      	ldr	r3, [pc, #484]	@ (80030b4 <HAL_RCC_OscConfig+0x4b0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d118      	bne.n	8002f0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eda:	4b76      	ldr	r3, [pc, #472]	@ (80030b4 <HAL_RCC_OscConfig+0x4b0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a75      	ldr	r2, [pc, #468]	@ (80030b4 <HAL_RCC_OscConfig+0x4b0>)
 8002ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee6:	f7fe fb19 	bl	800151c <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eee:	f7fe fb15 	bl	800151c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e118      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f00:	4b6c      	ldr	r3, [pc, #432]	@ (80030b4 <HAL_RCC_OscConfig+0x4b0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x31e>
 8002f14:	4b66      	ldr	r3, [pc, #408]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f18:	4a65      	ldr	r2, [pc, #404]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f20:	e01c      	b.n	8002f5c <HAL_RCC_OscConfig+0x358>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x340>
 8002f2a:	4b61      	ldr	r3, [pc, #388]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2e:	4a60      	ldr	r2, [pc, #384]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002f30:	f043 0304 	orr.w	r3, r3, #4
 8002f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f36:	4b5e      	ldr	r3, [pc, #376]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3a:	4a5d      	ldr	r2, [pc, #372]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f42:	e00b      	b.n	8002f5c <HAL_RCC_OscConfig+0x358>
 8002f44:	4b5a      	ldr	r3, [pc, #360]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f48:	4a59      	ldr	r2, [pc, #356]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002f4a:	f023 0301 	bic.w	r3, r3, #1
 8002f4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f50:	4b57      	ldr	r3, [pc, #348]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f54:	4a56      	ldr	r2, [pc, #344]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002f56:	f023 0304 	bic.w	r3, r3, #4
 8002f5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d015      	beq.n	8002f90 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fe fada 	bl	800151c <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f6c:	f7fe fad6 	bl	800151c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e0d7      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f82:	4b4b      	ldr	r3, [pc, #300]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0ee      	beq.n	8002f6c <HAL_RCC_OscConfig+0x368>
 8002f8e:	e014      	b.n	8002fba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fe fac4 	bl	800151c <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe fac0 	bl	800151c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e0c1      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fae:	4b40      	ldr	r3, [pc, #256]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1ee      	bne.n	8002f98 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d105      	bne.n	8002fcc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	4a3a      	ldr	r2, [pc, #232]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80ad 	beq.w	8003130 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fd6:	4b36      	ldr	r3, [pc, #216]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d060      	beq.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d145      	bne.n	8003076 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fea:	4b33      	ldr	r3, [pc, #204]	@ (80030b8 <HAL_RCC_OscConfig+0x4b4>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fa94 	bl	800151c <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7fe fa90 	bl	800151c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e093      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300a:	4b29      	ldr	r3, [pc, #164]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69da      	ldr	r2, [r3, #28]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003024:	019b      	lsls	r3, r3, #6
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	3b01      	subs	r3, #1
 8003030:	041b      	lsls	r3, r3, #16
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003038:	061b      	lsls	r3, r3, #24
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	071b      	lsls	r3, r3, #28
 8003042:	491b      	ldr	r1, [pc, #108]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003048:	4b1b      	ldr	r3, [pc, #108]	@ (80030b8 <HAL_RCC_OscConfig+0x4b4>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fe fa65 	bl	800151c <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003056:	f7fe fa61 	bl	800151c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e064      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003068:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x452>
 8003074:	e05c      	b.n	8003130 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003076:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <HAL_RCC_OscConfig+0x4b4>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe fa4e 	bl	800151c <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe fa4a 	bl	800151c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e04d      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003096:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <HAL_RCC_OscConfig+0x4ac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x480>
 80030a2:	e045      	b.n	8003130 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e040      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40007000 	.word	0x40007000
 80030b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030bc:	4b1f      	ldr	r3, [pc, #124]	@ (800313c <HAL_RCC_OscConfig+0x538>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d030      	beq.n	800312c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d129      	bne.n	800312c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d122      	bne.n	800312c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030ec:	4013      	ands	r3, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d119      	bne.n	800312c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	3b01      	subs	r3, #1
 8003106:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d10f      	bne.n	800312c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003116:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003118:	429a      	cmp	r2, r3
 800311a:	d107      	bne.n	800312c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800

08003140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e03f      	b.n	80031d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fe f8be 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2224      	movs	r2, #36	@ 0x24
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f829 	bl	80031dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031e0:	b0c0      	sub	sp, #256	@ 0x100
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	68d9      	ldr	r1, [r3, #12]
 80031fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	ea40 0301 	orr.w	r3, r0, r1
 8003204:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	431a      	orrs	r2, r3
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	431a      	orrs	r2, r3
 800321c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003234:	f021 010c 	bic.w	r1, r1, #12
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003242:	430b      	orrs	r3, r1
 8003244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003256:	6999      	ldr	r1, [r3, #24]
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	ea40 0301 	orr.w	r3, r0, r1
 8003262:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4b8f      	ldr	r3, [pc, #572]	@ (80034a8 <UART_SetConfig+0x2cc>)
 800326c:	429a      	cmp	r2, r3
 800326e:	d005      	beq.n	800327c <UART_SetConfig+0xa0>
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4b8d      	ldr	r3, [pc, #564]	@ (80034ac <UART_SetConfig+0x2d0>)
 8003278:	429a      	cmp	r2, r3
 800327a:	d104      	bne.n	8003286 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800327c:	f7ff fa7e 	bl	800277c <HAL_RCC_GetPCLK2Freq>
 8003280:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003284:	e003      	b.n	800328e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003286:	f7ff fa65 	bl	8002754 <HAL_RCC_GetPCLK1Freq>
 800328a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800328e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003298:	f040 810c 	bne.w	80034b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800329c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032a0:	2200      	movs	r2, #0
 80032a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80032aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80032ae:	4622      	mov	r2, r4
 80032b0:	462b      	mov	r3, r5
 80032b2:	1891      	adds	r1, r2, r2
 80032b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80032b6:	415b      	adcs	r3, r3
 80032b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032be:	4621      	mov	r1, r4
 80032c0:	eb12 0801 	adds.w	r8, r2, r1
 80032c4:	4629      	mov	r1, r5
 80032c6:	eb43 0901 	adc.w	r9, r3, r1
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032de:	4690      	mov	r8, r2
 80032e0:	4699      	mov	r9, r3
 80032e2:	4623      	mov	r3, r4
 80032e4:	eb18 0303 	adds.w	r3, r8, r3
 80032e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032ec:	462b      	mov	r3, r5
 80032ee:	eb49 0303 	adc.w	r3, r9, r3
 80032f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003302:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003306:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800330a:	460b      	mov	r3, r1
 800330c:	18db      	adds	r3, r3, r3
 800330e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003310:	4613      	mov	r3, r2
 8003312:	eb42 0303 	adc.w	r3, r2, r3
 8003316:	657b      	str	r3, [r7, #84]	@ 0x54
 8003318:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800331c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003320:	f7fc ff70 	bl	8000204 <__aeabi_uldivmod>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4b61      	ldr	r3, [pc, #388]	@ (80034b0 <UART_SetConfig+0x2d4>)
 800332a:	fba3 2302 	umull	r2, r3, r3, r2
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	011c      	lsls	r4, r3, #4
 8003332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003336:	2200      	movs	r2, #0
 8003338:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800333c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003340:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003344:	4642      	mov	r2, r8
 8003346:	464b      	mov	r3, r9
 8003348:	1891      	adds	r1, r2, r2
 800334a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800334c:	415b      	adcs	r3, r3
 800334e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003350:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003354:	4641      	mov	r1, r8
 8003356:	eb12 0a01 	adds.w	sl, r2, r1
 800335a:	4649      	mov	r1, r9
 800335c:	eb43 0b01 	adc.w	fp, r3, r1
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800336c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003374:	4692      	mov	sl, r2
 8003376:	469b      	mov	fp, r3
 8003378:	4643      	mov	r3, r8
 800337a:	eb1a 0303 	adds.w	r3, sl, r3
 800337e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003382:	464b      	mov	r3, r9
 8003384:	eb4b 0303 	adc.w	r3, fp, r3
 8003388:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003398:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800339c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80033a0:	460b      	mov	r3, r1
 80033a2:	18db      	adds	r3, r3, r3
 80033a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80033a6:	4613      	mov	r3, r2
 80033a8:	eb42 0303 	adc.w	r3, r2, r3
 80033ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80033ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80033b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80033b6:	f7fc ff25 	bl	8000204 <__aeabi_uldivmod>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4611      	mov	r1, r2
 80033c0:	4b3b      	ldr	r3, [pc, #236]	@ (80034b0 <UART_SetConfig+0x2d4>)
 80033c2:	fba3 2301 	umull	r2, r3, r3, r1
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	2264      	movs	r2, #100	@ 0x64
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	1acb      	subs	r3, r1, r3
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80033d6:	4b36      	ldr	r3, [pc, #216]	@ (80034b0 <UART_SetConfig+0x2d4>)
 80033d8:	fba3 2302 	umull	r2, r3, r3, r2
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80033e4:	441c      	add	r4, r3
 80033e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033ea:	2200      	movs	r2, #0
 80033ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033f8:	4642      	mov	r2, r8
 80033fa:	464b      	mov	r3, r9
 80033fc:	1891      	adds	r1, r2, r2
 80033fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003400:	415b      	adcs	r3, r3
 8003402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003404:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003408:	4641      	mov	r1, r8
 800340a:	1851      	adds	r1, r2, r1
 800340c:	6339      	str	r1, [r7, #48]	@ 0x30
 800340e:	4649      	mov	r1, r9
 8003410:	414b      	adcs	r3, r1
 8003412:	637b      	str	r3, [r7, #52]	@ 0x34
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003420:	4659      	mov	r1, fp
 8003422:	00cb      	lsls	r3, r1, #3
 8003424:	4651      	mov	r1, sl
 8003426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800342a:	4651      	mov	r1, sl
 800342c:	00ca      	lsls	r2, r1, #3
 800342e:	4610      	mov	r0, r2
 8003430:	4619      	mov	r1, r3
 8003432:	4603      	mov	r3, r0
 8003434:	4642      	mov	r2, r8
 8003436:	189b      	adds	r3, r3, r2
 8003438:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800343c:	464b      	mov	r3, r9
 800343e:	460a      	mov	r2, r1
 8003440:	eb42 0303 	adc.w	r3, r2, r3
 8003444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003454:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003458:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800345c:	460b      	mov	r3, r1
 800345e:	18db      	adds	r3, r3, r3
 8003460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003462:	4613      	mov	r3, r2
 8003464:	eb42 0303 	adc.w	r3, r2, r3
 8003468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800346a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800346e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003472:	f7fc fec7 	bl	8000204 <__aeabi_uldivmod>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4b0d      	ldr	r3, [pc, #52]	@ (80034b0 <UART_SetConfig+0x2d4>)
 800347c:	fba3 1302 	umull	r1, r3, r3, r2
 8003480:	095b      	lsrs	r3, r3, #5
 8003482:	2164      	movs	r1, #100	@ 0x64
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	3332      	adds	r3, #50	@ 0x32
 800348e:	4a08      	ldr	r2, [pc, #32]	@ (80034b0 <UART_SetConfig+0x2d4>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	f003 0207 	and.w	r2, r3, #7
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4422      	add	r2, r4
 80034a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034a4:	e106      	b.n	80036b4 <UART_SetConfig+0x4d8>
 80034a6:	bf00      	nop
 80034a8:	40011000 	.word	0x40011000
 80034ac:	40011400 	.word	0x40011400
 80034b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034b8:	2200      	movs	r2, #0
 80034ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80034c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80034c6:	4642      	mov	r2, r8
 80034c8:	464b      	mov	r3, r9
 80034ca:	1891      	adds	r1, r2, r2
 80034cc:	6239      	str	r1, [r7, #32]
 80034ce:	415b      	adcs	r3, r3
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034d6:	4641      	mov	r1, r8
 80034d8:	1854      	adds	r4, r2, r1
 80034da:	4649      	mov	r1, r9
 80034dc:	eb43 0501 	adc.w	r5, r3, r1
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	00eb      	lsls	r3, r5, #3
 80034ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ee:	00e2      	lsls	r2, r4, #3
 80034f0:	4614      	mov	r4, r2
 80034f2:	461d      	mov	r5, r3
 80034f4:	4643      	mov	r3, r8
 80034f6:	18e3      	adds	r3, r4, r3
 80034f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034fc:	464b      	mov	r3, r9
 80034fe:	eb45 0303 	adc.w	r3, r5, r3
 8003502:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003512:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003522:	4629      	mov	r1, r5
 8003524:	008b      	lsls	r3, r1, #2
 8003526:	4621      	mov	r1, r4
 8003528:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800352c:	4621      	mov	r1, r4
 800352e:	008a      	lsls	r2, r1, #2
 8003530:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003534:	f7fc fe66 	bl	8000204 <__aeabi_uldivmod>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4b60      	ldr	r3, [pc, #384]	@ (80036c0 <UART_SetConfig+0x4e4>)
 800353e:	fba3 2302 	umull	r2, r3, r3, r2
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	011c      	lsls	r4, r3, #4
 8003546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800354a:	2200      	movs	r2, #0
 800354c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003550:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003554:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003558:	4642      	mov	r2, r8
 800355a:	464b      	mov	r3, r9
 800355c:	1891      	adds	r1, r2, r2
 800355e:	61b9      	str	r1, [r7, #24]
 8003560:	415b      	adcs	r3, r3
 8003562:	61fb      	str	r3, [r7, #28]
 8003564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003568:	4641      	mov	r1, r8
 800356a:	1851      	adds	r1, r2, r1
 800356c:	6139      	str	r1, [r7, #16]
 800356e:	4649      	mov	r1, r9
 8003570:	414b      	adcs	r3, r1
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003580:	4659      	mov	r1, fp
 8003582:	00cb      	lsls	r3, r1, #3
 8003584:	4651      	mov	r1, sl
 8003586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800358a:	4651      	mov	r1, sl
 800358c:	00ca      	lsls	r2, r1, #3
 800358e:	4610      	mov	r0, r2
 8003590:	4619      	mov	r1, r3
 8003592:	4603      	mov	r3, r0
 8003594:	4642      	mov	r2, r8
 8003596:	189b      	adds	r3, r3, r2
 8003598:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800359c:	464b      	mov	r3, r9
 800359e:	460a      	mov	r2, r1
 80035a0:	eb42 0303 	adc.w	r3, r2, r3
 80035a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80035c0:	4649      	mov	r1, r9
 80035c2:	008b      	lsls	r3, r1, #2
 80035c4:	4641      	mov	r1, r8
 80035c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035ca:	4641      	mov	r1, r8
 80035cc:	008a      	lsls	r2, r1, #2
 80035ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035d2:	f7fc fe17 	bl	8000204 <__aeabi_uldivmod>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4611      	mov	r1, r2
 80035dc:	4b38      	ldr	r3, [pc, #224]	@ (80036c0 <UART_SetConfig+0x4e4>)
 80035de:	fba3 2301 	umull	r2, r3, r3, r1
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2264      	movs	r2, #100	@ 0x64
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	1acb      	subs	r3, r1, r3
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	3332      	adds	r3, #50	@ 0x32
 80035f0:	4a33      	ldr	r2, [pc, #204]	@ (80036c0 <UART_SetConfig+0x4e4>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035fc:	441c      	add	r4, r3
 80035fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003602:	2200      	movs	r2, #0
 8003604:	673b      	str	r3, [r7, #112]	@ 0x70
 8003606:	677a      	str	r2, [r7, #116]	@ 0x74
 8003608:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800360c:	4642      	mov	r2, r8
 800360e:	464b      	mov	r3, r9
 8003610:	1891      	adds	r1, r2, r2
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	415b      	adcs	r3, r3
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800361c:	4641      	mov	r1, r8
 800361e:	1851      	adds	r1, r2, r1
 8003620:	6039      	str	r1, [r7, #0]
 8003622:	4649      	mov	r1, r9
 8003624:	414b      	adcs	r3, r1
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003634:	4659      	mov	r1, fp
 8003636:	00cb      	lsls	r3, r1, #3
 8003638:	4651      	mov	r1, sl
 800363a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800363e:	4651      	mov	r1, sl
 8003640:	00ca      	lsls	r2, r1, #3
 8003642:	4610      	mov	r0, r2
 8003644:	4619      	mov	r1, r3
 8003646:	4603      	mov	r3, r0
 8003648:	4642      	mov	r2, r8
 800364a:	189b      	adds	r3, r3, r2
 800364c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800364e:	464b      	mov	r3, r9
 8003650:	460a      	mov	r2, r1
 8003652:	eb42 0303 	adc.w	r3, r2, r3
 8003656:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	663b      	str	r3, [r7, #96]	@ 0x60
 8003662:	667a      	str	r2, [r7, #100]	@ 0x64
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003670:	4649      	mov	r1, r9
 8003672:	008b      	lsls	r3, r1, #2
 8003674:	4641      	mov	r1, r8
 8003676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800367a:	4641      	mov	r1, r8
 800367c:	008a      	lsls	r2, r1, #2
 800367e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003682:	f7fc fdbf 	bl	8000204 <__aeabi_uldivmod>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4b0d      	ldr	r3, [pc, #52]	@ (80036c0 <UART_SetConfig+0x4e4>)
 800368c:	fba3 1302 	umull	r1, r3, r3, r2
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	2164      	movs	r1, #100	@ 0x64
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	3332      	adds	r3, #50	@ 0x32
 800369e:	4a08      	ldr	r2, [pc, #32]	@ (80036c0 <UART_SetConfig+0x4e4>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	f003 020f 	and.w	r2, r3, #15
 80036aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4422      	add	r2, r4
 80036b2:	609a      	str	r2, [r3, #8]
}
 80036b4:	bf00      	nop
 80036b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80036ba:	46bd      	mov	sp, r7
 80036bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036c0:	51eb851f 	.word	0x51eb851f

080036c4 <memset>:
 80036c4:	4402      	add	r2, r0
 80036c6:	4603      	mov	r3, r0
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d100      	bne.n	80036ce <memset+0xa>
 80036cc:	4770      	bx	lr
 80036ce:	f803 1b01 	strb.w	r1, [r3], #1
 80036d2:	e7f9      	b.n	80036c8 <memset+0x4>

080036d4 <__libc_init_array>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	4d0d      	ldr	r5, [pc, #52]	@ (800370c <__libc_init_array+0x38>)
 80036d8:	4c0d      	ldr	r4, [pc, #52]	@ (8003710 <__libc_init_array+0x3c>)
 80036da:	1b64      	subs	r4, r4, r5
 80036dc:	10a4      	asrs	r4, r4, #2
 80036de:	2600      	movs	r6, #0
 80036e0:	42a6      	cmp	r6, r4
 80036e2:	d109      	bne.n	80036f8 <__libc_init_array+0x24>
 80036e4:	4d0b      	ldr	r5, [pc, #44]	@ (8003714 <__libc_init_array+0x40>)
 80036e6:	4c0c      	ldr	r4, [pc, #48]	@ (8003718 <__libc_init_array+0x44>)
 80036e8:	f000 f818 	bl	800371c <_init>
 80036ec:	1b64      	subs	r4, r4, r5
 80036ee:	10a4      	asrs	r4, r4, #2
 80036f0:	2600      	movs	r6, #0
 80036f2:	42a6      	cmp	r6, r4
 80036f4:	d105      	bne.n	8003702 <__libc_init_array+0x2e>
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036fc:	4798      	blx	r3
 80036fe:	3601      	adds	r6, #1
 8003700:	e7ee      	b.n	80036e0 <__libc_init_array+0xc>
 8003702:	f855 3b04 	ldr.w	r3, [r5], #4
 8003706:	4798      	blx	r3
 8003708:	3601      	adds	r6, #1
 800370a:	e7f2      	b.n	80036f2 <__libc_init_array+0x1e>
 800370c:	08003eec 	.word	0x08003eec
 8003710:	08003eec 	.word	0x08003eec
 8003714:	08003eec 	.word	0x08003eec
 8003718:	08003ef0 	.word	0x08003ef0

0800371c <_init>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	bf00      	nop
 8003720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003722:	bc08      	pop	{r3}
 8003724:	469e      	mov	lr, r3
 8003726:	4770      	bx	lr

08003728 <_fini>:
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	bf00      	nop
 800372c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372e:	bc08      	pop	{r3}
 8003730:	469e      	mov	lr, r3
 8003732:	4770      	bx	lr
