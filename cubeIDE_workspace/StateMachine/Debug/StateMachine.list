
StateMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009418  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001924  080095e8  080095e8  000195e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af0c  0800af0c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800af0c  0800af0c  0001af0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af14  0800af14  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af14  0800af14  0001af14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af18  0800af18  0001af18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800af1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000204  0800b120  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  0800b120  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196c2  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000368f  00000000  00000000  000398f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0003cf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003e398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027996  00000000  00000000  0003f660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001967d  00000000  00000000  00066ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3951  00000000  00000000  00080673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163fc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006734  00000000  00000000  00164014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080095d0 	.word	0x080095d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	080095d0 	.word	0x080095d0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <_ZN13Accelerometer9getAnglesEv>:
 */

#include "accelerometer.hpp"

float* Accelerometer::getAngles()
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	static float dummyDegs[3] = {120.1, 35.4, 1.8};
	return dummyDegs;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <_ZN13Accelerometer9getAnglesEv+0x18>)
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000000 	.word	0x20000000

08000f08 <_Z7DrawGUIP7SSD130510MemorySlotfff>:
 */

#include "GUI.hpp"

void DrawGUI(SSD1305* display, MemorySlot memSlot, float refX, float refY, float refZ)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	6178      	str	r0, [r7, #20]
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	e883 0006 	stmia.w	r3, {r1, r2}
 8000f18:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f1c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f20:	ed87 1a00 	vstr	s2, [r7]
	//MEM section -> x = 0..21
	display->SetCursor(0, LINE_1_Y);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	6978      	ldr	r0, [r7, #20]
 8000f2a:	f000 fd01 	bl	8001930 <_ZN7SSD13059SetCursorEhh>
	display->WriteString("MEM", Font_7x10, White);
 8000f2e:	4b43      	ldr	r3, [pc, #268]	; (800103c <_Z7DrawGUIP7SSD130510MemorySlotfff+0x134>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	9200      	str	r2, [sp, #0]
 8000f34:	cb0c      	ldmia	r3, {r2, r3}
 8000f36:	4942      	ldr	r1, [pc, #264]	; (8001040 <_Z7DrawGUIP7SSD130510MemorySlotfff+0x138>)
 8000f38:	6978      	ldr	r0, [r7, #20]
 8000f3a:	f000 fcce 	bl	80018da <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>

	DisplayMemslot(display, memSlot.number);
 8000f3e:	7b3b      	ldrb	r3, [r7, #12]
 8000f40:	4619      	mov	r1, r3
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f000 f8b0 	bl	80010a8 <_Z14DisplayMemslotP7SSD1305h>

	DrawYline(display, 23, White);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2117      	movs	r1, #23
 8000f4c:	6978      	ldr	r0, [r7, #20]
 8000f4e:	f000 f885 	bl	800105c <_Z9DrawYlineP7SSD1305h13SSD1305_COLOR>

	//Fixed, Tracked, Angle -> x = 22...78
	display->SetCursor(25, LINE_1_Y);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2119      	movs	r1, #25
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f000 fcea 	bl	8001930 <_ZN7SSD13059SetCursorEhh>
	display->WriteString("FixAx:", Font_7x10, White);
 8000f5c:	4b37      	ldr	r3, [pc, #220]	; (800103c <_Z7DrawGUIP7SSD130510MemorySlotfff+0x134>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	9200      	str	r2, [sp, #0]
 8000f62:	cb0c      	ldmia	r3, {r2, r3}
 8000f64:	4937      	ldr	r1, [pc, #220]	; (8001044 <_Z7DrawGUIP7SSD130510MemorySlotfff+0x13c>)
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f000 fcb7 	bl	80018da <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
	display->SetCursor(25, LINE_2_Y);
 8000f6c:	220b      	movs	r2, #11
 8000f6e:	2119      	movs	r1, #25
 8000f70:	6978      	ldr	r0, [r7, #20]
 8000f72:	f000 fcdd 	bl	8001930 <_ZN7SSD13059SetCursorEhh>
	display->WriteString("Track:", Font_7x10, White);
 8000f76:	4b31      	ldr	r3, [pc, #196]	; (800103c <_Z7DrawGUIP7SSD130510MemorySlotfff+0x134>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	9200      	str	r2, [sp, #0]
 8000f7c:	cb0c      	ldmia	r3, {r2, r3}
 8000f7e:	4932      	ldr	r1, [pc, #200]	; (8001048 <_Z7DrawGUIP7SSD130510MemorySlotfff+0x140>)
 8000f80:	6978      	ldr	r0, [r7, #20]
 8000f82:	f000 fcaa 	bl	80018da <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
	display->SetCursor(25, LINE_3_Y);
 8000f86:	2216      	movs	r2, #22
 8000f88:	2119      	movs	r1, #25
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f000 fcd0 	bl	8001930 <_ZN7SSD13059SetCursorEhh>
	display->WriteString("Deg:", Font_7x10, White);
 8000f90:	4b2a      	ldr	r3, [pc, #168]	; (800103c <_Z7DrawGUIP7SSD130510MemorySlotfff+0x134>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	9200      	str	r2, [sp, #0]
 8000f96:	cb0c      	ldmia	r3, {r2, r3}
 8000f98:	492c      	ldr	r1, [pc, #176]	; (800104c <_Z7DrawGUIP7SSD130510MemorySlotfff+0x144>)
 8000f9a:	6978      	ldr	r0, [r7, #20]
 8000f9c:	f000 fc9d 	bl	80018da <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>

	DisplayFixedAx(display, memSlot.fixAx);
 8000fa0:	7b7b      	ldrb	r3, [r7, #13]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6978      	ldr	r0, [r7, #20]
 8000fa6:	f000 f89b 	bl	80010e0 <_Z14DisplayFixedAxP7SSD13054axes>
	DisplayTrackedAx(display, memSlot.trackedAx);
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	4619      	mov	r1, r3
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f000 f8c4 	bl	800113c <_Z16DisplayTrackedAxP7SSD13054axes>
	DisplaySetAngle(display, memSlot.setDegree);
 8000fb4:	8a3b      	ldrh	r3, [r7, #16]
 8000fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000fba:	4619      	mov	r1, r3
 8000fbc:	6978      	ldr	r0, [r7, #20]
 8000fbe:	f000 f8eb 	bl	8001198 <_Z15DisplaySetAngleP7SSD1305ti>

	DrawYline(display, 76, White);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	214c      	movs	r1, #76	; 0x4c
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f000 f848 	bl	800105c <_Z9DrawYlineP7SSD1305h13SSD1305_COLOR>

	//REF section -> x = 78...
	display->SetCursor(78, LINE_1_Y);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	214e      	movs	r1, #78	; 0x4e
 8000fd0:	6978      	ldr	r0, [r7, #20]
 8000fd2:	f000 fcad 	bl	8001930 <_ZN7SSD13059SetCursorEhh>
	display->WriteString("rx", Font_7x10, White);
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <_Z7DrawGUIP7SSD130510MemorySlotfff+0x134>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	9200      	str	r2, [sp, #0]
 8000fdc:	cb0c      	ldmia	r3, {r2, r3}
 8000fde:	491c      	ldr	r1, [pc, #112]	; (8001050 <_Z7DrawGUIP7SSD130510MemorySlotfff+0x148>)
 8000fe0:	6978      	ldr	r0, [r7, #20]
 8000fe2:	f000 fc7a 	bl	80018da <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
	display->SetCursor(78, LINE_2_Y);
 8000fe6:	220b      	movs	r2, #11
 8000fe8:	214e      	movs	r1, #78	; 0x4e
 8000fea:	6978      	ldr	r0, [r7, #20]
 8000fec:	f000 fca0 	bl	8001930 <_ZN7SSD13059SetCursorEhh>
	display->WriteString("ry", Font_7x10, White);
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <_Z7DrawGUIP7SSD130510MemorySlotfff+0x134>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	9200      	str	r2, [sp, #0]
 8000ff6:	cb0c      	ldmia	r3, {r2, r3}
 8000ff8:	4916      	ldr	r1, [pc, #88]	; (8001054 <_Z7DrawGUIP7SSD130510MemorySlotfff+0x14c>)
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f000 fc6d 	bl	80018da <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
	display->SetCursor(78, LINE_3_Y);
 8001000:	2216      	movs	r2, #22
 8001002:	214e      	movs	r1, #78	; 0x4e
 8001004:	6978      	ldr	r0, [r7, #20]
 8001006:	f000 fc93 	bl	8001930 <_ZN7SSD13059SetCursorEhh>
	display->WriteString("rz", Font_7x10, White);
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <_Z7DrawGUIP7SSD130510MemorySlotfff+0x134>)
 800100c:	2201      	movs	r2, #1
 800100e:	9200      	str	r2, [sp, #0]
 8001010:	cb0c      	ldmia	r3, {r2, r3}
 8001012:	4911      	ldr	r1, [pc, #68]	; (8001058 <_Z7DrawGUIP7SSD130510MemorySlotfff+0x150>)
 8001014:	6978      	ldr	r0, [r7, #20]
 8001016:	f000 fc60 	bl	80018da <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>

	DisplayRefDegs(display, refX, refY, refZ);
 800101a:	ed97 1a00 	vldr	s2, [r7]
 800101e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001022:	ed97 0a02 	vldr	s0, [r7, #8]
 8001026:	6978      	ldr	r0, [r7, #20]
 8001028:	f000 f93a 	bl	80012a0 <_Z14DisplayRefDegsP7SSD1305fff>

	//Put all to display
	display->WriteBitmapToScreen();
 800102c:	6978      	ldr	r0, [r7, #20]
 800102e:	f000 fad9 	bl	80015e4 <_ZN7SSD130519WriteBitmapToScreenEv>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000014 	.word	0x20000014
 8001040:	080095e8 	.word	0x080095e8
 8001044:	080095ec 	.word	0x080095ec
 8001048:	080095f4 	.word	0x080095f4
 800104c:	080095fc 	.word	0x080095fc
 8001050:	08009604 	.word	0x08009604
 8001054:	08009608 	.word	0x08009608
 8001058:	0800960c 	.word	0x0800960c

0800105c <_Z9DrawYlineP7SSD1305h13SSD1305_COLOR>:

void DrawYline(SSD1305* display, uint8_t x, SSD1305_COLOR color)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
 8001068:	4613      	mov	r3, r2
 800106a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < display->GetHeight(); i++)
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 faab 	bl	80015cc <_ZN7SSD13059GetHeightEv>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	4293      	cmp	r3, r2
 800107e:	bf34      	ite	cc
 8001080:	2301      	movcc	r3, #1
 8001082:	2300      	movcs	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d009      	beq.n	800109e <_Z9DrawYlineP7SSD1305h13SSD1305_COLOR+0x42>
	{
		display->DrawPixel(x, i, color);
 800108a:	78bb      	ldrb	r3, [r7, #2]
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	78f9      	ldrb	r1, [r7, #3]
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 fb34 	bl	80016fe <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR>
	for(uint8_t i = 0; i < display->GetHeight(); i++)
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	3301      	adds	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e7e8      	b.n	8001070 <_Z9DrawYlineP7SSD1305h13SSD1305_COLOR+0x14>
	}
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <_Z14DisplayMemslotP7SSD1305h>:

void DisplayMemslot(SSD1305* display, uint8_t memslot)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
	char memslotDigit = memslot + '0';
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	3330      	adds	r3, #48	; 0x30
 80010b8:	73fb      	strb	r3, [r7, #15]
	display->SetCursor(5, 12);
 80010ba:	220c      	movs	r2, #12
 80010bc:	2105      	movs	r1, #5
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 fc36 	bl	8001930 <_ZN7SSD13059SetCursorEhh>
	display->WriteChar(memslotDigit, Font_11x18, White);
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <_Z14DisplayMemslotP7SSD1305h+0x34>)
 80010c6:	7bf9      	ldrb	r1, [r7, #15]
 80010c8:	2201      	movs	r2, #1
 80010ca:	9200      	str	r2, [sp, #0]
 80010cc:	cb0c      	ldmia	r3, {r2, r3}
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 fb7f 	bl	80017d2 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR>
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000001c 	.word	0x2000001c

080010e0 <_Z14DisplayFixedAxP7SSD13054axes>:

void DisplayFixedAx(SSD1305* display, axes fixedax)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
	char axesChar;
	switch (fixedax) {
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d00c      	beq.n	800110c <_Z14DisplayFixedAxP7SSD13054axes+0x2c>
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	dc0d      	bgt.n	8001112 <_Z14DisplayFixedAxP7SSD13054axes+0x32>
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d002      	beq.n	8001100 <_Z14DisplayFixedAxP7SSD13054axes+0x20>
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d003      	beq.n	8001106 <_Z14DisplayFixedAxP7SSD13054axes+0x26>
			break;
		case z:
			axesChar = 'z';
			break;
		default:
			break;
 80010fe:	e008      	b.n	8001112 <_Z14DisplayFixedAxP7SSD13054axes+0x32>
			axesChar = 'x';
 8001100:	2378      	movs	r3, #120	; 0x78
 8001102:	73fb      	strb	r3, [r7, #15]
			break;
 8001104:	e006      	b.n	8001114 <_Z14DisplayFixedAxP7SSD13054axes+0x34>
			axesChar = 'y';
 8001106:	2379      	movs	r3, #121	; 0x79
 8001108:	73fb      	strb	r3, [r7, #15]
			break;
 800110a:	e003      	b.n	8001114 <_Z14DisplayFixedAxP7SSD13054axes+0x34>
			axesChar = 'z';
 800110c:	237a      	movs	r3, #122	; 0x7a
 800110e:	73fb      	strb	r3, [r7, #15]
			break;
 8001110:	e000      	b.n	8001114 <_Z14DisplayFixedAxP7SSD13054axes+0x34>
			break;
 8001112:	bf00      	nop
	}

	display->SetCursor(67, LINE_1_Y);
 8001114:	2200      	movs	r2, #0
 8001116:	2143      	movs	r1, #67	; 0x43
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 fc09 	bl	8001930 <_ZN7SSD13059SetCursorEhh>
	display->WriteChar(axesChar, Font_7x10, White);
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <_Z14DisplayFixedAxP7SSD13054axes+0x58>)
 8001120:	7bf9      	ldrb	r1, [r7, #15]
 8001122:	2201      	movs	r2, #1
 8001124:	9200      	str	r2, [sp, #0]
 8001126:	cb0c      	ldmia	r3, {r2, r3}
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 fb52 	bl	80017d2 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000014 	.word	0x20000014

0800113c <_Z16DisplayTrackedAxP7SSD13054axes>:

void DisplayTrackedAx(SSD1305* display, axes trackedax)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af02      	add	r7, sp, #8
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
	char axesChar;
	switch (trackedax) {
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d00c      	beq.n	8001168 <_Z16DisplayTrackedAxP7SSD13054axes+0x2c>
 800114e:	2b02      	cmp	r3, #2
 8001150:	dc0d      	bgt.n	800116e <_Z16DisplayTrackedAxP7SSD13054axes+0x32>
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <_Z16DisplayTrackedAxP7SSD13054axes+0x20>
 8001156:	2b01      	cmp	r3, #1
 8001158:	d003      	beq.n	8001162 <_Z16DisplayTrackedAxP7SSD13054axes+0x26>
			break;
		case z:
			axesChar = 'z';
			break;
		default:
			break;
 800115a:	e008      	b.n	800116e <_Z16DisplayTrackedAxP7SSD13054axes+0x32>
			axesChar = 'x';
 800115c:	2378      	movs	r3, #120	; 0x78
 800115e:	73fb      	strb	r3, [r7, #15]
			break;
 8001160:	e006      	b.n	8001170 <_Z16DisplayTrackedAxP7SSD13054axes+0x34>
			axesChar = 'y';
 8001162:	2379      	movs	r3, #121	; 0x79
 8001164:	73fb      	strb	r3, [r7, #15]
			break;
 8001166:	e003      	b.n	8001170 <_Z16DisplayTrackedAxP7SSD13054axes+0x34>
			axesChar = 'z';
 8001168:	237a      	movs	r3, #122	; 0x7a
 800116a:	73fb      	strb	r3, [r7, #15]
			break;
 800116c:	e000      	b.n	8001170 <_Z16DisplayTrackedAxP7SSD13054axes+0x34>
			break;
 800116e:	bf00      	nop
	}

	display->SetCursor(67, LINE_2_Y);
 8001170:	220b      	movs	r2, #11
 8001172:	2143      	movs	r1, #67	; 0x43
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 fbdb 	bl	8001930 <_ZN7SSD13059SetCursorEhh>
	display->WriteChar(axesChar, Font_7x10, White);
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <_Z16DisplayTrackedAxP7SSD13054axes+0x58>)
 800117c:	7bf9      	ldrb	r1, [r7, #15]
 800117e:	2201      	movs	r2, #1
 8001180:	9200      	str	r2, [sp, #0]
 8001182:	cb0c      	ldmia	r3, {r2, r3}
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 fb24 	bl	80017d2 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR>
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000014 	.word	0x20000014

08001198 <_Z15DisplaySetAngleP7SSD1305ti>:

void DisplaySetAngle(SSD1305* display, uint16_t setdeg, int selectedDigit)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af02      	add	r7, sp, #8
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	460b      	mov	r3, r1
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	817b      	strh	r3, [r7, #10]
	char digits[3];

    digits[0] = ((setdeg/100)%10) + '0';
 80011a6:	897b      	ldrh	r3, [r7, #10]
 80011a8:	4a3a      	ldr	r2, [pc, #232]	; (8001294 <_Z15DisplaySetAngleP7SSD1305ti+0xfc>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b39      	ldr	r3, [pc, #228]	; (8001298 <_Z15DisplaySetAngleP7SSD1305ti+0x100>)
 80011b4:	fba3 1302 	umull	r1, r3, r3, r2
 80011b8:	08d9      	lsrs	r1, r3, #3
 80011ba:	460b      	mov	r3, r1
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	3330      	adds	r3, #48	; 0x30
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	763b      	strb	r3, [r7, #24]
    digits[1] = ((setdeg/10)%10) + '0';
 80011ce:	897b      	ldrh	r3, [r7, #10]
 80011d0:	4a31      	ldr	r2, [pc, #196]	; (8001298 <_Z15DisplaySetAngleP7SSD1305ti+0x100>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	08db      	lsrs	r3, r3, #3
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <_Z15DisplaySetAngleP7SSD1305ti+0x100>)
 80011dc:	fba3 1302 	umull	r1, r3, r3, r2
 80011e0:	08d9      	lsrs	r1, r3, #3
 80011e2:	460b      	mov	r3, r1
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	3330      	adds	r3, #48	; 0x30
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	767b      	strb	r3, [r7, #25]
    digits[2] = (setdeg%10) + '0';
 80011f6:	897a      	ldrh	r2, [r7, #10]
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <_Z15DisplaySetAngleP7SSD1305ti+0x100>)
 80011fa:	fba3 1302 	umull	r1, r3, r3, r2
 80011fe:	08d9      	lsrs	r1, r3, #3
 8001200:	460b      	mov	r3, r1
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	b29b      	uxth	r3, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	3330      	adds	r3, #48	; 0x30
 8001210:	b2db      	uxtb	r3, r3
 8001212:	76bb      	strb	r3, [r7, #26]

    FontDef font = Font_7x10;
 8001214:	4a21      	ldr	r2, [pc, #132]	; (800129c <_Z15DisplaySetAngleP7SSD1305ti+0x104>)
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800121e:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i = 0; i<3; i++)
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	2b02      	cmp	r3, #2
 800122a:	dc2f      	bgt.n	800128c <_Z15DisplaySetAngleP7SSD1305ti+0xf4>
	{
	  display->SetCursor(53 + i*font.FontWidth, LINE_3_Y);
 800122c:	7c3a      	ldrb	r2, [r7, #16]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	fb12 f303 	smulbb	r3, r2, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	3335      	adds	r3, #53	; 0x35
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2216      	movs	r2, #22
 800123e:	4619      	mov	r1, r3
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f000 fb75 	bl	8001930 <_ZN7SSD13059SetCursorEhh>
	  if(i == selectedDigit)
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	429a      	cmp	r2, r3
 800124c:	d10d      	bne.n	800126a <_Z15DisplaySetAngleP7SSD1305ti+0xd2>
	  {
		  display->WriteChar(digits[i], font, Black);
 800124e:	f107 0218 	add.w	r2, r7, #24
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	4413      	add	r3, r2
 8001256:	7819      	ldrb	r1, [r3, #0]
 8001258:	2300      	movs	r3, #0
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	cb0c      	ldmia	r3, {r2, r3}
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f000 fab5 	bl	80017d2 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR>
 8001268:	e00c      	b.n	8001284 <_Z15DisplaySetAngleP7SSD1305ti+0xec>
	  }
	  else
	  {
		  display->WriteChar(digits[i], font, White);
 800126a:	f107 0218 	add.w	r2, r7, #24
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	4413      	add	r3, r2
 8001272:	7819      	ldrb	r1, [r3, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	cb0c      	ldmia	r3, {r2, r3}
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f000 faa7 	bl	80017d2 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR>
	for(int i = 0; i<3; i++)
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	3301      	adds	r3, #1
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	e7cc      	b.n	8001226 <_Z15DisplaySetAngleP7SSD1305ti+0x8e>
	  }
	}
}
 800128c:	bf00      	nop
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	51eb851f 	.word	0x51eb851f
 8001298:	cccccccd 	.word	0xcccccccd
 800129c:	20000014 	.word	0x20000014

080012a0 <_Z14DisplayRefDegsP7SSD1305fff>:
	  }
	}
}

void DisplayRefDegs(SSD1305* display, float refX, float refY, float refZ)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80012ac:	edc7 0a01 	vstr	s1, [r7, #4]
 80012b0:	ed87 1a00 	vstr	s2, [r7]
	char refDegStr[6];
	snprintf(refDegStr, sizeof(refDegStr), "%05.1f", refX);
 80012b4:	68b8      	ldr	r0, [r7, #8]
 80012b6:	f7ff f967 	bl	8000588 <__aeabi_f2d>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	f107 0010 	add.w	r0, r7, #16
 80012c2:	e9cd 2300 	strd	r2, r3, [sp]
 80012c6:	4a26      	ldr	r2, [pc, #152]	; (8001360 <_Z14DisplayRefDegsP7SSD1305fff+0xc0>)
 80012c8:	2106      	movs	r1, #6
 80012ca:	f005 ff41 	bl	8007150 <sniprintf>
	display->SetCursor(93, LINE_1_Y);
 80012ce:	2200      	movs	r2, #0
 80012d0:	215d      	movs	r1, #93	; 0x5d
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 fb2c 	bl	8001930 <_ZN7SSD13059SetCursorEhh>
	display->WriteString(refDegStr, Font_7x10, White);
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <_Z14DisplayRefDegsP7SSD1305fff+0xc4>)
 80012da:	f107 0110 	add.w	r1, r7, #16
 80012de:	2201      	movs	r2, #1
 80012e0:	9200      	str	r2, [sp, #0]
 80012e2:	cb0c      	ldmia	r3, {r2, r3}
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f000 faf8 	bl	80018da <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>

	snprintf(refDegStr, sizeof(refDegStr), "%05.1f", refY);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff f94c 	bl	8000588 <__aeabi_f2d>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	f107 0010 	add.w	r0, r7, #16
 80012f8:	e9cd 2300 	strd	r2, r3, [sp]
 80012fc:	4a18      	ldr	r2, [pc, #96]	; (8001360 <_Z14DisplayRefDegsP7SSD1305fff+0xc0>)
 80012fe:	2106      	movs	r1, #6
 8001300:	f005 ff26 	bl	8007150 <sniprintf>
	display->SetCursor(93, LINE_2_Y);
 8001304:	220b      	movs	r2, #11
 8001306:	215d      	movs	r1, #93	; 0x5d
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f000 fb11 	bl	8001930 <_ZN7SSD13059SetCursorEhh>
	display->WriteString(refDegStr, Font_7x10, White);
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <_Z14DisplayRefDegsP7SSD1305fff+0xc4>)
 8001310:	f107 0110 	add.w	r1, r7, #16
 8001314:	2201      	movs	r2, #1
 8001316:	9200      	str	r2, [sp, #0]
 8001318:	cb0c      	ldmia	r3, {r2, r3}
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 fadd 	bl	80018da <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>

	snprintf(refDegStr, sizeof(refDegStr), "%05.1f", refZ);
 8001320:	6838      	ldr	r0, [r7, #0]
 8001322:	f7ff f931 	bl	8000588 <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	f107 0010 	add.w	r0, r7, #16
 800132e:	e9cd 2300 	strd	r2, r3, [sp]
 8001332:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <_Z14DisplayRefDegsP7SSD1305fff+0xc0>)
 8001334:	2106      	movs	r1, #6
 8001336:	f005 ff0b 	bl	8007150 <sniprintf>
	display->SetCursor(93, LINE_3_Y);
 800133a:	2216      	movs	r2, #22
 800133c:	215d      	movs	r1, #93	; 0x5d
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f000 faf6 	bl	8001930 <_ZN7SSD13059SetCursorEhh>
	display->WriteString(refDegStr, Font_7x10, White);
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <_Z14DisplayRefDegsP7SSD1305fff+0xc4>)
 8001346:	f107 0110 	add.w	r1, r7, #16
 800134a:	2201      	movs	r2, #1
 800134c:	9200      	str	r2, [sp, #0]
 800134e:	cb0c      	ldmia	r3, {r2, r3}
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f000 fac2 	bl	80018da <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	08009610 	.word	0x08009610
 8001364:	20000014 	.word	0x20000014

08001368 <_Z12numpadEnablev>:
uint16_t* ptr_adc_written_buff = &adc_buff_written;
uint16_t* ptr_adc_read_buff = &adc_buff_read;


HAL_StatusTypeDef numpadEnable()
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Start_IT( &dmaCyclerTimer );
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <_Z12numpadEnablev+0x10>)
 800136e:	f004 faff 	bl	8005970 <HAL_TIM_Base_Start_IT>
 8001372:	4603      	mov	r3, r0

}
 8001374:	4618      	mov	r0, r3
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000320 	.word	0x20000320

0800137c <HAL_TIM_PeriodElapsedCallback>:
	return HAL_TIM_Base_Stop_IT(&dmaCyclerTimer);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	if (htim == &dmaCyclerTimer)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d110      	bne.n	80013ae <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		uint16_t* tmp = ptr_adc_read_buff;
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]
		ptr_adc_read_buff = ptr_adc_written_buff;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a09      	ldr	r2, [pc, #36]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001398:	6013      	str	r3, [r2, #0]
		ptr_adc_written_buff = tmp;
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6013      	str	r3, [r2, #0]

		HAL_ADC_Start_DMA(&configedADC, (uint32_t*)ptr_adc_written_buff, 1);
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2201      	movs	r2, #1
 80013a6:	4619      	mov	r1, r3
 80013a8:	4806      	ldr	r0, [pc, #24]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80013aa:	f001 fdf9 	bl	8002fa0 <HAL_ADC_Start_DMA>
	}

}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000320 	.word	0x20000320
 80013bc:	20000010 	.word	0x20000010
 80013c0:	2000000c 	.word	0x2000000c
 80013c4:	20000224 	.word	0x20000224

080013c8 <_Z14adcValue2Digitv>:

uint8_t adcValue2Digit()
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
	if(adc_buff_read > 4000)
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <_Z14adcValue2Digitv+0x3c>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80013d4:	d901      	bls.n	80013da <_Z14adcValue2Digitv+0x12>
	{
		return 3;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e00e      	b.n	80013f8 <_Z14adcValue2Digitv+0x30>
	}
	else if(adc_buff_read > 2000)
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <_Z14adcValue2Digitv+0x3c>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013e2:	d901      	bls.n	80013e8 <_Z14adcValue2Digitv+0x20>
	{
		return 2;
 80013e4:	2302      	movs	r3, #2
 80013e6:	e007      	b.n	80013f8 <_Z14adcValue2Digitv+0x30>
	}
	else if(adc_buff_read > 1000)
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <_Z14adcValue2Digitv+0x3c>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013f0:	d901      	bls.n	80013f6 <_Z14adcValue2Digitv+0x2e>
	{
		return 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <_Z14adcValue2Digitv+0x30>
	}

	return 10; //10 is not a numbert on the numpad therefore used as default wrong value
 80013f6:	230a      	movs	r3, #10
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000222 	.word	0x20000222

08001408 <_ZN7SSD1305C1EP17I2C_HandleTypeDefhhh>:
 *      Author: SNA1BP
 */

#include "SSD1305.hpp"

SSD1305::SSD1305(
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	4611      	mov	r1, r2
 8001414:	461a      	mov	r2, r3
 8001416:	460b      	mov	r3, r1
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	4613      	mov	r3, r2
 800141c:	71bb      	strb	r3, [r7, #6]
		I2C_HandleTypeDef* hi2c_p,
		uint8_t address_p,
		uint8_t width_p,
		uint8_t height_p)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2204      	movs	r2, #4
 8001422:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
{
	this->hi2c = hi2c_p;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	601a      	str	r2, [r3, #0]
	this->address = address_p;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	79fa      	ldrb	r2, [r7, #7]
 8001430:	711a      	strb	r2, [r3, #4]
	this->width = width_p;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	79ba      	ldrb	r2, [r7, #6]
 8001436:	715a      	strb	r2, [r3, #5]
	this->height = height_p;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	7e3a      	ldrb	r2, [r7, #24]
 800143c:	719a      	strb	r2, [r3, #6]
}
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_ZN7SSD13054InitEv>:

bool SSD1305::Init()
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af02      	add	r7, sp, #8
 8001452:	6078      	str	r0, [r7, #4]


    int status = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]

	status += SetDisplayON_OFF(DisplayOffSleepMode);
 8001458:	21ae      	movs	r1, #174	; 0xae
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 fbb3 	bl	8001bc6 <_ZN7SSD130516SetDisplayON_OFFE11DisplayMode>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
	status += SetMultiplexRatio(height-1);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	799b      	ldrb	r3, [r3, #6]
 800146e:	3b01      	subs	r3, #1
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4619      	mov	r1, r3
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 fb8c 	bl	8001b92 <_ZN7SSD130517SetMultiplexRatioEh>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
	status += SetDisplayOffset(0);
 8001484:	2100      	movs	r1, #0
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 fbc1 	bl	8001c0e <_ZN7SSD130516SetDisplayOffsetEh>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4413      	add	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
	status += SetDisplayStartLine(0);
 8001496:	2100      	movs	r1, #0
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 fada 	bl	8001a52 <_ZN7SSD130519SetDisplayStartLineEh>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4413      	add	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]
	status += SetColorAndPowerMode(monochromeMode, normalPowerMode);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 fbc8 	bl	8001c42 <_ZN7SSD130520SetColorAndPowerModeE9ColorMode9PowerMode>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4413      	add	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
	status += SetMemoryAddressingMode(horizontal);
 80014bc:	2100      	movs	r1, #0
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 fa6a 	bl	8001998 <_ZN7SSD130523SetMemoryAddressingModeE20MemoryAddressingMode>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
	status += SetSegmentReMap(columnAddress131toSEG0);
 80014ce:	2101      	movs	r1, #1
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 fb25 	bl	8001b20 <_ZN7SSD130515SetSegmentReMapE12SegmentRemap>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4413      	add	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
	status += SetLUT(0x3F, 0x3F, 0x3F, 0x3F);
 80014e0:	233f      	movs	r3, #63	; 0x3f
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	233f      	movs	r3, #63	; 0x3f
 80014e6:	223f      	movs	r2, #63	; 0x3f
 80014e8:	213f      	movs	r1, #63	; 0x3f
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 facb 	bl	8001a86 <_ZN7SSD13056SetLUTEhhhh>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
	status += SetPrechargePeriod(13, 2);
 80014fa:	2202      	movs	r2, #2
 80014fc:	210d      	movs	r1, #13
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 fbbd 	bl	8001c7e <_ZN7SSD130518SetPrechargePeriodEhh>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
	status += SetDisplayOffset(0);
 800150e:	2100      	movs	r1, #0
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fb7c 	bl	8001c0e <_ZN7SSD130516SetDisplayOffsetEh>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4413      	add	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
	status += SetComOutputScanDirection(remappedMode);
 8001520:	21c8      	movs	r1, #200	; 0xc8
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 fb61 	bl	8001bea <_ZN7SSD130525SetComOutputScanDirectionE22ComOutputScanDirection>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
	status += SetNormalInverse(normal);
 8001532:	21a6      	movs	r1, #166	; 0xa6
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 fb1a 	bl	8001b6e <_ZN7SSD130516SetNormalInverseE18DisplayInverseMode>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4413      	add	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]

    status += SetColumnAddress(v_offset, (width - 1) + v_offset);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 1211 	ldrb.w	r1, [r3, #529]	; 0x211
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	795a      	ldrb	r2, [r3, #5]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001554:	4413      	add	r3, r2
 8001556:	b2db      	uxtb	r3, r3
 8001558:	3b01      	subs	r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fa2f 	bl	80019c2 <_ZN7SSD130516SetColumnAddressEhh>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
	status += SetPageAddress(0, 3);
 800156e:	2203      	movs	r2, #3
 8001570:	2100      	movs	r1, #0
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 fa49 	bl	8001a0a <_ZN7SSD130514SetPageAddressEhh>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]

	status += Fill(Black);
 8001582:	2100      	movs	r1, #0
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f85f 	bl	8001648 <_ZN7SSD13054FillE13SSD1305_COLOR>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4413      	add	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]

    status += SetDisplayON_OFF(DisplayOnNormalMode);
 8001594:	21af      	movs	r1, #175	; 0xaf
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fb15 	bl	8001bc6 <_ZN7SSD130516SetDisplayON_OFFE11DisplayMode>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
    status += EntireDisplayON(ResumeToRAMContent);
 80015a6:	21a4      	movs	r1, #164	; 0xa4
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 face 	bl	8001b4a <_ZN7SSD130515EntireDisplayONE13DisplayONMode>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <_ZN7SSD13054InitEv+0x176>
        return false;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <_ZN7SSD13054InitEv+0x178>
    }

    return true;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_ZN7SSD13059GetHeightEv>:

uint8_t SSD1305::GetHeight(){return height;}
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	799b      	ldrb	r3, [r3, #6]
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_ZN7SSD130519WriteBitmapToScreenEv>:
uint8_t SSD1305::GetWidth(){return width;}

HAL_StatusTypeDef SSD1305::WriteBitmapToScreen()
{
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	size_t size = sizeof(bitmapBuffer);
 80015ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f0:	60fb      	str	r3, [r7, #12]

    status =  SetMemoryAddressingMode(horizontal);
 80015f2:	2100      	movs	r1, #0
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f9cf 	bl	8001998 <_ZN7SSD130523SetMemoryAddressingModeE20MemoryAddressingMode>
 80015fa:	4603      	mov	r3, r0
 80015fc:	72fb      	strb	r3, [r7, #11]

    if (status != HAL_OK)
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <_ZN7SSD130519WriteBitmapToScreenEv+0x24>
    {
    	return status;
 8001604:	7afb      	ldrb	r3, [r7, #11]
 8001606:	e01b      	b.n	8001640 <_ZN7SSD130519WriteBitmapToScreenEv+0x5c>
    }
    else
    {
		return HAL_I2C_Mem_Write(hi2c, address<<1, DATA_ADDRESS, 1, bitmapBuffer, size, size*10);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681c      	ldr	r4, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	791b      	ldrb	r3, [r3, #4]
 8001610:	b29b      	uxth	r3, r3
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	b29d      	uxth	r5, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f103 0111 	add.w	r1, r3, #17
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	b298      	uxth	r0, r3
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	9001      	str	r0, [sp, #4]
 800162e:	9100      	str	r1, [sp, #0]
 8001630:	2301      	movs	r3, #1
 8001632:	2240      	movs	r2, #64	; 0x40
 8001634:	4629      	mov	r1, r5
 8001636:	4620      	mov	r0, r4
 8001638:	f003 f84a 	bl	80046d0 <HAL_I2C_Mem_Write>
 800163c:	4603      	mov	r3, r0
 800163e:	bf00      	nop
    }
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bdb0      	pop	{r4, r5, r7, pc}

08001648 <_ZN7SSD13054FillE13SSD1305_COLOR>:
		bitmapBuffer[i] = data;
	}
}

HAL_StatusTypeDef SSD1305::Fill(SSD1305_COLOR color_p)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af04      	add	r7, sp, #16
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;
	status = EnterReadModifyWrite();
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 fb3a 	bl	8001cce <_ZN7SSD130520EnterReadModifyWriteEv>
 800165a:	4603      	mov	r3, r0
 800165c:	72fb      	strb	r3, [r7, #11]

    if (status != HAL_OK)
 800165e:	7afb      	ldrb	r3, [r7, #11]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <_ZN7SSD13054FillE13SSD1305_COLOR+0x20>
    {
    	return status;
 8001664:	7afb      	ldrb	r3, [r7, #11]
 8001666:	e046      	b.n	80016f6 <_ZN7SSD13054FillE13SSD1305_COLOR+0xae>
    }
    else
    {
		uint8_t data = (color_p == Black) ? 0x00 : 0xFF;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <_ZN7SSD13054FillE13SSD1305_COLOR+0x2a>
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <_ZN7SSD13054FillE13SSD1305_COLOR+0x2c>
 8001672:	23ff      	movs	r3, #255	; 0xff
 8001674:	72bb      	strb	r3, [r7, #10]

		for(int i = 0; i<(width * height) / 8; i++)
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	795b      	ldrb	r3, [r3, #5]
 800167e:	461a      	mov	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	799b      	ldrb	r3, [r3, #6]
 8001684:	fb02 f303 	mul.w	r3, r2, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	da00      	bge.n	800168e <_ZN7SSD13054FillE13SSD1305_COLOR+0x46>
 800168c:	3307      	adds	r3, #7
 800168e:	10db      	asrs	r3, r3, #3
 8001690:	461a      	mov	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4293      	cmp	r3, r2
 8001696:	da23      	bge.n	80016e0 <_ZN7SSD13054FillE13SSD1305_COLOR+0x98>
		{
			bitmapBuffer[i] = data;
 8001698:	7ab9      	ldrb	r1, [r7, #10]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	3311      	adds	r3, #17
 80016a2:	460a      	mov	r2, r1
 80016a4:	701a      	strb	r2, [r3, #0]
			status = HAL_I2C_Mem_Write(hi2c, address<<1, DATA_ADDRESS, 1, &data, 1, 10);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	791b      	ldrb	r3, [r3, #4]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	b299      	uxth	r1, r3
 80016b4:	230a      	movs	r3, #10
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	2301      	movs	r3, #1
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	f107 030a 	add.w	r3, r7, #10
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	2240      	movs	r2, #64	; 0x40
 80016c6:	f003 f803 	bl	80046d0 <HAL_I2C_Mem_Write>
 80016ca:	4603      	mov	r3, r0
 80016cc:	72fb      	strb	r3, [r7, #11]
		    if (status != HAL_OK)
 80016ce:	7afb      	ldrb	r3, [r7, #11]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <_ZN7SSD13054FillE13SSD1305_COLOR+0x90>
		    {
		    	return status;
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	e00e      	b.n	80016f6 <_ZN7SSD13054FillE13SSD1305_COLOR+0xae>
		for(int i = 0; i<(width * height) / 8; i++)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3301      	adds	r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	e7cc      	b.n	800167a <_ZN7SSD13054FillE13SSD1305_COLOR+0x32>
		    }
		}
    }

	status = ExitReadModifyWrite();
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 fb04 	bl	8001cee <_ZN7SSD130519ExitReadModifyWriteEv>
 80016e6:	4603      	mov	r3, r0
 80016e8:	72fb      	strb	r3, [r7, #11]

    if (status != HAL_OK)
 80016ea:	7afb      	ldrb	r3, [r7, #11]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <_ZN7SSD13054FillE13SSD1305_COLOR+0xac>
    {
    	return status;
 80016f0:	7afb      	ldrb	r3, [r7, #11]
 80016f2:	e000      	b.n	80016f6 <_ZN7SSD13054FillE13SSD1305_COLOR+0xae>
    }
	return status;
 80016f4:	7afb      	ldrb	r3, [r7, #11]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR>:

//this method is based on the method void ssd1306_DrawPixel
bool SSD1305::DrawPixel(uint8_t x, uint8_t y, SSD1305_COLOR color_p)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	4608      	mov	r0, r1
 8001708:	4611      	mov	r1, r2
 800170a:	461a      	mov	r2, r3
 800170c:	4603      	mov	r3, r0
 800170e:	70fb      	strb	r3, [r7, #3]
 8001710:	460b      	mov	r3, r1
 8001712:	70bb      	strb	r3, [r7, #2]
 8001714:	4613      	mov	r3, r2
 8001716:	707b      	strb	r3, [r7, #1]
	if (x >= width || y >= height)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	795b      	ldrb	r3, [r3, #5]
 800171c:	78fa      	ldrb	r2, [r7, #3]
 800171e:	429a      	cmp	r2, r3
 8001720:	d204      	bcs.n	800172c <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR+0x2e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	799b      	ldrb	r3, [r3, #6]
 8001726:	78ba      	ldrb	r2, [r7, #2]
 8001728:	429a      	cmp	r2, r3
 800172a:	d301      	bcc.n	8001730 <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR+0x32>
	{
		// Don't write outside the buffer
		return 0;
 800172c:	2300      	movs	r3, #0
 800172e:	e04a      	b.n	80017c6 <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR+0xc8>
	}

	// Draw in the correct color
	if (color_p == White)
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d122      	bne.n	800177c <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR+0x7e>
	{
		bitmapBuffer[x + (y / 8) * width] |= 1 << (y % 8);
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	78bb      	ldrb	r3, [r7, #2]
 800173a:	08db      	lsrs	r3, r3, #3
 800173c:	b2d8      	uxtb	r0, r3
 800173e:	4601      	mov	r1, r0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	795b      	ldrb	r3, [r3, #5]
 8001744:	fb01 f303 	mul.w	r3, r1, r3
 8001748:	4413      	add	r3, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	7c5b      	ldrb	r3, [r3, #17]
 8001750:	b25a      	sxtb	r2, r3
 8001752:	78bb      	ldrb	r3, [r7, #2]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	2101      	movs	r1, #1
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	b25b      	sxtb	r3, r3
 8001760:	4313      	orrs	r3, r2
 8001762:	b259      	sxtb	r1, r3
 8001764:	78fa      	ldrb	r2, [r7, #3]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	795b      	ldrb	r3, [r3, #5]
 800176a:	fb00 f303 	mul.w	r3, r0, r3
 800176e:	4413      	add	r3, r2
 8001770:	b2c9      	uxtb	r1, r1
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	460a      	mov	r2, r1
 8001778:	745a      	strb	r2, [r3, #17]
 800177a:	e023      	b.n	80017c4 <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR+0xc6>
	}
	else
	{
		bitmapBuffer[x + (y / 8) * width] &= ~(1 << (y % 8));
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	78bb      	ldrb	r3, [r7, #2]
 8001780:	08db      	lsrs	r3, r3, #3
 8001782:	b2d8      	uxtb	r0, r3
 8001784:	4601      	mov	r1, r0
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	795b      	ldrb	r3, [r3, #5]
 800178a:	fb01 f303 	mul.w	r3, r1, r3
 800178e:	4413      	add	r3, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	7c5b      	ldrb	r3, [r3, #17]
 8001796:	b25a      	sxtb	r2, r3
 8001798:	78bb      	ldrb	r3, [r7, #2]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	4013      	ands	r3, r2
 80017ac:	b259      	sxtb	r1, r3
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	795b      	ldrb	r3, [r3, #5]
 80017b4:	fb00 f303 	mul.w	r3, r0, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	b2c9      	uxtb	r1, r1
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	4413      	add	r3, r2
 80017c0:	460a      	mov	r2, r1
 80017c2:	745a      	strb	r2, [r3, #17]
	}

	return 1;
 80017c4:	2301      	movs	r3, #1
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR>:

//this method is based on the method ssd1306_WriteChar
char SSD1305::WriteChar(char ch, FontDef Font, SSD1305_COLOR color)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b088      	sub	sp, #32
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	4608      	mov	r0, r1
 80017dc:	4639      	mov	r1, r7
 80017de:	e881 000c 	stmia.w	r1, {r2, r3}
 80017e2:	4603      	mov	r3, r0
 80017e4:	72fb      	strb	r3, [r7, #11]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (width < (currentX + Font.FontWidth) ||
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	795b      	ldrb	r3, [r3, #5]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	891b      	ldrh	r3, [r3, #8]
 80017f0:	4619      	mov	r1, r3
 80017f2:	783b      	ldrb	r3, [r7, #0]
 80017f4:	440b      	add	r3, r1
 80017f6:	429a      	cmp	r2, r3
 80017f8:	db09      	blt.n	800180e <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0x3c>
        height < (currentY + Font.FontHeight))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	799b      	ldrb	r3, [r3, #6]
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	895b      	ldrh	r3, [r3, #10]
 8001804:	4619      	mov	r1, r3
 8001806:	787b      	ldrb	r3, [r7, #1]
 8001808:	440b      	add	r3, r1
    if (width < (currentX + Font.FontWidth) ||
 800180a:	429a      	cmp	r2, r3
 800180c:	da01      	bge.n	8001812 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0x40>
    {
        // Not enough space on current line
        return 0;
 800180e:	2300      	movs	r3, #0
 8001810:	e05f      	b.n	80018d2 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0x100>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	787b      	ldrb	r3, [r7, #1]
 8001818:	461a      	mov	r2, r3
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	4293      	cmp	r3, r2
 800181e:	d24f      	bcs.n	80018c0 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0xee>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	7afb      	ldrb	r3, [r7, #11]
 8001824:	3b20      	subs	r3, #32
 8001826:	7879      	ldrb	r1, [r7, #1]
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4619      	mov	r1, r3
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	440b      	add	r3, r1
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
 800183e:	783b      	ldrb	r3, [r7, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4293      	cmp	r3, r2
 8001846:	d237      	bcs.n	80018b8 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0xe6>
        {
            if ((b << j) & 0x8000)
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0xae>
            {
            	DrawPixel(currentX + j, (currentY + i), color);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	891b      	ldrh	r3, [r3, #8]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4413      	add	r3, r2
 8001864:	b2d9      	uxtb	r1, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	895b      	ldrh	r3, [r3, #10]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4413      	add	r3, r2
 8001872:	b2da      	uxtb	r2, r3
 8001874:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f7ff ff40 	bl	80016fe <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR>
 800187e:	e017      	b.n	80018b0 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0xde>
            }
            else
            {
            	DrawPixel(currentX + j, (currentY + i), (SSD1305_COLOR)!color);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	891b      	ldrh	r3, [r3, #8]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4413      	add	r3, r2
 800188c:	b2d9      	uxtb	r1, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	895b      	ldrh	r3, [r3, #10]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4413      	add	r3, r2
 800189a:	b2da      	uxtb	r2, r3
 800189c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf0c      	ite	eq
 80018a4:	2301      	moveq	r3, #1
 80018a6:	2300      	movne	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f7ff ff27 	bl	80016fe <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR>
        for (j = 0; j < Font.FontWidth; j++)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	3301      	adds	r3, #1
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	e7c2      	b.n	800183e <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0x6c>
    for (i = 0; i < Font.FontHeight; i++)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	3301      	adds	r3, #1
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	e7aa      	b.n	8001816 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0x44>
            }
        }
    }

    // The current space is now taken
    currentX += Font.FontWidth;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	891a      	ldrh	r2, [r3, #8]
 80018c4:	783b      	ldrb	r3, [r7, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	811a      	strh	r2, [r3, #8]

    // Return written char for validation
    return ch;
 80018d0:	7afb      	ldrb	r3, [r7, #11]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>:

//this method is based on the method ssd1306_WriteString
bool SSD1305::WriteString(const char* str, FontDef Font, SSD1305_COLOR color)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af02      	add	r7, sp, #8
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	4639      	mov	r1, r7
 80018e6:	e881 000c 	stmia.w	r1, {r2, r3}
    // Write until null-byte
    while (*str)
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d019      	beq.n	8001926 <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR+0x4c>
    {
        if (WriteChar(*str, Font, color) != *str)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	7819      	ldrb	r1, [r3, #0]
 80018f6:	7e3b      	ldrb	r3, [r7, #24]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	463b      	mov	r3, r7
 80018fc:	cb0c      	ldmia	r3, {r2, r3}
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff ff67 	bl	80017d2 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	bf14      	ite	ne
 8001910:	2301      	movne	r3, #1
 8001912:	2300      	moveq	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR+0x44>
        {
            // Char could not be written
            return 0;
 800191a:	2300      	movs	r3, #0
 800191c:	e004      	b.n	8001928 <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR+0x4e>
        }

        // Next char
        str++;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	3301      	adds	r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
    while (*str)
 8001924:	e7e1      	b.n	80018ea <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR+0x10>
    }

    // Everything ok
    return 1;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_ZN7SSD13059SetCursorEhh>:

void SSD1305::SetCursor(uint8_t x, uint8_t y)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
 800193c:	4613      	mov	r3, r2
 800193e:	70bb      	strb	r3, [r7, #2]
	currentX = x;
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	b29a      	uxth	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	811a      	strh	r2, [r3, #8]
	currentY = y;
 8001948:	78bb      	ldrb	r3, [r7, #2]
 800194a:	b29a      	uxth	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	815a      	strh	r2, [r3, #10]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_ZN7SSD130511SendCommandEh>:
////REALISE THE METHODS OF THE IC////
/////////////////////////////////////


HAL_StatusTypeDef SSD1305::SendCommand(uint8_t commandSize)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b087      	sub	sp, #28
 8001960:	af04      	add	r7, sp, #16
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(hi2c, address<<1, COMMAND_ADDRESS, 1, commandBuffer, commandSize, 10);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	791b      	ldrb	r3, [r3, #4]
 8001970:	b29b      	uxth	r3, r3
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	b299      	uxth	r1, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	330c      	adds	r3, #12
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	b292      	uxth	r2, r2
 800197e:	240a      	movs	r4, #10
 8001980:	9402      	str	r4, [sp, #8]
 8001982:	9201      	str	r2, [sp, #4]
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2301      	movs	r3, #1
 8001988:	2200      	movs	r2, #0
 800198a:	f002 fea1 	bl	80046d0 <HAL_I2C_Mem_Write>
 800198e:	4603      	mov	r3, r0
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}

08001998 <_ZN7SSD130523SetMemoryAddressingModeE20MemoryAddressingMode>:
	commandBuffer[0] = SSD1305_SET_HIGHER_COLUMN | startAddress_p;
	return SendCommand(1);
}

HAL_StatusTypeDef SSD1305::SetMemoryAddressingMode(MemoryAddressingMode mode_p)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = SSD1305_MEMORY_ADDR_MODE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2220      	movs	r2, #32
 80019a8:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = mode_p;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 80019b0:	2102      	movs	r1, #2
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ffd2 	bl	800195c <_ZN7SSD130511SendCommandEh>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_ZN7SSD130516SetColumnAddressEhh>:

HAL_StatusTypeDef SSD1305::SetColumnAddress(uint8_t startAddres_p, uint8_t endAddres_p)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	460b      	mov	r3, r1
 80019cc:	70fb      	strb	r3, [r7, #3]
 80019ce:	4613      	mov	r3, r2
 80019d0:	70bb      	strb	r3, [r7, #2]
	if(startAddres_p > 131)
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	2b83      	cmp	r3, #131	; 0x83
 80019d6:	d901      	bls.n	80019dc <_ZN7SSD130516SetColumnAddressEhh+0x1a>
	{
		startAddres_p = 130;
 80019d8:	2382      	movs	r3, #130	; 0x82
 80019da:	70fb      	strb	r3, [r7, #3]
	}
	if(endAddres_p > 131)
 80019dc:	78bb      	ldrb	r3, [r7, #2]
 80019de:	2b83      	cmp	r3, #131	; 0x83
 80019e0:	d901      	bls.n	80019e6 <_ZN7SSD130516SetColumnAddressEhh+0x24>
	{
		endAddres_p =  131;
 80019e2:	2383      	movs	r3, #131	; 0x83
 80019e4:	70bb      	strb	r3, [r7, #2]
	}

	commandBuffer[0] = SSD1305_SET_COLUMN_ADDR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2221      	movs	r2, #33	; 0x21
 80019ea:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = startAddres_p;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	78fa      	ldrb	r2, [r7, #3]
 80019f0:	735a      	strb	r2, [r3, #13]
	commandBuffer[2] = endAddres_p;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	78ba      	ldrb	r2, [r7, #2]
 80019f6:	739a      	strb	r2, [r3, #14]

	return SendCommand(3);
 80019f8:	2103      	movs	r1, #3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffae 	bl	800195c <_ZN7SSD130511SendCommandEh>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_ZN7SSD130514SetPageAddressEhh>:

HAL_StatusTypeDef SSD1305::SetPageAddress(uint8_t startAddres_p, uint8_t endAddres_p)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	460b      	mov	r3, r1
 8001a14:	70fb      	strb	r3, [r7, #3]
 8001a16:	4613      	mov	r3, r2
 8001a18:	70bb      	strb	r3, [r7, #2]
	if(startAddres_p > 7)
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	2b07      	cmp	r3, #7
 8001a1e:	d901      	bls.n	8001a24 <_ZN7SSD130514SetPageAddressEhh+0x1a>
	{
		startAddres_p = 7;
 8001a20:	2307      	movs	r3, #7
 8001a22:	70fb      	strb	r3, [r7, #3]
	}
	if(endAddres_p > 7)
 8001a24:	78bb      	ldrb	r3, [r7, #2]
 8001a26:	2b07      	cmp	r3, #7
 8001a28:	d901      	bls.n	8001a2e <_ZN7SSD130514SetPageAddressEhh+0x24>
	{
		endAddres_p =  7;
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	70bb      	strb	r3, [r7, #2]
	}

	commandBuffer[0] = SSD1305_SET_PAGE_ADDR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2222      	movs	r2, #34	; 0x22
 8001a32:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = startAddres_p;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	78fa      	ldrb	r2, [r7, #3]
 8001a38:	735a      	strb	r2, [r3, #13]
	commandBuffer[2] = endAddres_p;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	78ba      	ldrb	r2, [r7, #2]
 8001a3e:	739a      	strb	r2, [r3, #14]

	return SendCommand(3);
 8001a40:	2103      	movs	r1, #3
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ff8a 	bl	800195c <_ZN7SSD130511SendCommandEh>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <_ZN7SSD130519SetDisplayStartLineEh>:

HAL_StatusTypeDef SSD1305::SetDisplayStartLine(uint8_t line_p)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	70fb      	strb	r3, [r7, #3]
	if(line_p > 63)
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	2b3f      	cmp	r3, #63	; 0x3f
 8001a62:	d901      	bls.n	8001a68 <_ZN7SSD130519SetDisplayStartLineEh+0x16>
	{
		line_p = 63;
 8001a64:	233f      	movs	r3, #63	; 0x3f
 8001a66:	70fb      	strb	r3, [r7, #3]
	}

	commandBuffer[0] = SSD1305_SET_START_LINE | line_p;
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8001a74:	2101      	movs	r1, #1
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff70 	bl	800195c <_ZN7SSD130511SendCommandEh>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_ZN7SSD13056SetLUTEhhhh>:

	return SendCommand(2);
}

HAL_StatusTypeDef SSD1305::SetLUT(uint8_t LUT_BANK0_p, uint8_t LUT_ColorA_p, uint8_t LUT_ColorB_p, uint8_t LUT_ColorC_p)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	4608      	mov	r0, r1
 8001a90:	4611      	mov	r1, r2
 8001a92:	461a      	mov	r2, r3
 8001a94:	4603      	mov	r3, r0
 8001a96:	70fb      	strb	r3, [r7, #3]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	70bb      	strb	r3, [r7, #2]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	707b      	strb	r3, [r7, #1]
	if(LUT_BANK0_p < 32){
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	2b1f      	cmp	r3, #31
 8001aa4:	d801      	bhi.n	8001aaa <_ZN7SSD13056SetLUTEhhhh+0x24>
		LUT_BANK0_p = 32;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	70fb      	strb	r3, [r7, #3]
	}
	if(LUT_BANK0_p > 63){
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	2b3f      	cmp	r3, #63	; 0x3f
 8001aae:	d901      	bls.n	8001ab4 <_ZN7SSD13056SetLUTEhhhh+0x2e>
		LUT_BANK0_p = 63;
 8001ab0:	233f      	movs	r3, #63	; 0x3f
 8001ab2:	70fb      	strb	r3, [r7, #3]
	}
	//--//
	if(LUT_ColorA_p < 32){
 8001ab4:	78bb      	ldrb	r3, [r7, #2]
 8001ab6:	2b1f      	cmp	r3, #31
 8001ab8:	d801      	bhi.n	8001abe <_ZN7SSD13056SetLUTEhhhh+0x38>
		LUT_ColorA_p = 32;
 8001aba:	2320      	movs	r3, #32
 8001abc:	70bb      	strb	r3, [r7, #2]
	}
	if(LUT_ColorA_p > 63){
 8001abe:	78bb      	ldrb	r3, [r7, #2]
 8001ac0:	2b3f      	cmp	r3, #63	; 0x3f
 8001ac2:	d901      	bls.n	8001ac8 <_ZN7SSD13056SetLUTEhhhh+0x42>
		LUT_ColorA_p = 63;
 8001ac4:	233f      	movs	r3, #63	; 0x3f
 8001ac6:	70bb      	strb	r3, [r7, #2]
	}
	//--//
	if(LUT_ColorB_p < 32){
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b1f      	cmp	r3, #31
 8001acc:	d801      	bhi.n	8001ad2 <_ZN7SSD13056SetLUTEhhhh+0x4c>
		LUT_ColorB_p = 32;
 8001ace:	2320      	movs	r3, #32
 8001ad0:	707b      	strb	r3, [r7, #1]
	}
	if(LUT_ColorB_p > 63){
 8001ad2:	787b      	ldrb	r3, [r7, #1]
 8001ad4:	2b3f      	cmp	r3, #63	; 0x3f
 8001ad6:	d901      	bls.n	8001adc <_ZN7SSD13056SetLUTEhhhh+0x56>
		LUT_ColorB_p = 63;
 8001ad8:	233f      	movs	r3, #63	; 0x3f
 8001ada:	707b      	strb	r3, [r7, #1]
	}
	//--//
	if(LUT_ColorC_p < 32){
 8001adc:	7c3b      	ldrb	r3, [r7, #16]
 8001ade:	2b1f      	cmp	r3, #31
 8001ae0:	d801      	bhi.n	8001ae6 <_ZN7SSD13056SetLUTEhhhh+0x60>
		LUT_ColorC_p = 32;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	743b      	strb	r3, [r7, #16]
	}
	if(LUT_ColorC_p > 63){
 8001ae6:	7c3b      	ldrb	r3, [r7, #16]
 8001ae8:	2b3f      	cmp	r3, #63	; 0x3f
 8001aea:	d901      	bls.n	8001af0 <_ZN7SSD13056SetLUTEhhhh+0x6a>
		LUT_ColorC_p = 63;
 8001aec:	233f      	movs	r3, #63	; 0x3f
 8001aee:	743b      	strb	r3, [r7, #16]
	}

	commandBuffer[0] = SSD1305_SET_LUT;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2291      	movs	r2, #145	; 0x91
 8001af4:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = LUT_BANK0_p;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	78fa      	ldrb	r2, [r7, #3]
 8001afa:	735a      	strb	r2, [r3, #13]
	commandBuffer[2] = LUT_ColorA_p;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	78ba      	ldrb	r2, [r7, #2]
 8001b00:	739a      	strb	r2, [r3, #14]
	commandBuffer[3] = LUT_ColorB_p;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	787a      	ldrb	r2, [r7, #1]
 8001b06:	73da      	strb	r2, [r3, #15]
	commandBuffer[4] = LUT_ColorC_p;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7c3a      	ldrb	r2, [r7, #16]
 8001b0c:	741a      	strb	r2, [r3, #16]

	return SendCommand(5);
 8001b0e:	2105      	movs	r1, #5
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff23 	bl	800195c <_ZN7SSD130511SendCommandEh>
 8001b16:	4603      	mov	r3, r0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_ZN7SSD130515SetSegmentReMapE12SegmentRemap>:

HAL_StatusTypeDef SSD1305::SetSegmentReMap(SegmentRemap remap_p)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = SSD1305_SEG_REMAP | remap_p;
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8001b38:	2101      	movs	r1, #1
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ff0e 	bl	800195c <_ZN7SSD130511SendCommandEh>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_ZN7SSD130515EntireDisplayONE13DisplayONMode>:

HAL_StatusTypeDef SSD1305::EntireDisplayON(DisplayONMode displayONMode_p)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = displayONMode_p;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fefc 	bl	800195c <_ZN7SSD130511SendCommandEh>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <_ZN7SSD130516SetNormalInverseE18DisplayInverseMode>:

HAL_StatusTypeDef SSD1305::SetNormalInverse(DisplayInverseMode inversMode_p)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = inversMode_p;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	78fa      	ldrb	r2, [r7, #3]
 8001b7e:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8001b80:	2101      	movs	r1, #1
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff feea 	bl	800195c <_ZN7SSD130511SendCommandEh>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_ZN7SSD130517SetMultiplexRatioEh>:

HAL_StatusTypeDef SSD1305::SetMultiplexRatio(uint8_t ratio_p)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	70fb      	strb	r3, [r7, #3]
	if(ratio_p < 15)
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	2b0e      	cmp	r3, #14
 8001ba2:	d801      	bhi.n	8001ba8 <_ZN7SSD130517SetMultiplexRatioEh+0x16>
	{
		ratio_p = 15;
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	70fb      	strb	r3, [r7, #3]
	}

	commandBuffer[0] = 	SSD1305_SET_MULTIPLEX_RATIO;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	22a8      	movs	r2, #168	; 0xa8
 8001bac:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = ratio_p;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8001bb4:	2102      	movs	r1, #2
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fed0 	bl	800195c <_ZN7SSD130511SendCommandEh>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_ZN7SSD130516SetDisplayON_OFFE11DisplayMode>:

	return SendCommand(4);
}

HAL_StatusTypeDef SSD1305::SetDisplayON_OFF(DisplayMode mode_p)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = mode_p;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	78fa      	ldrb	r2, [r7, #3]
 8001bd6:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8001bd8:	2101      	movs	r1, #1
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff febe 	bl	800195c <_ZN7SSD130511SendCommandEh>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_ZN7SSD130525SetComOutputScanDirectionE22ComOutputScanDirection>:

	return SendCommand(1);
}

HAL_StatusTypeDef SSD1305::SetComOutputScanDirection(ComOutputScanDirection scanDirection_p)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = scanDirection_p;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff feac 	bl	800195c <_ZN7SSD130511SendCommandEh>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_ZN7SSD130516SetDisplayOffsetEh>:

HAL_StatusTypeDef SSD1305::SetDisplayOffset(uint8_t verticalShift_p)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	70fb      	strb	r3, [r7, #3]
	if (verticalShift_p > 63)
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	2b3f      	cmp	r3, #63	; 0x3f
 8001c1e:	d901      	bls.n	8001c24 <_ZN7SSD130516SetDisplayOffsetEh+0x16>
	{
		verticalShift_p = 63;
 8001c20:	233f      	movs	r3, #63	; 0x3f
 8001c22:	70fb      	strb	r3, [r7, #3]
	}

	commandBuffer[0] = SSD1305_SET_DISPLAY_OFFSET;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	22d3      	movs	r2, #211	; 0xd3
 8001c28:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = verticalShift_p;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8001c30:	2102      	movs	r1, #2
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff fe92 	bl	800195c <_ZN7SSD130511SendCommandEh>
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_ZN7SSD130520SetColorAndPowerModeE9ColorMode9PowerMode>:

	return SendCommand(2);
}

HAL_StatusTypeDef SSD1305::SetColorAndPowerMode(ColorMode colorMode_p, PowerMode powerMode_p)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	70fb      	strb	r3, [r7, #3]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	70bb      	strb	r3, [r7, #2]
	commandBuffer[0] = SSD1305_SET_COLOR_n_POWER_MODE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	22d8      	movs	r2, #216	; 0xd8
 8001c56:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = (colorMode_p << 4) | powerMode_p;
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	b25a      	sxtb	r2, r3
 8001c5e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b25b      	sxtb	r3, r3
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fe74 	bl	800195c <_ZN7SSD130511SendCommandEh>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_ZN7SSD130518SetPrechargePeriodEhh>:

HAL_StatusTypeDef SSD1305::SetPrechargePeriod(uint8_t phase1_p, uint8_t phase2_p)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	70fb      	strb	r3, [r7, #3]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	70bb      	strb	r3, [r7, #2]
	if(phase1_p > 0xF)
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d901      	bls.n	8001c98 <_ZN7SSD130518SetPrechargePeriodEhh+0x1a>
	{
		phase1_p = 0xF;
 8001c94:	230f      	movs	r3, #15
 8001c96:	70fb      	strb	r3, [r7, #3]
	}

	if(phase2_p > 0xF)
 8001c98:	78bb      	ldrb	r3, [r7, #2]
 8001c9a:	2b0f      	cmp	r3, #15
 8001c9c:	d901      	bls.n	8001ca2 <_ZN7SSD130518SetPrechargePeriodEhh+0x24>
	{
		phase2_p = 0xF;
 8001c9e:	230f      	movs	r3, #15
 8001ca0:	70bb      	strb	r3, [r7, #2]
	}

	commandBuffer[0] = SSD1305_SET_PRECHARGE_PERIOD;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	22d9      	movs	r2, #217	; 0xd9
 8001ca6:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = (phase2_p << 4) | phase1_p;
 8001ca8:	78bb      	ldrb	r3, [r7, #2]
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	b25a      	sxtb	r2, r3
 8001cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff fe4c 	bl	800195c <_ZN7SSD130511SendCommandEh>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_ZN7SSD130520EnterReadModifyWriteEv>:

	return SendCommand(2);
}

HAL_StatusTypeDef SSD1305::EnterReadModifyWrite()
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
	commandBuffer[0] = SSD1305_READ_MODIFY_WRITE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	22e0      	movs	r2, #224	; 0xe0
 8001cda:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8001cdc:	2101      	movs	r1, #1
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff fe3c 	bl	800195c <_ZN7SSD130511SendCommandEh>
 8001ce4:	4603      	mov	r3, r0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_ZN7SSD130519ExitReadModifyWriteEv>:

	return SendCommand(1);
}

HAL_StatusTypeDef SSD1305::ExitReadModifyWrite()
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
	commandBuffer[0] = SSD1305_EXIT_RMW;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	22ee      	movs	r2, #238	; 0xee
 8001cfa:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fe2c 	bl	800195c <_ZN7SSD130511SendCommandEh>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <_ZN5State7onEnterEP12StateMachine>:
class StateMachine;

class State
{
public:
    virtual void onEnter(StateMachine* master){};
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_ZN5State6onExitEP12StateMachine>:
    virtual void onExit(StateMachine* master){};
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <_ZN12StateMachineC1EP5StateP7SSD1305P13Accelerometer>:
 *      Author: SNA1BP
 */

#include "state_machine.hpp"

StateMachine::StateMachine(State* initial, SSD1305* displayHandle, Accelerometer* referenceAccel)
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
{
	this->displayHandle = displayHandle;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	605a      	str	r2, [r3, #4]
	this->referenceAccel = referenceAccel;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	609a      	str	r2, [r3, #8]
	changeState(initial);
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f805 	bl	8001d6c <_ZN12StateMachine11changeStateEP5State>
}
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_ZN12StateMachine11changeStateEP5State>:

void StateMachine::changeState(State* next)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
	if(current)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <_ZN12StateMachine11changeStateEP5State+0x26>
	{
		current->onExit(this);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4798      	blx	r3
	}

	current = next;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	601a      	str	r2, [r3, #0]

	if(current)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <_ZN12StateMachine11changeStateEP5State+0x46>
	{
		current->onEnter(this);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4610      	mov	r0, r2
 8001db0:	4798      	blx	r3
	}
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_ZN12StateMachine3runEv>:

void StateMachine::run()
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
	if(current)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <_ZN12StateMachine3runEv+0x24>
	{
		current->run(this);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	3308      	adds	r3, #8
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4798      	blx	r3
	}
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <_ZN5StateC1Ev>:
class State
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <_ZN5StateC1Ev+0x1c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	0800ab04 	.word	0x0800ab04

08001e08 <_ZN19StateSetFixTrackDegC1E10MemorySlot>:

StateSetFixTrackDeg::StateSetFixTrackDeg(MemorySlot initialMemorySlot)
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	e883 0006 	stmia.w	r3, {r1, r2}
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ffe5 	bl	8001de8 <_ZN5StateC1Ev>
 8001e1e:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <_ZN19StateSetFixTrackDegC1E10MemorySlot+0x4c>)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	711a      	strb	r2, [r3, #4]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	719a      	strb	r2, [r3, #6]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	71da      	strb	r2, [r3, #7]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	721a      	strb	r2, [r3, #8]
{
	this->currentMemorySlot = initialMemorySlot;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	330a      	adds	r3, #10
 8001e40:	1d3a      	adds	r2, r7, #4
 8001e42:	6810      	ldr	r0, [r2, #0]
 8001e44:	6018      	str	r0, [r3, #0]
 8001e46:	8892      	ldrh	r2, [r2, #4]
 8001e48:	809a      	strh	r2, [r3, #4]
}
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	0800aaf0 	.word	0x0800aaf0

08001e58 <_ZN19StateSetFixTrackDeg7onEnterEP12StateMachine>:

void StateSetFixTrackDeg::onEnter(StateMachine* master)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
    float* refAngles = master->referenceAccel->getAngles();
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f840 	bl	8000eec <_ZN13Accelerometer9getAnglesEv>
 8001e6c:	60f8      	str	r0, [r7, #12]
	DrawGUI(master->displayHandle, currentMemorySlot, refAngles[0], refAngles[1], refAngles[2]);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6858      	ldr	r0, [r3, #4]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	ed93 7a00 	vldr	s14, [r3]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	3308      	adds	r3, #8
 8001e84:	edd3 6a00 	vldr	s13, [r3]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8d3 200a 	ldr.w	r2, [r3, #10]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	89da      	ldrh	r2, [r3, #14]
 8001e92:	2300      	movs	r3, #0
 8001e94:	f362 030f 	bfi	r3, r2, #0, #16
 8001e98:	eeb0 1a66 	vmov.f32	s2, s13
 8001e9c:	eef0 0a47 	vmov.f32	s1, s14
 8001ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f7ff f82f 	bl	8000f08 <_Z7DrawGUIP7SSD130510MemorySlotfff>
	numberDigits[0] = (currentMemorySlot.setDegree/100)%10;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	89db      	ldrh	r3, [r3, #14]
 8001eae:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <_ZN19StateSetFixTrackDeg7onEnterEP12StateMachine+0xc8>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <_ZN19StateSetFixTrackDeg7onEnterEP12StateMachine+0xcc>)
 8001eba:	fba3 1302 	umull	r1, r3, r3, r2
 8001ebe:	08d9      	lsrs	r1, r3, #3
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	719a      	strb	r2, [r3, #6]
	numberDigits[1] = (currentMemorySlot.setDegree/10)%10;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	89db      	ldrh	r3, [r3, #14]
 8001ed6:	4a13      	ldr	r2, [pc, #76]	; (8001f24 <_ZN19StateSetFixTrackDeg7onEnterEP12StateMachine+0xcc>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	08db      	lsrs	r3, r3, #3
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <_ZN19StateSetFixTrackDeg7onEnterEP12StateMachine+0xcc>)
 8001ee2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee6:	08d9      	lsrs	r1, r3, #3
 8001ee8:	460b      	mov	r3, r1
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	71da      	strb	r2, [r3, #7]
	numberDigits[2] = currentMemorySlot.setDegree%10;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	89da      	ldrh	r2, [r3, #14]
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <_ZN19StateSetFixTrackDeg7onEnterEP12StateMachine+0xcc>)
 8001f00:	fba3 1302 	umull	r1, r3, r3, r2
 8001f04:	08d9      	lsrs	r1, r3, #3
 8001f06:	460b      	mov	r3, r1
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	721a      	strb	r2, [r3, #8]

}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	51eb851f 	.word	0x51eb851f
 8001f24:	cccccccd 	.word	0xcccccccd

08001f28 <_ZN19StateSetFixTrackDeg3runEP12StateMachine>:

void StateSetFixTrackDeg::run(StateMachine* master)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
    float* refAngles = master->referenceAccel->getAngles();
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe ffd8 	bl	8000eec <_ZN13Accelerometer9getAnglesEv>
 8001f3c:	60b8      	str	r0, [r7, #8]

	if(adcValue2Digit() != 10) //It cant be 10 so 10 indicates no input
 8001f3e:	f7ff fa43 	bl	80013c8 <_Z14adcValue2Digitv>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b0a      	cmp	r3, #10
 8001f46:	bf14      	ite	ne
 8001f48:	2301      	movne	r3, #1
 8001f4a:	2300      	moveq	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x38>
	{
		currentDigit = adcValue2Digit();
 8001f52:	f7ff fa39 	bl	80013c8 <_Z14adcValue2Digitv>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	715a      	strb	r2, [r3, #5]
 8001f5e:	e007      	b.n	8001f70 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x48>
	}
	else
	{
		currentDigit = numberDigits[currentDigitState];
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	791b      	ldrb	r3, [r3, #4]
 8001f64:	461a      	mov	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	799a      	ldrb	r2, [r3, #6]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	715a      	strb	r2, [r3, #5]
	}

	switch (currentDigitState)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	791b      	ldrb	r3, [r3, #4]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d05b      	beq.n	8002030 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x108>
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	f300 8083 	bgt.w	8002084 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x15c>
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x60>
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d02a      	beq.n	8001fdc <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0xb4>
				HAL_Delay(10);
				currentDigitState = setDigit1;
			}
			break;
		default:
			break;
 8001f86:	e07d      	b.n	8002084 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x15c>
			numberDigits[0] = currentDigit;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	795a      	ldrb	r2, [r3, #5]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	719a      	strb	r2, [r3, #6]
			if(HAL_GPIO_ReadPin(PINK_BTN_GPIO_Port, PINK_BTN_Pin))
 8001f90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f94:	4860      	ldr	r0, [pc, #384]	; (8002118 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x1f0>)
 8001f96:	f002 fa0b 	bl	80043b0 <HAL_GPIO_ReadPin>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf14      	ite	ne
 8001fa0:	2301      	movne	r3, #1
 8001fa2:	2300      	moveq	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d06e      	beq.n	8002088 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x160>
				HAL_Delay(10);
 8001faa:	200a      	movs	r0, #10
 8001fac:	f000 fe80 	bl	8002cb0 <HAL_Delay>
				while(HAL_GPIO_ReadPin(PINK_BTN_GPIO_Port, PINK_BTN_Pin)){__NOP();}
 8001fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb4:	4858      	ldr	r0, [pc, #352]	; (8002118 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x1f0>)
 8001fb6:	f002 f9fb 	bl	80043b0 <HAL_GPIO_ReadPin>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf14      	ite	ne
 8001fc0:	2301      	movne	r3, #1
 8001fc2:	2300      	moveq	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0xa6>
 8001fca:	bf00      	nop
 8001fcc:	e7f0      	b.n	8001fb0 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x88>
				HAL_Delay(10);
 8001fce:	200a      	movs	r0, #10
 8001fd0:	f000 fe6e 	bl	8002cb0 <HAL_Delay>
				currentDigitState = setDigit2;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	711a      	strb	r2, [r3, #4]
			break;
 8001fda:	e055      	b.n	8002088 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x160>
			numberDigits[1] = currentDigit;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	795a      	ldrb	r2, [r3, #5]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	71da      	strb	r2, [r3, #7]
			if(HAL_GPIO_ReadPin(PINK_BTN_GPIO_Port, PINK_BTN_Pin))
 8001fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe8:	484b      	ldr	r0, [pc, #300]	; (8002118 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x1f0>)
 8001fea:	f002 f9e1 	bl	80043b0 <HAL_GPIO_ReadPin>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf14      	ite	ne
 8001ff4:	2301      	movne	r3, #1
 8001ff6:	2300      	moveq	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d046      	beq.n	800208c <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x164>
				HAL_Delay(10);
 8001ffe:	200a      	movs	r0, #10
 8002000:	f000 fe56 	bl	8002cb0 <HAL_Delay>
				while(HAL_GPIO_ReadPin(PINK_BTN_GPIO_Port, PINK_BTN_Pin)){__NOP();}
 8002004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002008:	4843      	ldr	r0, [pc, #268]	; (8002118 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x1f0>)
 800200a:	f002 f9d1 	bl	80043b0 <HAL_GPIO_ReadPin>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	bf14      	ite	ne
 8002014:	2301      	movne	r3, #1
 8002016:	2300      	moveq	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0xfa>
 800201e:	bf00      	nop
 8002020:	e7f0      	b.n	8002004 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0xdc>
				HAL_Delay(10);
 8002022:	200a      	movs	r0, #10
 8002024:	f000 fe44 	bl	8002cb0 <HAL_Delay>
				currentDigitState = setDigit3;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	711a      	strb	r2, [r3, #4]
			break;
 800202e:	e02d      	b.n	800208c <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x164>
			numberDigits[2] = currentDigit;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	795a      	ldrb	r2, [r3, #5]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	721a      	strb	r2, [r3, #8]
			if(HAL_GPIO_ReadPin(PINK_BTN_GPIO_Port, PINK_BTN_Pin))
 8002038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800203c:	4836      	ldr	r0, [pc, #216]	; (8002118 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x1f0>)
 800203e:	f002 f9b7 	bl	80043b0 <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf14      	ite	ne
 8002048:	2301      	movne	r3, #1
 800204a:	2300      	moveq	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d01e      	beq.n	8002090 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x168>
				HAL_Delay(10);
 8002052:	200a      	movs	r0, #10
 8002054:	f000 fe2c 	bl	8002cb0 <HAL_Delay>
				while(HAL_GPIO_ReadPin(PINK_BTN_GPIO_Port, PINK_BTN_Pin)){__NOP();}
 8002058:	f44f 7100 	mov.w	r1, #512	; 0x200
 800205c:	482e      	ldr	r0, [pc, #184]	; (8002118 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x1f0>)
 800205e:	f002 f9a7 	bl	80043b0 <HAL_GPIO_ReadPin>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf14      	ite	ne
 8002068:	2301      	movne	r3, #1
 800206a:	2300      	moveq	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x14e>
 8002072:	bf00      	nop
 8002074:	e7f0      	b.n	8002058 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x130>
				HAL_Delay(10);
 8002076:	200a      	movs	r0, #10
 8002078:	f000 fe1a 	bl	8002cb0 <HAL_Delay>
				currentDigitState = setDigit1;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	711a      	strb	r2, [r3, #4]
			break;
 8002082:	e005      	b.n	8002090 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x168>
			break;
 8002084:	bf00      	nop
 8002086:	e004      	b.n	8002092 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x16a>
			break;
 8002088:	bf00      	nop
 800208a:	e002      	b.n	8002092 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x16a>
			break;
 800208c:	bf00      	nop
 800208e:	e000      	b.n	8002092 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x16a>
			break;
 8002090:	bf00      	nop
	}

	uint16_t numberFromDigits = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < 3; i++)
 8002096:	2300      	movs	r3, #0
 8002098:	737b      	strb	r3, [r7, #13]
 800209a:	7b7b      	ldrb	r3, [r7, #13]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d810      	bhi.n	80020c2 <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x19a>
		numberFromDigits = 10 * numberFromDigits + numberDigits[i];
 80020a0:	89fb      	ldrh	r3, [r7, #14]
 80020a2:	461a      	mov	r2, r3
 80020a4:	0092      	lsls	r2, r2, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	7b7b      	ldrb	r3, [r7, #13]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	440b      	add	r3, r1
 80020b2:	799b      	ldrb	r3, [r3, #6]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < 3; i++)
 80020ba:	7b7b      	ldrb	r3, [r7, #13]
 80020bc:	3301      	adds	r3, #1
 80020be:	737b      	strb	r3, [r7, #13]
 80020c0:	e7eb      	b.n	800209a <_ZN19StateSetFixTrackDeg3runEP12StateMachine+0x172>

	currentMemorySlot.setDegree = numberFromDigits;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	89fa      	ldrh	r2, [r7, #14]
 80020c6:	81da      	strh	r2, [r3, #14]

	DisplaySetAngle(master->displayHandle, currentMemorySlot.setDegree, currentDigitState);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6858      	ldr	r0, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	89d9      	ldrh	r1, [r3, #14]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	791b      	ldrb	r3, [r3, #4]
 80020d4:	461a      	mov	r2, r3
 80020d6:	f7ff f85f 	bl	8001198 <_Z15DisplaySetAngleP7SSD1305ti>

	DisplayRefDegs(master->displayHandle, refAngles[0], refAngles[1], refAngles[2]);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	edd3 7a00 	vldr	s15, [r3]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	3304      	adds	r3, #4
 80020e8:	ed93 7a00 	vldr	s14, [r3]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	3308      	adds	r3, #8
 80020f0:	edd3 6a00 	vldr	s13, [r3]
 80020f4:	eeb0 1a66 	vmov.f32	s2, s13
 80020f8:	eef0 0a47 	vmov.f32	s1, s14
 80020fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002100:	4610      	mov	r0, r2
 8002102:	f7ff f8cd 	bl	80012a0 <_Z14DisplayRefDegsP7SSD1305fff>

	master->displayHandle->WriteBitmapToScreen();
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fa6a 	bl	80015e4 <_ZN7SSD130519WriteBitmapToScreenEv>
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40020000 	.word	0x40020000

0800211c <_ZN19StateSetFixTrackDeg6onExitEP12StateMachine>:

void StateSetFixTrackDeg::onExit(StateMachine* master)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]

}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 800213a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800213c:	f000 fd46 	bl	8002bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002140:	f000 f856 	bl	80021f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002144:	f000 fa06 	bl	8002554 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002148:	f000 f9e4 	bl	8002514 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 800214c:	f000 f9b4 	bl	80024b8 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8002150:	f000 f8c6 	bl	80022e0 <_ZL12MX_ADC1_Initv>
  MX_TIM5_Init();
 8002154:	f000 f954 	bl	8002400 <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 8002158:	f000 f91e 	bl	8002398 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
  numpadEnable();
 800215c:	f7ff f904 	bl	8001368 <_Z12numpadEnablev>
  HAL_GPIO_WritePin(OLED_RESET_NOT_GPIO_Port, OLED_RESET_NOT_Pin, GPIO_PIN_SET);
 8002160:	2201      	movs	r2, #1
 8002162:	2180      	movs	r1, #128	; 0x80
 8002164:	481e      	ldr	r0, [pc, #120]	; (80021e0 <main+0xac>)
 8002166:	f002 f93b 	bl	80043e0 <HAL_GPIO_WritePin>

  SSD1305 display(&hi2c1, 0x3C, 128, 32);
 800216a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800216e:	2320      	movs	r3, #32
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	223c      	movs	r2, #60	; 0x3c
 8002176:	491b      	ldr	r1, [pc, #108]	; (80021e4 <main+0xb0>)
 8002178:	f7ff f946 	bl	8001408 <_ZN7SSD1305C1EP17I2C_HandleTypeDefhhh>
  display.Init();
 800217c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff f963 	bl	800144c <_ZN7SSD13054InitEv>
  display.Fill(Black);
 8002186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fa5b 	bl	8001648 <_ZN7SSD13054FillE13SSD1305_COLOR>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  MemorySlot initialSettings =
 8002192:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002196:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800219a:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <main+0xb4>)
 800219c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021a0:	6018      	str	r0, [r3, #0]
 80021a2:	3304      	adds	r3, #4
 80021a4:	8019      	strh	r1, [r3, #0]
		  y,//axes fixAx;
		  z,//axes trackedAx;
		  110,//uint16_t setDegree;
  };
  Accelerometer dummyAccel;
  StateSetFixTrackDeg stateSetFixTrackDeg(initialSettings);
 80021a6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80021aa:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80021ae:	f107 0010 	add.w	r0, r7, #16
 80021b2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80021b6:	f7ff fe27 	bl	8001e08 <_ZN19StateSetFixTrackDegC1E10MemorySlot>
  StateMachine machine(&stateSetFixTrackDeg, &display, &dummyAccel);
 80021ba:	f107 0320 	add.w	r3, r7, #32
 80021be:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80021c2:	f107 0110 	add.w	r1, r7, #16
 80021c6:	1d38      	adds	r0, r7, #4
 80021c8:	f7ff fdb7 	bl	8001d3a <_ZN12StateMachineC1EP5StateP7SSD1305P13Accelerometer>
  while (1)
  {
	  machine.run();
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fdf3 	bl	8001dba <_ZN12StateMachine3runEv>

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80021d4:	2120      	movs	r1, #32
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <main+0xb8>)
 80021d8:	f002 f91b 	bl	8004412 <HAL_GPIO_TogglePin>
	  machine.run();
 80021dc:	e7f6      	b.n	80021cc <main+0x98>
 80021de:	bf00      	nop
 80021e0:	40020800 	.word	0x40020800
 80021e4:	200002cc 	.word	0x200002cc
 80021e8:	08009618 	.word	0x08009618
 80021ec:	40020000 	.word	0x40020000

080021f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b094      	sub	sp, #80	; 0x50
 80021f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021f6:	f107 031c 	add.w	r3, r7, #28
 80021fa:	2234      	movs	r2, #52	; 0x34
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 faf0 	bl	80067e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002204:	f107 0308 	add.w	r3, r7, #8
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	4b2f      	ldr	r3, [pc, #188]	; (80022d8 <_Z18SystemClock_Configv+0xe8>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	4a2e      	ldr	r2, [pc, #184]	; (80022d8 <_Z18SystemClock_Configv+0xe8>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002222:	6413      	str	r3, [r2, #64]	; 0x40
 8002224:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <_Z18SystemClock_Configv+0xe8>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002230:	2300      	movs	r3, #0
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	4b29      	ldr	r3, [pc, #164]	; (80022dc <_Z18SystemClock_Configv+0xec>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800223c:	4a27      	ldr	r2, [pc, #156]	; (80022dc <_Z18SystemClock_Configv+0xec>)
 800223e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b25      	ldr	r3, [pc, #148]	; (80022dc <_Z18SystemClock_Configv+0xec>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002250:	2302      	movs	r3, #2
 8002252:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002254:	2301      	movs	r3, #1
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002258:	2310      	movs	r3, #16
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800225c:	2302      	movs	r3, #2
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002260:	2300      	movs	r3, #0
 8002262:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002264:	2310      	movs	r3, #16
 8002266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002268:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800226c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800226e:	2304      	movs	r3, #4
 8002270:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002272:	2302      	movs	r3, #2
 8002274:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002276:	2302      	movs	r3, #2
 8002278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	4618      	mov	r0, r3
 8002280:	f003 f888 	bl	8005394 <HAL_RCC_OscConfig>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	bf14      	ite	ne
 800228a:	2301      	movne	r3, #1
 800228c:	2300      	moveq	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8002294:	f000 f9ec 	bl	8002670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002298:	230f      	movs	r3, #15
 800229a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800229c:	2302      	movs	r3, #2
 800229e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022ae:	f107 0308 	add.w	r3, r7, #8
 80022b2:	2102      	movs	r1, #2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 fd23 	bl	8004d00 <HAL_RCC_ClockConfig>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf14      	ite	ne
 80022c0:	2301      	movne	r3, #1
 80022c2:	2300      	moveq	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80022ca:	f000 f9d1 	bl	8002670 <Error_Handler>
  }
}
 80022ce:	bf00      	nop
 80022d0:	3750      	adds	r7, #80	; 0x50
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40007000 	.word	0x40007000

080022e0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022e6:	463b      	mov	r3, r7
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <_ZL12MX_ADC1_Initv+0xac>)
 80022f4:	4a26      	ldr	r2, [pc, #152]	; (8002390 <_ZL12MX_ADC1_Initv+0xb0>)
 80022f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <_ZL12MX_ADC1_Initv+0xac>)
 80022fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002300:	4b22      	ldr	r3, [pc, #136]	; (800238c <_ZL12MX_ADC1_Initv+0xac>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <_ZL12MX_ADC1_Initv+0xac>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800230c:	4b1f      	ldr	r3, [pc, #124]	; (800238c <_ZL12MX_ADC1_Initv+0xac>)
 800230e:	2200      	movs	r2, #0
 8002310:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002312:	4b1e      	ldr	r3, [pc, #120]	; (800238c <_ZL12MX_ADC1_Initv+0xac>)
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <_ZL12MX_ADC1_Initv+0xac>)
 800231c:	2200      	movs	r2, #0
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002320:	4b1a      	ldr	r3, [pc, #104]	; (800238c <_ZL12MX_ADC1_Initv+0xac>)
 8002322:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <_ZL12MX_ADC1_Initv+0xb4>)
 8002324:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002326:	4b19      	ldr	r3, [pc, #100]	; (800238c <_ZL12MX_ADC1_Initv+0xac>)
 8002328:	2200      	movs	r2, #0
 800232a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <_ZL12MX_ADC1_Initv+0xac>)
 800232e:	2201      	movs	r2, #1
 8002330:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <_ZL12MX_ADC1_Initv+0xac>)
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <_ZL12MX_ADC1_Initv+0xac>)
 800233c:	2201      	movs	r2, #1
 800233e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002340:	4812      	ldr	r0, [pc, #72]	; (800238c <_ZL12MX_ADC1_Initv+0xac>)
 8002342:	f000 fcd9 	bl	8002cf8 <HAL_ADC_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8002356:	f000 f98b 	bl	8002670 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800235a:	2300      	movs	r3, #0
 800235c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800235e:	2301      	movs	r3, #1
 8002360:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002366:	463b      	mov	r3, r7
 8002368:	4619      	mov	r1, r3
 800236a:	4808      	ldr	r0, [pc, #32]	; (800238c <_ZL12MX_ADC1_Initv+0xac>)
 800236c:	f000 ff50 	bl	8003210 <HAL_ADC_ConfigChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	bf14      	ite	ne
 8002376:	2301      	movne	r3, #1
 8002378:	2300      	moveq	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8002380:	f000 f976 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000224 	.word	0x20000224
 8002390:	40012000 	.word	0x40012000
 8002394:	0f000001 	.word	0x0f000001

08002398 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800239c:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <_ZL12MX_I2C1_Initv+0x5c>)
 800239e:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <_ZL12MX_I2C1_Initv+0x60>)
 80023a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023a4:	4a15      	ldr	r2, [pc, #84]	; (80023fc <_ZL12MX_I2C1_Initv+0x64>)
 80023a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023bc:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023d4:	4807      	ldr	r0, [pc, #28]	; (80023f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023d6:	f002 f837 	bl	8004448 <HAL_I2C_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf14      	ite	ne
 80023e0:	2301      	movne	r3, #1
 80023e2:	2300      	moveq	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80023ea:	f000 f941 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200002cc 	.word	0x200002cc
 80023f8:	40005400 	.word	0x40005400
 80023fc:	000186a0 	.word	0x000186a0

08002400 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002406:	f107 0308 	add.w	r3, r7, #8
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002414:	463b      	mov	r3, r7
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <_ZL12MX_TIM5_Initv+0xb0>)
 800241e:	4a25      	ldr	r2, [pc, #148]	; (80024b4 <_ZL12MX_TIM5_Initv+0xb4>)
 8002420:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <_ZL12MX_TIM5_Initv+0xb0>)
 8002424:	2253      	movs	r2, #83	; 0x53
 8002426:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002428:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <_ZL12MX_TIM5_Initv+0xb0>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <_ZL12MX_TIM5_Initv+0xb0>)
 8002430:	f242 720f 	movw	r2, #9999	; 0x270f
 8002434:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <_ZL12MX_TIM5_Initv+0xb0>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800243c:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <_ZL12MX_TIM5_Initv+0xb0>)
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002442:	481b      	ldr	r0, [pc, #108]	; (80024b0 <_ZL12MX_TIM5_Initv+0xb0>)
 8002444:	f003 fa44 	bl	80058d0 <HAL_TIM_Base_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	bf14      	ite	ne
 800244e:	2301      	movne	r3, #1
 8002450:	2300      	moveq	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <_ZL12MX_TIM5_Initv+0x5c>
  {
    Error_Handler();
 8002458:	f000 f90a 	bl	8002670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800245c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002460:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002462:	f107 0308 	add.w	r3, r7, #8
 8002466:	4619      	mov	r1, r3
 8002468:	4811      	ldr	r0, [pc, #68]	; (80024b0 <_ZL12MX_TIM5_Initv+0xb0>)
 800246a:	f003 fbf9 	bl	8005c60 <HAL_TIM_ConfigClockSource>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf14      	ite	ne
 8002474:	2301      	movne	r3, #1
 8002476:	2300      	moveq	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <_ZL12MX_TIM5_Initv+0x82>
  {
    Error_Handler();
 800247e:	f000 f8f7 	bl	8002670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800248a:	463b      	mov	r3, r7
 800248c:	4619      	mov	r1, r3
 800248e:	4808      	ldr	r0, [pc, #32]	; (80024b0 <_ZL12MX_TIM5_Initv+0xb0>)
 8002490:	f003 fe10 	bl	80060b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	bf14      	ite	ne
 800249a:	2301      	movne	r3, #1
 800249c:	2300      	moveq	r3, #0
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <_ZL12MX_TIM5_Initv+0xa8>
  {
    Error_Handler();
 80024a4:	f000 f8e4 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80024a8:	bf00      	nop
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000320 	.word	0x20000320
 80024b4:	40000c00 	.word	0x40000c00

080024b8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <_ZL19MX_USART2_UART_Initv+0x54>)
 80024be:	4a14      	ldr	r2, [pc, #80]	; (8002510 <_ZL19MX_USART2_UART_Initv+0x58>)
 80024c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <_ZL19MX_USART2_UART_Initv+0x54>)
 80024c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <_ZL19MX_USART2_UART_Initv+0x54>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <_ZL19MX_USART2_UART_Initv+0x54>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <_ZL19MX_USART2_UART_Initv+0x54>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <_ZL19MX_USART2_UART_Initv+0x54>)
 80024de:	220c      	movs	r2, #12
 80024e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <_ZL19MX_USART2_UART_Initv+0x54>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <_ZL19MX_USART2_UART_Initv+0x54>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024ee:	4807      	ldr	r0, [pc, #28]	; (800250c <_ZL19MX_USART2_UART_Initv+0x54>)
 80024f0:	f003 fe70 	bl	80061d4 <HAL_UART_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf14      	ite	ne
 80024fa:	2301      	movne	r3, #1
 80024fc:	2300      	moveq	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002504:	f000 f8b4 	bl	8002670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000368 	.word	0x20000368
 8002510:	40004400 	.word	0x40004400

08002514 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <_ZL11MX_DMA_Initv+0x3c>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a0b      	ldr	r2, [pc, #44]	; (8002550 <_ZL11MX_DMA_Initv+0x3c>)
 8002524:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <_ZL11MX_DMA_Initv+0x3c>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2038      	movs	r0, #56	; 0x38
 800253c:	f001 f9fd 	bl	800393a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002540:	2038      	movs	r0, #56	; 0x38
 8002542:	f001 fa16 	bl	8003972 <HAL_NVIC_EnableIRQ>

}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800

08002554 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	4b3d      	ldr	r3, [pc, #244]	; (8002664 <_ZL12MX_GPIO_Initv+0x110>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a3c      	ldr	r2, [pc, #240]	; (8002664 <_ZL12MX_GPIO_Initv+0x110>)
 8002574:	f043 0304 	orr.w	r3, r3, #4
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b3a      	ldr	r3, [pc, #232]	; (8002664 <_ZL12MX_GPIO_Initv+0x110>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	4b36      	ldr	r3, [pc, #216]	; (8002664 <_ZL12MX_GPIO_Initv+0x110>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4a35      	ldr	r2, [pc, #212]	; (8002664 <_ZL12MX_GPIO_Initv+0x110>)
 8002590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4b33      	ldr	r3, [pc, #204]	; (8002664 <_ZL12MX_GPIO_Initv+0x110>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	4b2f      	ldr	r3, [pc, #188]	; (8002664 <_ZL12MX_GPIO_Initv+0x110>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a2e      	ldr	r2, [pc, #184]	; (8002664 <_ZL12MX_GPIO_Initv+0x110>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b2c      	ldr	r3, [pc, #176]	; (8002664 <_ZL12MX_GPIO_Initv+0x110>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	4b28      	ldr	r3, [pc, #160]	; (8002664 <_ZL12MX_GPIO_Initv+0x110>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a27      	ldr	r2, [pc, #156]	; (8002664 <_ZL12MX_GPIO_Initv+0x110>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b25      	ldr	r3, [pc, #148]	; (8002664 <_ZL12MX_GPIO_Initv+0x110>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80025da:	2200      	movs	r2, #0
 80025dc:	2120      	movs	r1, #32
 80025de:	4822      	ldr	r0, [pc, #136]	; (8002668 <_ZL12MX_GPIO_Initv+0x114>)
 80025e0:	f001 fefe 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_NOT_GPIO_Port, OLED_RESET_NOT_Pin, GPIO_PIN_RESET);
 80025e4:	2200      	movs	r2, #0
 80025e6:	2180      	movs	r1, #128	; 0x80
 80025e8:	4820      	ldr	r0, [pc, #128]	; (800266c <_ZL12MX_GPIO_Initv+0x118>)
 80025ea:	f001 fef9 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025fe:	f107 0314 	add.w	r3, r7, #20
 8002602:	4619      	mov	r1, r3
 8002604:	4819      	ldr	r0, [pc, #100]	; (800266c <_ZL12MX_GPIO_Initv+0x118>)
 8002606:	f001 fd3f 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800260a:	2320      	movs	r3, #32
 800260c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260e:	2301      	movs	r3, #1
 8002610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	4619      	mov	r1, r3
 8002620:	4811      	ldr	r0, [pc, #68]	; (8002668 <_ZL12MX_GPIO_Initv+0x114>)
 8002622:	f001 fd31 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RESET_NOT_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_NOT_Pin;
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262a:	2301      	movs	r3, #1
 800262c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002632:	2300      	movs	r3, #0
 8002634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_RESET_NOT_GPIO_Port, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	480b      	ldr	r0, [pc, #44]	; (800266c <_ZL12MX_GPIO_Initv+0x118>)
 800263e:	f001 fd23 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PINK_BTN_Pin */
  GPIO_InitStruct.Pin = PINK_BTN_Pin;
 8002642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002648:	2300      	movs	r3, #0
 800264a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800264c:	2302      	movs	r3, #2
 800264e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PINK_BTN_GPIO_Port, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	4804      	ldr	r0, [pc, #16]	; (8002668 <_ZL12MX_GPIO_Initv+0x114>)
 8002658:	f001 fd16 	bl	8004088 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800265c:	bf00      	nop
 800265e:	3728      	adds	r7, #40	; 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800
 8002668:	40020000 	.word	0x40020000
 800266c:	40020800 	.word	0x40020800

08002670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002674:	b672      	cpsid	i
}
 8002676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002678:	e7fe      	b.n	8002678 <Error_Handler+0x8>
	...

0800267c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <HAL_MspInit+0x4c>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <HAL_MspInit+0x4c>)
 800268c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002690:	6453      	str	r3, [r2, #68]	; 0x44
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <HAL_MspInit+0x4c>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_MspInit+0x4c>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <HAL_MspInit+0x4c>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_MspInit+0x4c>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026ba:	2007      	movs	r0, #7
 80026bc:	f001 f932 	bl	8003924 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40023800 	.word	0x40023800

080026cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a32      	ldr	r2, [pc, #200]	; (80027b4 <HAL_ADC_MspInit+0xe8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d15e      	bne.n	80027ac <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	4b31      	ldr	r3, [pc, #196]	; (80027b8 <HAL_ADC_MspInit+0xec>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a30      	ldr	r2, [pc, #192]	; (80027b8 <HAL_ADC_MspInit+0xec>)
 80026f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b2e      	ldr	r3, [pc, #184]	; (80027b8 <HAL_ADC_MspInit+0xec>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <HAL_ADC_MspInit+0xec>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a29      	ldr	r2, [pc, #164]	; (80027b8 <HAL_ADC_MspInit+0xec>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <HAL_ADC_MspInit+0xec>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC_NUMPAD_Pin;
 8002726:	2301      	movs	r3, #1
 8002728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800272a:	2303      	movs	r3, #3
 800272c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_NUMPAD_GPIO_Port, &GPIO_InitStruct);
 8002732:	f107 0314 	add.w	r3, r7, #20
 8002736:	4619      	mov	r1, r3
 8002738:	4820      	ldr	r0, [pc, #128]	; (80027bc <HAL_ADC_MspInit+0xf0>)
 800273a:	f001 fca5 	bl	8004088 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_ADC_MspInit+0xf4>)
 8002740:	4a20      	ldr	r2, [pc, #128]	; (80027c4 <HAL_ADC_MspInit+0xf8>)
 8002742:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002744:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <HAL_ADC_MspInit+0xf4>)
 8002746:	2200      	movs	r2, #0
 8002748:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_ADC_MspInit+0xf4>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_ADC_MspInit+0xf4>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002756:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <HAL_ADC_MspInit+0xf4>)
 8002758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800275c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_ADC_MspInit+0xf4>)
 8002760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002764:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002766:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <HAL_ADC_MspInit+0xf4>)
 8002768:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800276c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_ADC_MspInit+0xf4>)
 8002770:	2200      	movs	r2, #0
 8002772:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_ADC_MspInit+0xf4>)
 8002776:	2200      	movs	r2, #0
 8002778:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_ADC_MspInit+0xf4>)
 800277c:	2200      	movs	r2, #0
 800277e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002780:	480f      	ldr	r0, [pc, #60]	; (80027c0 <HAL_ADC_MspInit+0xf4>)
 8002782:	f001 f911 	bl	80039a8 <HAL_DMA_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800278c:	f7ff ff70 	bl	8002670 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <HAL_ADC_MspInit+0xf4>)
 8002794:	639a      	str	r2, [r3, #56]	; 0x38
 8002796:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <HAL_ADC_MspInit+0xf4>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800279c:	2200      	movs	r2, #0
 800279e:	2100      	movs	r1, #0
 80027a0:	2012      	movs	r0, #18
 80027a2:	f001 f8ca 	bl	800393a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80027a6:	2012      	movs	r0, #18
 80027a8:	f001 f8e3 	bl	8003972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027ac:	bf00      	nop
 80027ae:	3728      	adds	r7, #40	; 0x28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40012000 	.word	0x40012000
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40020000 	.word	0x40020000
 80027c0:	2000026c 	.word	0x2000026c
 80027c4:	40026410 	.word	0x40026410

080027c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a19      	ldr	r2, [pc, #100]	; (800284c <HAL_I2C_MspInit+0x84>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d12c      	bne.n	8002844 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	4b18      	ldr	r3, [pc, #96]	; (8002850 <HAL_I2C_MspInit+0x88>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a17      	ldr	r2, [pc, #92]	; (8002850 <HAL_I2C_MspInit+0x88>)
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_I2C_MspInit+0x88>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002806:	f44f 7340 	mov.w	r3, #768	; 0x300
 800280a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800280c:	2312      	movs	r3, #18
 800280e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002814:	2303      	movs	r3, #3
 8002816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002818:	2304      	movs	r3, #4
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	4619      	mov	r1, r3
 8002822:	480c      	ldr	r0, [pc, #48]	; (8002854 <HAL_I2C_MspInit+0x8c>)
 8002824:	f001 fc30 	bl	8004088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HAL_I2C_MspInit+0x88>)
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	4a07      	ldr	r2, [pc, #28]	; (8002850 <HAL_I2C_MspInit+0x88>)
 8002832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002836:	6413      	str	r3, [r2, #64]	; 0x40
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_I2C_MspInit+0x88>)
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002844:	bf00      	nop
 8002846:	3728      	adds	r7, #40	; 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40005400 	.word	0x40005400
 8002850:	40023800 	.word	0x40023800
 8002854:	40020400 	.word	0x40020400

08002858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <HAL_TIM_Base_MspInit+0x48>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d115      	bne.n	8002896 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_TIM_Base_MspInit+0x4c>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <HAL_TIM_Base_MspInit+0x4c>)
 8002874:	f043 0308 	orr.w	r3, r3, #8
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_TIM_Base_MspInit+0x4c>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002886:	2200      	movs	r2, #0
 8002888:	2100      	movs	r1, #0
 800288a:	2032      	movs	r0, #50	; 0x32
 800288c:	f001 f855 	bl	800393a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002890:	2032      	movs	r0, #50	; 0x32
 8002892:	f001 f86e 	bl	8003972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40000c00 	.word	0x40000c00
 80028a4:	40023800 	.word	0x40023800

080028a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a19      	ldr	r2, [pc, #100]	; (800292c <HAL_UART_MspInit+0x84>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d12b      	bne.n	8002922 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_UART_MspInit+0x88>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	4a17      	ldr	r2, [pc, #92]	; (8002930 <HAL_UART_MspInit+0x88>)
 80028d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d8:	6413      	str	r3, [r2, #64]	; 0x40
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_UART_MspInit+0x88>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	4b11      	ldr	r3, [pc, #68]	; (8002930 <HAL_UART_MspInit+0x88>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	4a10      	ldr	r2, [pc, #64]	; (8002930 <HAL_UART_MspInit+0x88>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6313      	str	r3, [r2, #48]	; 0x30
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <HAL_UART_MspInit+0x88>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002902:	230c      	movs	r3, #12
 8002904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	2302      	movs	r3, #2
 8002908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290e:	2303      	movs	r3, #3
 8002910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002912:	2307      	movs	r3, #7
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002916:	f107 0314 	add.w	r3, r7, #20
 800291a:	4619      	mov	r1, r3
 800291c:	4805      	ldr	r0, [pc, #20]	; (8002934 <HAL_UART_MspInit+0x8c>)
 800291e:	f001 fbb3 	bl	8004088 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002922:	bf00      	nop
 8002924:	3728      	adds	r7, #40	; 0x28
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40004400 	.word	0x40004400
 8002930:	40023800 	.word	0x40023800
 8002934:	40020000 	.word	0x40020000

08002938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800293c:	e7fe      	b.n	800293c <NMI_Handler+0x4>

0800293e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002942:	e7fe      	b.n	8002942 <HardFault_Handler+0x4>

08002944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002948:	e7fe      	b.n	8002948 <MemManage_Handler+0x4>

0800294a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800294e:	e7fe      	b.n	800294e <BusFault_Handler+0x4>

08002950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <UsageFault_Handler+0x4>

08002956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002984:	f000 f974 	bl	8002c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}

0800298c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002990:	4802      	ldr	r0, [pc, #8]	; (800299c <ADC_IRQHandler+0x10>)
 8002992:	f000 f9f4 	bl	8002d7e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000224 	.word	0x20000224

080029a0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <TIM5_IRQHandler+0x10>)
 80029a6:	f003 f853 	bl	8005a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000320 	.word	0x20000320

080029b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <DMA2_Stream0_IRQHandler+0x10>)
 80029ba:	f001 f8fb 	bl	8003bb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000026c 	.word	0x2000026c

080029c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return 1;
 80029cc:	2301      	movs	r3, #1
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <_kill>:

int _kill(int pid, int sig)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029e2:	f003 fed5 	bl	8006790 <__errno>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2216      	movs	r2, #22
 80029ea:	601a      	str	r2, [r3, #0]
  return -1;
 80029ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <_exit>:

void _exit (int status)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ffe7 	bl	80029d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a0a:	e7fe      	b.n	8002a0a <_exit+0x12>

08002a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e00a      	b.n	8002a34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a1e:	f3af 8000 	nop.w
 8002a22:	4601      	mov	r1, r0
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	60ba      	str	r2, [r7, #8]
 8002a2a:	b2ca      	uxtb	r2, r1
 8002a2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	dbf0      	blt.n	8002a1e <_read+0x12>
  }

  return len;
 8002a3c:	687b      	ldr	r3, [r7, #4]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	e009      	b.n	8002a6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	60ba      	str	r2, [r7, #8]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	dbf1      	blt.n	8002a58 <_write+0x12>
  }
  return len;
 8002a74:	687b      	ldr	r3, [r7, #4]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <_close>:

int _close(int file)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aa6:	605a      	str	r2, [r3, #4]
  return 0;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <_isatty>:

int _isatty(int file)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002abe:	2301      	movs	r3, #1
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <_sbrk+0x5c>)
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <_sbrk+0x60>)
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <_sbrk+0x64>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d102      	bne.n	8002b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <_sbrk+0x64>)
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <_sbrk+0x68>)
 8002b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <_sbrk+0x64>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d207      	bcs.n	8002b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b18:	f003 fe3a 	bl	8006790 <__errno>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	220c      	movs	r2, #12
 8002b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295
 8002b26:	e009      	b.n	8002b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <_sbrk+0x64>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <_sbrk+0x64>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <_sbrk+0x64>)
 8002b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20020000 	.word	0x20020000
 8002b48:	00000400 	.word	0x00000400
 8002b4c:	200003ac 	.word	0x200003ac
 8002b50:	200003c8 	.word	0x200003c8

08002b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <SystemInit+0x20>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <SystemInit+0x20>)
 8002b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b7c:	480d      	ldr	r0, [pc, #52]	; (8002bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b7e:	490e      	ldr	r1, [pc, #56]	; (8002bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b80:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b84:	e002      	b.n	8002b8c <LoopCopyDataInit>

08002b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b8a:	3304      	adds	r3, #4

08002b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b90:	d3f9      	bcc.n	8002b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b92:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b94:	4c0b      	ldr	r4, [pc, #44]	; (8002bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b98:	e001      	b.n	8002b9e <LoopFillZerobss>

08002b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b9c:	3204      	adds	r2, #4

08002b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba0:	d3fb      	bcc.n	8002b9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ba2:	f7ff ffd7 	bl	8002b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ba6:	f003 fdf9 	bl	800679c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002baa:	f7ff fac3 	bl	8002134 <main>
  bx  lr    
 8002bae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bb8:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002bbc:	0800af1c 	.word	0x0800af1c
  ldr r2, =_sbss
 8002bc0:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002bc4:	200003c4 	.word	0x200003c4

08002bc8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bc8:	e7fe      	b.n	8002bc8 <CAN1_RX0_IRQHandler>
	...

08002bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_Init+0x40>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <HAL_Init+0x40>)
 8002bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_Init+0x40>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <HAL_Init+0x40>)
 8002be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_Init+0x40>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <HAL_Init+0x40>)
 8002bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf4:	2003      	movs	r0, #3
 8002bf6:	f000 fe95 	bl	8003924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f000 f808 	bl	8002c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c00:	f7ff fd3c 	bl	800267c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023c00 	.word	0x40023c00

08002c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_InitTick+0x54>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_InitTick+0x58>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	4619      	mov	r1, r3
 8002c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fead 	bl	800398e <HAL_SYSTICK_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e00e      	b.n	8002c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b0f      	cmp	r3, #15
 8002c42:	d80a      	bhi.n	8002c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c44:	2200      	movs	r2, #0
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4c:	f000 fe75 	bl	800393a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c50:	4a06      	ldr	r2, [pc, #24]	; (8002c6c <HAL_InitTick+0x5c>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e000      	b.n	8002c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20000024 	.word	0x20000024
 8002c68:	2000002c 	.word	0x2000002c
 8002c6c:	20000028 	.word	0x20000028

08002c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_IncTick+0x20>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_IncTick+0x24>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4413      	add	r3, r2
 8002c80:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <HAL_IncTick+0x24>)
 8002c82:	6013      	str	r3, [r2, #0]
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	2000002c 	.word	0x2000002c
 8002c94:	200003b0 	.word	0x200003b0

08002c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <HAL_GetTick+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	200003b0 	.word	0x200003b0

08002cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cb8:	f7ff ffee 	bl	8002c98 <HAL_GetTick>
 8002cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d005      	beq.n	8002cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_Delay+0x44>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cd6:	bf00      	nop
 8002cd8:	f7ff ffde 	bl	8002c98 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d8f7      	bhi.n	8002cd8 <HAL_Delay+0x28>
  {
  }
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	2000002c 	.word	0x2000002c

08002cf8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e033      	b.n	8002d76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff fcd8 	bl	80026cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d118      	bne.n	8002d68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d3e:	f023 0302 	bic.w	r3, r3, #2
 8002d42:	f043 0202 	orr.w	r2, r3, #2
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fb92 	bl	8003474 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f023 0303 	bic.w	r3, r3, #3
 8002d5e:	f043 0201 	orr.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40
 8002d66:	e001      	b.n	8002d6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d049      	beq.n	8002e48 <HAL_ADC_IRQHandler+0xca>
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d046      	beq.n	8002e48 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d105      	bne.n	8002dd2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d12b      	bne.n	8002e38 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d127      	bne.n	8002e38 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d006      	beq.n	8002e04 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d119      	bne.n	8002e38 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0220 	bic.w	r2, r2, #32
 8002e12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f9c1 	bl	80031c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f06f 0212 	mvn.w	r2, #18
 8002e46:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e56:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d057      	beq.n	8002f0e <HAL_ADC_IRQHandler+0x190>
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d054      	beq.n	8002f0e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d139      	bne.n	8002efe <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d12b      	bne.n	8002efe <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d124      	bne.n	8002efe <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d11d      	bne.n	8002efe <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d119      	bne.n	8002efe <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d105      	bne.n	8002efe <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f043 0201 	orr.w	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fc36 	bl	8003770 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 020c 	mvn.w	r2, #12
 8002f0c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d017      	beq.n	8002f54 <HAL_ADC_IRQHandler+0x1d6>
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d014      	beq.n	8002f54 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10d      	bne.n	8002f54 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f94f 	bl	80031e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f06f 0201 	mvn.w	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f62:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d015      	beq.n	8002f96 <HAL_ADC_IRQHandler+0x218>
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d012      	beq.n	8002f96 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	f043 0202 	orr.w	r2, r3, #2
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0220 	mvn.w	r2, #32
 8002f84:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f938 	bl	80031fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0220 	mvn.w	r2, #32
 8002f94:	601a      	str	r2, [r3, #0]
  }
}
 8002f96:	bf00      	nop
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_Start_DMA+0x1e>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e0e9      	b.n	8003192 <HAL_ADC_Start_DMA+0x1f2>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d018      	beq.n	8003006 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fe4:	4b6d      	ldr	r3, [pc, #436]	; (800319c <HAL_ADC_Start_DMA+0x1fc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a6d      	ldr	r2, [pc, #436]	; (80031a0 <HAL_ADC_Start_DMA+0x200>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	0c9a      	lsrs	r2, r3, #18
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ff8:	e002      	b.n	8003000 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f9      	bne.n	8002ffa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003014:	d107      	bne.n	8003026 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003024:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	f040 80a1 	bne.w	8003178 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003060:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003074:	d106      	bne.n	8003084 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f023 0206 	bic.w	r2, r3, #6
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	645a      	str	r2, [r3, #68]	; 0x44
 8003082:	e002      	b.n	800308a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003092:	4b44      	ldr	r3, [pc, #272]	; (80031a4 <HAL_ADC_Start_DMA+0x204>)
 8003094:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	4a43      	ldr	r2, [pc, #268]	; (80031a8 <HAL_ADC_Start_DMA+0x208>)
 800309c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	4a42      	ldr	r2, [pc, #264]	; (80031ac <HAL_ADC_Start_DMA+0x20c>)
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	4a41      	ldr	r2, [pc, #260]	; (80031b0 <HAL_ADC_Start_DMA+0x210>)
 80030ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80030c6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	334c      	adds	r3, #76	; 0x4c
 80030e2:	4619      	mov	r1, r3
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f000 fd0c 	bl	8003b04 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d12a      	bne.n	800314e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2d      	ldr	r2, [pc, #180]	; (80031b4 <HAL_ADC_Start_DMA+0x214>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d015      	beq.n	800312e <HAL_ADC_Start_DMA+0x18e>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2c      	ldr	r2, [pc, #176]	; (80031b8 <HAL_ADC_Start_DMA+0x218>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d105      	bne.n	8003118 <HAL_ADC_Start_DMA+0x178>
 800310c:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <HAL_ADC_Start_DMA+0x204>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a27      	ldr	r2, [pc, #156]	; (80031bc <HAL_ADC_Start_DMA+0x21c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d136      	bne.n	8003190 <HAL_ADC_Start_DMA+0x1f0>
 8003122:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <HAL_ADC_Start_DMA+0x204>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d130      	bne.n	8003190 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d129      	bne.n	8003190 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	e020      	b.n	8003190 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_ADC_Start_DMA+0x214>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d11b      	bne.n	8003190 <HAL_ADC_Start_DMA+0x1f0>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d114      	bne.n	8003190 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003174:	609a      	str	r2, [r3, #8]
 8003176:	e00b      	b.n	8003190 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f043 0210 	orr.w	r2, r3, #16
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	f043 0201 	orr.w	r2, r3, #1
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000024 	.word	0x20000024
 80031a0:	431bde83 	.word	0x431bde83
 80031a4:	40012300 	.word	0x40012300
 80031a8:	0800366d 	.word	0x0800366d
 80031ac:	08003727 	.word	0x08003727
 80031b0:	08003743 	.word	0x08003743
 80031b4:	40012000 	.word	0x40012000
 80031b8:	40012100 	.word	0x40012100
 80031bc:	40012200 	.word	0x40012200

080031c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_ADC_ConfigChannel+0x1c>
 8003228:	2302      	movs	r3, #2
 800322a:	e113      	b.n	8003454 <HAL_ADC_ConfigChannel+0x244>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b09      	cmp	r3, #9
 800323a:	d925      	bls.n	8003288 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68d9      	ldr	r1, [r3, #12]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	4613      	mov	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4413      	add	r3, r2
 8003250:	3b1e      	subs	r3, #30
 8003252:	2207      	movs	r2, #7
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43da      	mvns	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	400a      	ands	r2, r1
 8003260:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68d9      	ldr	r1, [r3, #12]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	4618      	mov	r0, r3
 8003274:	4603      	mov	r3, r0
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4403      	add	r3, r0
 800327a:	3b1e      	subs	r3, #30
 800327c:	409a      	lsls	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	e022      	b.n	80032ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6919      	ldr	r1, [r3, #16]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	2207      	movs	r2, #7
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43da      	mvns	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	400a      	ands	r2, r1
 80032aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6919      	ldr	r1, [r3, #16]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	4618      	mov	r0, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4403      	add	r3, r0
 80032c4:	409a      	lsls	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d824      	bhi.n	8003320 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	3b05      	subs	r3, #5
 80032e8:	221f      	movs	r2, #31
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43da      	mvns	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	400a      	ands	r2, r1
 80032f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	4618      	mov	r0, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	3b05      	subs	r3, #5
 8003312:	fa00 f203 	lsl.w	r2, r0, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	635a      	str	r2, [r3, #52]	; 0x34
 800331e:	e04c      	b.n	80033ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d824      	bhi.n	8003372 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	3b23      	subs	r3, #35	; 0x23
 800333a:	221f      	movs	r2, #31
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43da      	mvns	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	400a      	ands	r2, r1
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	4618      	mov	r0, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	3b23      	subs	r3, #35	; 0x23
 8003364:	fa00 f203 	lsl.w	r2, r0, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
 8003370:	e023      	b.n	80033ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	3b41      	subs	r3, #65	; 0x41
 8003384:	221f      	movs	r2, #31
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	400a      	ands	r2, r1
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	4618      	mov	r0, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	3b41      	subs	r3, #65	; 0x41
 80033ae:	fa00 f203 	lsl.w	r2, r0, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033ba:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_ADC_ConfigChannel+0x250>)
 80033bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a28      	ldr	r2, [pc, #160]	; (8003464 <HAL_ADC_ConfigChannel+0x254>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d10f      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x1d8>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b12      	cmp	r3, #18
 80033ce:	d10b      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <HAL_ADC_ConfigChannel+0x254>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d12b      	bne.n	800344a <HAL_ADC_ConfigChannel+0x23a>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <HAL_ADC_ConfigChannel+0x258>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d003      	beq.n	8003404 <HAL_ADC_ConfigChannel+0x1f4>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b11      	cmp	r3, #17
 8003402:	d122      	bne.n	800344a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_ADC_ConfigChannel+0x258>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d111      	bne.n	800344a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003426:	4b11      	ldr	r3, [pc, #68]	; (800346c <HAL_ADC_ConfigChannel+0x25c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a11      	ldr	r2, [pc, #68]	; (8003470 <HAL_ADC_ConfigChannel+0x260>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	0c9a      	lsrs	r2, r3, #18
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800343c:	e002      	b.n	8003444 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	3b01      	subs	r3, #1
 8003442:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f9      	bne.n	800343e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	40012300 	.word	0x40012300
 8003464:	40012000 	.word	0x40012000
 8003468:	10000012 	.word	0x10000012
 800346c:	20000024 	.word	0x20000024
 8003470:	431bde83 	.word	0x431bde83

08003474 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800347c:	4b79      	ldr	r3, [pc, #484]	; (8003664 <ADC_Init+0x1f0>)
 800347e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	431a      	orrs	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	021a      	lsls	r2, r3, #8
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6859      	ldr	r1, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6899      	ldr	r1, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	4a58      	ldr	r2, [pc, #352]	; (8003668 <ADC_Init+0x1f4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800351a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6899      	ldr	r1, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800353c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6899      	ldr	r1, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	e00f      	b.n	8003572 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003560:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003570:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0202 	bic.w	r2, r2, #2
 8003580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6899      	ldr	r1, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	7e1b      	ldrb	r3, [r3, #24]
 800358c:	005a      	lsls	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01b      	beq.n	80035d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6859      	ldr	r1, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	3b01      	subs	r3, #1
 80035cc:	035a      	lsls	r2, r3, #13
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	e007      	b.n	80035e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	3b01      	subs	r3, #1
 8003604:	051a      	lsls	r2, r3, #20
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800361c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6899      	ldr	r1, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800362a:	025a      	lsls	r2, r3, #9
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003642:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6899      	ldr	r1, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	029a      	lsls	r2, r3, #10
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	609a      	str	r2, [r3, #8]
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40012300 	.word	0x40012300
 8003668:	0f000001 	.word	0x0f000001

0800366c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003682:	2b00      	cmp	r3, #0
 8003684:	d13c      	bne.n	8003700 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d12b      	bne.n	80036f8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d127      	bne.n	80036f8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d006      	beq.n	80036c4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d119      	bne.n	80036f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0220 	bic.w	r2, r2, #32
 80036d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	f043 0201 	orr.w	r2, r3, #1
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7ff fd61 	bl	80031c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036fe:	e00e      	b.n	800371e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f003 0310 	and.w	r3, r3, #16
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7ff fd75 	bl	80031fc <HAL_ADC_ErrorCallback>
}
 8003712:	e004      	b.n	800371e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4798      	blx	r3
}
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f7ff fd4d 	bl	80031d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800373a:	bf00      	nop
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2240      	movs	r2, #64	; 0x40
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f043 0204 	orr.w	r2, r3, #4
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff fd4a 	bl	80031fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003768:	bf00      	nop
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037a0:	4013      	ands	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037b6:	4a04      	ldr	r2, [pc, #16]	; (80037c8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	60d3      	str	r3, [r2, #12]
}
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <__NVIC_GetPriorityGrouping+0x18>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	0a1b      	lsrs	r3, r3, #8
 80037d6:	f003 0307 	and.w	r3, r3, #7
}
 80037da:	4618      	mov	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	db0b      	blt.n	8003812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	f003 021f 	and.w	r2, r3, #31
 8003800:	4907      	ldr	r1, [pc, #28]	; (8003820 <__NVIC_EnableIRQ+0x38>)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	2001      	movs	r0, #1
 800380a:	fa00 f202 	lsl.w	r2, r0, r2
 800380e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	e000e100 	.word	0xe000e100

08003824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	6039      	str	r1, [r7, #0]
 800382e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003834:	2b00      	cmp	r3, #0
 8003836:	db0a      	blt.n	800384e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	b2da      	uxtb	r2, r3
 800383c:	490c      	ldr	r1, [pc, #48]	; (8003870 <__NVIC_SetPriority+0x4c>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	0112      	lsls	r2, r2, #4
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	440b      	add	r3, r1
 8003848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800384c:	e00a      	b.n	8003864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	4908      	ldr	r1, [pc, #32]	; (8003874 <__NVIC_SetPriority+0x50>)
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	3b04      	subs	r3, #4
 800385c:	0112      	lsls	r2, r2, #4
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	440b      	add	r3, r1
 8003862:	761a      	strb	r2, [r3, #24]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	e000e100 	.word	0xe000e100
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003878:	b480      	push	{r7}
 800387a:	b089      	sub	sp, #36	; 0x24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f1c3 0307 	rsb	r3, r3, #7
 8003892:	2b04      	cmp	r3, #4
 8003894:	bf28      	it	cs
 8003896:	2304      	movcs	r3, #4
 8003898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3304      	adds	r3, #4
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d902      	bls.n	80038a8 <NVIC_EncodePriority+0x30>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3b03      	subs	r3, #3
 80038a6:	e000      	b.n	80038aa <NVIC_EncodePriority+0x32>
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ac:	f04f 32ff 	mov.w	r2, #4294967295
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43da      	mvns	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	401a      	ands	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038c0:	f04f 31ff 	mov.w	r1, #4294967295
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	43d9      	mvns	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	4313      	orrs	r3, r2
         );
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3724      	adds	r7, #36	; 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038f0:	d301      	bcc.n	80038f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038f2:	2301      	movs	r3, #1
 80038f4:	e00f      	b.n	8003916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038f6:	4a0a      	ldr	r2, [pc, #40]	; (8003920 <SysTick_Config+0x40>)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038fe:	210f      	movs	r1, #15
 8003900:	f04f 30ff 	mov.w	r0, #4294967295
 8003904:	f7ff ff8e 	bl	8003824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <SysTick_Config+0x40>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800390e:	4b04      	ldr	r3, [pc, #16]	; (8003920 <SysTick_Config+0x40>)
 8003910:	2207      	movs	r2, #7
 8003912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	e000e010 	.word	0xe000e010

08003924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff ff29 	bl	8003784 <__NVIC_SetPriorityGrouping>
}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800393a:	b580      	push	{r7, lr}
 800393c:	b086      	sub	sp, #24
 800393e:	af00      	add	r7, sp, #0
 8003940:	4603      	mov	r3, r0
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800394c:	f7ff ff3e 	bl	80037cc <__NVIC_GetPriorityGrouping>
 8003950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	6978      	ldr	r0, [r7, #20]
 8003958:	f7ff ff8e 	bl	8003878 <NVIC_EncodePriority>
 800395c:	4602      	mov	r2, r0
 800395e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003962:	4611      	mov	r1, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ff5d 	bl	8003824 <__NVIC_SetPriority>
}
 800396a:	bf00      	nop
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	4603      	mov	r3, r0
 800397a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800397c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff31 	bl	80037e8 <__NVIC_EnableIRQ>
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff ffa2 	bl	80038e0 <SysTick_Config>
 800399c:	4603      	mov	r3, r0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039b4:	f7ff f970 	bl	8002c98 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e099      	b.n	8003af8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039e4:	e00f      	b.n	8003a06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039e6:	f7ff f957 	bl	8002c98 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	d908      	bls.n	8003a06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2203      	movs	r2, #3
 80039fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e078      	b.n	8003af8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e8      	bne.n	80039e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4b38      	ldr	r3, [pc, #224]	; (8003b00 <HAL_DMA_Init+0x158>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d107      	bne.n	8003a70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0307 	bic.w	r3, r3, #7
 8003a86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d117      	bne.n	8003aca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00e      	beq.n	8003aca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa6f 	bl	8003f90 <DMA_CheckFifoParam>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2240      	movs	r2, #64	; 0x40
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e016      	b.n	8003af8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fa26 	bl	8003f24 <DMA_CalcBaseAndBitshift>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	223f      	movs	r2, #63	; 0x3f
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	f010803f 	.word	0xf010803f

08003b04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_DMA_Start_IT+0x26>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e040      	b.n	8003bac <HAL_DMA_Start_IT+0xa8>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d12f      	bne.n	8003b9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2202      	movs	r2, #2
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f9b8 	bl	8003ec8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	223f      	movs	r2, #63	; 0x3f
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0216 	orr.w	r2, r2, #22
 8003b72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0208 	orr.w	r2, r2, #8
 8003b8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	e005      	b.n	8003baa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bc0:	4b8e      	ldr	r3, [pc, #568]	; (8003dfc <HAL_DMA_IRQHandler+0x248>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a8e      	ldr	r2, [pc, #568]	; (8003e00 <HAL_DMA_IRQHandler+0x24c>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	0a9b      	lsrs	r3, r3, #10
 8003bcc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	2208      	movs	r2, #8
 8003be0:	409a      	lsls	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d01a      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d013      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0204 	bic.w	r2, r2, #4
 8003c06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f043 0201 	orr.w	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c24:	2201      	movs	r2, #1
 8003c26:	409a      	lsls	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d012      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c42:	2201      	movs	r2, #1
 8003c44:	409a      	lsls	r2, r3
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4e:	f043 0202 	orr.w	r2, r3, #2
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d012      	beq.n	8003c8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00b      	beq.n	8003c8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c78:	2204      	movs	r2, #4
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c84:	f043 0204 	orr.w	r2, r3, #4
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c90:	2210      	movs	r2, #16
 8003c92:	409a      	lsls	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d043      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d03c      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	2210      	movs	r2, #16
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d018      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d108      	bne.n	8003ce4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d024      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4798      	blx	r3
 8003ce2:	e01f      	b.n	8003d24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01b      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
 8003cf4:	e016      	b.n	8003d24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d107      	bne.n	8003d14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0208 	bic.w	r2, r2, #8
 8003d12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	2220      	movs	r2, #32
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 808f 	beq.w	8003e54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8087 	beq.w	8003e54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b05      	cmp	r3, #5
 8003d5c:	d136      	bne.n	8003dcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0216 	bic.w	r2, r2, #22
 8003d6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d103      	bne.n	8003d8e <HAL_DMA_IRQHandler+0x1da>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0208 	bic.w	r2, r2, #8
 8003d9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da2:	223f      	movs	r2, #63	; 0x3f
 8003da4:	409a      	lsls	r2, r3
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d07e      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4798      	blx	r3
        }
        return;
 8003dca:	e079      	b.n	8003ec0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01d      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10d      	bne.n	8003e04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d031      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	4798      	blx	r3
 8003df8:	e02c      	b.n	8003e54 <HAL_DMA_IRQHandler+0x2a0>
 8003dfa:	bf00      	nop
 8003dfc:	20000024 	.word	0x20000024
 8003e00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d023      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4798      	blx	r3
 8003e14:	e01e      	b.n	8003e54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10f      	bne.n	8003e44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0210 	bic.w	r2, r2, #16
 8003e32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d032      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d022      	beq.n	8003eae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2205      	movs	r2, #5
 8003e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0201 	bic.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	3301      	adds	r3, #1
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d307      	bcc.n	8003e9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f2      	bne.n	8003e80 <HAL_DMA_IRQHandler+0x2cc>
 8003e9a:	e000      	b.n	8003e9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	4798      	blx	r3
 8003ebe:	e000      	b.n	8003ec2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ec0:	bf00      	nop
    }
  }
}
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b40      	cmp	r3, #64	; 0x40
 8003ef4:	d108      	bne.n	8003f08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f06:	e007      	b.n	8003f18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	60da      	str	r2, [r3, #12]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	3b10      	subs	r3, #16
 8003f34:	4a14      	ldr	r2, [pc, #80]	; (8003f88 <DMA_CalcBaseAndBitshift+0x64>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f3e:	4a13      	ldr	r2, [pc, #76]	; (8003f8c <DMA_CalcBaseAndBitshift+0x68>)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d909      	bls.n	8003f66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f5a:	f023 0303 	bic.w	r3, r3, #3
 8003f5e:	1d1a      	adds	r2, r3, #4
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	659a      	str	r2, [r3, #88]	; 0x58
 8003f64:	e007      	b.n	8003f76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f6e:	f023 0303 	bic.w	r3, r3, #3
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	aaaaaaab 	.word	0xaaaaaaab
 8003f8c:	0800ab28 	.word	0x0800ab28

08003f90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d11f      	bne.n	8003fea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d856      	bhi.n	800405e <DMA_CheckFifoParam+0xce>
 8003fb0:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <DMA_CheckFifoParam+0x28>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08003fc9 	.word	0x08003fc9
 8003fbc:	08003fdb 	.word	0x08003fdb
 8003fc0:	08003fc9 	.word	0x08003fc9
 8003fc4:	0800405f 	.word	0x0800405f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d046      	beq.n	8004062 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd8:	e043      	b.n	8004062 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fe2:	d140      	bne.n	8004066 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe8:	e03d      	b.n	8004066 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff2:	d121      	bne.n	8004038 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d837      	bhi.n	800406a <DMA_CheckFifoParam+0xda>
 8003ffa:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <DMA_CheckFifoParam+0x70>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004011 	.word	0x08004011
 8004004:	08004017 	.word	0x08004017
 8004008:	08004011 	.word	0x08004011
 800400c:	08004029 	.word	0x08004029
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
      break;
 8004014:	e030      	b.n	8004078 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d025      	beq.n	800406e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004026:	e022      	b.n	800406e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004030:	d11f      	bne.n	8004072 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004036:	e01c      	b.n	8004072 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d903      	bls.n	8004046 <DMA_CheckFifoParam+0xb6>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b03      	cmp	r3, #3
 8004042:	d003      	beq.n	800404c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004044:	e018      	b.n	8004078 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
      break;
 800404a:	e015      	b.n	8004078 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00e      	beq.n	8004076 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
      break;
 800405c:	e00b      	b.n	8004076 <DMA_CheckFifoParam+0xe6>
      break;
 800405e:	bf00      	nop
 8004060:	e00a      	b.n	8004078 <DMA_CheckFifoParam+0xe8>
      break;
 8004062:	bf00      	nop
 8004064:	e008      	b.n	8004078 <DMA_CheckFifoParam+0xe8>
      break;
 8004066:	bf00      	nop
 8004068:	e006      	b.n	8004078 <DMA_CheckFifoParam+0xe8>
      break;
 800406a:	bf00      	nop
 800406c:	e004      	b.n	8004078 <DMA_CheckFifoParam+0xe8>
      break;
 800406e:	bf00      	nop
 8004070:	e002      	b.n	8004078 <DMA_CheckFifoParam+0xe8>
      break;   
 8004072:	bf00      	nop
 8004074:	e000      	b.n	8004078 <DMA_CheckFifoParam+0xe8>
      break;
 8004076:	bf00      	nop
    }
  } 
  
  return status; 
 8004078:	7bfb      	ldrb	r3, [r7, #15]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop

08004088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004088:	b480      	push	{r7}
 800408a:	b089      	sub	sp, #36	; 0x24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800409a:	2300      	movs	r3, #0
 800409c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	e165      	b.n	8004370 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040a4:	2201      	movs	r2, #1
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4013      	ands	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	429a      	cmp	r2, r3
 80040be:	f040 8154 	bne.w	800436a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d005      	beq.n	80040da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d130      	bne.n	800413c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	2203      	movs	r2, #3
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004110:	2201      	movs	r2, #1
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 0201 	and.w	r2, r3, #1
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 0303 	and.w	r3, r3, #3
 8004144:	2b03      	cmp	r3, #3
 8004146:	d017      	beq.n	8004178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	2203      	movs	r2, #3
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4313      	orrs	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d123      	bne.n	80041cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	08da      	lsrs	r2, r3, #3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3208      	adds	r2, #8
 800418c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	220f      	movs	r2, #15
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4013      	ands	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	08da      	lsrs	r2, r3, #3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3208      	adds	r2, #8
 80041c6:	69b9      	ldr	r1, [r7, #24]
 80041c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2203      	movs	r2, #3
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 0203 	and.w	r2, r3, #3
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80ae 	beq.w	800436a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	4b5d      	ldr	r3, [pc, #372]	; (8004388 <HAL_GPIO_Init+0x300>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	4a5c      	ldr	r2, [pc, #368]	; (8004388 <HAL_GPIO_Init+0x300>)
 8004218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800421c:	6453      	str	r3, [r2, #68]	; 0x44
 800421e:	4b5a      	ldr	r3, [pc, #360]	; (8004388 <HAL_GPIO_Init+0x300>)
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800422a:	4a58      	ldr	r2, [pc, #352]	; (800438c <HAL_GPIO_Init+0x304>)
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	089b      	lsrs	r3, r3, #2
 8004230:	3302      	adds	r3, #2
 8004232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	220f      	movs	r2, #15
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43db      	mvns	r3, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4013      	ands	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a4f      	ldr	r2, [pc, #316]	; (8004390 <HAL_GPIO_Init+0x308>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d025      	beq.n	80042a2 <HAL_GPIO_Init+0x21a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a4e      	ldr	r2, [pc, #312]	; (8004394 <HAL_GPIO_Init+0x30c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01f      	beq.n	800429e <HAL_GPIO_Init+0x216>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a4d      	ldr	r2, [pc, #308]	; (8004398 <HAL_GPIO_Init+0x310>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d019      	beq.n	800429a <HAL_GPIO_Init+0x212>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a4c      	ldr	r2, [pc, #304]	; (800439c <HAL_GPIO_Init+0x314>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <HAL_GPIO_Init+0x20e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a4b      	ldr	r2, [pc, #300]	; (80043a0 <HAL_GPIO_Init+0x318>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00d      	beq.n	8004292 <HAL_GPIO_Init+0x20a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a4a      	ldr	r2, [pc, #296]	; (80043a4 <HAL_GPIO_Init+0x31c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d007      	beq.n	800428e <HAL_GPIO_Init+0x206>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a49      	ldr	r2, [pc, #292]	; (80043a8 <HAL_GPIO_Init+0x320>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d101      	bne.n	800428a <HAL_GPIO_Init+0x202>
 8004286:	2306      	movs	r3, #6
 8004288:	e00c      	b.n	80042a4 <HAL_GPIO_Init+0x21c>
 800428a:	2307      	movs	r3, #7
 800428c:	e00a      	b.n	80042a4 <HAL_GPIO_Init+0x21c>
 800428e:	2305      	movs	r3, #5
 8004290:	e008      	b.n	80042a4 <HAL_GPIO_Init+0x21c>
 8004292:	2304      	movs	r3, #4
 8004294:	e006      	b.n	80042a4 <HAL_GPIO_Init+0x21c>
 8004296:	2303      	movs	r3, #3
 8004298:	e004      	b.n	80042a4 <HAL_GPIO_Init+0x21c>
 800429a:	2302      	movs	r3, #2
 800429c:	e002      	b.n	80042a4 <HAL_GPIO_Init+0x21c>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_GPIO_Init+0x21c>
 80042a2:	2300      	movs	r3, #0
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	f002 0203 	and.w	r2, r2, #3
 80042aa:	0092      	lsls	r2, r2, #2
 80042ac:	4093      	lsls	r3, r2
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042b4:	4935      	ldr	r1, [pc, #212]	; (800438c <HAL_GPIO_Init+0x304>)
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	089b      	lsrs	r3, r3, #2
 80042ba:	3302      	adds	r3, #2
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042c2:	4b3a      	ldr	r3, [pc, #232]	; (80043ac <HAL_GPIO_Init+0x324>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042e6:	4a31      	ldr	r2, [pc, #196]	; (80043ac <HAL_GPIO_Init+0x324>)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042ec:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <HAL_GPIO_Init+0x324>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	43db      	mvns	r3, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004310:	4a26      	ldr	r2, [pc, #152]	; (80043ac <HAL_GPIO_Init+0x324>)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004316:	4b25      	ldr	r3, [pc, #148]	; (80043ac <HAL_GPIO_Init+0x324>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	43db      	mvns	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800433a:	4a1c      	ldr	r2, [pc, #112]	; (80043ac <HAL_GPIO_Init+0x324>)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004340:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <HAL_GPIO_Init+0x324>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004364:	4a11      	ldr	r2, [pc, #68]	; (80043ac <HAL_GPIO_Init+0x324>)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	3301      	adds	r3, #1
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	2b0f      	cmp	r3, #15
 8004374:	f67f ae96 	bls.w	80040a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	3724      	adds	r7, #36	; 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800
 800438c:	40013800 	.word	0x40013800
 8004390:	40020000 	.word	0x40020000
 8004394:	40020400 	.word	0x40020400
 8004398:	40020800 	.word	0x40020800
 800439c:	40020c00 	.word	0x40020c00
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40021400 	.word	0x40021400
 80043a8:	40021800 	.word	0x40021800
 80043ac:	40013c00 	.word	0x40013c00

080043b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	887b      	ldrh	r3, [r7, #2]
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043c8:	2301      	movs	r3, #1
 80043ca:	73fb      	strb	r3, [r7, #15]
 80043cc:	e001      	b.n	80043d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	807b      	strh	r3, [r7, #2]
 80043ec:	4613      	mov	r3, r2
 80043ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043f0:	787b      	ldrb	r3, [r7, #1]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043f6:	887a      	ldrh	r2, [r7, #2]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043fc:	e003      	b.n	8004406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043fe:	887b      	ldrh	r3, [r7, #2]
 8004400:	041a      	lsls	r2, r3, #16
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	619a      	str	r2, [r3, #24]
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	460b      	mov	r3, r1
 800441c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004424:	887a      	ldrh	r2, [r7, #2]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4013      	ands	r3, r2
 800442a:	041a      	lsls	r2, r3, #16
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	43d9      	mvns	r1, r3
 8004430:	887b      	ldrh	r3, [r7, #2]
 8004432:	400b      	ands	r3, r1
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	619a      	str	r2, [r3, #24]
}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e12b      	b.n	80046b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fe f9aa 	bl	80027c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2224      	movs	r2, #36	; 0x24
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0201 	bic.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800449a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044ac:	f000 fd1a 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 80044b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	4a81      	ldr	r2, [pc, #516]	; (80046bc <HAL_I2C_Init+0x274>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d807      	bhi.n	80044cc <HAL_I2C_Init+0x84>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a80      	ldr	r2, [pc, #512]	; (80046c0 <HAL_I2C_Init+0x278>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	bf94      	ite	ls
 80044c4:	2301      	movls	r3, #1
 80044c6:	2300      	movhi	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	e006      	b.n	80044da <HAL_I2C_Init+0x92>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4a7d      	ldr	r2, [pc, #500]	; (80046c4 <HAL_I2C_Init+0x27c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	bf94      	ite	ls
 80044d4:	2301      	movls	r3, #1
 80044d6:	2300      	movhi	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0e7      	b.n	80046b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4a78      	ldr	r2, [pc, #480]	; (80046c8 <HAL_I2C_Init+0x280>)
 80044e6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ea:	0c9b      	lsrs	r3, r3, #18
 80044ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4a6a      	ldr	r2, [pc, #424]	; (80046bc <HAL_I2C_Init+0x274>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d802      	bhi.n	800451c <HAL_I2C_Init+0xd4>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	3301      	adds	r3, #1
 800451a:	e009      	b.n	8004530 <HAL_I2C_Init+0xe8>
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004522:	fb02 f303 	mul.w	r3, r2, r3
 8004526:	4a69      	ldr	r2, [pc, #420]	; (80046cc <HAL_I2C_Init+0x284>)
 8004528:	fba2 2303 	umull	r2, r3, r2, r3
 800452c:	099b      	lsrs	r3, r3, #6
 800452e:	3301      	adds	r3, #1
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	430b      	orrs	r3, r1
 8004536:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004542:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	495c      	ldr	r1, [pc, #368]	; (80046bc <HAL_I2C_Init+0x274>)
 800454c:	428b      	cmp	r3, r1
 800454e:	d819      	bhi.n	8004584 <HAL_I2C_Init+0x13c>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	1e59      	subs	r1, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	fbb1 f3f3 	udiv	r3, r1, r3
 800455e:	1c59      	adds	r1, r3, #1
 8004560:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004564:	400b      	ands	r3, r1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <HAL_I2C_Init+0x138>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	1e59      	subs	r1, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	fbb1 f3f3 	udiv	r3, r1, r3
 8004578:	3301      	adds	r3, #1
 800457a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457e:	e051      	b.n	8004624 <HAL_I2C_Init+0x1dc>
 8004580:	2304      	movs	r3, #4
 8004582:	e04f      	b.n	8004624 <HAL_I2C_Init+0x1dc>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d111      	bne.n	80045b0 <HAL_I2C_Init+0x168>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1e58      	subs	r0, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6859      	ldr	r1, [r3, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	440b      	add	r3, r1
 800459a:	fbb0 f3f3 	udiv	r3, r0, r3
 800459e:	3301      	adds	r3, #1
 80045a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	e012      	b.n	80045d6 <HAL_I2C_Init+0x18e>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1e58      	subs	r0, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6859      	ldr	r1, [r3, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	0099      	lsls	r1, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045c6:	3301      	adds	r3, #1
 80045c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bf0c      	ite	eq
 80045d0:	2301      	moveq	r3, #1
 80045d2:	2300      	movne	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_I2C_Init+0x196>
 80045da:	2301      	movs	r3, #1
 80045dc:	e022      	b.n	8004624 <HAL_I2C_Init+0x1dc>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10e      	bne.n	8004604 <HAL_I2C_Init+0x1bc>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1e58      	subs	r0, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6859      	ldr	r1, [r3, #4]
 80045ee:	460b      	mov	r3, r1
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	440b      	add	r3, r1
 80045f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80045f8:	3301      	adds	r3, #1
 80045fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004602:	e00f      	b.n	8004624 <HAL_I2C_Init+0x1dc>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	1e58      	subs	r0, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6859      	ldr	r1, [r3, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	0099      	lsls	r1, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	fbb0 f3f3 	udiv	r3, r0, r3
 800461a:	3301      	adds	r3, #1
 800461c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004620:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	6809      	ldr	r1, [r1, #0]
 8004628:	4313      	orrs	r3, r2
 800462a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004652:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6911      	ldr	r1, [r2, #16]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68d2      	ldr	r2, [r2, #12]
 800465e:	4311      	orrs	r1, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	430b      	orrs	r3, r1
 8004666:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695a      	ldr	r2, [r3, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	000186a0 	.word	0x000186a0
 80046c0:	001e847f 	.word	0x001e847f
 80046c4:	003d08ff 	.word	0x003d08ff
 80046c8:	431bde83 	.word	0x431bde83
 80046cc:	10624dd3 	.word	0x10624dd3

080046d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	461a      	mov	r2, r3
 80046de:	4603      	mov	r3, r0
 80046e0:	817b      	strh	r3, [r7, #10]
 80046e2:	460b      	mov	r3, r1
 80046e4:	813b      	strh	r3, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046ea:	f7fe fad5 	bl	8002c98 <HAL_GetTick>
 80046ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	f040 80d9 	bne.w	80048b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	2319      	movs	r3, #25
 8004704:	2201      	movs	r2, #1
 8004706:	496d      	ldr	r1, [pc, #436]	; (80048bc <HAL_I2C_Mem_Write+0x1ec>)
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f971 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
 8004716:	e0cc      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_I2C_Mem_Write+0x56>
 8004722:	2302      	movs	r3, #2
 8004724:	e0c5      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b01      	cmp	r3, #1
 800473a:	d007      	beq.n	800474c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2221      	movs	r2, #33	; 0x21
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2240      	movs	r2, #64	; 0x40
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a3a      	ldr	r2, [r7, #32]
 8004776:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800477c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a4d      	ldr	r2, [pc, #308]	; (80048c0 <HAL_I2C_Mem_Write+0x1f0>)
 800478c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800478e:	88f8      	ldrh	r0, [r7, #6]
 8004790:	893a      	ldrh	r2, [r7, #8]
 8004792:	8979      	ldrh	r1, [r7, #10]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	4603      	mov	r3, r0
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 f890 	bl	80048c4 <I2C_RequestMemoryWrite>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d052      	beq.n	8004850 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e081      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f9f2 	bl	8004b9c <I2C_WaitOnTXEFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00d      	beq.n	80047da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d107      	bne.n	80047d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e06b      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	781a      	ldrb	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b04      	cmp	r3, #4
 8004816:	d11b      	bne.n	8004850 <HAL_I2C_Mem_Write+0x180>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d017      	beq.n	8004850 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	781a      	ldrb	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1aa      	bne.n	80047ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 f9de 	bl	8004c1e <I2C_WaitOnBTFFlagUntilTimeout>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00d      	beq.n	8004884 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	2b04      	cmp	r3, #4
 800486e:	d107      	bne.n	8004880 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e016      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	e000      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048b0:	2302      	movs	r3, #2
  }
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	00100002 	.word	0x00100002
 80048c0:	ffff0000 	.word	0xffff0000

080048c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	817b      	strh	r3, [r7, #10]
 80048d6:	460b      	mov	r3, r1
 80048d8:	813b      	strh	r3, [r7, #8]
 80048da:	4613      	mov	r3, r2
 80048dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f878 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00d      	beq.n	8004922 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004914:	d103      	bne.n	800491e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e05f      	b.n	80049e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004922:	897b      	ldrh	r3, [r7, #10]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004930:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	6a3a      	ldr	r2, [r7, #32]
 8004936:	492d      	ldr	r1, [pc, #180]	; (80049ec <I2C_RequestMemoryWrite+0x128>)
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f8b0 	bl	8004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e04c      	b.n	80049e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800495e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004960:	6a39      	ldr	r1, [r7, #32]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f91a 	bl	8004b9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00d      	beq.n	800498a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	2b04      	cmp	r3, #4
 8004974:	d107      	bne.n	8004986 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004984:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e02b      	b.n	80049e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d105      	bne.n	800499c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004990:	893b      	ldrh	r3, [r7, #8]
 8004992:	b2da      	uxtb	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	611a      	str	r2, [r3, #16]
 800499a:	e021      	b.n	80049e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800499c:	893b      	ldrh	r3, [r7, #8]
 800499e:	0a1b      	lsrs	r3, r3, #8
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ac:	6a39      	ldr	r1, [r7, #32]
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f8f4 	bl	8004b9c <I2C_WaitOnTXEFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00d      	beq.n	80049d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d107      	bne.n	80049d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e005      	b.n	80049e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049d6:	893b      	ldrh	r3, [r7, #8]
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	00010002 	.word	0x00010002

080049f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	4613      	mov	r3, r2
 80049fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a00:	e025      	b.n	8004a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d021      	beq.n	8004a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0a:	f7fe f945 	bl	8002c98 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d302      	bcc.n	8004a20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d116      	bne.n	8004a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f043 0220 	orr.w	r2, r3, #32
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e023      	b.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	0c1b      	lsrs	r3, r3, #16
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d10d      	bne.n	8004a74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	43da      	mvns	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	e00c      	b.n	8004a8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bf0c      	ite	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	2300      	movne	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d0b6      	beq.n	8004a02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
 8004aaa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004aac:	e051      	b.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abc:	d123      	bne.n	8004b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004acc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ad6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f043 0204 	orr.w	r2, r3, #4
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e046      	b.n	8004b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d021      	beq.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0e:	f7fe f8c3 	bl	8002c98 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d302      	bcc.n	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d116      	bne.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f043 0220 	orr.w	r2, r3, #32
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e020      	b.n	8004b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d10c      	bne.n	8004b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	43da      	mvns	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4013      	ands	r3, r2
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	bf14      	ite	ne
 8004b6e:	2301      	movne	r3, #1
 8004b70:	2300      	moveq	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	e00b      	b.n	8004b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	43da      	mvns	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4013      	ands	r3, r2
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d18d      	bne.n	8004aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ba8:	e02d      	b.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f878 	bl	8004ca0 <I2C_IsAcknowledgeFailed>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e02d      	b.n	8004c16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d021      	beq.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc2:	f7fe f869 	bl	8002c98 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d302      	bcc.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d116      	bne.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f043 0220 	orr.w	r2, r3, #32
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e007      	b.n	8004c16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c10:	2b80      	cmp	r3, #128	; 0x80
 8004c12:	d1ca      	bne.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c2a:	e02d      	b.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f837 	bl	8004ca0 <I2C_IsAcknowledgeFailed>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e02d      	b.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c42:	d021      	beq.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c44:	f7fe f828 	bl	8002c98 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d302      	bcc.n	8004c5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d116      	bne.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	f043 0220 	orr.w	r2, r3, #32
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e007      	b.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d1ca      	bne.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb6:	d11b      	bne.n	8004cf0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	f043 0204 	orr.w	r2, r3, #4
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
	...

08004d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0cc      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d14:	4b68      	ldr	r3, [pc, #416]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 030f 	and.w	r3, r3, #15
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d90c      	bls.n	8004d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b65      	ldr	r3, [pc, #404]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2a:	4b63      	ldr	r3, [pc, #396]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d001      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0b8      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d020      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d54:	4b59      	ldr	r3, [pc, #356]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	4a58      	ldr	r2, [pc, #352]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d6c:	4b53      	ldr	r3, [pc, #332]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	4a52      	ldr	r2, [pc, #328]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d78:	4b50      	ldr	r3, [pc, #320]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	494d      	ldr	r1, [pc, #308]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d044      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d107      	bne.n	8004dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9e:	4b47      	ldr	r3, [pc, #284]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d119      	bne.n	8004dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e07f      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d003      	beq.n	8004dbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d107      	bne.n	8004dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dbe:	4b3f      	ldr	r3, [pc, #252]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e06f      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dce:	4b3b      	ldr	r3, [pc, #236]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e067      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dde:	4b37      	ldr	r3, [pc, #220]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f023 0203 	bic.w	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4934      	ldr	r1, [pc, #208]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004df0:	f7fd ff52 	bl	8002c98 <HAL_GetTick>
 8004df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df8:	f7fd ff4e 	bl	8002c98 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e04f      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0e:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 020c 	and.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d1eb      	bne.n	8004df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e20:	4b25      	ldr	r3, [pc, #148]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d20c      	bcs.n	8004e48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4b22      	ldr	r3, [pc, #136]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e36:	4b20      	ldr	r3, [pc, #128]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d001      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e032      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d008      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e54:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4916      	ldr	r1, [pc, #88]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	490e      	ldr	r1, [pc, #56]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e86:	f000 f855 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	091b      	lsrs	r3, r3, #4
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	490a      	ldr	r1, [pc, #40]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e98:	5ccb      	ldrb	r3, [r1, r3]
 8004e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9e:	4a09      	ldr	r2, [pc, #36]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ea2:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fd feb2 	bl	8002c10 <HAL_InitTick>

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40023c00 	.word	0x40023c00
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	0800ab10 	.word	0x0800ab10
 8004ec4:	20000024 	.word	0x20000024
 8004ec8:	20000028 	.word	0x20000028

08004ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000024 	.word	0x20000024

08004ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ee8:	f7ff fff0 	bl	8004ecc <HAL_RCC_GetHCLKFreq>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	0a9b      	lsrs	r3, r3, #10
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	4903      	ldr	r1, [pc, #12]	; (8004f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004efa:	5ccb      	ldrb	r3, [r1, r3]
 8004efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40023800 	.word	0x40023800
 8004f08:	0800ab20 	.word	0x0800ab20

08004f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f10:	f7ff ffdc 	bl	8004ecc <HAL_RCC_GetHCLKFreq>
 8004f14:	4602      	mov	r2, r0
 8004f16:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	0b5b      	lsrs	r3, r3, #13
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	4903      	ldr	r1, [pc, #12]	; (8004f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f22:	5ccb      	ldrb	r3, [r1, r3]
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	0800ab20 	.word	0x0800ab20

08004f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f38:	b0ae      	sub	sp, #184	; 0xb8
 8004f3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f5a:	4bcb      	ldr	r3, [pc, #812]	; (8005288 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b0c      	cmp	r3, #12
 8004f64:	f200 8206 	bhi.w	8005374 <HAL_RCC_GetSysClockFreq+0x440>
 8004f68:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004fa5 	.word	0x08004fa5
 8004f74:	08005375 	.word	0x08005375
 8004f78:	08005375 	.word	0x08005375
 8004f7c:	08005375 	.word	0x08005375
 8004f80:	08004fad 	.word	0x08004fad
 8004f84:	08005375 	.word	0x08005375
 8004f88:	08005375 	.word	0x08005375
 8004f8c:	08005375 	.word	0x08005375
 8004f90:	08004fb5 	.word	0x08004fb5
 8004f94:	08005375 	.word	0x08005375
 8004f98:	08005375 	.word	0x08005375
 8004f9c:	08005375 	.word	0x08005375
 8004fa0:	080051a5 	.word	0x080051a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fa4:	4bb9      	ldr	r3, [pc, #740]	; (800528c <HAL_RCC_GetSysClockFreq+0x358>)
 8004fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004faa:	e1e7      	b.n	800537c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fac:	4bb8      	ldr	r3, [pc, #736]	; (8005290 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fb2:	e1e3      	b.n	800537c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fb4:	4bb4      	ldr	r3, [pc, #720]	; (8005288 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fc0:	4bb1      	ldr	r3, [pc, #708]	; (8005288 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d071      	beq.n	80050b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fcc:	4bae      	ldr	r3, [pc, #696]	; (8005288 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	099b      	lsrs	r3, r3, #6
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fd8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	462b      	mov	r3, r5
 8004ff6:	f04f 0000 	mov.w	r0, #0
 8004ffa:	f04f 0100 	mov.w	r1, #0
 8004ffe:	0159      	lsls	r1, r3, #5
 8005000:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005004:	0150      	lsls	r0, r2, #5
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4621      	mov	r1, r4
 800500c:	1a51      	subs	r1, r2, r1
 800500e:	6439      	str	r1, [r7, #64]	; 0x40
 8005010:	4629      	mov	r1, r5
 8005012:	eb63 0301 	sbc.w	r3, r3, r1
 8005016:	647b      	str	r3, [r7, #68]	; 0x44
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005024:	4649      	mov	r1, r9
 8005026:	018b      	lsls	r3, r1, #6
 8005028:	4641      	mov	r1, r8
 800502a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800502e:	4641      	mov	r1, r8
 8005030:	018a      	lsls	r2, r1, #6
 8005032:	4641      	mov	r1, r8
 8005034:	1a51      	subs	r1, r2, r1
 8005036:	63b9      	str	r1, [r7, #56]	; 0x38
 8005038:	4649      	mov	r1, r9
 800503a:	eb63 0301 	sbc.w	r3, r3, r1
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800504c:	4649      	mov	r1, r9
 800504e:	00cb      	lsls	r3, r1, #3
 8005050:	4641      	mov	r1, r8
 8005052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005056:	4641      	mov	r1, r8
 8005058:	00ca      	lsls	r2, r1, #3
 800505a:	4610      	mov	r0, r2
 800505c:	4619      	mov	r1, r3
 800505e:	4603      	mov	r3, r0
 8005060:	4622      	mov	r2, r4
 8005062:	189b      	adds	r3, r3, r2
 8005064:	633b      	str	r3, [r7, #48]	; 0x30
 8005066:	462b      	mov	r3, r5
 8005068:	460a      	mov	r2, r1
 800506a:	eb42 0303 	adc.w	r3, r2, r3
 800506e:	637b      	str	r3, [r7, #52]	; 0x34
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800507c:	4629      	mov	r1, r5
 800507e:	024b      	lsls	r3, r1, #9
 8005080:	4621      	mov	r1, r4
 8005082:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005086:	4621      	mov	r1, r4
 8005088:	024a      	lsls	r2, r1, #9
 800508a:	4610      	mov	r0, r2
 800508c:	4619      	mov	r1, r3
 800508e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005092:	2200      	movs	r2, #0
 8005094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005098:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800509c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80050a0:	f7fb fda2 	bl	8000be8 <__aeabi_uldivmod>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4613      	mov	r3, r2
 80050aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050ae:	e067      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050b0:	4b75      	ldr	r3, [pc, #468]	; (8005288 <HAL_RCC_GetSysClockFreq+0x354>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	099b      	lsrs	r3, r3, #6
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050bc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80050c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80050ca:	2300      	movs	r3, #0
 80050cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80050d2:	4622      	mov	r2, r4
 80050d4:	462b      	mov	r3, r5
 80050d6:	f04f 0000 	mov.w	r0, #0
 80050da:	f04f 0100 	mov.w	r1, #0
 80050de:	0159      	lsls	r1, r3, #5
 80050e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050e4:	0150      	lsls	r0, r2, #5
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4621      	mov	r1, r4
 80050ec:	1a51      	subs	r1, r2, r1
 80050ee:	62b9      	str	r1, [r7, #40]	; 0x28
 80050f0:	4629      	mov	r1, r5
 80050f2:	eb63 0301 	sbc.w	r3, r3, r1
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005104:	4649      	mov	r1, r9
 8005106:	018b      	lsls	r3, r1, #6
 8005108:	4641      	mov	r1, r8
 800510a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800510e:	4641      	mov	r1, r8
 8005110:	018a      	lsls	r2, r1, #6
 8005112:	4641      	mov	r1, r8
 8005114:	ebb2 0a01 	subs.w	sl, r2, r1
 8005118:	4649      	mov	r1, r9
 800511a:	eb63 0b01 	sbc.w	fp, r3, r1
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800512a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800512e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005132:	4692      	mov	sl, r2
 8005134:	469b      	mov	fp, r3
 8005136:	4623      	mov	r3, r4
 8005138:	eb1a 0303 	adds.w	r3, sl, r3
 800513c:	623b      	str	r3, [r7, #32]
 800513e:	462b      	mov	r3, r5
 8005140:	eb4b 0303 	adc.w	r3, fp, r3
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005152:	4629      	mov	r1, r5
 8005154:	028b      	lsls	r3, r1, #10
 8005156:	4621      	mov	r1, r4
 8005158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800515c:	4621      	mov	r1, r4
 800515e:	028a      	lsls	r2, r1, #10
 8005160:	4610      	mov	r0, r2
 8005162:	4619      	mov	r1, r3
 8005164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005168:	2200      	movs	r2, #0
 800516a:	673b      	str	r3, [r7, #112]	; 0x70
 800516c:	677a      	str	r2, [r7, #116]	; 0x74
 800516e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005172:	f7fb fd39 	bl	8000be8 <__aeabi_uldivmod>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	4613      	mov	r3, r2
 800517c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005180:	4b41      	ldr	r3, [pc, #260]	; (8005288 <HAL_RCC_GetSysClockFreq+0x354>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	0c1b      	lsrs	r3, r3, #16
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	3301      	adds	r3, #1
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005192:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800519a:	fbb2 f3f3 	udiv	r3, r2, r3
 800519e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80051a2:	e0eb      	b.n	800537c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051a4:	4b38      	ldr	r3, [pc, #224]	; (8005288 <HAL_RCC_GetSysClockFreq+0x354>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051b0:	4b35      	ldr	r3, [pc, #212]	; (8005288 <HAL_RCC_GetSysClockFreq+0x354>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d06b      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051bc:	4b32      	ldr	r3, [pc, #200]	; (8005288 <HAL_RCC_GetSysClockFreq+0x354>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	099b      	lsrs	r3, r3, #6
 80051c2:	2200      	movs	r2, #0
 80051c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80051c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ce:	663b      	str	r3, [r7, #96]	; 0x60
 80051d0:	2300      	movs	r3, #0
 80051d2:	667b      	str	r3, [r7, #100]	; 0x64
 80051d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80051d8:	4622      	mov	r2, r4
 80051da:	462b      	mov	r3, r5
 80051dc:	f04f 0000 	mov.w	r0, #0
 80051e0:	f04f 0100 	mov.w	r1, #0
 80051e4:	0159      	lsls	r1, r3, #5
 80051e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ea:	0150      	lsls	r0, r2, #5
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4621      	mov	r1, r4
 80051f2:	1a51      	subs	r1, r2, r1
 80051f4:	61b9      	str	r1, [r7, #24]
 80051f6:	4629      	mov	r1, r5
 80051f8:	eb63 0301 	sbc.w	r3, r3, r1
 80051fc:	61fb      	str	r3, [r7, #28]
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800520a:	4659      	mov	r1, fp
 800520c:	018b      	lsls	r3, r1, #6
 800520e:	4651      	mov	r1, sl
 8005210:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005214:	4651      	mov	r1, sl
 8005216:	018a      	lsls	r2, r1, #6
 8005218:	4651      	mov	r1, sl
 800521a:	ebb2 0801 	subs.w	r8, r2, r1
 800521e:	4659      	mov	r1, fp
 8005220:	eb63 0901 	sbc.w	r9, r3, r1
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005230:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005234:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005238:	4690      	mov	r8, r2
 800523a:	4699      	mov	r9, r3
 800523c:	4623      	mov	r3, r4
 800523e:	eb18 0303 	adds.w	r3, r8, r3
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	462b      	mov	r3, r5
 8005246:	eb49 0303 	adc.w	r3, r9, r3
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005258:	4629      	mov	r1, r5
 800525a:	024b      	lsls	r3, r1, #9
 800525c:	4621      	mov	r1, r4
 800525e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005262:	4621      	mov	r1, r4
 8005264:	024a      	lsls	r2, r1, #9
 8005266:	4610      	mov	r0, r2
 8005268:	4619      	mov	r1, r3
 800526a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800526e:	2200      	movs	r2, #0
 8005270:	65bb      	str	r3, [r7, #88]	; 0x58
 8005272:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005274:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005278:	f7fb fcb6 	bl	8000be8 <__aeabi_uldivmod>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4613      	mov	r3, r2
 8005282:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005286:	e065      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0x420>
 8005288:	40023800 	.word	0x40023800
 800528c:	00f42400 	.word	0x00f42400
 8005290:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005294:	4b3d      	ldr	r3, [pc, #244]	; (800538c <HAL_RCC_GetSysClockFreq+0x458>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	099b      	lsrs	r3, r3, #6
 800529a:	2200      	movs	r2, #0
 800529c:	4618      	mov	r0, r3
 800529e:	4611      	mov	r1, r2
 80052a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052a4:	653b      	str	r3, [r7, #80]	; 0x50
 80052a6:	2300      	movs	r3, #0
 80052a8:	657b      	str	r3, [r7, #84]	; 0x54
 80052aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80052ae:	4642      	mov	r2, r8
 80052b0:	464b      	mov	r3, r9
 80052b2:	f04f 0000 	mov.w	r0, #0
 80052b6:	f04f 0100 	mov.w	r1, #0
 80052ba:	0159      	lsls	r1, r3, #5
 80052bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052c0:	0150      	lsls	r0, r2, #5
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4641      	mov	r1, r8
 80052c8:	1a51      	subs	r1, r2, r1
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	4649      	mov	r1, r9
 80052ce:	eb63 0301 	sbc.w	r3, r3, r1
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80052e0:	4659      	mov	r1, fp
 80052e2:	018b      	lsls	r3, r1, #6
 80052e4:	4651      	mov	r1, sl
 80052e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052ea:	4651      	mov	r1, sl
 80052ec:	018a      	lsls	r2, r1, #6
 80052ee:	4651      	mov	r1, sl
 80052f0:	1a54      	subs	r4, r2, r1
 80052f2:	4659      	mov	r1, fp
 80052f4:	eb63 0501 	sbc.w	r5, r3, r1
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	00eb      	lsls	r3, r5, #3
 8005302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005306:	00e2      	lsls	r2, r4, #3
 8005308:	4614      	mov	r4, r2
 800530a:	461d      	mov	r5, r3
 800530c:	4643      	mov	r3, r8
 800530e:	18e3      	adds	r3, r4, r3
 8005310:	603b      	str	r3, [r7, #0]
 8005312:	464b      	mov	r3, r9
 8005314:	eb45 0303 	adc.w	r3, r5, r3
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005326:	4629      	mov	r1, r5
 8005328:	028b      	lsls	r3, r1, #10
 800532a:	4621      	mov	r1, r4
 800532c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005330:	4621      	mov	r1, r4
 8005332:	028a      	lsls	r2, r1, #10
 8005334:	4610      	mov	r0, r2
 8005336:	4619      	mov	r1, r3
 8005338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800533c:	2200      	movs	r2, #0
 800533e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005340:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005342:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005346:	f7fb fc4f 	bl	8000be8 <__aeabi_uldivmod>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4613      	mov	r3, r2
 8005350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005354:	4b0d      	ldr	r3, [pc, #52]	; (800538c <HAL_RCC_GetSysClockFreq+0x458>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	0f1b      	lsrs	r3, r3, #28
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005362:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800536a:	fbb2 f3f3 	udiv	r3, r2, r3
 800536e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005372:	e003      	b.n	800537c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005374:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005376:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800537a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800537c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005380:	4618      	mov	r0, r3
 8005382:	37b8      	adds	r7, #184	; 0xb8
 8005384:	46bd      	mov	sp, r7
 8005386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800538a:	bf00      	nop
 800538c:	40023800 	.word	0x40023800
 8005390:	00f42400 	.word	0x00f42400

08005394 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e28d      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 8083 	beq.w	80054ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053b4:	4b94      	ldr	r3, [pc, #592]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 030c 	and.w	r3, r3, #12
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d019      	beq.n	80053f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053c0:	4b91      	ldr	r3, [pc, #580]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d106      	bne.n	80053da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053cc:	4b8e      	ldr	r3, [pc, #568]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053d8:	d00c      	beq.n	80053f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053da:	4b8b      	ldr	r3, [pc, #556]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053e2:	2b0c      	cmp	r3, #12
 80053e4:	d112      	bne.n	800540c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053e6:	4b88      	ldr	r3, [pc, #544]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f2:	d10b      	bne.n	800540c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f4:	4b84      	ldr	r3, [pc, #528]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d05b      	beq.n	80054b8 <HAL_RCC_OscConfig+0x124>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d157      	bne.n	80054b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e25a      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005414:	d106      	bne.n	8005424 <HAL_RCC_OscConfig+0x90>
 8005416:	4b7c      	ldr	r3, [pc, #496]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a7b      	ldr	r2, [pc, #492]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 800541c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e01d      	b.n	8005460 <HAL_RCC_OscConfig+0xcc>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800542c:	d10c      	bne.n	8005448 <HAL_RCC_OscConfig+0xb4>
 800542e:	4b76      	ldr	r3, [pc, #472]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a75      	ldr	r2, [pc, #468]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 8005434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	4b73      	ldr	r3, [pc, #460]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a72      	ldr	r2, [pc, #456]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 8005440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	e00b      	b.n	8005460 <HAL_RCC_OscConfig+0xcc>
 8005448:	4b6f      	ldr	r3, [pc, #444]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a6e      	ldr	r2, [pc, #440]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 800544e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	4b6c      	ldr	r3, [pc, #432]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a6b      	ldr	r2, [pc, #428]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 800545a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800545e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d013      	beq.n	8005490 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005468:	f7fd fc16 	bl	8002c98 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005470:	f7fd fc12 	bl	8002c98 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b64      	cmp	r3, #100	; 0x64
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e21f      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005482:	4b61      	ldr	r3, [pc, #388]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f0      	beq.n	8005470 <HAL_RCC_OscConfig+0xdc>
 800548e:	e014      	b.n	80054ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005490:	f7fd fc02 	bl	8002c98 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005498:	f7fd fbfe 	bl	8002c98 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b64      	cmp	r3, #100	; 0x64
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e20b      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054aa:	4b57      	ldr	r3, [pc, #348]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x104>
 80054b6:	e000      	b.n	80054ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d06f      	beq.n	80055a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054c6:	4b50      	ldr	r3, [pc, #320]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 030c 	and.w	r3, r3, #12
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d017      	beq.n	8005502 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054d2:	4b4d      	ldr	r3, [pc, #308]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d105      	bne.n	80054ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054de:	4b4a      	ldr	r3, [pc, #296]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00b      	beq.n	8005502 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ea:	4b47      	ldr	r3, [pc, #284]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054f2:	2b0c      	cmp	r3, #12
 80054f4:	d11c      	bne.n	8005530 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054f6:	4b44      	ldr	r3, [pc, #272]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d116      	bne.n	8005530 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005502:	4b41      	ldr	r3, [pc, #260]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <HAL_RCC_OscConfig+0x186>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d001      	beq.n	800551a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e1d3      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551a:	4b3b      	ldr	r3, [pc, #236]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	4937      	ldr	r1, [pc, #220]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 800552a:	4313      	orrs	r3, r2
 800552c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800552e:	e03a      	b.n	80055a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d020      	beq.n	800557a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005538:	4b34      	ldr	r3, [pc, #208]	; (800560c <HAL_RCC_OscConfig+0x278>)
 800553a:	2201      	movs	r2, #1
 800553c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553e:	f7fd fbab 	bl	8002c98 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005546:	f7fd fba7 	bl	8002c98 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e1b4      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005558:	4b2b      	ldr	r3, [pc, #172]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005564:	4b28      	ldr	r3, [pc, #160]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	4925      	ldr	r1, [pc, #148]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 8005574:	4313      	orrs	r3, r2
 8005576:	600b      	str	r3, [r1, #0]
 8005578:	e015      	b.n	80055a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800557a:	4b24      	ldr	r3, [pc, #144]	; (800560c <HAL_RCC_OscConfig+0x278>)
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fd fb8a 	bl	8002c98 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005588:	f7fd fb86 	bl	8002c98 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e193      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559a:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f0      	bne.n	8005588 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d036      	beq.n	8005620 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d016      	beq.n	80055e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ba:	4b15      	ldr	r3, [pc, #84]	; (8005610 <HAL_RCC_OscConfig+0x27c>)
 80055bc:	2201      	movs	r2, #1
 80055be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c0:	f7fd fb6a 	bl	8002c98 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c8:	f7fd fb66 	bl	8002c98 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e173      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055da:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <HAL_RCC_OscConfig+0x274>)
 80055dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f0      	beq.n	80055c8 <HAL_RCC_OscConfig+0x234>
 80055e6:	e01b      	b.n	8005620 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e8:	4b09      	ldr	r3, [pc, #36]	; (8005610 <HAL_RCC_OscConfig+0x27c>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ee:	f7fd fb53 	bl	8002c98 <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f4:	e00e      	b.n	8005614 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055f6:	f7fd fb4f 	bl	8002c98 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d907      	bls.n	8005614 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e15c      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
 8005608:	40023800 	.word	0x40023800
 800560c:	42470000 	.word	0x42470000
 8005610:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005614:	4b8a      	ldr	r3, [pc, #552]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 8005616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1ea      	bne.n	80055f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8097 	beq.w	800575c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800562e:	2300      	movs	r3, #0
 8005630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005632:	4b83      	ldr	r3, [pc, #524]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10f      	bne.n	800565e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800563e:	2300      	movs	r3, #0
 8005640:	60bb      	str	r3, [r7, #8]
 8005642:	4b7f      	ldr	r3, [pc, #508]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	4a7e      	ldr	r2, [pc, #504]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 8005648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564c:	6413      	str	r3, [r2, #64]	; 0x40
 800564e:	4b7c      	ldr	r3, [pc, #496]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800565a:	2301      	movs	r3, #1
 800565c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800565e:	4b79      	ldr	r3, [pc, #484]	; (8005844 <HAL_RCC_OscConfig+0x4b0>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005666:	2b00      	cmp	r3, #0
 8005668:	d118      	bne.n	800569c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800566a:	4b76      	ldr	r3, [pc, #472]	; (8005844 <HAL_RCC_OscConfig+0x4b0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a75      	ldr	r2, [pc, #468]	; (8005844 <HAL_RCC_OscConfig+0x4b0>)
 8005670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005676:	f7fd fb0f 	bl	8002c98 <HAL_GetTick>
 800567a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800567e:	f7fd fb0b 	bl	8002c98 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e118      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005690:	4b6c      	ldr	r3, [pc, #432]	; (8005844 <HAL_RCC_OscConfig+0x4b0>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f0      	beq.n	800567e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d106      	bne.n	80056b2 <HAL_RCC_OscConfig+0x31e>
 80056a4:	4b66      	ldr	r3, [pc, #408]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a8:	4a65      	ldr	r2, [pc, #404]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 80056aa:	f043 0301 	orr.w	r3, r3, #1
 80056ae:	6713      	str	r3, [r2, #112]	; 0x70
 80056b0:	e01c      	b.n	80056ec <HAL_RCC_OscConfig+0x358>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2b05      	cmp	r3, #5
 80056b8:	d10c      	bne.n	80056d4 <HAL_RCC_OscConfig+0x340>
 80056ba:	4b61      	ldr	r3, [pc, #388]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	4a60      	ldr	r2, [pc, #384]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 80056c0:	f043 0304 	orr.w	r3, r3, #4
 80056c4:	6713      	str	r3, [r2, #112]	; 0x70
 80056c6:	4b5e      	ldr	r3, [pc, #376]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	4a5d      	ldr	r2, [pc, #372]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 80056cc:	f043 0301 	orr.w	r3, r3, #1
 80056d0:	6713      	str	r3, [r2, #112]	; 0x70
 80056d2:	e00b      	b.n	80056ec <HAL_RCC_OscConfig+0x358>
 80056d4:	4b5a      	ldr	r3, [pc, #360]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 80056d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d8:	4a59      	ldr	r2, [pc, #356]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 80056da:	f023 0301 	bic.w	r3, r3, #1
 80056de:	6713      	str	r3, [r2, #112]	; 0x70
 80056e0:	4b57      	ldr	r3, [pc, #348]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	4a56      	ldr	r2, [pc, #344]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 80056e6:	f023 0304 	bic.w	r3, r3, #4
 80056ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d015      	beq.n	8005720 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f4:	f7fd fad0 	bl	8002c98 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056fa:	e00a      	b.n	8005712 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056fc:	f7fd facc 	bl	8002c98 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	f241 3288 	movw	r2, #5000	; 0x1388
 800570a:	4293      	cmp	r3, r2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e0d7      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005712:	4b4b      	ldr	r3, [pc, #300]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 8005714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0ee      	beq.n	80056fc <HAL_RCC_OscConfig+0x368>
 800571e:	e014      	b.n	800574a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005720:	f7fd faba 	bl	8002c98 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005726:	e00a      	b.n	800573e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005728:	f7fd fab6 	bl	8002c98 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	f241 3288 	movw	r2, #5000	; 0x1388
 8005736:	4293      	cmp	r3, r2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e0c1      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800573e:	4b40      	ldr	r3, [pc, #256]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 8005740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1ee      	bne.n	8005728 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d105      	bne.n	800575c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005750:	4b3b      	ldr	r3, [pc, #236]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	4a3a      	ldr	r2, [pc, #232]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 8005756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800575a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 80ad 	beq.w	80058c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005766:	4b36      	ldr	r3, [pc, #216]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 030c 	and.w	r3, r3, #12
 800576e:	2b08      	cmp	r3, #8
 8005770:	d060      	beq.n	8005834 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d145      	bne.n	8005806 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800577a:	4b33      	ldr	r3, [pc, #204]	; (8005848 <HAL_RCC_OscConfig+0x4b4>)
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005780:	f7fd fa8a 	bl	8002c98 <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005788:	f7fd fa86 	bl	8002c98 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e093      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800579a:	4b29      	ldr	r3, [pc, #164]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f0      	bne.n	8005788 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69da      	ldr	r2, [r3, #28]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	019b      	lsls	r3, r3, #6
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	085b      	lsrs	r3, r3, #1
 80057be:	3b01      	subs	r3, #1
 80057c0:	041b      	lsls	r3, r3, #16
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	061b      	lsls	r3, r3, #24
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	071b      	lsls	r3, r3, #28
 80057d2:	491b      	ldr	r1, [pc, #108]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057d8:	4b1b      	ldr	r3, [pc, #108]	; (8005848 <HAL_RCC_OscConfig+0x4b4>)
 80057da:	2201      	movs	r2, #1
 80057dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057de:	f7fd fa5b 	bl	8002c98 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e6:	f7fd fa57 	bl	8002c98 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e064      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f8:	4b11      	ldr	r3, [pc, #68]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0f0      	beq.n	80057e6 <HAL_RCC_OscConfig+0x452>
 8005804:	e05c      	b.n	80058c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005806:	4b10      	ldr	r3, [pc, #64]	; (8005848 <HAL_RCC_OscConfig+0x4b4>)
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580c:	f7fd fa44 	bl	8002c98 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005814:	f7fd fa40 	bl	8002c98 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e04d      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005826:	4b06      	ldr	r3, [pc, #24]	; (8005840 <HAL_RCC_OscConfig+0x4ac>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f0      	bne.n	8005814 <HAL_RCC_OscConfig+0x480>
 8005832:	e045      	b.n	80058c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d107      	bne.n	800584c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e040      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
 8005840:	40023800 	.word	0x40023800
 8005844:	40007000 	.word	0x40007000
 8005848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800584c:	4b1f      	ldr	r3, [pc, #124]	; (80058cc <HAL_RCC_OscConfig+0x538>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d030      	beq.n	80058bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005864:	429a      	cmp	r2, r3
 8005866:	d129      	bne.n	80058bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005872:	429a      	cmp	r2, r3
 8005874:	d122      	bne.n	80058bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800587c:	4013      	ands	r3, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005884:	4293      	cmp	r3, r2
 8005886:	d119      	bne.n	80058bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005892:	085b      	lsrs	r3, r3, #1
 8005894:	3b01      	subs	r3, #1
 8005896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005898:	429a      	cmp	r2, r3
 800589a:	d10f      	bne.n	80058bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d107      	bne.n	80058bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d001      	beq.n	80058c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40023800 	.word	0x40023800

080058d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e041      	b.n	8005966 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fc ffae 	bl	8002858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3304      	adds	r3, #4
 800590c:	4619      	mov	r1, r3
 800590e:	4610      	mov	r0, r2
 8005910:	f000 fa96 	bl	8005e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	d001      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e04e      	b.n	8005a26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a23      	ldr	r2, [pc, #140]	; (8005a34 <HAL_TIM_Base_Start_IT+0xc4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d022      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b2:	d01d      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1f      	ldr	r2, [pc, #124]	; (8005a38 <HAL_TIM_Base_Start_IT+0xc8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d018      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1e      	ldr	r2, [pc, #120]	; (8005a3c <HAL_TIM_Base_Start_IT+0xcc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <HAL_TIM_Base_Start_IT+0xd0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00e      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a1b      	ldr	r2, [pc, #108]	; (8005a44 <HAL_TIM_Base_Start_IT+0xd4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d009      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a19      	ldr	r2, [pc, #100]	; (8005a48 <HAL_TIM_Base_Start_IT+0xd8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a18      	ldr	r2, [pc, #96]	; (8005a4c <HAL_TIM_Base_Start_IT+0xdc>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d111      	bne.n	8005a14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b06      	cmp	r3, #6
 8005a00:	d010      	beq.n	8005a24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0201 	orr.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a12:	e007      	b.n	8005a24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800
 8005a40:	40000c00 	.word	0x40000c00
 8005a44:	40010400 	.word	0x40010400
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40001800 	.word	0x40001800

08005a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d122      	bne.n	8005aac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d11b      	bne.n	8005aac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0202 	mvn.w	r2, #2
 8005a7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f9b5 	bl	8005e02 <HAL_TIM_IC_CaptureCallback>
 8005a98:	e005      	b.n	8005aa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f9a7 	bl	8005dee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f9b8 	bl	8005e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0304 	and.w	r3, r3, #4
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d122      	bne.n	8005b00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d11b      	bne.n	8005b00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0204 	mvn.w	r2, #4
 8005ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f98b 	bl	8005e02 <HAL_TIM_IC_CaptureCallback>
 8005aec:	e005      	b.n	8005afa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f97d 	bl	8005dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f98e 	bl	8005e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b08      	cmp	r3, #8
 8005b0c:	d122      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f003 0308 	and.w	r3, r3, #8
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d11b      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0208 	mvn.w	r2, #8
 8005b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2204      	movs	r2, #4
 8005b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f961 	bl	8005e02 <HAL_TIM_IC_CaptureCallback>
 8005b40:	e005      	b.n	8005b4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f953 	bl	8005dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f964 	bl	8005e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0310 	and.w	r3, r3, #16
 8005b5e:	2b10      	cmp	r3, #16
 8005b60:	d122      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d11b      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0210 	mvn.w	r2, #16
 8005b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f937 	bl	8005e02 <HAL_TIM_IC_CaptureCallback>
 8005b94:	e005      	b.n	8005ba2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f929 	bl	8005dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f93a 	bl	8005e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d10e      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d107      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0201 	mvn.w	r2, #1
 8005bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fb fbd4 	bl	800137c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bde:	2b80      	cmp	r3, #128	; 0x80
 8005be0:	d10e      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bec:	2b80      	cmp	r3, #128	; 0x80
 8005bee:	d107      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fae0 	bl	80061c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0a:	2b40      	cmp	r3, #64	; 0x40
 8005c0c:	d10e      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d107      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f8ff 	bl	8005e2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0320 	and.w	r3, r3, #32
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d10e      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d107      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0220 	mvn.w	r2, #32
 8005c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 faaa 	bl	80061ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c58:	bf00      	nop
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_TIM_ConfigClockSource+0x1c>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e0b4      	b.n	8005de6 <HAL_TIM_ConfigClockSource+0x186>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb4:	d03e      	beq.n	8005d34 <HAL_TIM_ConfigClockSource+0xd4>
 8005cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cba:	f200 8087 	bhi.w	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc2:	f000 8086 	beq.w	8005dd2 <HAL_TIM_ConfigClockSource+0x172>
 8005cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cca:	d87f      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ccc:	2b70      	cmp	r3, #112	; 0x70
 8005cce:	d01a      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0xa6>
 8005cd0:	2b70      	cmp	r3, #112	; 0x70
 8005cd2:	d87b      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cd4:	2b60      	cmp	r3, #96	; 0x60
 8005cd6:	d050      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x11a>
 8005cd8:	2b60      	cmp	r3, #96	; 0x60
 8005cda:	d877      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cdc:	2b50      	cmp	r3, #80	; 0x50
 8005cde:	d03c      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0xfa>
 8005ce0:	2b50      	cmp	r3, #80	; 0x50
 8005ce2:	d873      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ce4:	2b40      	cmp	r3, #64	; 0x40
 8005ce6:	d058      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x13a>
 8005ce8:	2b40      	cmp	r3, #64	; 0x40
 8005cea:	d86f      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cec:	2b30      	cmp	r3, #48	; 0x30
 8005cee:	d064      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005cf0:	2b30      	cmp	r3, #48	; 0x30
 8005cf2:	d86b      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d060      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d867      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d05c      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d05a      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005d04:	e062      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6899      	ldr	r1, [r3, #8]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f000 f9ad 	bl	8006074 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	609a      	str	r2, [r3, #8]
      break;
 8005d32:	e04f      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6818      	ldr	r0, [r3, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	6899      	ldr	r1, [r3, #8]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f000 f996 	bl	8006074 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d56:	609a      	str	r2, [r3, #8]
      break;
 8005d58:	e03c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6859      	ldr	r1, [r3, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	461a      	mov	r2, r3
 8005d68:	f000 f90a 	bl	8005f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2150      	movs	r1, #80	; 0x50
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 f963 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 8005d78:	e02c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6859      	ldr	r1, [r3, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	461a      	mov	r2, r3
 8005d88:	f000 f929 	bl	8005fde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2160      	movs	r1, #96	; 0x60
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 f953 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 8005d98:	e01c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6859      	ldr	r1, [r3, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f000 f8ea 	bl	8005f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2140      	movs	r1, #64	; 0x40
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 f943 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 8005db8:	e00c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f000 f93a 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 8005dca:	e003      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd0:	e000      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005df6:	bf00      	nop
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a40      	ldr	r2, [pc, #256]	; (8005f54 <TIM_Base_SetConfig+0x114>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d013      	beq.n	8005e80 <TIM_Base_SetConfig+0x40>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e5e:	d00f      	beq.n	8005e80 <TIM_Base_SetConfig+0x40>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a3d      	ldr	r2, [pc, #244]	; (8005f58 <TIM_Base_SetConfig+0x118>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00b      	beq.n	8005e80 <TIM_Base_SetConfig+0x40>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a3c      	ldr	r2, [pc, #240]	; (8005f5c <TIM_Base_SetConfig+0x11c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d007      	beq.n	8005e80 <TIM_Base_SetConfig+0x40>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a3b      	ldr	r2, [pc, #236]	; (8005f60 <TIM_Base_SetConfig+0x120>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d003      	beq.n	8005e80 <TIM_Base_SetConfig+0x40>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a3a      	ldr	r2, [pc, #232]	; (8005f64 <TIM_Base_SetConfig+0x124>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d108      	bne.n	8005e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a2f      	ldr	r2, [pc, #188]	; (8005f54 <TIM_Base_SetConfig+0x114>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d02b      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea0:	d027      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a2c      	ldr	r2, [pc, #176]	; (8005f58 <TIM_Base_SetConfig+0x118>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d023      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a2b      	ldr	r2, [pc, #172]	; (8005f5c <TIM_Base_SetConfig+0x11c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d01f      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a2a      	ldr	r2, [pc, #168]	; (8005f60 <TIM_Base_SetConfig+0x120>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d01b      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a29      	ldr	r2, [pc, #164]	; (8005f64 <TIM_Base_SetConfig+0x124>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d017      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a28      	ldr	r2, [pc, #160]	; (8005f68 <TIM_Base_SetConfig+0x128>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d013      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a27      	ldr	r2, [pc, #156]	; (8005f6c <TIM_Base_SetConfig+0x12c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00f      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a26      	ldr	r2, [pc, #152]	; (8005f70 <TIM_Base_SetConfig+0x130>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00b      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a25      	ldr	r2, [pc, #148]	; (8005f74 <TIM_Base_SetConfig+0x134>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d007      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a24      	ldr	r2, [pc, #144]	; (8005f78 <TIM_Base_SetConfig+0x138>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a23      	ldr	r2, [pc, #140]	; (8005f7c <TIM_Base_SetConfig+0x13c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d108      	bne.n	8005f04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a0a      	ldr	r2, [pc, #40]	; (8005f54 <TIM_Base_SetConfig+0x114>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_Base_SetConfig+0xf8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a0c      	ldr	r2, [pc, #48]	; (8005f64 <TIM_Base_SetConfig+0x124>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d103      	bne.n	8005f40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	691a      	ldr	r2, [r3, #16]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	615a      	str	r2, [r3, #20]
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40010000 	.word	0x40010000
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	40000800 	.word	0x40000800
 8005f60:	40000c00 	.word	0x40000c00
 8005f64:	40010400 	.word	0x40010400
 8005f68:	40014000 	.word	0x40014000
 8005f6c:	40014400 	.word	0x40014400
 8005f70:	40014800 	.word	0x40014800
 8005f74:	40001800 	.word	0x40001800
 8005f78:	40001c00 	.word	0x40001c00
 8005f7c:	40002000 	.word	0x40002000

08005f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	f023 0201 	bic.w	r2, r3, #1
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f023 030a 	bic.w	r3, r3, #10
 8005fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b087      	sub	sp, #28
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	f023 0210 	bic.w	r2, r3, #16
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006008:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	031b      	lsls	r3, r3, #12
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800601a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	621a      	str	r2, [r3, #32]
}
 8006032:	bf00      	nop
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800603e:	b480      	push	{r7}
 8006040:	b085      	sub	sp, #20
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	f043 0307 	orr.w	r3, r3, #7
 8006060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	609a      	str	r2, [r3, #8]
}
 8006068:	bf00      	nop
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800608e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	021a      	lsls	r2, r3, #8
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	431a      	orrs	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	4313      	orrs	r3, r2
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	609a      	str	r2, [r3, #8]
}
 80060a8:	bf00      	nop
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060c8:	2302      	movs	r3, #2
 80060ca:	e05a      	b.n	8006182 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a21      	ldr	r2, [pc, #132]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d022      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006118:	d01d      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1d      	ldr	r2, [pc, #116]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d018      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1b      	ldr	r2, [pc, #108]	; (8006198 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d013      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1a      	ldr	r2, [pc, #104]	; (800619c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d00e      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a18      	ldr	r2, [pc, #96]	; (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d009      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a17      	ldr	r2, [pc, #92]	; (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d004      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a15      	ldr	r2, [pc, #84]	; (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d10c      	bne.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800615c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	4313      	orrs	r3, r2
 8006166:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40010000 	.word	0x40010000
 8006194:	40000400 	.word	0x40000400
 8006198:	40000800 	.word	0x40000800
 800619c:	40000c00 	.word	0x40000c00
 80061a0:	40010400 	.word	0x40010400
 80061a4:	40014000 	.word	0x40014000
 80061a8:	40001800 	.word	0x40001800

080061ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e03f      	b.n	8006266 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7fc fb54 	bl	80028a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2224      	movs	r2, #36	; 0x24
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f829 	bl	8006270 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800622c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695a      	ldr	r2, [r3, #20]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800623c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800624c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006274:	b0c0      	sub	sp, #256	; 0x100
 8006276:	af00      	add	r7, sp, #0
 8006278:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	68d9      	ldr	r1, [r3, #12]
 800628e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	ea40 0301 	orr.w	r3, r0, r1
 8006298:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800629a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062c8:	f021 010c 	bic.w	r1, r1, #12
 80062cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062d6:	430b      	orrs	r3, r1
 80062d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ea:	6999      	ldr	r1, [r3, #24]
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	ea40 0301 	orr.w	r3, r0, r1
 80062f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4b8f      	ldr	r3, [pc, #572]	; (800653c <UART_SetConfig+0x2cc>)
 8006300:	429a      	cmp	r2, r3
 8006302:	d005      	beq.n	8006310 <UART_SetConfig+0xa0>
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	4b8d      	ldr	r3, [pc, #564]	; (8006540 <UART_SetConfig+0x2d0>)
 800630c:	429a      	cmp	r2, r3
 800630e:	d104      	bne.n	800631a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006310:	f7fe fdfc 	bl	8004f0c <HAL_RCC_GetPCLK2Freq>
 8006314:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006318:	e003      	b.n	8006322 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800631a:	f7fe fde3 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 800631e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800632c:	f040 810c 	bne.w	8006548 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006334:	2200      	movs	r2, #0
 8006336:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800633a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800633e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006342:	4622      	mov	r2, r4
 8006344:	462b      	mov	r3, r5
 8006346:	1891      	adds	r1, r2, r2
 8006348:	65b9      	str	r1, [r7, #88]	; 0x58
 800634a:	415b      	adcs	r3, r3
 800634c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800634e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006352:	4621      	mov	r1, r4
 8006354:	eb12 0801 	adds.w	r8, r2, r1
 8006358:	4629      	mov	r1, r5
 800635a:	eb43 0901 	adc.w	r9, r3, r1
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800636a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800636e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006372:	4690      	mov	r8, r2
 8006374:	4699      	mov	r9, r3
 8006376:	4623      	mov	r3, r4
 8006378:	eb18 0303 	adds.w	r3, r8, r3
 800637c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006380:	462b      	mov	r3, r5
 8006382:	eb49 0303 	adc.w	r3, r9, r3
 8006386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800638a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006396:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800639a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800639e:	460b      	mov	r3, r1
 80063a0:	18db      	adds	r3, r3, r3
 80063a2:	653b      	str	r3, [r7, #80]	; 0x50
 80063a4:	4613      	mov	r3, r2
 80063a6:	eb42 0303 	adc.w	r3, r2, r3
 80063aa:	657b      	str	r3, [r7, #84]	; 0x54
 80063ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063b4:	f7fa fc18 	bl	8000be8 <__aeabi_uldivmod>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4b61      	ldr	r3, [pc, #388]	; (8006544 <UART_SetConfig+0x2d4>)
 80063be:	fba3 2302 	umull	r2, r3, r3, r2
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	011c      	lsls	r4, r3, #4
 80063c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063d8:	4642      	mov	r2, r8
 80063da:	464b      	mov	r3, r9
 80063dc:	1891      	adds	r1, r2, r2
 80063de:	64b9      	str	r1, [r7, #72]	; 0x48
 80063e0:	415b      	adcs	r3, r3
 80063e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063e8:	4641      	mov	r1, r8
 80063ea:	eb12 0a01 	adds.w	sl, r2, r1
 80063ee:	4649      	mov	r1, r9
 80063f0:	eb43 0b01 	adc.w	fp, r3, r1
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006400:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006404:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006408:	4692      	mov	sl, r2
 800640a:	469b      	mov	fp, r3
 800640c:	4643      	mov	r3, r8
 800640e:	eb1a 0303 	adds.w	r3, sl, r3
 8006412:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006416:	464b      	mov	r3, r9
 8006418:	eb4b 0303 	adc.w	r3, fp, r3
 800641c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800642c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006430:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006434:	460b      	mov	r3, r1
 8006436:	18db      	adds	r3, r3, r3
 8006438:	643b      	str	r3, [r7, #64]	; 0x40
 800643a:	4613      	mov	r3, r2
 800643c:	eb42 0303 	adc.w	r3, r2, r3
 8006440:	647b      	str	r3, [r7, #68]	; 0x44
 8006442:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006446:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800644a:	f7fa fbcd 	bl	8000be8 <__aeabi_uldivmod>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	4611      	mov	r1, r2
 8006454:	4b3b      	ldr	r3, [pc, #236]	; (8006544 <UART_SetConfig+0x2d4>)
 8006456:	fba3 2301 	umull	r2, r3, r3, r1
 800645a:	095b      	lsrs	r3, r3, #5
 800645c:	2264      	movs	r2, #100	; 0x64
 800645e:	fb02 f303 	mul.w	r3, r2, r3
 8006462:	1acb      	subs	r3, r1, r3
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800646a:	4b36      	ldr	r3, [pc, #216]	; (8006544 <UART_SetConfig+0x2d4>)
 800646c:	fba3 2302 	umull	r2, r3, r3, r2
 8006470:	095b      	lsrs	r3, r3, #5
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006478:	441c      	add	r4, r3
 800647a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800647e:	2200      	movs	r2, #0
 8006480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006484:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006488:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800648c:	4642      	mov	r2, r8
 800648e:	464b      	mov	r3, r9
 8006490:	1891      	adds	r1, r2, r2
 8006492:	63b9      	str	r1, [r7, #56]	; 0x38
 8006494:	415b      	adcs	r3, r3
 8006496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006498:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800649c:	4641      	mov	r1, r8
 800649e:	1851      	adds	r1, r2, r1
 80064a0:	6339      	str	r1, [r7, #48]	; 0x30
 80064a2:	4649      	mov	r1, r9
 80064a4:	414b      	adcs	r3, r1
 80064a6:	637b      	str	r3, [r7, #52]	; 0x34
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064b4:	4659      	mov	r1, fp
 80064b6:	00cb      	lsls	r3, r1, #3
 80064b8:	4651      	mov	r1, sl
 80064ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064be:	4651      	mov	r1, sl
 80064c0:	00ca      	lsls	r2, r1, #3
 80064c2:	4610      	mov	r0, r2
 80064c4:	4619      	mov	r1, r3
 80064c6:	4603      	mov	r3, r0
 80064c8:	4642      	mov	r2, r8
 80064ca:	189b      	adds	r3, r3, r2
 80064cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064d0:	464b      	mov	r3, r9
 80064d2:	460a      	mov	r2, r1
 80064d4:	eb42 0303 	adc.w	r3, r2, r3
 80064d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064f0:	460b      	mov	r3, r1
 80064f2:	18db      	adds	r3, r3, r3
 80064f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f6:	4613      	mov	r3, r2
 80064f8:	eb42 0303 	adc.w	r3, r2, r3
 80064fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006502:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006506:	f7fa fb6f 	bl	8000be8 <__aeabi_uldivmod>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4b0d      	ldr	r3, [pc, #52]	; (8006544 <UART_SetConfig+0x2d4>)
 8006510:	fba3 1302 	umull	r1, r3, r3, r2
 8006514:	095b      	lsrs	r3, r3, #5
 8006516:	2164      	movs	r1, #100	; 0x64
 8006518:	fb01 f303 	mul.w	r3, r1, r3
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	3332      	adds	r3, #50	; 0x32
 8006522:	4a08      	ldr	r2, [pc, #32]	; (8006544 <UART_SetConfig+0x2d4>)
 8006524:	fba2 2303 	umull	r2, r3, r2, r3
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	f003 0207 	and.w	r2, r3, #7
 800652e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4422      	add	r2, r4
 8006536:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006538:	e105      	b.n	8006746 <UART_SetConfig+0x4d6>
 800653a:	bf00      	nop
 800653c:	40011000 	.word	0x40011000
 8006540:	40011400 	.word	0x40011400
 8006544:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800654c:	2200      	movs	r2, #0
 800654e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006552:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006556:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800655a:	4642      	mov	r2, r8
 800655c:	464b      	mov	r3, r9
 800655e:	1891      	adds	r1, r2, r2
 8006560:	6239      	str	r1, [r7, #32]
 8006562:	415b      	adcs	r3, r3
 8006564:	627b      	str	r3, [r7, #36]	; 0x24
 8006566:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800656a:	4641      	mov	r1, r8
 800656c:	1854      	adds	r4, r2, r1
 800656e:	4649      	mov	r1, r9
 8006570:	eb43 0501 	adc.w	r5, r3, r1
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	00eb      	lsls	r3, r5, #3
 800657e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006582:	00e2      	lsls	r2, r4, #3
 8006584:	4614      	mov	r4, r2
 8006586:	461d      	mov	r5, r3
 8006588:	4643      	mov	r3, r8
 800658a:	18e3      	adds	r3, r4, r3
 800658c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006590:	464b      	mov	r3, r9
 8006592:	eb45 0303 	adc.w	r3, r5, r3
 8006596:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800659a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	f04f 0300 	mov.w	r3, #0
 80065b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065b6:	4629      	mov	r1, r5
 80065b8:	008b      	lsls	r3, r1, #2
 80065ba:	4621      	mov	r1, r4
 80065bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065c0:	4621      	mov	r1, r4
 80065c2:	008a      	lsls	r2, r1, #2
 80065c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065c8:	f7fa fb0e 	bl	8000be8 <__aeabi_uldivmod>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4b60      	ldr	r3, [pc, #384]	; (8006754 <UART_SetConfig+0x4e4>)
 80065d2:	fba3 2302 	umull	r2, r3, r3, r2
 80065d6:	095b      	lsrs	r3, r3, #5
 80065d8:	011c      	lsls	r4, r3, #4
 80065da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065ec:	4642      	mov	r2, r8
 80065ee:	464b      	mov	r3, r9
 80065f0:	1891      	adds	r1, r2, r2
 80065f2:	61b9      	str	r1, [r7, #24]
 80065f4:	415b      	adcs	r3, r3
 80065f6:	61fb      	str	r3, [r7, #28]
 80065f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065fc:	4641      	mov	r1, r8
 80065fe:	1851      	adds	r1, r2, r1
 8006600:	6139      	str	r1, [r7, #16]
 8006602:	4649      	mov	r1, r9
 8006604:	414b      	adcs	r3, r1
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006614:	4659      	mov	r1, fp
 8006616:	00cb      	lsls	r3, r1, #3
 8006618:	4651      	mov	r1, sl
 800661a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800661e:	4651      	mov	r1, sl
 8006620:	00ca      	lsls	r2, r1, #3
 8006622:	4610      	mov	r0, r2
 8006624:	4619      	mov	r1, r3
 8006626:	4603      	mov	r3, r0
 8006628:	4642      	mov	r2, r8
 800662a:	189b      	adds	r3, r3, r2
 800662c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006630:	464b      	mov	r3, r9
 8006632:	460a      	mov	r2, r1
 8006634:	eb42 0303 	adc.w	r3, r2, r3
 8006638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800663c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	67bb      	str	r3, [r7, #120]	; 0x78
 8006646:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006654:	4649      	mov	r1, r9
 8006656:	008b      	lsls	r3, r1, #2
 8006658:	4641      	mov	r1, r8
 800665a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800665e:	4641      	mov	r1, r8
 8006660:	008a      	lsls	r2, r1, #2
 8006662:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006666:	f7fa fabf 	bl	8000be8 <__aeabi_uldivmod>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	4b39      	ldr	r3, [pc, #228]	; (8006754 <UART_SetConfig+0x4e4>)
 8006670:	fba3 1302 	umull	r1, r3, r3, r2
 8006674:	095b      	lsrs	r3, r3, #5
 8006676:	2164      	movs	r1, #100	; 0x64
 8006678:	fb01 f303 	mul.w	r3, r1, r3
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	3332      	adds	r3, #50	; 0x32
 8006682:	4a34      	ldr	r2, [pc, #208]	; (8006754 <UART_SetConfig+0x4e4>)
 8006684:	fba2 2303 	umull	r2, r3, r2, r3
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800668e:	441c      	add	r4, r3
 8006690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006694:	2200      	movs	r2, #0
 8006696:	673b      	str	r3, [r7, #112]	; 0x70
 8006698:	677a      	str	r2, [r7, #116]	; 0x74
 800669a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800669e:	4642      	mov	r2, r8
 80066a0:	464b      	mov	r3, r9
 80066a2:	1891      	adds	r1, r2, r2
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	415b      	adcs	r3, r3
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066ae:	4641      	mov	r1, r8
 80066b0:	1851      	adds	r1, r2, r1
 80066b2:	6039      	str	r1, [r7, #0]
 80066b4:	4649      	mov	r1, r9
 80066b6:	414b      	adcs	r3, r1
 80066b8:	607b      	str	r3, [r7, #4]
 80066ba:	f04f 0200 	mov.w	r2, #0
 80066be:	f04f 0300 	mov.w	r3, #0
 80066c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066c6:	4659      	mov	r1, fp
 80066c8:	00cb      	lsls	r3, r1, #3
 80066ca:	4651      	mov	r1, sl
 80066cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066d0:	4651      	mov	r1, sl
 80066d2:	00ca      	lsls	r2, r1, #3
 80066d4:	4610      	mov	r0, r2
 80066d6:	4619      	mov	r1, r3
 80066d8:	4603      	mov	r3, r0
 80066da:	4642      	mov	r2, r8
 80066dc:	189b      	adds	r3, r3, r2
 80066de:	66bb      	str	r3, [r7, #104]	; 0x68
 80066e0:	464b      	mov	r3, r9
 80066e2:	460a      	mov	r2, r1
 80066e4:	eb42 0303 	adc.w	r3, r2, r3
 80066e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	663b      	str	r3, [r7, #96]	; 0x60
 80066f4:	667a      	str	r2, [r7, #100]	; 0x64
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006702:	4649      	mov	r1, r9
 8006704:	008b      	lsls	r3, r1, #2
 8006706:	4641      	mov	r1, r8
 8006708:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800670c:	4641      	mov	r1, r8
 800670e:	008a      	lsls	r2, r1, #2
 8006710:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006714:	f7fa fa68 	bl	8000be8 <__aeabi_uldivmod>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	4b0d      	ldr	r3, [pc, #52]	; (8006754 <UART_SetConfig+0x4e4>)
 800671e:	fba3 1302 	umull	r1, r3, r3, r2
 8006722:	095b      	lsrs	r3, r3, #5
 8006724:	2164      	movs	r1, #100	; 0x64
 8006726:	fb01 f303 	mul.w	r3, r1, r3
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	011b      	lsls	r3, r3, #4
 800672e:	3332      	adds	r3, #50	; 0x32
 8006730:	4a08      	ldr	r2, [pc, #32]	; (8006754 <UART_SetConfig+0x4e4>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	f003 020f 	and.w	r2, r3, #15
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4422      	add	r2, r4
 8006744:	609a      	str	r2, [r3, #8]
}
 8006746:	bf00      	nop
 8006748:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800674c:	46bd      	mov	sp, r7
 800674e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006752:	bf00      	nop
 8006754:	51eb851f 	.word	0x51eb851f

08006758 <__cxa_pure_virtual>:
 8006758:	b508      	push	{r3, lr}
 800675a:	f000 f80d 	bl	8006778 <_ZSt9terminatev>

0800675e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800675e:	b508      	push	{r3, lr}
 8006760:	4780      	blx	r0
 8006762:	f000 f80e 	bl	8006782 <abort>
	...

08006768 <_ZSt13get_terminatev>:
 8006768:	4b02      	ldr	r3, [pc, #8]	; (8006774 <_ZSt13get_terminatev+0xc>)
 800676a:	6818      	ldr	r0, [r3, #0]
 800676c:	f3bf 8f5b 	dmb	ish
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	20000030 	.word	0x20000030

08006778 <_ZSt9terminatev>:
 8006778:	b508      	push	{r3, lr}
 800677a:	f7ff fff5 	bl	8006768 <_ZSt13get_terminatev>
 800677e:	f7ff ffee 	bl	800675e <_ZN10__cxxabiv111__terminateEPFvvE>

08006782 <abort>:
 8006782:	b508      	push	{r3, lr}
 8006784:	2006      	movs	r0, #6
 8006786:	f000 fcc7 	bl	8007118 <raise>
 800678a:	2001      	movs	r0, #1
 800678c:	f7fc f934 	bl	80029f8 <_exit>

08006790 <__errno>:
 8006790:	4b01      	ldr	r3, [pc, #4]	; (8006798 <__errno+0x8>)
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20000034 	.word	0x20000034

0800679c <__libc_init_array>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	4d0d      	ldr	r5, [pc, #52]	; (80067d4 <__libc_init_array+0x38>)
 80067a0:	4c0d      	ldr	r4, [pc, #52]	; (80067d8 <__libc_init_array+0x3c>)
 80067a2:	1b64      	subs	r4, r4, r5
 80067a4:	10a4      	asrs	r4, r4, #2
 80067a6:	2600      	movs	r6, #0
 80067a8:	42a6      	cmp	r6, r4
 80067aa:	d109      	bne.n	80067c0 <__libc_init_array+0x24>
 80067ac:	4d0b      	ldr	r5, [pc, #44]	; (80067dc <__libc_init_array+0x40>)
 80067ae:	4c0c      	ldr	r4, [pc, #48]	; (80067e0 <__libc_init_array+0x44>)
 80067b0:	f002 ff0e 	bl	80095d0 <_init>
 80067b4:	1b64      	subs	r4, r4, r5
 80067b6:	10a4      	asrs	r4, r4, #2
 80067b8:	2600      	movs	r6, #0
 80067ba:	42a6      	cmp	r6, r4
 80067bc:	d105      	bne.n	80067ca <__libc_init_array+0x2e>
 80067be:	bd70      	pop	{r4, r5, r6, pc}
 80067c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c4:	4798      	blx	r3
 80067c6:	3601      	adds	r6, #1
 80067c8:	e7ee      	b.n	80067a8 <__libc_init_array+0xc>
 80067ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ce:	4798      	blx	r3
 80067d0:	3601      	adds	r6, #1
 80067d2:	e7f2      	b.n	80067ba <__libc_init_array+0x1e>
 80067d4:	0800af14 	.word	0x0800af14
 80067d8:	0800af14 	.word	0x0800af14
 80067dc:	0800af14 	.word	0x0800af14
 80067e0:	0800af18 	.word	0x0800af18

080067e4 <memset>:
 80067e4:	4402      	add	r2, r0
 80067e6:	4603      	mov	r3, r0
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d100      	bne.n	80067ee <memset+0xa>
 80067ec:	4770      	bx	lr
 80067ee:	f803 1b01 	strb.w	r1, [r3], #1
 80067f2:	e7f9      	b.n	80067e8 <memset+0x4>

080067f4 <__cvt>:
 80067f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f8:	ec55 4b10 	vmov	r4, r5, d0
 80067fc:	2d00      	cmp	r5, #0
 80067fe:	460e      	mov	r6, r1
 8006800:	4619      	mov	r1, r3
 8006802:	462b      	mov	r3, r5
 8006804:	bfbb      	ittet	lt
 8006806:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800680a:	461d      	movlt	r5, r3
 800680c:	2300      	movge	r3, #0
 800680e:	232d      	movlt	r3, #45	; 0x2d
 8006810:	700b      	strb	r3, [r1, #0]
 8006812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006814:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006818:	4691      	mov	r9, r2
 800681a:	f023 0820 	bic.w	r8, r3, #32
 800681e:	bfbc      	itt	lt
 8006820:	4622      	movlt	r2, r4
 8006822:	4614      	movlt	r4, r2
 8006824:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006828:	d005      	beq.n	8006836 <__cvt+0x42>
 800682a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800682e:	d100      	bne.n	8006832 <__cvt+0x3e>
 8006830:	3601      	adds	r6, #1
 8006832:	2102      	movs	r1, #2
 8006834:	e000      	b.n	8006838 <__cvt+0x44>
 8006836:	2103      	movs	r1, #3
 8006838:	ab03      	add	r3, sp, #12
 800683a:	9301      	str	r3, [sp, #4]
 800683c:	ab02      	add	r3, sp, #8
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	ec45 4b10 	vmov	d0, r4, r5
 8006844:	4653      	mov	r3, sl
 8006846:	4632      	mov	r2, r6
 8006848:	f000 fd42 	bl	80072d0 <_dtoa_r>
 800684c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006850:	4607      	mov	r7, r0
 8006852:	d102      	bne.n	800685a <__cvt+0x66>
 8006854:	f019 0f01 	tst.w	r9, #1
 8006858:	d022      	beq.n	80068a0 <__cvt+0xac>
 800685a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800685e:	eb07 0906 	add.w	r9, r7, r6
 8006862:	d110      	bne.n	8006886 <__cvt+0x92>
 8006864:	783b      	ldrb	r3, [r7, #0]
 8006866:	2b30      	cmp	r3, #48	; 0x30
 8006868:	d10a      	bne.n	8006880 <__cvt+0x8c>
 800686a:	2200      	movs	r2, #0
 800686c:	2300      	movs	r3, #0
 800686e:	4620      	mov	r0, r4
 8006870:	4629      	mov	r1, r5
 8006872:	f7fa f949 	bl	8000b08 <__aeabi_dcmpeq>
 8006876:	b918      	cbnz	r0, 8006880 <__cvt+0x8c>
 8006878:	f1c6 0601 	rsb	r6, r6, #1
 800687c:	f8ca 6000 	str.w	r6, [sl]
 8006880:	f8da 3000 	ldr.w	r3, [sl]
 8006884:	4499      	add	r9, r3
 8006886:	2200      	movs	r2, #0
 8006888:	2300      	movs	r3, #0
 800688a:	4620      	mov	r0, r4
 800688c:	4629      	mov	r1, r5
 800688e:	f7fa f93b 	bl	8000b08 <__aeabi_dcmpeq>
 8006892:	b108      	cbz	r0, 8006898 <__cvt+0xa4>
 8006894:	f8cd 900c 	str.w	r9, [sp, #12]
 8006898:	2230      	movs	r2, #48	; 0x30
 800689a:	9b03      	ldr	r3, [sp, #12]
 800689c:	454b      	cmp	r3, r9
 800689e:	d307      	bcc.n	80068b0 <__cvt+0xbc>
 80068a0:	9b03      	ldr	r3, [sp, #12]
 80068a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068a4:	1bdb      	subs	r3, r3, r7
 80068a6:	4638      	mov	r0, r7
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	b004      	add	sp, #16
 80068ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b0:	1c59      	adds	r1, r3, #1
 80068b2:	9103      	str	r1, [sp, #12]
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	e7f0      	b.n	800689a <__cvt+0xa6>

080068b8 <__exponent>:
 80068b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068ba:	4603      	mov	r3, r0
 80068bc:	2900      	cmp	r1, #0
 80068be:	bfb8      	it	lt
 80068c0:	4249      	neglt	r1, r1
 80068c2:	f803 2b02 	strb.w	r2, [r3], #2
 80068c6:	bfb4      	ite	lt
 80068c8:	222d      	movlt	r2, #45	; 0x2d
 80068ca:	222b      	movge	r2, #43	; 0x2b
 80068cc:	2909      	cmp	r1, #9
 80068ce:	7042      	strb	r2, [r0, #1]
 80068d0:	dd2a      	ble.n	8006928 <__exponent+0x70>
 80068d2:	f10d 0407 	add.w	r4, sp, #7
 80068d6:	46a4      	mov	ip, r4
 80068d8:	270a      	movs	r7, #10
 80068da:	46a6      	mov	lr, r4
 80068dc:	460a      	mov	r2, r1
 80068de:	fb91 f6f7 	sdiv	r6, r1, r7
 80068e2:	fb07 1516 	mls	r5, r7, r6, r1
 80068e6:	3530      	adds	r5, #48	; 0x30
 80068e8:	2a63      	cmp	r2, #99	; 0x63
 80068ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80068ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80068f2:	4631      	mov	r1, r6
 80068f4:	dcf1      	bgt.n	80068da <__exponent+0x22>
 80068f6:	3130      	adds	r1, #48	; 0x30
 80068f8:	f1ae 0502 	sub.w	r5, lr, #2
 80068fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006900:	1c44      	adds	r4, r0, #1
 8006902:	4629      	mov	r1, r5
 8006904:	4561      	cmp	r1, ip
 8006906:	d30a      	bcc.n	800691e <__exponent+0x66>
 8006908:	f10d 0209 	add.w	r2, sp, #9
 800690c:	eba2 020e 	sub.w	r2, r2, lr
 8006910:	4565      	cmp	r5, ip
 8006912:	bf88      	it	hi
 8006914:	2200      	movhi	r2, #0
 8006916:	4413      	add	r3, r2
 8006918:	1a18      	subs	r0, r3, r0
 800691a:	b003      	add	sp, #12
 800691c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800691e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006922:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006926:	e7ed      	b.n	8006904 <__exponent+0x4c>
 8006928:	2330      	movs	r3, #48	; 0x30
 800692a:	3130      	adds	r1, #48	; 0x30
 800692c:	7083      	strb	r3, [r0, #2]
 800692e:	70c1      	strb	r1, [r0, #3]
 8006930:	1d03      	adds	r3, r0, #4
 8006932:	e7f1      	b.n	8006918 <__exponent+0x60>

08006934 <_printf_float>:
 8006934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006938:	ed2d 8b02 	vpush	{d8}
 800693c:	b08d      	sub	sp, #52	; 0x34
 800693e:	460c      	mov	r4, r1
 8006940:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006944:	4616      	mov	r6, r2
 8006946:	461f      	mov	r7, r3
 8006948:	4605      	mov	r5, r0
 800694a:	f001 faaf 	bl	8007eac <_localeconv_r>
 800694e:	f8d0 a000 	ldr.w	sl, [r0]
 8006952:	4650      	mov	r0, sl
 8006954:	f7f9 fc5c 	bl	8000210 <strlen>
 8006958:	2300      	movs	r3, #0
 800695a:	930a      	str	r3, [sp, #40]	; 0x28
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	9305      	str	r3, [sp, #20]
 8006960:	f8d8 3000 	ldr.w	r3, [r8]
 8006964:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006968:	3307      	adds	r3, #7
 800696a:	f023 0307 	bic.w	r3, r3, #7
 800696e:	f103 0208 	add.w	r2, r3, #8
 8006972:	f8c8 2000 	str.w	r2, [r8]
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800697e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006982:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006986:	9307      	str	r3, [sp, #28]
 8006988:	f8cd 8018 	str.w	r8, [sp, #24]
 800698c:	ee08 0a10 	vmov	s16, r0
 8006990:	4b9f      	ldr	r3, [pc, #636]	; (8006c10 <_printf_float+0x2dc>)
 8006992:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006996:	f04f 32ff 	mov.w	r2, #4294967295
 800699a:	f7fa f8e7 	bl	8000b6c <__aeabi_dcmpun>
 800699e:	bb88      	cbnz	r0, 8006a04 <_printf_float+0xd0>
 80069a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069a4:	4b9a      	ldr	r3, [pc, #616]	; (8006c10 <_printf_float+0x2dc>)
 80069a6:	f04f 32ff 	mov.w	r2, #4294967295
 80069aa:	f7fa f8c1 	bl	8000b30 <__aeabi_dcmple>
 80069ae:	bb48      	cbnz	r0, 8006a04 <_printf_float+0xd0>
 80069b0:	2200      	movs	r2, #0
 80069b2:	2300      	movs	r3, #0
 80069b4:	4640      	mov	r0, r8
 80069b6:	4649      	mov	r1, r9
 80069b8:	f7fa f8b0 	bl	8000b1c <__aeabi_dcmplt>
 80069bc:	b110      	cbz	r0, 80069c4 <_printf_float+0x90>
 80069be:	232d      	movs	r3, #45	; 0x2d
 80069c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c4:	4b93      	ldr	r3, [pc, #588]	; (8006c14 <_printf_float+0x2e0>)
 80069c6:	4894      	ldr	r0, [pc, #592]	; (8006c18 <_printf_float+0x2e4>)
 80069c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80069cc:	bf94      	ite	ls
 80069ce:	4698      	movls	r8, r3
 80069d0:	4680      	movhi	r8, r0
 80069d2:	2303      	movs	r3, #3
 80069d4:	6123      	str	r3, [r4, #16]
 80069d6:	9b05      	ldr	r3, [sp, #20]
 80069d8:	f023 0204 	bic.w	r2, r3, #4
 80069dc:	6022      	str	r2, [r4, #0]
 80069de:	f04f 0900 	mov.w	r9, #0
 80069e2:	9700      	str	r7, [sp, #0]
 80069e4:	4633      	mov	r3, r6
 80069e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80069e8:	4621      	mov	r1, r4
 80069ea:	4628      	mov	r0, r5
 80069ec:	f000 f9d8 	bl	8006da0 <_printf_common>
 80069f0:	3001      	adds	r0, #1
 80069f2:	f040 8090 	bne.w	8006b16 <_printf_float+0x1e2>
 80069f6:	f04f 30ff 	mov.w	r0, #4294967295
 80069fa:	b00d      	add	sp, #52	; 0x34
 80069fc:	ecbd 8b02 	vpop	{d8}
 8006a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a04:	4642      	mov	r2, r8
 8006a06:	464b      	mov	r3, r9
 8006a08:	4640      	mov	r0, r8
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	f7fa f8ae 	bl	8000b6c <__aeabi_dcmpun>
 8006a10:	b140      	cbz	r0, 8006a24 <_printf_float+0xf0>
 8006a12:	464b      	mov	r3, r9
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	bfbc      	itt	lt
 8006a18:	232d      	movlt	r3, #45	; 0x2d
 8006a1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a1e:	487f      	ldr	r0, [pc, #508]	; (8006c1c <_printf_float+0x2e8>)
 8006a20:	4b7f      	ldr	r3, [pc, #508]	; (8006c20 <_printf_float+0x2ec>)
 8006a22:	e7d1      	b.n	80069c8 <_printf_float+0x94>
 8006a24:	6863      	ldr	r3, [r4, #4]
 8006a26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a2a:	9206      	str	r2, [sp, #24]
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	d13f      	bne.n	8006ab0 <_printf_float+0x17c>
 8006a30:	2306      	movs	r3, #6
 8006a32:	6063      	str	r3, [r4, #4]
 8006a34:	9b05      	ldr	r3, [sp, #20]
 8006a36:	6861      	ldr	r1, [r4, #4]
 8006a38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9303      	str	r3, [sp, #12]
 8006a40:	ab0a      	add	r3, sp, #40	; 0x28
 8006a42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a46:	ab09      	add	r3, sp, #36	; 0x24
 8006a48:	ec49 8b10 	vmov	d0, r8, r9
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	6022      	str	r2, [r4, #0]
 8006a50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a54:	4628      	mov	r0, r5
 8006a56:	f7ff fecd 	bl	80067f4 <__cvt>
 8006a5a:	9b06      	ldr	r3, [sp, #24]
 8006a5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a5e:	2b47      	cmp	r3, #71	; 0x47
 8006a60:	4680      	mov	r8, r0
 8006a62:	d108      	bne.n	8006a76 <_printf_float+0x142>
 8006a64:	1cc8      	adds	r0, r1, #3
 8006a66:	db02      	blt.n	8006a6e <_printf_float+0x13a>
 8006a68:	6863      	ldr	r3, [r4, #4]
 8006a6a:	4299      	cmp	r1, r3
 8006a6c:	dd41      	ble.n	8006af2 <_printf_float+0x1be>
 8006a6e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a72:	fa5f fb8b 	uxtb.w	fp, fp
 8006a76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a7a:	d820      	bhi.n	8006abe <_printf_float+0x18a>
 8006a7c:	3901      	subs	r1, #1
 8006a7e:	465a      	mov	r2, fp
 8006a80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a84:	9109      	str	r1, [sp, #36]	; 0x24
 8006a86:	f7ff ff17 	bl	80068b8 <__exponent>
 8006a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a8c:	1813      	adds	r3, r2, r0
 8006a8e:	2a01      	cmp	r2, #1
 8006a90:	4681      	mov	r9, r0
 8006a92:	6123      	str	r3, [r4, #16]
 8006a94:	dc02      	bgt.n	8006a9c <_printf_float+0x168>
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	07d2      	lsls	r2, r2, #31
 8006a9a:	d501      	bpl.n	8006aa0 <_printf_float+0x16c>
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	6123      	str	r3, [r4, #16]
 8006aa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d09c      	beq.n	80069e2 <_printf_float+0xae>
 8006aa8:	232d      	movs	r3, #45	; 0x2d
 8006aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aae:	e798      	b.n	80069e2 <_printf_float+0xae>
 8006ab0:	9a06      	ldr	r2, [sp, #24]
 8006ab2:	2a47      	cmp	r2, #71	; 0x47
 8006ab4:	d1be      	bne.n	8006a34 <_printf_float+0x100>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1bc      	bne.n	8006a34 <_printf_float+0x100>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e7b9      	b.n	8006a32 <_printf_float+0xfe>
 8006abe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ac2:	d118      	bne.n	8006af6 <_printf_float+0x1c2>
 8006ac4:	2900      	cmp	r1, #0
 8006ac6:	6863      	ldr	r3, [r4, #4]
 8006ac8:	dd0b      	ble.n	8006ae2 <_printf_float+0x1ae>
 8006aca:	6121      	str	r1, [r4, #16]
 8006acc:	b913      	cbnz	r3, 8006ad4 <_printf_float+0x1a0>
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	07d0      	lsls	r0, r2, #31
 8006ad2:	d502      	bpl.n	8006ada <_printf_float+0x1a6>
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	440b      	add	r3, r1
 8006ad8:	6123      	str	r3, [r4, #16]
 8006ada:	65a1      	str	r1, [r4, #88]	; 0x58
 8006adc:	f04f 0900 	mov.w	r9, #0
 8006ae0:	e7de      	b.n	8006aa0 <_printf_float+0x16c>
 8006ae2:	b913      	cbnz	r3, 8006aea <_printf_float+0x1b6>
 8006ae4:	6822      	ldr	r2, [r4, #0]
 8006ae6:	07d2      	lsls	r2, r2, #31
 8006ae8:	d501      	bpl.n	8006aee <_printf_float+0x1ba>
 8006aea:	3302      	adds	r3, #2
 8006aec:	e7f4      	b.n	8006ad8 <_printf_float+0x1a4>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e7f2      	b.n	8006ad8 <_printf_float+0x1a4>
 8006af2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af8:	4299      	cmp	r1, r3
 8006afa:	db05      	blt.n	8006b08 <_printf_float+0x1d4>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	6121      	str	r1, [r4, #16]
 8006b00:	07d8      	lsls	r0, r3, #31
 8006b02:	d5ea      	bpl.n	8006ada <_printf_float+0x1a6>
 8006b04:	1c4b      	adds	r3, r1, #1
 8006b06:	e7e7      	b.n	8006ad8 <_printf_float+0x1a4>
 8006b08:	2900      	cmp	r1, #0
 8006b0a:	bfd4      	ite	le
 8006b0c:	f1c1 0202 	rsble	r2, r1, #2
 8006b10:	2201      	movgt	r2, #1
 8006b12:	4413      	add	r3, r2
 8006b14:	e7e0      	b.n	8006ad8 <_printf_float+0x1a4>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	055a      	lsls	r2, r3, #21
 8006b1a:	d407      	bmi.n	8006b2c <_printf_float+0x1f8>
 8006b1c:	6923      	ldr	r3, [r4, #16]
 8006b1e:	4642      	mov	r2, r8
 8006b20:	4631      	mov	r1, r6
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b8      	blx	r7
 8006b26:	3001      	adds	r0, #1
 8006b28:	d12c      	bne.n	8006b84 <_printf_float+0x250>
 8006b2a:	e764      	b.n	80069f6 <_printf_float+0xc2>
 8006b2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b30:	f240 80e0 	bls.w	8006cf4 <_printf_float+0x3c0>
 8006b34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b38:	2200      	movs	r2, #0
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f7f9 ffe4 	bl	8000b08 <__aeabi_dcmpeq>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d034      	beq.n	8006bae <_printf_float+0x27a>
 8006b44:	4a37      	ldr	r2, [pc, #220]	; (8006c24 <_printf_float+0x2f0>)
 8006b46:	2301      	movs	r3, #1
 8006b48:	4631      	mov	r1, r6
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	47b8      	blx	r7
 8006b4e:	3001      	adds	r0, #1
 8006b50:	f43f af51 	beq.w	80069f6 <_printf_float+0xc2>
 8006b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	db02      	blt.n	8006b62 <_printf_float+0x22e>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	07d8      	lsls	r0, r3, #31
 8006b60:	d510      	bpl.n	8006b84 <_printf_float+0x250>
 8006b62:	ee18 3a10 	vmov	r3, s16
 8006b66:	4652      	mov	r2, sl
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	47b8      	blx	r7
 8006b6e:	3001      	adds	r0, #1
 8006b70:	f43f af41 	beq.w	80069f6 <_printf_float+0xc2>
 8006b74:	f04f 0800 	mov.w	r8, #0
 8006b78:	f104 091a 	add.w	r9, r4, #26
 8006b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	4543      	cmp	r3, r8
 8006b82:	dc09      	bgt.n	8006b98 <_printf_float+0x264>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	079b      	lsls	r3, r3, #30
 8006b88:	f100 8105 	bmi.w	8006d96 <_printf_float+0x462>
 8006b8c:	68e0      	ldr	r0, [r4, #12]
 8006b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b90:	4298      	cmp	r0, r3
 8006b92:	bfb8      	it	lt
 8006b94:	4618      	movlt	r0, r3
 8006b96:	e730      	b.n	80069fa <_printf_float+0xc6>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	464a      	mov	r2, r9
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	47b8      	blx	r7
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	f43f af27 	beq.w	80069f6 <_printf_float+0xc2>
 8006ba8:	f108 0801 	add.w	r8, r8, #1
 8006bac:	e7e6      	b.n	8006b7c <_printf_float+0x248>
 8006bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	dc39      	bgt.n	8006c28 <_printf_float+0x2f4>
 8006bb4:	4a1b      	ldr	r2, [pc, #108]	; (8006c24 <_printf_float+0x2f0>)
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4631      	mov	r1, r6
 8006bba:	4628      	mov	r0, r5
 8006bbc:	47b8      	blx	r7
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	f43f af19 	beq.w	80069f6 <_printf_float+0xc2>
 8006bc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	d102      	bne.n	8006bd2 <_printf_float+0x29e>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	07d9      	lsls	r1, r3, #31
 8006bd0:	d5d8      	bpl.n	8006b84 <_printf_float+0x250>
 8006bd2:	ee18 3a10 	vmov	r3, s16
 8006bd6:	4652      	mov	r2, sl
 8006bd8:	4631      	mov	r1, r6
 8006bda:	4628      	mov	r0, r5
 8006bdc:	47b8      	blx	r7
 8006bde:	3001      	adds	r0, #1
 8006be0:	f43f af09 	beq.w	80069f6 <_printf_float+0xc2>
 8006be4:	f04f 0900 	mov.w	r9, #0
 8006be8:	f104 0a1a 	add.w	sl, r4, #26
 8006bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bee:	425b      	negs	r3, r3
 8006bf0:	454b      	cmp	r3, r9
 8006bf2:	dc01      	bgt.n	8006bf8 <_printf_float+0x2c4>
 8006bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf6:	e792      	b.n	8006b1e <_printf_float+0x1ea>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	4652      	mov	r2, sl
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	4628      	mov	r0, r5
 8006c00:	47b8      	blx	r7
 8006c02:	3001      	adds	r0, #1
 8006c04:	f43f aef7 	beq.w	80069f6 <_printf_float+0xc2>
 8006c08:	f109 0901 	add.w	r9, r9, #1
 8006c0c:	e7ee      	b.n	8006bec <_printf_float+0x2b8>
 8006c0e:	bf00      	nop
 8006c10:	7fefffff 	.word	0x7fefffff
 8006c14:	0800ab34 	.word	0x0800ab34
 8006c18:	0800ab38 	.word	0x0800ab38
 8006c1c:	0800ab40 	.word	0x0800ab40
 8006c20:	0800ab3c 	.word	0x0800ab3c
 8006c24:	0800ab44 	.word	0x0800ab44
 8006c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	bfa8      	it	ge
 8006c30:	461a      	movge	r2, r3
 8006c32:	2a00      	cmp	r2, #0
 8006c34:	4691      	mov	r9, r2
 8006c36:	dc37      	bgt.n	8006ca8 <_printf_float+0x374>
 8006c38:	f04f 0b00 	mov.w	fp, #0
 8006c3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c40:	f104 021a 	add.w	r2, r4, #26
 8006c44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c46:	9305      	str	r3, [sp, #20]
 8006c48:	eba3 0309 	sub.w	r3, r3, r9
 8006c4c:	455b      	cmp	r3, fp
 8006c4e:	dc33      	bgt.n	8006cb8 <_printf_float+0x384>
 8006c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c54:	429a      	cmp	r2, r3
 8006c56:	db3b      	blt.n	8006cd0 <_printf_float+0x39c>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	07da      	lsls	r2, r3, #31
 8006c5c:	d438      	bmi.n	8006cd0 <_printf_float+0x39c>
 8006c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c60:	9a05      	ldr	r2, [sp, #20]
 8006c62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c64:	1a9a      	subs	r2, r3, r2
 8006c66:	eba3 0901 	sub.w	r9, r3, r1
 8006c6a:	4591      	cmp	r9, r2
 8006c6c:	bfa8      	it	ge
 8006c6e:	4691      	movge	r9, r2
 8006c70:	f1b9 0f00 	cmp.w	r9, #0
 8006c74:	dc35      	bgt.n	8006ce2 <_printf_float+0x3ae>
 8006c76:	f04f 0800 	mov.w	r8, #0
 8006c7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c7e:	f104 0a1a 	add.w	sl, r4, #26
 8006c82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c86:	1a9b      	subs	r3, r3, r2
 8006c88:	eba3 0309 	sub.w	r3, r3, r9
 8006c8c:	4543      	cmp	r3, r8
 8006c8e:	f77f af79 	ble.w	8006b84 <_printf_float+0x250>
 8006c92:	2301      	movs	r3, #1
 8006c94:	4652      	mov	r2, sl
 8006c96:	4631      	mov	r1, r6
 8006c98:	4628      	mov	r0, r5
 8006c9a:	47b8      	blx	r7
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	f43f aeaa 	beq.w	80069f6 <_printf_float+0xc2>
 8006ca2:	f108 0801 	add.w	r8, r8, #1
 8006ca6:	e7ec      	b.n	8006c82 <_printf_float+0x34e>
 8006ca8:	4613      	mov	r3, r2
 8006caa:	4631      	mov	r1, r6
 8006cac:	4642      	mov	r2, r8
 8006cae:	4628      	mov	r0, r5
 8006cb0:	47b8      	blx	r7
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	d1c0      	bne.n	8006c38 <_printf_float+0x304>
 8006cb6:	e69e      	b.n	80069f6 <_printf_float+0xc2>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	4631      	mov	r1, r6
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	9205      	str	r2, [sp, #20]
 8006cc0:	47b8      	blx	r7
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	f43f ae97 	beq.w	80069f6 <_printf_float+0xc2>
 8006cc8:	9a05      	ldr	r2, [sp, #20]
 8006cca:	f10b 0b01 	add.w	fp, fp, #1
 8006cce:	e7b9      	b.n	8006c44 <_printf_float+0x310>
 8006cd0:	ee18 3a10 	vmov	r3, s16
 8006cd4:	4652      	mov	r2, sl
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	d1be      	bne.n	8006c5e <_printf_float+0x32a>
 8006ce0:	e689      	b.n	80069f6 <_printf_float+0xc2>
 8006ce2:	9a05      	ldr	r2, [sp, #20]
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	4442      	add	r2, r8
 8006ce8:	4631      	mov	r1, r6
 8006cea:	4628      	mov	r0, r5
 8006cec:	47b8      	blx	r7
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d1c1      	bne.n	8006c76 <_printf_float+0x342>
 8006cf2:	e680      	b.n	80069f6 <_printf_float+0xc2>
 8006cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cf6:	2a01      	cmp	r2, #1
 8006cf8:	dc01      	bgt.n	8006cfe <_printf_float+0x3ca>
 8006cfa:	07db      	lsls	r3, r3, #31
 8006cfc:	d538      	bpl.n	8006d70 <_printf_float+0x43c>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	4642      	mov	r2, r8
 8006d02:	4631      	mov	r1, r6
 8006d04:	4628      	mov	r0, r5
 8006d06:	47b8      	blx	r7
 8006d08:	3001      	adds	r0, #1
 8006d0a:	f43f ae74 	beq.w	80069f6 <_printf_float+0xc2>
 8006d0e:	ee18 3a10 	vmov	r3, s16
 8006d12:	4652      	mov	r2, sl
 8006d14:	4631      	mov	r1, r6
 8006d16:	4628      	mov	r0, r5
 8006d18:	47b8      	blx	r7
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	f43f ae6b 	beq.w	80069f6 <_printf_float+0xc2>
 8006d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d24:	2200      	movs	r2, #0
 8006d26:	2300      	movs	r3, #0
 8006d28:	f7f9 feee 	bl	8000b08 <__aeabi_dcmpeq>
 8006d2c:	b9d8      	cbnz	r0, 8006d66 <_printf_float+0x432>
 8006d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d30:	f108 0201 	add.w	r2, r8, #1
 8006d34:	3b01      	subs	r3, #1
 8006d36:	4631      	mov	r1, r6
 8006d38:	4628      	mov	r0, r5
 8006d3a:	47b8      	blx	r7
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d10e      	bne.n	8006d5e <_printf_float+0x42a>
 8006d40:	e659      	b.n	80069f6 <_printf_float+0xc2>
 8006d42:	2301      	movs	r3, #1
 8006d44:	4652      	mov	r2, sl
 8006d46:	4631      	mov	r1, r6
 8006d48:	4628      	mov	r0, r5
 8006d4a:	47b8      	blx	r7
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	f43f ae52 	beq.w	80069f6 <_printf_float+0xc2>
 8006d52:	f108 0801 	add.w	r8, r8, #1
 8006d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	4543      	cmp	r3, r8
 8006d5c:	dcf1      	bgt.n	8006d42 <_printf_float+0x40e>
 8006d5e:	464b      	mov	r3, r9
 8006d60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d64:	e6dc      	b.n	8006b20 <_printf_float+0x1ec>
 8006d66:	f04f 0800 	mov.w	r8, #0
 8006d6a:	f104 0a1a 	add.w	sl, r4, #26
 8006d6e:	e7f2      	b.n	8006d56 <_printf_float+0x422>
 8006d70:	2301      	movs	r3, #1
 8006d72:	4642      	mov	r2, r8
 8006d74:	e7df      	b.n	8006d36 <_printf_float+0x402>
 8006d76:	2301      	movs	r3, #1
 8006d78:	464a      	mov	r2, r9
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	47b8      	blx	r7
 8006d80:	3001      	adds	r0, #1
 8006d82:	f43f ae38 	beq.w	80069f6 <_printf_float+0xc2>
 8006d86:	f108 0801 	add.w	r8, r8, #1
 8006d8a:	68e3      	ldr	r3, [r4, #12]
 8006d8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d8e:	1a5b      	subs	r3, r3, r1
 8006d90:	4543      	cmp	r3, r8
 8006d92:	dcf0      	bgt.n	8006d76 <_printf_float+0x442>
 8006d94:	e6fa      	b.n	8006b8c <_printf_float+0x258>
 8006d96:	f04f 0800 	mov.w	r8, #0
 8006d9a:	f104 0919 	add.w	r9, r4, #25
 8006d9e:	e7f4      	b.n	8006d8a <_printf_float+0x456>

08006da0 <_printf_common>:
 8006da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da4:	4616      	mov	r6, r2
 8006da6:	4699      	mov	r9, r3
 8006da8:	688a      	ldr	r2, [r1, #8]
 8006daa:	690b      	ldr	r3, [r1, #16]
 8006dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006db0:	4293      	cmp	r3, r2
 8006db2:	bfb8      	it	lt
 8006db4:	4613      	movlt	r3, r2
 8006db6:	6033      	str	r3, [r6, #0]
 8006db8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006dbc:	4607      	mov	r7, r0
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	b10a      	cbz	r2, 8006dc6 <_printf_common+0x26>
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	6033      	str	r3, [r6, #0]
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	0699      	lsls	r1, r3, #26
 8006dca:	bf42      	ittt	mi
 8006dcc:	6833      	ldrmi	r3, [r6, #0]
 8006dce:	3302      	addmi	r3, #2
 8006dd0:	6033      	strmi	r3, [r6, #0]
 8006dd2:	6825      	ldr	r5, [r4, #0]
 8006dd4:	f015 0506 	ands.w	r5, r5, #6
 8006dd8:	d106      	bne.n	8006de8 <_printf_common+0x48>
 8006dda:	f104 0a19 	add.w	sl, r4, #25
 8006dde:	68e3      	ldr	r3, [r4, #12]
 8006de0:	6832      	ldr	r2, [r6, #0]
 8006de2:	1a9b      	subs	r3, r3, r2
 8006de4:	42ab      	cmp	r3, r5
 8006de6:	dc26      	bgt.n	8006e36 <_printf_common+0x96>
 8006de8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006dec:	1e13      	subs	r3, r2, #0
 8006dee:	6822      	ldr	r2, [r4, #0]
 8006df0:	bf18      	it	ne
 8006df2:	2301      	movne	r3, #1
 8006df4:	0692      	lsls	r2, r2, #26
 8006df6:	d42b      	bmi.n	8006e50 <_printf_common+0xb0>
 8006df8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	4638      	mov	r0, r7
 8006e00:	47c0      	blx	r8
 8006e02:	3001      	adds	r0, #1
 8006e04:	d01e      	beq.n	8006e44 <_printf_common+0xa4>
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	68e5      	ldr	r5, [r4, #12]
 8006e0a:	6832      	ldr	r2, [r6, #0]
 8006e0c:	f003 0306 	and.w	r3, r3, #6
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	bf08      	it	eq
 8006e14:	1aad      	subeq	r5, r5, r2
 8006e16:	68a3      	ldr	r3, [r4, #8]
 8006e18:	6922      	ldr	r2, [r4, #16]
 8006e1a:	bf0c      	ite	eq
 8006e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e20:	2500      	movne	r5, #0
 8006e22:	4293      	cmp	r3, r2
 8006e24:	bfc4      	itt	gt
 8006e26:	1a9b      	subgt	r3, r3, r2
 8006e28:	18ed      	addgt	r5, r5, r3
 8006e2a:	2600      	movs	r6, #0
 8006e2c:	341a      	adds	r4, #26
 8006e2e:	42b5      	cmp	r5, r6
 8006e30:	d11a      	bne.n	8006e68 <_printf_common+0xc8>
 8006e32:	2000      	movs	r0, #0
 8006e34:	e008      	b.n	8006e48 <_printf_common+0xa8>
 8006e36:	2301      	movs	r3, #1
 8006e38:	4652      	mov	r2, sl
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	47c0      	blx	r8
 8006e40:	3001      	adds	r0, #1
 8006e42:	d103      	bne.n	8006e4c <_printf_common+0xac>
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e4c:	3501      	adds	r5, #1
 8006e4e:	e7c6      	b.n	8006dde <_printf_common+0x3e>
 8006e50:	18e1      	adds	r1, r4, r3
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	2030      	movs	r0, #48	; 0x30
 8006e56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e5a:	4422      	add	r2, r4
 8006e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e64:	3302      	adds	r3, #2
 8006e66:	e7c7      	b.n	8006df8 <_printf_common+0x58>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	4638      	mov	r0, r7
 8006e70:	47c0      	blx	r8
 8006e72:	3001      	adds	r0, #1
 8006e74:	d0e6      	beq.n	8006e44 <_printf_common+0xa4>
 8006e76:	3601      	adds	r6, #1
 8006e78:	e7d9      	b.n	8006e2e <_printf_common+0x8e>
	...

08006e7c <_printf_i>:
 8006e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e80:	7e0f      	ldrb	r7, [r1, #24]
 8006e82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e84:	2f78      	cmp	r7, #120	; 0x78
 8006e86:	4691      	mov	r9, r2
 8006e88:	4680      	mov	r8, r0
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	469a      	mov	sl, r3
 8006e8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e92:	d807      	bhi.n	8006ea4 <_printf_i+0x28>
 8006e94:	2f62      	cmp	r7, #98	; 0x62
 8006e96:	d80a      	bhi.n	8006eae <_printf_i+0x32>
 8006e98:	2f00      	cmp	r7, #0
 8006e9a:	f000 80d8 	beq.w	800704e <_printf_i+0x1d2>
 8006e9e:	2f58      	cmp	r7, #88	; 0x58
 8006ea0:	f000 80a3 	beq.w	8006fea <_printf_i+0x16e>
 8006ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ea8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006eac:	e03a      	b.n	8006f24 <_printf_i+0xa8>
 8006eae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006eb2:	2b15      	cmp	r3, #21
 8006eb4:	d8f6      	bhi.n	8006ea4 <_printf_i+0x28>
 8006eb6:	a101      	add	r1, pc, #4	; (adr r1, 8006ebc <_printf_i+0x40>)
 8006eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ebc:	08006f15 	.word	0x08006f15
 8006ec0:	08006f29 	.word	0x08006f29
 8006ec4:	08006ea5 	.word	0x08006ea5
 8006ec8:	08006ea5 	.word	0x08006ea5
 8006ecc:	08006ea5 	.word	0x08006ea5
 8006ed0:	08006ea5 	.word	0x08006ea5
 8006ed4:	08006f29 	.word	0x08006f29
 8006ed8:	08006ea5 	.word	0x08006ea5
 8006edc:	08006ea5 	.word	0x08006ea5
 8006ee0:	08006ea5 	.word	0x08006ea5
 8006ee4:	08006ea5 	.word	0x08006ea5
 8006ee8:	08007035 	.word	0x08007035
 8006eec:	08006f59 	.word	0x08006f59
 8006ef0:	08007017 	.word	0x08007017
 8006ef4:	08006ea5 	.word	0x08006ea5
 8006ef8:	08006ea5 	.word	0x08006ea5
 8006efc:	08007057 	.word	0x08007057
 8006f00:	08006ea5 	.word	0x08006ea5
 8006f04:	08006f59 	.word	0x08006f59
 8006f08:	08006ea5 	.word	0x08006ea5
 8006f0c:	08006ea5 	.word	0x08006ea5
 8006f10:	0800701f 	.word	0x0800701f
 8006f14:	682b      	ldr	r3, [r5, #0]
 8006f16:	1d1a      	adds	r2, r3, #4
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	602a      	str	r2, [r5, #0]
 8006f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f24:	2301      	movs	r3, #1
 8006f26:	e0a3      	b.n	8007070 <_printf_i+0x1f4>
 8006f28:	6820      	ldr	r0, [r4, #0]
 8006f2a:	6829      	ldr	r1, [r5, #0]
 8006f2c:	0606      	lsls	r6, r0, #24
 8006f2e:	f101 0304 	add.w	r3, r1, #4
 8006f32:	d50a      	bpl.n	8006f4a <_printf_i+0xce>
 8006f34:	680e      	ldr	r6, [r1, #0]
 8006f36:	602b      	str	r3, [r5, #0]
 8006f38:	2e00      	cmp	r6, #0
 8006f3a:	da03      	bge.n	8006f44 <_printf_i+0xc8>
 8006f3c:	232d      	movs	r3, #45	; 0x2d
 8006f3e:	4276      	negs	r6, r6
 8006f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f44:	485e      	ldr	r0, [pc, #376]	; (80070c0 <_printf_i+0x244>)
 8006f46:	230a      	movs	r3, #10
 8006f48:	e019      	b.n	8006f7e <_printf_i+0x102>
 8006f4a:	680e      	ldr	r6, [r1, #0]
 8006f4c:	602b      	str	r3, [r5, #0]
 8006f4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f52:	bf18      	it	ne
 8006f54:	b236      	sxthne	r6, r6
 8006f56:	e7ef      	b.n	8006f38 <_printf_i+0xbc>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	6820      	ldr	r0, [r4, #0]
 8006f5c:	1d19      	adds	r1, r3, #4
 8006f5e:	6029      	str	r1, [r5, #0]
 8006f60:	0601      	lsls	r1, r0, #24
 8006f62:	d501      	bpl.n	8006f68 <_printf_i+0xec>
 8006f64:	681e      	ldr	r6, [r3, #0]
 8006f66:	e002      	b.n	8006f6e <_printf_i+0xf2>
 8006f68:	0646      	lsls	r6, r0, #25
 8006f6a:	d5fb      	bpl.n	8006f64 <_printf_i+0xe8>
 8006f6c:	881e      	ldrh	r6, [r3, #0]
 8006f6e:	4854      	ldr	r0, [pc, #336]	; (80070c0 <_printf_i+0x244>)
 8006f70:	2f6f      	cmp	r7, #111	; 0x6f
 8006f72:	bf0c      	ite	eq
 8006f74:	2308      	moveq	r3, #8
 8006f76:	230a      	movne	r3, #10
 8006f78:	2100      	movs	r1, #0
 8006f7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f7e:	6865      	ldr	r5, [r4, #4]
 8006f80:	60a5      	str	r5, [r4, #8]
 8006f82:	2d00      	cmp	r5, #0
 8006f84:	bfa2      	ittt	ge
 8006f86:	6821      	ldrge	r1, [r4, #0]
 8006f88:	f021 0104 	bicge.w	r1, r1, #4
 8006f8c:	6021      	strge	r1, [r4, #0]
 8006f8e:	b90e      	cbnz	r6, 8006f94 <_printf_i+0x118>
 8006f90:	2d00      	cmp	r5, #0
 8006f92:	d04d      	beq.n	8007030 <_printf_i+0x1b4>
 8006f94:	4615      	mov	r5, r2
 8006f96:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f9a:	fb03 6711 	mls	r7, r3, r1, r6
 8006f9e:	5dc7      	ldrb	r7, [r0, r7]
 8006fa0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fa4:	4637      	mov	r7, r6
 8006fa6:	42bb      	cmp	r3, r7
 8006fa8:	460e      	mov	r6, r1
 8006faa:	d9f4      	bls.n	8006f96 <_printf_i+0x11a>
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d10b      	bne.n	8006fc8 <_printf_i+0x14c>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	07de      	lsls	r6, r3, #31
 8006fb4:	d508      	bpl.n	8006fc8 <_printf_i+0x14c>
 8006fb6:	6923      	ldr	r3, [r4, #16]
 8006fb8:	6861      	ldr	r1, [r4, #4]
 8006fba:	4299      	cmp	r1, r3
 8006fbc:	bfde      	ittt	le
 8006fbe:	2330      	movle	r3, #48	; 0x30
 8006fc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fc8:	1b52      	subs	r2, r2, r5
 8006fca:	6122      	str	r2, [r4, #16]
 8006fcc:	f8cd a000 	str.w	sl, [sp]
 8006fd0:	464b      	mov	r3, r9
 8006fd2:	aa03      	add	r2, sp, #12
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	f7ff fee2 	bl	8006da0 <_printf_common>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d14c      	bne.n	800707a <_printf_i+0x1fe>
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	b004      	add	sp, #16
 8006fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fea:	4835      	ldr	r0, [pc, #212]	; (80070c0 <_printf_i+0x244>)
 8006fec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ff0:	6829      	ldr	r1, [r5, #0]
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ff8:	6029      	str	r1, [r5, #0]
 8006ffa:	061d      	lsls	r5, r3, #24
 8006ffc:	d514      	bpl.n	8007028 <_printf_i+0x1ac>
 8006ffe:	07df      	lsls	r7, r3, #31
 8007000:	bf44      	itt	mi
 8007002:	f043 0320 	orrmi.w	r3, r3, #32
 8007006:	6023      	strmi	r3, [r4, #0]
 8007008:	b91e      	cbnz	r6, 8007012 <_printf_i+0x196>
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	f023 0320 	bic.w	r3, r3, #32
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	2310      	movs	r3, #16
 8007014:	e7b0      	b.n	8006f78 <_printf_i+0xfc>
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	f043 0320 	orr.w	r3, r3, #32
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	2378      	movs	r3, #120	; 0x78
 8007020:	4828      	ldr	r0, [pc, #160]	; (80070c4 <_printf_i+0x248>)
 8007022:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007026:	e7e3      	b.n	8006ff0 <_printf_i+0x174>
 8007028:	0659      	lsls	r1, r3, #25
 800702a:	bf48      	it	mi
 800702c:	b2b6      	uxthmi	r6, r6
 800702e:	e7e6      	b.n	8006ffe <_printf_i+0x182>
 8007030:	4615      	mov	r5, r2
 8007032:	e7bb      	b.n	8006fac <_printf_i+0x130>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	6826      	ldr	r6, [r4, #0]
 8007038:	6961      	ldr	r1, [r4, #20]
 800703a:	1d18      	adds	r0, r3, #4
 800703c:	6028      	str	r0, [r5, #0]
 800703e:	0635      	lsls	r5, r6, #24
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	d501      	bpl.n	8007048 <_printf_i+0x1cc>
 8007044:	6019      	str	r1, [r3, #0]
 8007046:	e002      	b.n	800704e <_printf_i+0x1d2>
 8007048:	0670      	lsls	r0, r6, #25
 800704a:	d5fb      	bpl.n	8007044 <_printf_i+0x1c8>
 800704c:	8019      	strh	r1, [r3, #0]
 800704e:	2300      	movs	r3, #0
 8007050:	6123      	str	r3, [r4, #16]
 8007052:	4615      	mov	r5, r2
 8007054:	e7ba      	b.n	8006fcc <_printf_i+0x150>
 8007056:	682b      	ldr	r3, [r5, #0]
 8007058:	1d1a      	adds	r2, r3, #4
 800705a:	602a      	str	r2, [r5, #0]
 800705c:	681d      	ldr	r5, [r3, #0]
 800705e:	6862      	ldr	r2, [r4, #4]
 8007060:	2100      	movs	r1, #0
 8007062:	4628      	mov	r0, r5
 8007064:	f7f9 f8dc 	bl	8000220 <memchr>
 8007068:	b108      	cbz	r0, 800706e <_printf_i+0x1f2>
 800706a:	1b40      	subs	r0, r0, r5
 800706c:	6060      	str	r0, [r4, #4]
 800706e:	6863      	ldr	r3, [r4, #4]
 8007070:	6123      	str	r3, [r4, #16]
 8007072:	2300      	movs	r3, #0
 8007074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007078:	e7a8      	b.n	8006fcc <_printf_i+0x150>
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	462a      	mov	r2, r5
 800707e:	4649      	mov	r1, r9
 8007080:	4640      	mov	r0, r8
 8007082:	47d0      	blx	sl
 8007084:	3001      	adds	r0, #1
 8007086:	d0ab      	beq.n	8006fe0 <_printf_i+0x164>
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	079b      	lsls	r3, r3, #30
 800708c:	d413      	bmi.n	80070b6 <_printf_i+0x23a>
 800708e:	68e0      	ldr	r0, [r4, #12]
 8007090:	9b03      	ldr	r3, [sp, #12]
 8007092:	4298      	cmp	r0, r3
 8007094:	bfb8      	it	lt
 8007096:	4618      	movlt	r0, r3
 8007098:	e7a4      	b.n	8006fe4 <_printf_i+0x168>
 800709a:	2301      	movs	r3, #1
 800709c:	4632      	mov	r2, r6
 800709e:	4649      	mov	r1, r9
 80070a0:	4640      	mov	r0, r8
 80070a2:	47d0      	blx	sl
 80070a4:	3001      	adds	r0, #1
 80070a6:	d09b      	beq.n	8006fe0 <_printf_i+0x164>
 80070a8:	3501      	adds	r5, #1
 80070aa:	68e3      	ldr	r3, [r4, #12]
 80070ac:	9903      	ldr	r1, [sp, #12]
 80070ae:	1a5b      	subs	r3, r3, r1
 80070b0:	42ab      	cmp	r3, r5
 80070b2:	dcf2      	bgt.n	800709a <_printf_i+0x21e>
 80070b4:	e7eb      	b.n	800708e <_printf_i+0x212>
 80070b6:	2500      	movs	r5, #0
 80070b8:	f104 0619 	add.w	r6, r4, #25
 80070bc:	e7f5      	b.n	80070aa <_printf_i+0x22e>
 80070be:	bf00      	nop
 80070c0:	0800ab46 	.word	0x0800ab46
 80070c4:	0800ab57 	.word	0x0800ab57

080070c8 <_raise_r>:
 80070c8:	291f      	cmp	r1, #31
 80070ca:	b538      	push	{r3, r4, r5, lr}
 80070cc:	4604      	mov	r4, r0
 80070ce:	460d      	mov	r5, r1
 80070d0:	d904      	bls.n	80070dc <_raise_r+0x14>
 80070d2:	2316      	movs	r3, #22
 80070d4:	6003      	str	r3, [r0, #0]
 80070d6:	f04f 30ff 	mov.w	r0, #4294967295
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070de:	b112      	cbz	r2, 80070e6 <_raise_r+0x1e>
 80070e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070e4:	b94b      	cbnz	r3, 80070fa <_raise_r+0x32>
 80070e6:	4620      	mov	r0, r4
 80070e8:	f000 f830 	bl	800714c <_getpid_r>
 80070ec:	462a      	mov	r2, r5
 80070ee:	4601      	mov	r1, r0
 80070f0:	4620      	mov	r0, r4
 80070f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070f6:	f000 b817 	b.w	8007128 <_kill_r>
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d00a      	beq.n	8007114 <_raise_r+0x4c>
 80070fe:	1c59      	adds	r1, r3, #1
 8007100:	d103      	bne.n	800710a <_raise_r+0x42>
 8007102:	2316      	movs	r3, #22
 8007104:	6003      	str	r3, [r0, #0]
 8007106:	2001      	movs	r0, #1
 8007108:	e7e7      	b.n	80070da <_raise_r+0x12>
 800710a:	2400      	movs	r4, #0
 800710c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007110:	4628      	mov	r0, r5
 8007112:	4798      	blx	r3
 8007114:	2000      	movs	r0, #0
 8007116:	e7e0      	b.n	80070da <_raise_r+0x12>

08007118 <raise>:
 8007118:	4b02      	ldr	r3, [pc, #8]	; (8007124 <raise+0xc>)
 800711a:	4601      	mov	r1, r0
 800711c:	6818      	ldr	r0, [r3, #0]
 800711e:	f7ff bfd3 	b.w	80070c8 <_raise_r>
 8007122:	bf00      	nop
 8007124:	20000034 	.word	0x20000034

08007128 <_kill_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4d07      	ldr	r5, [pc, #28]	; (8007148 <_kill_r+0x20>)
 800712c:	2300      	movs	r3, #0
 800712e:	4604      	mov	r4, r0
 8007130:	4608      	mov	r0, r1
 8007132:	4611      	mov	r1, r2
 8007134:	602b      	str	r3, [r5, #0]
 8007136:	f7fb fc4f 	bl	80029d8 <_kill>
 800713a:	1c43      	adds	r3, r0, #1
 800713c:	d102      	bne.n	8007144 <_kill_r+0x1c>
 800713e:	682b      	ldr	r3, [r5, #0]
 8007140:	b103      	cbz	r3, 8007144 <_kill_r+0x1c>
 8007142:	6023      	str	r3, [r4, #0]
 8007144:	bd38      	pop	{r3, r4, r5, pc}
 8007146:	bf00      	nop
 8007148:	200003bc 	.word	0x200003bc

0800714c <_getpid_r>:
 800714c:	f7fb bc3c 	b.w	80029c8 <_getpid>

08007150 <sniprintf>:
 8007150:	b40c      	push	{r2, r3}
 8007152:	b530      	push	{r4, r5, lr}
 8007154:	4b17      	ldr	r3, [pc, #92]	; (80071b4 <sniprintf+0x64>)
 8007156:	1e0c      	subs	r4, r1, #0
 8007158:	681d      	ldr	r5, [r3, #0]
 800715a:	b09d      	sub	sp, #116	; 0x74
 800715c:	da08      	bge.n	8007170 <sniprintf+0x20>
 800715e:	238b      	movs	r3, #139	; 0x8b
 8007160:	602b      	str	r3, [r5, #0]
 8007162:	f04f 30ff 	mov.w	r0, #4294967295
 8007166:	b01d      	add	sp, #116	; 0x74
 8007168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800716c:	b002      	add	sp, #8
 800716e:	4770      	bx	lr
 8007170:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007174:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007178:	bf14      	ite	ne
 800717a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800717e:	4623      	moveq	r3, r4
 8007180:	9304      	str	r3, [sp, #16]
 8007182:	9307      	str	r3, [sp, #28]
 8007184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007188:	9002      	str	r0, [sp, #8]
 800718a:	9006      	str	r0, [sp, #24]
 800718c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007190:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007192:	ab21      	add	r3, sp, #132	; 0x84
 8007194:	a902      	add	r1, sp, #8
 8007196:	4628      	mov	r0, r5
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	f001 fb77 	bl	800888c <_svfiprintf_r>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	bfbc      	itt	lt
 80071a2:	238b      	movlt	r3, #139	; 0x8b
 80071a4:	602b      	strlt	r3, [r5, #0]
 80071a6:	2c00      	cmp	r4, #0
 80071a8:	d0dd      	beq.n	8007166 <sniprintf+0x16>
 80071aa:	9b02      	ldr	r3, [sp, #8]
 80071ac:	2200      	movs	r2, #0
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	e7d9      	b.n	8007166 <sniprintf+0x16>
 80071b2:	bf00      	nop
 80071b4:	20000034 	.word	0x20000034

080071b8 <quorem>:
 80071b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	6903      	ldr	r3, [r0, #16]
 80071be:	690c      	ldr	r4, [r1, #16]
 80071c0:	42a3      	cmp	r3, r4
 80071c2:	4607      	mov	r7, r0
 80071c4:	f2c0 8081 	blt.w	80072ca <quorem+0x112>
 80071c8:	3c01      	subs	r4, #1
 80071ca:	f101 0814 	add.w	r8, r1, #20
 80071ce:	f100 0514 	add.w	r5, r0, #20
 80071d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071e0:	3301      	adds	r3, #1
 80071e2:	429a      	cmp	r2, r3
 80071e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80071e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80071f0:	d331      	bcc.n	8007256 <quorem+0x9e>
 80071f2:	f04f 0e00 	mov.w	lr, #0
 80071f6:	4640      	mov	r0, r8
 80071f8:	46ac      	mov	ip, r5
 80071fa:	46f2      	mov	sl, lr
 80071fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007200:	b293      	uxth	r3, r2
 8007202:	fb06 e303 	mla	r3, r6, r3, lr
 8007206:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800720a:	b29b      	uxth	r3, r3
 800720c:	ebaa 0303 	sub.w	r3, sl, r3
 8007210:	f8dc a000 	ldr.w	sl, [ip]
 8007214:	0c12      	lsrs	r2, r2, #16
 8007216:	fa13 f38a 	uxtah	r3, r3, sl
 800721a:	fb06 e202 	mla	r2, r6, r2, lr
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	9b00      	ldr	r3, [sp, #0]
 8007222:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007226:	b292      	uxth	r2, r2
 8007228:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800722c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007230:	f8bd 3000 	ldrh.w	r3, [sp]
 8007234:	4581      	cmp	r9, r0
 8007236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800723a:	f84c 3b04 	str.w	r3, [ip], #4
 800723e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007242:	d2db      	bcs.n	80071fc <quorem+0x44>
 8007244:	f855 300b 	ldr.w	r3, [r5, fp]
 8007248:	b92b      	cbnz	r3, 8007256 <quorem+0x9e>
 800724a:	9b01      	ldr	r3, [sp, #4]
 800724c:	3b04      	subs	r3, #4
 800724e:	429d      	cmp	r5, r3
 8007250:	461a      	mov	r2, r3
 8007252:	d32e      	bcc.n	80072b2 <quorem+0xfa>
 8007254:	613c      	str	r4, [r7, #16]
 8007256:	4638      	mov	r0, r7
 8007258:	f001 f8c4 	bl	80083e4 <__mcmp>
 800725c:	2800      	cmp	r0, #0
 800725e:	db24      	blt.n	80072aa <quorem+0xf2>
 8007260:	3601      	adds	r6, #1
 8007262:	4628      	mov	r0, r5
 8007264:	f04f 0c00 	mov.w	ip, #0
 8007268:	f858 2b04 	ldr.w	r2, [r8], #4
 800726c:	f8d0 e000 	ldr.w	lr, [r0]
 8007270:	b293      	uxth	r3, r2
 8007272:	ebac 0303 	sub.w	r3, ip, r3
 8007276:	0c12      	lsrs	r2, r2, #16
 8007278:	fa13 f38e 	uxtah	r3, r3, lr
 800727c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007284:	b29b      	uxth	r3, r3
 8007286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800728a:	45c1      	cmp	r9, r8
 800728c:	f840 3b04 	str.w	r3, [r0], #4
 8007290:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007294:	d2e8      	bcs.n	8007268 <quorem+0xb0>
 8007296:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800729a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800729e:	b922      	cbnz	r2, 80072aa <quorem+0xf2>
 80072a0:	3b04      	subs	r3, #4
 80072a2:	429d      	cmp	r5, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	d30a      	bcc.n	80072be <quorem+0x106>
 80072a8:	613c      	str	r4, [r7, #16]
 80072aa:	4630      	mov	r0, r6
 80072ac:	b003      	add	sp, #12
 80072ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b2:	6812      	ldr	r2, [r2, #0]
 80072b4:	3b04      	subs	r3, #4
 80072b6:	2a00      	cmp	r2, #0
 80072b8:	d1cc      	bne.n	8007254 <quorem+0x9c>
 80072ba:	3c01      	subs	r4, #1
 80072bc:	e7c7      	b.n	800724e <quorem+0x96>
 80072be:	6812      	ldr	r2, [r2, #0]
 80072c0:	3b04      	subs	r3, #4
 80072c2:	2a00      	cmp	r2, #0
 80072c4:	d1f0      	bne.n	80072a8 <quorem+0xf0>
 80072c6:	3c01      	subs	r4, #1
 80072c8:	e7eb      	b.n	80072a2 <quorem+0xea>
 80072ca:	2000      	movs	r0, #0
 80072cc:	e7ee      	b.n	80072ac <quorem+0xf4>
	...

080072d0 <_dtoa_r>:
 80072d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d4:	ed2d 8b04 	vpush	{d8-d9}
 80072d8:	ec57 6b10 	vmov	r6, r7, d0
 80072dc:	b093      	sub	sp, #76	; 0x4c
 80072de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80072e4:	9106      	str	r1, [sp, #24]
 80072e6:	ee10 aa10 	vmov	sl, s0
 80072ea:	4604      	mov	r4, r0
 80072ec:	9209      	str	r2, [sp, #36]	; 0x24
 80072ee:	930c      	str	r3, [sp, #48]	; 0x30
 80072f0:	46bb      	mov	fp, r7
 80072f2:	b975      	cbnz	r5, 8007312 <_dtoa_r+0x42>
 80072f4:	2010      	movs	r0, #16
 80072f6:	f000 fddd 	bl	8007eb4 <malloc>
 80072fa:	4602      	mov	r2, r0
 80072fc:	6260      	str	r0, [r4, #36]	; 0x24
 80072fe:	b920      	cbnz	r0, 800730a <_dtoa_r+0x3a>
 8007300:	4ba7      	ldr	r3, [pc, #668]	; (80075a0 <_dtoa_r+0x2d0>)
 8007302:	21ea      	movs	r1, #234	; 0xea
 8007304:	48a7      	ldr	r0, [pc, #668]	; (80075a4 <_dtoa_r+0x2d4>)
 8007306:	f001 fbd1 	bl	8008aac <__assert_func>
 800730a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800730e:	6005      	str	r5, [r0, #0]
 8007310:	60c5      	str	r5, [r0, #12]
 8007312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007314:	6819      	ldr	r1, [r3, #0]
 8007316:	b151      	cbz	r1, 800732e <_dtoa_r+0x5e>
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	604a      	str	r2, [r1, #4]
 800731c:	2301      	movs	r3, #1
 800731e:	4093      	lsls	r3, r2
 8007320:	608b      	str	r3, [r1, #8]
 8007322:	4620      	mov	r0, r4
 8007324:	f000 fe1c 	bl	8007f60 <_Bfree>
 8007328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	1e3b      	subs	r3, r7, #0
 8007330:	bfaa      	itet	ge
 8007332:	2300      	movge	r3, #0
 8007334:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007338:	f8c8 3000 	strge.w	r3, [r8]
 800733c:	4b9a      	ldr	r3, [pc, #616]	; (80075a8 <_dtoa_r+0x2d8>)
 800733e:	bfbc      	itt	lt
 8007340:	2201      	movlt	r2, #1
 8007342:	f8c8 2000 	strlt.w	r2, [r8]
 8007346:	ea33 030b 	bics.w	r3, r3, fp
 800734a:	d11b      	bne.n	8007384 <_dtoa_r+0xb4>
 800734c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800734e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007358:	4333      	orrs	r3, r6
 800735a:	f000 8592 	beq.w	8007e82 <_dtoa_r+0xbb2>
 800735e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007360:	b963      	cbnz	r3, 800737c <_dtoa_r+0xac>
 8007362:	4b92      	ldr	r3, [pc, #584]	; (80075ac <_dtoa_r+0x2dc>)
 8007364:	e022      	b.n	80073ac <_dtoa_r+0xdc>
 8007366:	4b92      	ldr	r3, [pc, #584]	; (80075b0 <_dtoa_r+0x2e0>)
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	3308      	adds	r3, #8
 800736c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	9801      	ldr	r0, [sp, #4]
 8007372:	b013      	add	sp, #76	; 0x4c
 8007374:	ecbd 8b04 	vpop	{d8-d9}
 8007378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737c:	4b8b      	ldr	r3, [pc, #556]	; (80075ac <_dtoa_r+0x2dc>)
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	3303      	adds	r3, #3
 8007382:	e7f3      	b.n	800736c <_dtoa_r+0x9c>
 8007384:	2200      	movs	r2, #0
 8007386:	2300      	movs	r3, #0
 8007388:	4650      	mov	r0, sl
 800738a:	4659      	mov	r1, fp
 800738c:	f7f9 fbbc 	bl	8000b08 <__aeabi_dcmpeq>
 8007390:	ec4b ab19 	vmov	d9, sl, fp
 8007394:	4680      	mov	r8, r0
 8007396:	b158      	cbz	r0, 80073b0 <_dtoa_r+0xe0>
 8007398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800739a:	2301      	movs	r3, #1
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 856b 	beq.w	8007e7c <_dtoa_r+0xbac>
 80073a6:	4883      	ldr	r0, [pc, #524]	; (80075b4 <_dtoa_r+0x2e4>)
 80073a8:	6018      	str	r0, [r3, #0]
 80073aa:	1e43      	subs	r3, r0, #1
 80073ac:	9301      	str	r3, [sp, #4]
 80073ae:	e7df      	b.n	8007370 <_dtoa_r+0xa0>
 80073b0:	ec4b ab10 	vmov	d0, sl, fp
 80073b4:	aa10      	add	r2, sp, #64	; 0x40
 80073b6:	a911      	add	r1, sp, #68	; 0x44
 80073b8:	4620      	mov	r0, r4
 80073ba:	f001 f8b9 	bl	8008530 <__d2b>
 80073be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80073c2:	ee08 0a10 	vmov	s16, r0
 80073c6:	2d00      	cmp	r5, #0
 80073c8:	f000 8084 	beq.w	80074d4 <_dtoa_r+0x204>
 80073cc:	ee19 3a90 	vmov	r3, s19
 80073d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80073d8:	4656      	mov	r6, sl
 80073da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80073de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80073e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80073e6:	4b74      	ldr	r3, [pc, #464]	; (80075b8 <_dtoa_r+0x2e8>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	4630      	mov	r0, r6
 80073ec:	4639      	mov	r1, r7
 80073ee:	f7f8 ff6b 	bl	80002c8 <__aeabi_dsub>
 80073f2:	a365      	add	r3, pc, #404	; (adr r3, 8007588 <_dtoa_r+0x2b8>)
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	f7f9 f91e 	bl	8000638 <__aeabi_dmul>
 80073fc:	a364      	add	r3, pc, #400	; (adr r3, 8007590 <_dtoa_r+0x2c0>)
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f7f8 ff63 	bl	80002cc <__adddf3>
 8007406:	4606      	mov	r6, r0
 8007408:	4628      	mov	r0, r5
 800740a:	460f      	mov	r7, r1
 800740c:	f7f9 f8aa 	bl	8000564 <__aeabi_i2d>
 8007410:	a361      	add	r3, pc, #388	; (adr r3, 8007598 <_dtoa_r+0x2c8>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f7f9 f90f 	bl	8000638 <__aeabi_dmul>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4630      	mov	r0, r6
 8007420:	4639      	mov	r1, r7
 8007422:	f7f8 ff53 	bl	80002cc <__adddf3>
 8007426:	4606      	mov	r6, r0
 8007428:	460f      	mov	r7, r1
 800742a:	f7f9 fbb5 	bl	8000b98 <__aeabi_d2iz>
 800742e:	2200      	movs	r2, #0
 8007430:	9000      	str	r0, [sp, #0]
 8007432:	2300      	movs	r3, #0
 8007434:	4630      	mov	r0, r6
 8007436:	4639      	mov	r1, r7
 8007438:	f7f9 fb70 	bl	8000b1c <__aeabi_dcmplt>
 800743c:	b150      	cbz	r0, 8007454 <_dtoa_r+0x184>
 800743e:	9800      	ldr	r0, [sp, #0]
 8007440:	f7f9 f890 	bl	8000564 <__aeabi_i2d>
 8007444:	4632      	mov	r2, r6
 8007446:	463b      	mov	r3, r7
 8007448:	f7f9 fb5e 	bl	8000b08 <__aeabi_dcmpeq>
 800744c:	b910      	cbnz	r0, 8007454 <_dtoa_r+0x184>
 800744e:	9b00      	ldr	r3, [sp, #0]
 8007450:	3b01      	subs	r3, #1
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	9b00      	ldr	r3, [sp, #0]
 8007456:	2b16      	cmp	r3, #22
 8007458:	d85a      	bhi.n	8007510 <_dtoa_r+0x240>
 800745a:	9a00      	ldr	r2, [sp, #0]
 800745c:	4b57      	ldr	r3, [pc, #348]	; (80075bc <_dtoa_r+0x2ec>)
 800745e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	ec51 0b19 	vmov	r0, r1, d9
 800746a:	f7f9 fb57 	bl	8000b1c <__aeabi_dcmplt>
 800746e:	2800      	cmp	r0, #0
 8007470:	d050      	beq.n	8007514 <_dtoa_r+0x244>
 8007472:	9b00      	ldr	r3, [sp, #0]
 8007474:	3b01      	subs	r3, #1
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	2300      	movs	r3, #0
 800747a:	930b      	str	r3, [sp, #44]	; 0x2c
 800747c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800747e:	1b5d      	subs	r5, r3, r5
 8007480:	1e6b      	subs	r3, r5, #1
 8007482:	9305      	str	r3, [sp, #20]
 8007484:	bf45      	ittet	mi
 8007486:	f1c5 0301 	rsbmi	r3, r5, #1
 800748a:	9304      	strmi	r3, [sp, #16]
 800748c:	2300      	movpl	r3, #0
 800748e:	2300      	movmi	r3, #0
 8007490:	bf4c      	ite	mi
 8007492:	9305      	strmi	r3, [sp, #20]
 8007494:	9304      	strpl	r3, [sp, #16]
 8007496:	9b00      	ldr	r3, [sp, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	db3d      	blt.n	8007518 <_dtoa_r+0x248>
 800749c:	9b05      	ldr	r3, [sp, #20]
 800749e:	9a00      	ldr	r2, [sp, #0]
 80074a0:	920a      	str	r2, [sp, #40]	; 0x28
 80074a2:	4413      	add	r3, r2
 80074a4:	9305      	str	r3, [sp, #20]
 80074a6:	2300      	movs	r3, #0
 80074a8:	9307      	str	r3, [sp, #28]
 80074aa:	9b06      	ldr	r3, [sp, #24]
 80074ac:	2b09      	cmp	r3, #9
 80074ae:	f200 8089 	bhi.w	80075c4 <_dtoa_r+0x2f4>
 80074b2:	2b05      	cmp	r3, #5
 80074b4:	bfc4      	itt	gt
 80074b6:	3b04      	subgt	r3, #4
 80074b8:	9306      	strgt	r3, [sp, #24]
 80074ba:	9b06      	ldr	r3, [sp, #24]
 80074bc:	f1a3 0302 	sub.w	r3, r3, #2
 80074c0:	bfcc      	ite	gt
 80074c2:	2500      	movgt	r5, #0
 80074c4:	2501      	movle	r5, #1
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	f200 8087 	bhi.w	80075da <_dtoa_r+0x30a>
 80074cc:	e8df f003 	tbb	[pc, r3]
 80074d0:	59383a2d 	.word	0x59383a2d
 80074d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80074d8:	441d      	add	r5, r3
 80074da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80074de:	2b20      	cmp	r3, #32
 80074e0:	bfc1      	itttt	gt
 80074e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80074e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80074ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80074ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80074f2:	bfda      	itte	le
 80074f4:	f1c3 0320 	rsble	r3, r3, #32
 80074f8:	fa06 f003 	lslle.w	r0, r6, r3
 80074fc:	4318      	orrgt	r0, r3
 80074fe:	f7f9 f821 	bl	8000544 <__aeabi_ui2d>
 8007502:	2301      	movs	r3, #1
 8007504:	4606      	mov	r6, r0
 8007506:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800750a:	3d01      	subs	r5, #1
 800750c:	930e      	str	r3, [sp, #56]	; 0x38
 800750e:	e76a      	b.n	80073e6 <_dtoa_r+0x116>
 8007510:	2301      	movs	r3, #1
 8007512:	e7b2      	b.n	800747a <_dtoa_r+0x1aa>
 8007514:	900b      	str	r0, [sp, #44]	; 0x2c
 8007516:	e7b1      	b.n	800747c <_dtoa_r+0x1ac>
 8007518:	9b04      	ldr	r3, [sp, #16]
 800751a:	9a00      	ldr	r2, [sp, #0]
 800751c:	1a9b      	subs	r3, r3, r2
 800751e:	9304      	str	r3, [sp, #16]
 8007520:	4253      	negs	r3, r2
 8007522:	9307      	str	r3, [sp, #28]
 8007524:	2300      	movs	r3, #0
 8007526:	930a      	str	r3, [sp, #40]	; 0x28
 8007528:	e7bf      	b.n	80074aa <_dtoa_r+0x1da>
 800752a:	2300      	movs	r3, #0
 800752c:	9308      	str	r3, [sp, #32]
 800752e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007530:	2b00      	cmp	r3, #0
 8007532:	dc55      	bgt.n	80075e0 <_dtoa_r+0x310>
 8007534:	2301      	movs	r3, #1
 8007536:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800753a:	461a      	mov	r2, r3
 800753c:	9209      	str	r2, [sp, #36]	; 0x24
 800753e:	e00c      	b.n	800755a <_dtoa_r+0x28a>
 8007540:	2301      	movs	r3, #1
 8007542:	e7f3      	b.n	800752c <_dtoa_r+0x25c>
 8007544:	2300      	movs	r3, #0
 8007546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007548:	9308      	str	r3, [sp, #32]
 800754a:	9b00      	ldr	r3, [sp, #0]
 800754c:	4413      	add	r3, r2
 800754e:	9302      	str	r3, [sp, #8]
 8007550:	3301      	adds	r3, #1
 8007552:	2b01      	cmp	r3, #1
 8007554:	9303      	str	r3, [sp, #12]
 8007556:	bfb8      	it	lt
 8007558:	2301      	movlt	r3, #1
 800755a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800755c:	2200      	movs	r2, #0
 800755e:	6042      	str	r2, [r0, #4]
 8007560:	2204      	movs	r2, #4
 8007562:	f102 0614 	add.w	r6, r2, #20
 8007566:	429e      	cmp	r6, r3
 8007568:	6841      	ldr	r1, [r0, #4]
 800756a:	d93d      	bls.n	80075e8 <_dtoa_r+0x318>
 800756c:	4620      	mov	r0, r4
 800756e:	f000 fcb7 	bl	8007ee0 <_Balloc>
 8007572:	9001      	str	r0, [sp, #4]
 8007574:	2800      	cmp	r0, #0
 8007576:	d13b      	bne.n	80075f0 <_dtoa_r+0x320>
 8007578:	4b11      	ldr	r3, [pc, #68]	; (80075c0 <_dtoa_r+0x2f0>)
 800757a:	4602      	mov	r2, r0
 800757c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007580:	e6c0      	b.n	8007304 <_dtoa_r+0x34>
 8007582:	2301      	movs	r3, #1
 8007584:	e7df      	b.n	8007546 <_dtoa_r+0x276>
 8007586:	bf00      	nop
 8007588:	636f4361 	.word	0x636f4361
 800758c:	3fd287a7 	.word	0x3fd287a7
 8007590:	8b60c8b3 	.word	0x8b60c8b3
 8007594:	3fc68a28 	.word	0x3fc68a28
 8007598:	509f79fb 	.word	0x509f79fb
 800759c:	3fd34413 	.word	0x3fd34413
 80075a0:	0800ab75 	.word	0x0800ab75
 80075a4:	0800ab8c 	.word	0x0800ab8c
 80075a8:	7ff00000 	.word	0x7ff00000
 80075ac:	0800ab71 	.word	0x0800ab71
 80075b0:	0800ab68 	.word	0x0800ab68
 80075b4:	0800ab45 	.word	0x0800ab45
 80075b8:	3ff80000 	.word	0x3ff80000
 80075bc:	0800ac80 	.word	0x0800ac80
 80075c0:	0800abe7 	.word	0x0800abe7
 80075c4:	2501      	movs	r5, #1
 80075c6:	2300      	movs	r3, #0
 80075c8:	9306      	str	r3, [sp, #24]
 80075ca:	9508      	str	r5, [sp, #32]
 80075cc:	f04f 33ff 	mov.w	r3, #4294967295
 80075d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80075d4:	2200      	movs	r2, #0
 80075d6:	2312      	movs	r3, #18
 80075d8:	e7b0      	b.n	800753c <_dtoa_r+0x26c>
 80075da:	2301      	movs	r3, #1
 80075dc:	9308      	str	r3, [sp, #32]
 80075de:	e7f5      	b.n	80075cc <_dtoa_r+0x2fc>
 80075e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80075e6:	e7b8      	b.n	800755a <_dtoa_r+0x28a>
 80075e8:	3101      	adds	r1, #1
 80075ea:	6041      	str	r1, [r0, #4]
 80075ec:	0052      	lsls	r2, r2, #1
 80075ee:	e7b8      	b.n	8007562 <_dtoa_r+0x292>
 80075f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075f2:	9a01      	ldr	r2, [sp, #4]
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	9b03      	ldr	r3, [sp, #12]
 80075f8:	2b0e      	cmp	r3, #14
 80075fa:	f200 809d 	bhi.w	8007738 <_dtoa_r+0x468>
 80075fe:	2d00      	cmp	r5, #0
 8007600:	f000 809a 	beq.w	8007738 <_dtoa_r+0x468>
 8007604:	9b00      	ldr	r3, [sp, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	dd32      	ble.n	8007670 <_dtoa_r+0x3a0>
 800760a:	4ab7      	ldr	r2, [pc, #732]	; (80078e8 <_dtoa_r+0x618>)
 800760c:	f003 030f 	and.w	r3, r3, #15
 8007610:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007614:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007618:	9b00      	ldr	r3, [sp, #0]
 800761a:	05d8      	lsls	r0, r3, #23
 800761c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007620:	d516      	bpl.n	8007650 <_dtoa_r+0x380>
 8007622:	4bb2      	ldr	r3, [pc, #712]	; (80078ec <_dtoa_r+0x61c>)
 8007624:	ec51 0b19 	vmov	r0, r1, d9
 8007628:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800762c:	f7f9 f92e 	bl	800088c <__aeabi_ddiv>
 8007630:	f007 070f 	and.w	r7, r7, #15
 8007634:	4682      	mov	sl, r0
 8007636:	468b      	mov	fp, r1
 8007638:	2503      	movs	r5, #3
 800763a:	4eac      	ldr	r6, [pc, #688]	; (80078ec <_dtoa_r+0x61c>)
 800763c:	b957      	cbnz	r7, 8007654 <_dtoa_r+0x384>
 800763e:	4642      	mov	r2, r8
 8007640:	464b      	mov	r3, r9
 8007642:	4650      	mov	r0, sl
 8007644:	4659      	mov	r1, fp
 8007646:	f7f9 f921 	bl	800088c <__aeabi_ddiv>
 800764a:	4682      	mov	sl, r0
 800764c:	468b      	mov	fp, r1
 800764e:	e028      	b.n	80076a2 <_dtoa_r+0x3d2>
 8007650:	2502      	movs	r5, #2
 8007652:	e7f2      	b.n	800763a <_dtoa_r+0x36a>
 8007654:	07f9      	lsls	r1, r7, #31
 8007656:	d508      	bpl.n	800766a <_dtoa_r+0x39a>
 8007658:	4640      	mov	r0, r8
 800765a:	4649      	mov	r1, r9
 800765c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007660:	f7f8 ffea 	bl	8000638 <__aeabi_dmul>
 8007664:	3501      	adds	r5, #1
 8007666:	4680      	mov	r8, r0
 8007668:	4689      	mov	r9, r1
 800766a:	107f      	asrs	r7, r7, #1
 800766c:	3608      	adds	r6, #8
 800766e:	e7e5      	b.n	800763c <_dtoa_r+0x36c>
 8007670:	f000 809b 	beq.w	80077aa <_dtoa_r+0x4da>
 8007674:	9b00      	ldr	r3, [sp, #0]
 8007676:	4f9d      	ldr	r7, [pc, #628]	; (80078ec <_dtoa_r+0x61c>)
 8007678:	425e      	negs	r6, r3
 800767a:	4b9b      	ldr	r3, [pc, #620]	; (80078e8 <_dtoa_r+0x618>)
 800767c:	f006 020f 	and.w	r2, r6, #15
 8007680:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	ec51 0b19 	vmov	r0, r1, d9
 800768c:	f7f8 ffd4 	bl	8000638 <__aeabi_dmul>
 8007690:	1136      	asrs	r6, r6, #4
 8007692:	4682      	mov	sl, r0
 8007694:	468b      	mov	fp, r1
 8007696:	2300      	movs	r3, #0
 8007698:	2502      	movs	r5, #2
 800769a:	2e00      	cmp	r6, #0
 800769c:	d17a      	bne.n	8007794 <_dtoa_r+0x4c4>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1d3      	bne.n	800764a <_dtoa_r+0x37a>
 80076a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 8082 	beq.w	80077ae <_dtoa_r+0x4de>
 80076aa:	4b91      	ldr	r3, [pc, #580]	; (80078f0 <_dtoa_r+0x620>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	4650      	mov	r0, sl
 80076b0:	4659      	mov	r1, fp
 80076b2:	f7f9 fa33 	bl	8000b1c <__aeabi_dcmplt>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d079      	beq.n	80077ae <_dtoa_r+0x4de>
 80076ba:	9b03      	ldr	r3, [sp, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d076      	beq.n	80077ae <_dtoa_r+0x4de>
 80076c0:	9b02      	ldr	r3, [sp, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	dd36      	ble.n	8007734 <_dtoa_r+0x464>
 80076c6:	9b00      	ldr	r3, [sp, #0]
 80076c8:	4650      	mov	r0, sl
 80076ca:	4659      	mov	r1, fp
 80076cc:	1e5f      	subs	r7, r3, #1
 80076ce:	2200      	movs	r2, #0
 80076d0:	4b88      	ldr	r3, [pc, #544]	; (80078f4 <_dtoa_r+0x624>)
 80076d2:	f7f8 ffb1 	bl	8000638 <__aeabi_dmul>
 80076d6:	9e02      	ldr	r6, [sp, #8]
 80076d8:	4682      	mov	sl, r0
 80076da:	468b      	mov	fp, r1
 80076dc:	3501      	adds	r5, #1
 80076de:	4628      	mov	r0, r5
 80076e0:	f7f8 ff40 	bl	8000564 <__aeabi_i2d>
 80076e4:	4652      	mov	r2, sl
 80076e6:	465b      	mov	r3, fp
 80076e8:	f7f8 ffa6 	bl	8000638 <__aeabi_dmul>
 80076ec:	4b82      	ldr	r3, [pc, #520]	; (80078f8 <_dtoa_r+0x628>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	f7f8 fdec 	bl	80002cc <__adddf3>
 80076f4:	46d0      	mov	r8, sl
 80076f6:	46d9      	mov	r9, fp
 80076f8:	4682      	mov	sl, r0
 80076fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80076fe:	2e00      	cmp	r6, #0
 8007700:	d158      	bne.n	80077b4 <_dtoa_r+0x4e4>
 8007702:	4b7e      	ldr	r3, [pc, #504]	; (80078fc <_dtoa_r+0x62c>)
 8007704:	2200      	movs	r2, #0
 8007706:	4640      	mov	r0, r8
 8007708:	4649      	mov	r1, r9
 800770a:	f7f8 fddd 	bl	80002c8 <__aeabi_dsub>
 800770e:	4652      	mov	r2, sl
 8007710:	465b      	mov	r3, fp
 8007712:	4680      	mov	r8, r0
 8007714:	4689      	mov	r9, r1
 8007716:	f7f9 fa1f 	bl	8000b58 <__aeabi_dcmpgt>
 800771a:	2800      	cmp	r0, #0
 800771c:	f040 8295 	bne.w	8007c4a <_dtoa_r+0x97a>
 8007720:	4652      	mov	r2, sl
 8007722:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007726:	4640      	mov	r0, r8
 8007728:	4649      	mov	r1, r9
 800772a:	f7f9 f9f7 	bl	8000b1c <__aeabi_dcmplt>
 800772e:	2800      	cmp	r0, #0
 8007730:	f040 8289 	bne.w	8007c46 <_dtoa_r+0x976>
 8007734:	ec5b ab19 	vmov	sl, fp, d9
 8007738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800773a:	2b00      	cmp	r3, #0
 800773c:	f2c0 8148 	blt.w	80079d0 <_dtoa_r+0x700>
 8007740:	9a00      	ldr	r2, [sp, #0]
 8007742:	2a0e      	cmp	r2, #14
 8007744:	f300 8144 	bgt.w	80079d0 <_dtoa_r+0x700>
 8007748:	4b67      	ldr	r3, [pc, #412]	; (80078e8 <_dtoa_r+0x618>)
 800774a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800774e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007754:	2b00      	cmp	r3, #0
 8007756:	f280 80d5 	bge.w	8007904 <_dtoa_r+0x634>
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	f300 80d1 	bgt.w	8007904 <_dtoa_r+0x634>
 8007762:	f040 826f 	bne.w	8007c44 <_dtoa_r+0x974>
 8007766:	4b65      	ldr	r3, [pc, #404]	; (80078fc <_dtoa_r+0x62c>)
 8007768:	2200      	movs	r2, #0
 800776a:	4640      	mov	r0, r8
 800776c:	4649      	mov	r1, r9
 800776e:	f7f8 ff63 	bl	8000638 <__aeabi_dmul>
 8007772:	4652      	mov	r2, sl
 8007774:	465b      	mov	r3, fp
 8007776:	f7f9 f9e5 	bl	8000b44 <__aeabi_dcmpge>
 800777a:	9e03      	ldr	r6, [sp, #12]
 800777c:	4637      	mov	r7, r6
 800777e:	2800      	cmp	r0, #0
 8007780:	f040 8245 	bne.w	8007c0e <_dtoa_r+0x93e>
 8007784:	9d01      	ldr	r5, [sp, #4]
 8007786:	2331      	movs	r3, #49	; 0x31
 8007788:	f805 3b01 	strb.w	r3, [r5], #1
 800778c:	9b00      	ldr	r3, [sp, #0]
 800778e:	3301      	adds	r3, #1
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	e240      	b.n	8007c16 <_dtoa_r+0x946>
 8007794:	07f2      	lsls	r2, r6, #31
 8007796:	d505      	bpl.n	80077a4 <_dtoa_r+0x4d4>
 8007798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800779c:	f7f8 ff4c 	bl	8000638 <__aeabi_dmul>
 80077a0:	3501      	adds	r5, #1
 80077a2:	2301      	movs	r3, #1
 80077a4:	1076      	asrs	r6, r6, #1
 80077a6:	3708      	adds	r7, #8
 80077a8:	e777      	b.n	800769a <_dtoa_r+0x3ca>
 80077aa:	2502      	movs	r5, #2
 80077ac:	e779      	b.n	80076a2 <_dtoa_r+0x3d2>
 80077ae:	9f00      	ldr	r7, [sp, #0]
 80077b0:	9e03      	ldr	r6, [sp, #12]
 80077b2:	e794      	b.n	80076de <_dtoa_r+0x40e>
 80077b4:	9901      	ldr	r1, [sp, #4]
 80077b6:	4b4c      	ldr	r3, [pc, #304]	; (80078e8 <_dtoa_r+0x618>)
 80077b8:	4431      	add	r1, r6
 80077ba:	910d      	str	r1, [sp, #52]	; 0x34
 80077bc:	9908      	ldr	r1, [sp, #32]
 80077be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80077c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077c6:	2900      	cmp	r1, #0
 80077c8:	d043      	beq.n	8007852 <_dtoa_r+0x582>
 80077ca:	494d      	ldr	r1, [pc, #308]	; (8007900 <_dtoa_r+0x630>)
 80077cc:	2000      	movs	r0, #0
 80077ce:	f7f9 f85d 	bl	800088c <__aeabi_ddiv>
 80077d2:	4652      	mov	r2, sl
 80077d4:	465b      	mov	r3, fp
 80077d6:	f7f8 fd77 	bl	80002c8 <__aeabi_dsub>
 80077da:	9d01      	ldr	r5, [sp, #4]
 80077dc:	4682      	mov	sl, r0
 80077de:	468b      	mov	fp, r1
 80077e0:	4649      	mov	r1, r9
 80077e2:	4640      	mov	r0, r8
 80077e4:	f7f9 f9d8 	bl	8000b98 <__aeabi_d2iz>
 80077e8:	4606      	mov	r6, r0
 80077ea:	f7f8 febb 	bl	8000564 <__aeabi_i2d>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4640      	mov	r0, r8
 80077f4:	4649      	mov	r1, r9
 80077f6:	f7f8 fd67 	bl	80002c8 <__aeabi_dsub>
 80077fa:	3630      	adds	r6, #48	; 0x30
 80077fc:	f805 6b01 	strb.w	r6, [r5], #1
 8007800:	4652      	mov	r2, sl
 8007802:	465b      	mov	r3, fp
 8007804:	4680      	mov	r8, r0
 8007806:	4689      	mov	r9, r1
 8007808:	f7f9 f988 	bl	8000b1c <__aeabi_dcmplt>
 800780c:	2800      	cmp	r0, #0
 800780e:	d163      	bne.n	80078d8 <_dtoa_r+0x608>
 8007810:	4642      	mov	r2, r8
 8007812:	464b      	mov	r3, r9
 8007814:	4936      	ldr	r1, [pc, #216]	; (80078f0 <_dtoa_r+0x620>)
 8007816:	2000      	movs	r0, #0
 8007818:	f7f8 fd56 	bl	80002c8 <__aeabi_dsub>
 800781c:	4652      	mov	r2, sl
 800781e:	465b      	mov	r3, fp
 8007820:	f7f9 f97c 	bl	8000b1c <__aeabi_dcmplt>
 8007824:	2800      	cmp	r0, #0
 8007826:	f040 80b5 	bne.w	8007994 <_dtoa_r+0x6c4>
 800782a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800782c:	429d      	cmp	r5, r3
 800782e:	d081      	beq.n	8007734 <_dtoa_r+0x464>
 8007830:	4b30      	ldr	r3, [pc, #192]	; (80078f4 <_dtoa_r+0x624>)
 8007832:	2200      	movs	r2, #0
 8007834:	4650      	mov	r0, sl
 8007836:	4659      	mov	r1, fp
 8007838:	f7f8 fefe 	bl	8000638 <__aeabi_dmul>
 800783c:	4b2d      	ldr	r3, [pc, #180]	; (80078f4 <_dtoa_r+0x624>)
 800783e:	4682      	mov	sl, r0
 8007840:	468b      	mov	fp, r1
 8007842:	4640      	mov	r0, r8
 8007844:	4649      	mov	r1, r9
 8007846:	2200      	movs	r2, #0
 8007848:	f7f8 fef6 	bl	8000638 <__aeabi_dmul>
 800784c:	4680      	mov	r8, r0
 800784e:	4689      	mov	r9, r1
 8007850:	e7c6      	b.n	80077e0 <_dtoa_r+0x510>
 8007852:	4650      	mov	r0, sl
 8007854:	4659      	mov	r1, fp
 8007856:	f7f8 feef 	bl	8000638 <__aeabi_dmul>
 800785a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800785c:	9d01      	ldr	r5, [sp, #4]
 800785e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007860:	4682      	mov	sl, r0
 8007862:	468b      	mov	fp, r1
 8007864:	4649      	mov	r1, r9
 8007866:	4640      	mov	r0, r8
 8007868:	f7f9 f996 	bl	8000b98 <__aeabi_d2iz>
 800786c:	4606      	mov	r6, r0
 800786e:	f7f8 fe79 	bl	8000564 <__aeabi_i2d>
 8007872:	3630      	adds	r6, #48	; 0x30
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4640      	mov	r0, r8
 800787a:	4649      	mov	r1, r9
 800787c:	f7f8 fd24 	bl	80002c8 <__aeabi_dsub>
 8007880:	f805 6b01 	strb.w	r6, [r5], #1
 8007884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007886:	429d      	cmp	r5, r3
 8007888:	4680      	mov	r8, r0
 800788a:	4689      	mov	r9, r1
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	d124      	bne.n	80078dc <_dtoa_r+0x60c>
 8007892:	4b1b      	ldr	r3, [pc, #108]	; (8007900 <_dtoa_r+0x630>)
 8007894:	4650      	mov	r0, sl
 8007896:	4659      	mov	r1, fp
 8007898:	f7f8 fd18 	bl	80002cc <__adddf3>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4640      	mov	r0, r8
 80078a2:	4649      	mov	r1, r9
 80078a4:	f7f9 f958 	bl	8000b58 <__aeabi_dcmpgt>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d173      	bne.n	8007994 <_dtoa_r+0x6c4>
 80078ac:	4652      	mov	r2, sl
 80078ae:	465b      	mov	r3, fp
 80078b0:	4913      	ldr	r1, [pc, #76]	; (8007900 <_dtoa_r+0x630>)
 80078b2:	2000      	movs	r0, #0
 80078b4:	f7f8 fd08 	bl	80002c8 <__aeabi_dsub>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4640      	mov	r0, r8
 80078be:	4649      	mov	r1, r9
 80078c0:	f7f9 f92c 	bl	8000b1c <__aeabi_dcmplt>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	f43f af35 	beq.w	8007734 <_dtoa_r+0x464>
 80078ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80078cc:	1e6b      	subs	r3, r5, #1
 80078ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80078d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078d4:	2b30      	cmp	r3, #48	; 0x30
 80078d6:	d0f8      	beq.n	80078ca <_dtoa_r+0x5fa>
 80078d8:	9700      	str	r7, [sp, #0]
 80078da:	e049      	b.n	8007970 <_dtoa_r+0x6a0>
 80078dc:	4b05      	ldr	r3, [pc, #20]	; (80078f4 <_dtoa_r+0x624>)
 80078de:	f7f8 feab 	bl	8000638 <__aeabi_dmul>
 80078e2:	4680      	mov	r8, r0
 80078e4:	4689      	mov	r9, r1
 80078e6:	e7bd      	b.n	8007864 <_dtoa_r+0x594>
 80078e8:	0800ac80 	.word	0x0800ac80
 80078ec:	0800ac58 	.word	0x0800ac58
 80078f0:	3ff00000 	.word	0x3ff00000
 80078f4:	40240000 	.word	0x40240000
 80078f8:	401c0000 	.word	0x401c0000
 80078fc:	40140000 	.word	0x40140000
 8007900:	3fe00000 	.word	0x3fe00000
 8007904:	9d01      	ldr	r5, [sp, #4]
 8007906:	4656      	mov	r6, sl
 8007908:	465f      	mov	r7, fp
 800790a:	4642      	mov	r2, r8
 800790c:	464b      	mov	r3, r9
 800790e:	4630      	mov	r0, r6
 8007910:	4639      	mov	r1, r7
 8007912:	f7f8 ffbb 	bl	800088c <__aeabi_ddiv>
 8007916:	f7f9 f93f 	bl	8000b98 <__aeabi_d2iz>
 800791a:	4682      	mov	sl, r0
 800791c:	f7f8 fe22 	bl	8000564 <__aeabi_i2d>
 8007920:	4642      	mov	r2, r8
 8007922:	464b      	mov	r3, r9
 8007924:	f7f8 fe88 	bl	8000638 <__aeabi_dmul>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4630      	mov	r0, r6
 800792e:	4639      	mov	r1, r7
 8007930:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007934:	f7f8 fcc8 	bl	80002c8 <__aeabi_dsub>
 8007938:	f805 6b01 	strb.w	r6, [r5], #1
 800793c:	9e01      	ldr	r6, [sp, #4]
 800793e:	9f03      	ldr	r7, [sp, #12]
 8007940:	1bae      	subs	r6, r5, r6
 8007942:	42b7      	cmp	r7, r6
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	d135      	bne.n	80079b6 <_dtoa_r+0x6e6>
 800794a:	f7f8 fcbf 	bl	80002cc <__adddf3>
 800794e:	4642      	mov	r2, r8
 8007950:	464b      	mov	r3, r9
 8007952:	4606      	mov	r6, r0
 8007954:	460f      	mov	r7, r1
 8007956:	f7f9 f8ff 	bl	8000b58 <__aeabi_dcmpgt>
 800795a:	b9d0      	cbnz	r0, 8007992 <_dtoa_r+0x6c2>
 800795c:	4642      	mov	r2, r8
 800795e:	464b      	mov	r3, r9
 8007960:	4630      	mov	r0, r6
 8007962:	4639      	mov	r1, r7
 8007964:	f7f9 f8d0 	bl	8000b08 <__aeabi_dcmpeq>
 8007968:	b110      	cbz	r0, 8007970 <_dtoa_r+0x6a0>
 800796a:	f01a 0f01 	tst.w	sl, #1
 800796e:	d110      	bne.n	8007992 <_dtoa_r+0x6c2>
 8007970:	4620      	mov	r0, r4
 8007972:	ee18 1a10 	vmov	r1, s16
 8007976:	f000 faf3 	bl	8007f60 <_Bfree>
 800797a:	2300      	movs	r3, #0
 800797c:	9800      	ldr	r0, [sp, #0]
 800797e:	702b      	strb	r3, [r5, #0]
 8007980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007982:	3001      	adds	r0, #1
 8007984:	6018      	str	r0, [r3, #0]
 8007986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007988:	2b00      	cmp	r3, #0
 800798a:	f43f acf1 	beq.w	8007370 <_dtoa_r+0xa0>
 800798e:	601d      	str	r5, [r3, #0]
 8007990:	e4ee      	b.n	8007370 <_dtoa_r+0xa0>
 8007992:	9f00      	ldr	r7, [sp, #0]
 8007994:	462b      	mov	r3, r5
 8007996:	461d      	mov	r5, r3
 8007998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800799c:	2a39      	cmp	r2, #57	; 0x39
 800799e:	d106      	bne.n	80079ae <_dtoa_r+0x6de>
 80079a0:	9a01      	ldr	r2, [sp, #4]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d1f7      	bne.n	8007996 <_dtoa_r+0x6c6>
 80079a6:	9901      	ldr	r1, [sp, #4]
 80079a8:	2230      	movs	r2, #48	; 0x30
 80079aa:	3701      	adds	r7, #1
 80079ac:	700a      	strb	r2, [r1, #0]
 80079ae:	781a      	ldrb	r2, [r3, #0]
 80079b0:	3201      	adds	r2, #1
 80079b2:	701a      	strb	r2, [r3, #0]
 80079b4:	e790      	b.n	80078d8 <_dtoa_r+0x608>
 80079b6:	4ba6      	ldr	r3, [pc, #664]	; (8007c50 <_dtoa_r+0x980>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	f7f8 fe3d 	bl	8000638 <__aeabi_dmul>
 80079be:	2200      	movs	r2, #0
 80079c0:	2300      	movs	r3, #0
 80079c2:	4606      	mov	r6, r0
 80079c4:	460f      	mov	r7, r1
 80079c6:	f7f9 f89f 	bl	8000b08 <__aeabi_dcmpeq>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d09d      	beq.n	800790a <_dtoa_r+0x63a>
 80079ce:	e7cf      	b.n	8007970 <_dtoa_r+0x6a0>
 80079d0:	9a08      	ldr	r2, [sp, #32]
 80079d2:	2a00      	cmp	r2, #0
 80079d4:	f000 80d7 	beq.w	8007b86 <_dtoa_r+0x8b6>
 80079d8:	9a06      	ldr	r2, [sp, #24]
 80079da:	2a01      	cmp	r2, #1
 80079dc:	f300 80ba 	bgt.w	8007b54 <_dtoa_r+0x884>
 80079e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079e2:	2a00      	cmp	r2, #0
 80079e4:	f000 80b2 	beq.w	8007b4c <_dtoa_r+0x87c>
 80079e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079ec:	9e07      	ldr	r6, [sp, #28]
 80079ee:	9d04      	ldr	r5, [sp, #16]
 80079f0:	9a04      	ldr	r2, [sp, #16]
 80079f2:	441a      	add	r2, r3
 80079f4:	9204      	str	r2, [sp, #16]
 80079f6:	9a05      	ldr	r2, [sp, #20]
 80079f8:	2101      	movs	r1, #1
 80079fa:	441a      	add	r2, r3
 80079fc:	4620      	mov	r0, r4
 80079fe:	9205      	str	r2, [sp, #20]
 8007a00:	f000 fb66 	bl	80080d0 <__i2b>
 8007a04:	4607      	mov	r7, r0
 8007a06:	2d00      	cmp	r5, #0
 8007a08:	dd0c      	ble.n	8007a24 <_dtoa_r+0x754>
 8007a0a:	9b05      	ldr	r3, [sp, #20]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	dd09      	ble.n	8007a24 <_dtoa_r+0x754>
 8007a10:	42ab      	cmp	r3, r5
 8007a12:	9a04      	ldr	r2, [sp, #16]
 8007a14:	bfa8      	it	ge
 8007a16:	462b      	movge	r3, r5
 8007a18:	1ad2      	subs	r2, r2, r3
 8007a1a:	9204      	str	r2, [sp, #16]
 8007a1c:	9a05      	ldr	r2, [sp, #20]
 8007a1e:	1aed      	subs	r5, r5, r3
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	9305      	str	r3, [sp, #20]
 8007a24:	9b07      	ldr	r3, [sp, #28]
 8007a26:	b31b      	cbz	r3, 8007a70 <_dtoa_r+0x7a0>
 8007a28:	9b08      	ldr	r3, [sp, #32]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 80af 	beq.w	8007b8e <_dtoa_r+0x8be>
 8007a30:	2e00      	cmp	r6, #0
 8007a32:	dd13      	ble.n	8007a5c <_dtoa_r+0x78c>
 8007a34:	4639      	mov	r1, r7
 8007a36:	4632      	mov	r2, r6
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f000 fc09 	bl	8008250 <__pow5mult>
 8007a3e:	ee18 2a10 	vmov	r2, s16
 8007a42:	4601      	mov	r1, r0
 8007a44:	4607      	mov	r7, r0
 8007a46:	4620      	mov	r0, r4
 8007a48:	f000 fb58 	bl	80080fc <__multiply>
 8007a4c:	ee18 1a10 	vmov	r1, s16
 8007a50:	4680      	mov	r8, r0
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 fa84 	bl	8007f60 <_Bfree>
 8007a58:	ee08 8a10 	vmov	s16, r8
 8007a5c:	9b07      	ldr	r3, [sp, #28]
 8007a5e:	1b9a      	subs	r2, r3, r6
 8007a60:	d006      	beq.n	8007a70 <_dtoa_r+0x7a0>
 8007a62:	ee18 1a10 	vmov	r1, s16
 8007a66:	4620      	mov	r0, r4
 8007a68:	f000 fbf2 	bl	8008250 <__pow5mult>
 8007a6c:	ee08 0a10 	vmov	s16, r0
 8007a70:	2101      	movs	r1, #1
 8007a72:	4620      	mov	r0, r4
 8007a74:	f000 fb2c 	bl	80080d0 <__i2b>
 8007a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	f340 8088 	ble.w	8007b92 <_dtoa_r+0x8c2>
 8007a82:	461a      	mov	r2, r3
 8007a84:	4601      	mov	r1, r0
 8007a86:	4620      	mov	r0, r4
 8007a88:	f000 fbe2 	bl	8008250 <__pow5mult>
 8007a8c:	9b06      	ldr	r3, [sp, #24]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	4606      	mov	r6, r0
 8007a92:	f340 8081 	ble.w	8007b98 <_dtoa_r+0x8c8>
 8007a96:	f04f 0800 	mov.w	r8, #0
 8007a9a:	6933      	ldr	r3, [r6, #16]
 8007a9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007aa0:	6918      	ldr	r0, [r3, #16]
 8007aa2:	f000 fac5 	bl	8008030 <__hi0bits>
 8007aa6:	f1c0 0020 	rsb	r0, r0, #32
 8007aaa:	9b05      	ldr	r3, [sp, #20]
 8007aac:	4418      	add	r0, r3
 8007aae:	f010 001f 	ands.w	r0, r0, #31
 8007ab2:	f000 8092 	beq.w	8007bda <_dtoa_r+0x90a>
 8007ab6:	f1c0 0320 	rsb	r3, r0, #32
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	f340 808a 	ble.w	8007bd4 <_dtoa_r+0x904>
 8007ac0:	f1c0 001c 	rsb	r0, r0, #28
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	4403      	add	r3, r0
 8007ac8:	9304      	str	r3, [sp, #16]
 8007aca:	9b05      	ldr	r3, [sp, #20]
 8007acc:	4403      	add	r3, r0
 8007ace:	4405      	add	r5, r0
 8007ad0:	9305      	str	r3, [sp, #20]
 8007ad2:	9b04      	ldr	r3, [sp, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	dd07      	ble.n	8007ae8 <_dtoa_r+0x818>
 8007ad8:	ee18 1a10 	vmov	r1, s16
 8007adc:	461a      	mov	r2, r3
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f000 fc10 	bl	8008304 <__lshift>
 8007ae4:	ee08 0a10 	vmov	s16, r0
 8007ae8:	9b05      	ldr	r3, [sp, #20]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	dd05      	ble.n	8007afa <_dtoa_r+0x82a>
 8007aee:	4631      	mov	r1, r6
 8007af0:	461a      	mov	r2, r3
 8007af2:	4620      	mov	r0, r4
 8007af4:	f000 fc06 	bl	8008304 <__lshift>
 8007af8:	4606      	mov	r6, r0
 8007afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d06e      	beq.n	8007bde <_dtoa_r+0x90e>
 8007b00:	ee18 0a10 	vmov	r0, s16
 8007b04:	4631      	mov	r1, r6
 8007b06:	f000 fc6d 	bl	80083e4 <__mcmp>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	da67      	bge.n	8007bde <_dtoa_r+0x90e>
 8007b0e:	9b00      	ldr	r3, [sp, #0]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	ee18 1a10 	vmov	r1, s16
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	220a      	movs	r2, #10
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f000 fa41 	bl	8007fa4 <__multadd>
 8007b22:	9b08      	ldr	r3, [sp, #32]
 8007b24:	ee08 0a10 	vmov	s16, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 81b1 	beq.w	8007e90 <_dtoa_r+0xbc0>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	4639      	mov	r1, r7
 8007b32:	220a      	movs	r2, #10
 8007b34:	4620      	mov	r0, r4
 8007b36:	f000 fa35 	bl	8007fa4 <__multadd>
 8007b3a:	9b02      	ldr	r3, [sp, #8]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	4607      	mov	r7, r0
 8007b40:	f300 808e 	bgt.w	8007c60 <_dtoa_r+0x990>
 8007b44:	9b06      	ldr	r3, [sp, #24]
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	dc51      	bgt.n	8007bee <_dtoa_r+0x91e>
 8007b4a:	e089      	b.n	8007c60 <_dtoa_r+0x990>
 8007b4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b52:	e74b      	b.n	80079ec <_dtoa_r+0x71c>
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	1e5e      	subs	r6, r3, #1
 8007b58:	9b07      	ldr	r3, [sp, #28]
 8007b5a:	42b3      	cmp	r3, r6
 8007b5c:	bfbf      	itttt	lt
 8007b5e:	9b07      	ldrlt	r3, [sp, #28]
 8007b60:	9607      	strlt	r6, [sp, #28]
 8007b62:	1af2      	sublt	r2, r6, r3
 8007b64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b66:	bfb6      	itet	lt
 8007b68:	189b      	addlt	r3, r3, r2
 8007b6a:	1b9e      	subge	r6, r3, r6
 8007b6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007b6e:	9b03      	ldr	r3, [sp, #12]
 8007b70:	bfb8      	it	lt
 8007b72:	2600      	movlt	r6, #0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	bfb7      	itett	lt
 8007b78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007b7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007b80:	1a9d      	sublt	r5, r3, r2
 8007b82:	2300      	movlt	r3, #0
 8007b84:	e734      	b.n	80079f0 <_dtoa_r+0x720>
 8007b86:	9e07      	ldr	r6, [sp, #28]
 8007b88:	9d04      	ldr	r5, [sp, #16]
 8007b8a:	9f08      	ldr	r7, [sp, #32]
 8007b8c:	e73b      	b.n	8007a06 <_dtoa_r+0x736>
 8007b8e:	9a07      	ldr	r2, [sp, #28]
 8007b90:	e767      	b.n	8007a62 <_dtoa_r+0x792>
 8007b92:	9b06      	ldr	r3, [sp, #24]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	dc18      	bgt.n	8007bca <_dtoa_r+0x8fa>
 8007b98:	f1ba 0f00 	cmp.w	sl, #0
 8007b9c:	d115      	bne.n	8007bca <_dtoa_r+0x8fa>
 8007b9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ba2:	b993      	cbnz	r3, 8007bca <_dtoa_r+0x8fa>
 8007ba4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ba8:	0d1b      	lsrs	r3, r3, #20
 8007baa:	051b      	lsls	r3, r3, #20
 8007bac:	b183      	cbz	r3, 8007bd0 <_dtoa_r+0x900>
 8007bae:	9b04      	ldr	r3, [sp, #16]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	9304      	str	r3, [sp, #16]
 8007bb4:	9b05      	ldr	r3, [sp, #20]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	9305      	str	r3, [sp, #20]
 8007bba:	f04f 0801 	mov.w	r8, #1
 8007bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f47f af6a 	bne.w	8007a9a <_dtoa_r+0x7ca>
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	e76f      	b.n	8007aaa <_dtoa_r+0x7da>
 8007bca:	f04f 0800 	mov.w	r8, #0
 8007bce:	e7f6      	b.n	8007bbe <_dtoa_r+0x8ee>
 8007bd0:	4698      	mov	r8, r3
 8007bd2:	e7f4      	b.n	8007bbe <_dtoa_r+0x8ee>
 8007bd4:	f43f af7d 	beq.w	8007ad2 <_dtoa_r+0x802>
 8007bd8:	4618      	mov	r0, r3
 8007bda:	301c      	adds	r0, #28
 8007bdc:	e772      	b.n	8007ac4 <_dtoa_r+0x7f4>
 8007bde:	9b03      	ldr	r3, [sp, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	dc37      	bgt.n	8007c54 <_dtoa_r+0x984>
 8007be4:	9b06      	ldr	r3, [sp, #24]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	dd34      	ble.n	8007c54 <_dtoa_r+0x984>
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	9302      	str	r3, [sp, #8]
 8007bee:	9b02      	ldr	r3, [sp, #8]
 8007bf0:	b96b      	cbnz	r3, 8007c0e <_dtoa_r+0x93e>
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	2205      	movs	r2, #5
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f000 f9d4 	bl	8007fa4 <__multadd>
 8007bfc:	4601      	mov	r1, r0
 8007bfe:	4606      	mov	r6, r0
 8007c00:	ee18 0a10 	vmov	r0, s16
 8007c04:	f000 fbee 	bl	80083e4 <__mcmp>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	f73f adbb 	bgt.w	8007784 <_dtoa_r+0x4b4>
 8007c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c10:	9d01      	ldr	r5, [sp, #4]
 8007c12:	43db      	mvns	r3, r3
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	f04f 0800 	mov.w	r8, #0
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 f99f 	bl	8007f60 <_Bfree>
 8007c22:	2f00      	cmp	r7, #0
 8007c24:	f43f aea4 	beq.w	8007970 <_dtoa_r+0x6a0>
 8007c28:	f1b8 0f00 	cmp.w	r8, #0
 8007c2c:	d005      	beq.n	8007c3a <_dtoa_r+0x96a>
 8007c2e:	45b8      	cmp	r8, r7
 8007c30:	d003      	beq.n	8007c3a <_dtoa_r+0x96a>
 8007c32:	4641      	mov	r1, r8
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 f993 	bl	8007f60 <_Bfree>
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f000 f98f 	bl	8007f60 <_Bfree>
 8007c42:	e695      	b.n	8007970 <_dtoa_r+0x6a0>
 8007c44:	2600      	movs	r6, #0
 8007c46:	4637      	mov	r7, r6
 8007c48:	e7e1      	b.n	8007c0e <_dtoa_r+0x93e>
 8007c4a:	9700      	str	r7, [sp, #0]
 8007c4c:	4637      	mov	r7, r6
 8007c4e:	e599      	b.n	8007784 <_dtoa_r+0x4b4>
 8007c50:	40240000 	.word	0x40240000
 8007c54:	9b08      	ldr	r3, [sp, #32]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 80ca 	beq.w	8007df0 <_dtoa_r+0xb20>
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	9302      	str	r3, [sp, #8]
 8007c60:	2d00      	cmp	r5, #0
 8007c62:	dd05      	ble.n	8007c70 <_dtoa_r+0x9a0>
 8007c64:	4639      	mov	r1, r7
 8007c66:	462a      	mov	r2, r5
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f000 fb4b 	bl	8008304 <__lshift>
 8007c6e:	4607      	mov	r7, r0
 8007c70:	f1b8 0f00 	cmp.w	r8, #0
 8007c74:	d05b      	beq.n	8007d2e <_dtoa_r+0xa5e>
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f000 f931 	bl	8007ee0 <_Balloc>
 8007c7e:	4605      	mov	r5, r0
 8007c80:	b928      	cbnz	r0, 8007c8e <_dtoa_r+0x9be>
 8007c82:	4b87      	ldr	r3, [pc, #540]	; (8007ea0 <_dtoa_r+0xbd0>)
 8007c84:	4602      	mov	r2, r0
 8007c86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007c8a:	f7ff bb3b 	b.w	8007304 <_dtoa_r+0x34>
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	3202      	adds	r2, #2
 8007c92:	0092      	lsls	r2, r2, #2
 8007c94:	f107 010c 	add.w	r1, r7, #12
 8007c98:	300c      	adds	r0, #12
 8007c9a:	f000 f913 	bl	8007ec4 <memcpy>
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 fb2e 	bl	8008304 <__lshift>
 8007ca8:	9b01      	ldr	r3, [sp, #4]
 8007caa:	f103 0901 	add.w	r9, r3, #1
 8007cae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	9305      	str	r3, [sp, #20]
 8007cb6:	f00a 0301 	and.w	r3, sl, #1
 8007cba:	46b8      	mov	r8, r7
 8007cbc:	9304      	str	r3, [sp, #16]
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	ee18 0a10 	vmov	r0, s16
 8007cc6:	f7ff fa77 	bl	80071b8 <quorem>
 8007cca:	4641      	mov	r1, r8
 8007ccc:	9002      	str	r0, [sp, #8]
 8007cce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007cd2:	ee18 0a10 	vmov	r0, s16
 8007cd6:	f000 fb85 	bl	80083e4 <__mcmp>
 8007cda:	463a      	mov	r2, r7
 8007cdc:	9003      	str	r0, [sp, #12]
 8007cde:	4631      	mov	r1, r6
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f000 fb9b 	bl	800841c <__mdiff>
 8007ce6:	68c2      	ldr	r2, [r0, #12]
 8007ce8:	f109 3bff 	add.w	fp, r9, #4294967295
 8007cec:	4605      	mov	r5, r0
 8007cee:	bb02      	cbnz	r2, 8007d32 <_dtoa_r+0xa62>
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	ee18 0a10 	vmov	r0, s16
 8007cf6:	f000 fb75 	bl	80083e4 <__mcmp>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	4620      	mov	r0, r4
 8007d00:	9207      	str	r2, [sp, #28]
 8007d02:	f000 f92d 	bl	8007f60 <_Bfree>
 8007d06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007d0a:	ea43 0102 	orr.w	r1, r3, r2
 8007d0e:	9b04      	ldr	r3, [sp, #16]
 8007d10:	430b      	orrs	r3, r1
 8007d12:	464d      	mov	r5, r9
 8007d14:	d10f      	bne.n	8007d36 <_dtoa_r+0xa66>
 8007d16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d1a:	d02a      	beq.n	8007d72 <_dtoa_r+0xaa2>
 8007d1c:	9b03      	ldr	r3, [sp, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	dd02      	ble.n	8007d28 <_dtoa_r+0xa58>
 8007d22:	9b02      	ldr	r3, [sp, #8]
 8007d24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007d28:	f88b a000 	strb.w	sl, [fp]
 8007d2c:	e775      	b.n	8007c1a <_dtoa_r+0x94a>
 8007d2e:	4638      	mov	r0, r7
 8007d30:	e7ba      	b.n	8007ca8 <_dtoa_r+0x9d8>
 8007d32:	2201      	movs	r2, #1
 8007d34:	e7e2      	b.n	8007cfc <_dtoa_r+0xa2c>
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	db04      	blt.n	8007d46 <_dtoa_r+0xa76>
 8007d3c:	9906      	ldr	r1, [sp, #24]
 8007d3e:	430b      	orrs	r3, r1
 8007d40:	9904      	ldr	r1, [sp, #16]
 8007d42:	430b      	orrs	r3, r1
 8007d44:	d122      	bne.n	8007d8c <_dtoa_r+0xabc>
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	ddee      	ble.n	8007d28 <_dtoa_r+0xa58>
 8007d4a:	ee18 1a10 	vmov	r1, s16
 8007d4e:	2201      	movs	r2, #1
 8007d50:	4620      	mov	r0, r4
 8007d52:	f000 fad7 	bl	8008304 <__lshift>
 8007d56:	4631      	mov	r1, r6
 8007d58:	ee08 0a10 	vmov	s16, r0
 8007d5c:	f000 fb42 	bl	80083e4 <__mcmp>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	dc03      	bgt.n	8007d6c <_dtoa_r+0xa9c>
 8007d64:	d1e0      	bne.n	8007d28 <_dtoa_r+0xa58>
 8007d66:	f01a 0f01 	tst.w	sl, #1
 8007d6a:	d0dd      	beq.n	8007d28 <_dtoa_r+0xa58>
 8007d6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d70:	d1d7      	bne.n	8007d22 <_dtoa_r+0xa52>
 8007d72:	2339      	movs	r3, #57	; 0x39
 8007d74:	f88b 3000 	strb.w	r3, [fp]
 8007d78:	462b      	mov	r3, r5
 8007d7a:	461d      	mov	r5, r3
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d82:	2a39      	cmp	r2, #57	; 0x39
 8007d84:	d071      	beq.n	8007e6a <_dtoa_r+0xb9a>
 8007d86:	3201      	adds	r2, #1
 8007d88:	701a      	strb	r2, [r3, #0]
 8007d8a:	e746      	b.n	8007c1a <_dtoa_r+0x94a>
 8007d8c:	2a00      	cmp	r2, #0
 8007d8e:	dd07      	ble.n	8007da0 <_dtoa_r+0xad0>
 8007d90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d94:	d0ed      	beq.n	8007d72 <_dtoa_r+0xaa2>
 8007d96:	f10a 0301 	add.w	r3, sl, #1
 8007d9a:	f88b 3000 	strb.w	r3, [fp]
 8007d9e:	e73c      	b.n	8007c1a <_dtoa_r+0x94a>
 8007da0:	9b05      	ldr	r3, [sp, #20]
 8007da2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007da6:	4599      	cmp	r9, r3
 8007da8:	d047      	beq.n	8007e3a <_dtoa_r+0xb6a>
 8007daa:	ee18 1a10 	vmov	r1, s16
 8007dae:	2300      	movs	r3, #0
 8007db0:	220a      	movs	r2, #10
 8007db2:	4620      	mov	r0, r4
 8007db4:	f000 f8f6 	bl	8007fa4 <__multadd>
 8007db8:	45b8      	cmp	r8, r7
 8007dba:	ee08 0a10 	vmov	s16, r0
 8007dbe:	f04f 0300 	mov.w	r3, #0
 8007dc2:	f04f 020a 	mov.w	r2, #10
 8007dc6:	4641      	mov	r1, r8
 8007dc8:	4620      	mov	r0, r4
 8007dca:	d106      	bne.n	8007dda <_dtoa_r+0xb0a>
 8007dcc:	f000 f8ea 	bl	8007fa4 <__multadd>
 8007dd0:	4680      	mov	r8, r0
 8007dd2:	4607      	mov	r7, r0
 8007dd4:	f109 0901 	add.w	r9, r9, #1
 8007dd8:	e772      	b.n	8007cc0 <_dtoa_r+0x9f0>
 8007dda:	f000 f8e3 	bl	8007fa4 <__multadd>
 8007dde:	4639      	mov	r1, r7
 8007de0:	4680      	mov	r8, r0
 8007de2:	2300      	movs	r3, #0
 8007de4:	220a      	movs	r2, #10
 8007de6:	4620      	mov	r0, r4
 8007de8:	f000 f8dc 	bl	8007fa4 <__multadd>
 8007dec:	4607      	mov	r7, r0
 8007dee:	e7f1      	b.n	8007dd4 <_dtoa_r+0xb04>
 8007df0:	9b03      	ldr	r3, [sp, #12]
 8007df2:	9302      	str	r3, [sp, #8]
 8007df4:	9d01      	ldr	r5, [sp, #4]
 8007df6:	ee18 0a10 	vmov	r0, s16
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	f7ff f9dc 	bl	80071b8 <quorem>
 8007e00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e04:	9b01      	ldr	r3, [sp, #4]
 8007e06:	f805 ab01 	strb.w	sl, [r5], #1
 8007e0a:	1aea      	subs	r2, r5, r3
 8007e0c:	9b02      	ldr	r3, [sp, #8]
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	dd09      	ble.n	8007e26 <_dtoa_r+0xb56>
 8007e12:	ee18 1a10 	vmov	r1, s16
 8007e16:	2300      	movs	r3, #0
 8007e18:	220a      	movs	r2, #10
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f000 f8c2 	bl	8007fa4 <__multadd>
 8007e20:	ee08 0a10 	vmov	s16, r0
 8007e24:	e7e7      	b.n	8007df6 <_dtoa_r+0xb26>
 8007e26:	9b02      	ldr	r3, [sp, #8]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	bfc8      	it	gt
 8007e2c:	461d      	movgt	r5, r3
 8007e2e:	9b01      	ldr	r3, [sp, #4]
 8007e30:	bfd8      	it	le
 8007e32:	2501      	movle	r5, #1
 8007e34:	441d      	add	r5, r3
 8007e36:	f04f 0800 	mov.w	r8, #0
 8007e3a:	ee18 1a10 	vmov	r1, s16
 8007e3e:	2201      	movs	r2, #1
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 fa5f 	bl	8008304 <__lshift>
 8007e46:	4631      	mov	r1, r6
 8007e48:	ee08 0a10 	vmov	s16, r0
 8007e4c:	f000 faca 	bl	80083e4 <__mcmp>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	dc91      	bgt.n	8007d78 <_dtoa_r+0xaa8>
 8007e54:	d102      	bne.n	8007e5c <_dtoa_r+0xb8c>
 8007e56:	f01a 0f01 	tst.w	sl, #1
 8007e5a:	d18d      	bne.n	8007d78 <_dtoa_r+0xaa8>
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	461d      	mov	r5, r3
 8007e60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e64:	2a30      	cmp	r2, #48	; 0x30
 8007e66:	d0fa      	beq.n	8007e5e <_dtoa_r+0xb8e>
 8007e68:	e6d7      	b.n	8007c1a <_dtoa_r+0x94a>
 8007e6a:	9a01      	ldr	r2, [sp, #4]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d184      	bne.n	8007d7a <_dtoa_r+0xaaa>
 8007e70:	9b00      	ldr	r3, [sp, #0]
 8007e72:	3301      	adds	r3, #1
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	2331      	movs	r3, #49	; 0x31
 8007e78:	7013      	strb	r3, [r2, #0]
 8007e7a:	e6ce      	b.n	8007c1a <_dtoa_r+0x94a>
 8007e7c:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <_dtoa_r+0xbd4>)
 8007e7e:	f7ff ba95 	b.w	80073ac <_dtoa_r+0xdc>
 8007e82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f47f aa6e 	bne.w	8007366 <_dtoa_r+0x96>
 8007e8a:	4b07      	ldr	r3, [pc, #28]	; (8007ea8 <_dtoa_r+0xbd8>)
 8007e8c:	f7ff ba8e 	b.w	80073ac <_dtoa_r+0xdc>
 8007e90:	9b02      	ldr	r3, [sp, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	dcae      	bgt.n	8007df4 <_dtoa_r+0xb24>
 8007e96:	9b06      	ldr	r3, [sp, #24]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	f73f aea8 	bgt.w	8007bee <_dtoa_r+0x91e>
 8007e9e:	e7a9      	b.n	8007df4 <_dtoa_r+0xb24>
 8007ea0:	0800abe7 	.word	0x0800abe7
 8007ea4:	0800ab44 	.word	0x0800ab44
 8007ea8:	0800ab68 	.word	0x0800ab68

08007eac <_localeconv_r>:
 8007eac:	4800      	ldr	r0, [pc, #0]	; (8007eb0 <_localeconv_r+0x4>)
 8007eae:	4770      	bx	lr
 8007eb0:	20000188 	.word	0x20000188

08007eb4 <malloc>:
 8007eb4:	4b02      	ldr	r3, [pc, #8]	; (8007ec0 <malloc+0xc>)
 8007eb6:	4601      	mov	r1, r0
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	f000 bc17 	b.w	80086ec <_malloc_r>
 8007ebe:	bf00      	nop
 8007ec0:	20000034 	.word	0x20000034

08007ec4 <memcpy>:
 8007ec4:	440a      	add	r2, r1
 8007ec6:	4291      	cmp	r1, r2
 8007ec8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ecc:	d100      	bne.n	8007ed0 <memcpy+0xc>
 8007ece:	4770      	bx	lr
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eda:	4291      	cmp	r1, r2
 8007edc:	d1f9      	bne.n	8007ed2 <memcpy+0xe>
 8007ede:	bd10      	pop	{r4, pc}

08007ee0 <_Balloc>:
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	460d      	mov	r5, r1
 8007ee8:	b976      	cbnz	r6, 8007f08 <_Balloc+0x28>
 8007eea:	2010      	movs	r0, #16
 8007eec:	f7ff ffe2 	bl	8007eb4 <malloc>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	6260      	str	r0, [r4, #36]	; 0x24
 8007ef4:	b920      	cbnz	r0, 8007f00 <_Balloc+0x20>
 8007ef6:	4b18      	ldr	r3, [pc, #96]	; (8007f58 <_Balloc+0x78>)
 8007ef8:	4818      	ldr	r0, [pc, #96]	; (8007f5c <_Balloc+0x7c>)
 8007efa:	2166      	movs	r1, #102	; 0x66
 8007efc:	f000 fdd6 	bl	8008aac <__assert_func>
 8007f00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f04:	6006      	str	r6, [r0, #0]
 8007f06:	60c6      	str	r6, [r0, #12]
 8007f08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f0a:	68f3      	ldr	r3, [r6, #12]
 8007f0c:	b183      	cbz	r3, 8007f30 <_Balloc+0x50>
 8007f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f16:	b9b8      	cbnz	r0, 8007f48 <_Balloc+0x68>
 8007f18:	2101      	movs	r1, #1
 8007f1a:	fa01 f605 	lsl.w	r6, r1, r5
 8007f1e:	1d72      	adds	r2, r6, #5
 8007f20:	0092      	lsls	r2, r2, #2
 8007f22:	4620      	mov	r0, r4
 8007f24:	f000 fb60 	bl	80085e8 <_calloc_r>
 8007f28:	b160      	cbz	r0, 8007f44 <_Balloc+0x64>
 8007f2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f2e:	e00e      	b.n	8007f4e <_Balloc+0x6e>
 8007f30:	2221      	movs	r2, #33	; 0x21
 8007f32:	2104      	movs	r1, #4
 8007f34:	4620      	mov	r0, r4
 8007f36:	f000 fb57 	bl	80085e8 <_calloc_r>
 8007f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f3c:	60f0      	str	r0, [r6, #12]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e4      	bne.n	8007f0e <_Balloc+0x2e>
 8007f44:	2000      	movs	r0, #0
 8007f46:	bd70      	pop	{r4, r5, r6, pc}
 8007f48:	6802      	ldr	r2, [r0, #0]
 8007f4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f54:	e7f7      	b.n	8007f46 <_Balloc+0x66>
 8007f56:	bf00      	nop
 8007f58:	0800ab75 	.word	0x0800ab75
 8007f5c:	0800abf8 	.word	0x0800abf8

08007f60 <_Bfree>:
 8007f60:	b570      	push	{r4, r5, r6, lr}
 8007f62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f64:	4605      	mov	r5, r0
 8007f66:	460c      	mov	r4, r1
 8007f68:	b976      	cbnz	r6, 8007f88 <_Bfree+0x28>
 8007f6a:	2010      	movs	r0, #16
 8007f6c:	f7ff ffa2 	bl	8007eb4 <malloc>
 8007f70:	4602      	mov	r2, r0
 8007f72:	6268      	str	r0, [r5, #36]	; 0x24
 8007f74:	b920      	cbnz	r0, 8007f80 <_Bfree+0x20>
 8007f76:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <_Bfree+0x3c>)
 8007f78:	4809      	ldr	r0, [pc, #36]	; (8007fa0 <_Bfree+0x40>)
 8007f7a:	218a      	movs	r1, #138	; 0x8a
 8007f7c:	f000 fd96 	bl	8008aac <__assert_func>
 8007f80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f84:	6006      	str	r6, [r0, #0]
 8007f86:	60c6      	str	r6, [r0, #12]
 8007f88:	b13c      	cbz	r4, 8007f9a <_Bfree+0x3a>
 8007f8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f8c:	6862      	ldr	r2, [r4, #4]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f94:	6021      	str	r1, [r4, #0]
 8007f96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}
 8007f9c:	0800ab75 	.word	0x0800ab75
 8007fa0:	0800abf8 	.word	0x0800abf8

08007fa4 <__multadd>:
 8007fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa8:	690d      	ldr	r5, [r1, #16]
 8007faa:	4607      	mov	r7, r0
 8007fac:	460c      	mov	r4, r1
 8007fae:	461e      	mov	r6, r3
 8007fb0:	f101 0c14 	add.w	ip, r1, #20
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f8dc 3000 	ldr.w	r3, [ip]
 8007fba:	b299      	uxth	r1, r3
 8007fbc:	fb02 6101 	mla	r1, r2, r1, r6
 8007fc0:	0c1e      	lsrs	r6, r3, #16
 8007fc2:	0c0b      	lsrs	r3, r1, #16
 8007fc4:	fb02 3306 	mla	r3, r2, r6, r3
 8007fc8:	b289      	uxth	r1, r1
 8007fca:	3001      	adds	r0, #1
 8007fcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fd0:	4285      	cmp	r5, r0
 8007fd2:	f84c 1b04 	str.w	r1, [ip], #4
 8007fd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fda:	dcec      	bgt.n	8007fb6 <__multadd+0x12>
 8007fdc:	b30e      	cbz	r6, 8008022 <__multadd+0x7e>
 8007fde:	68a3      	ldr	r3, [r4, #8]
 8007fe0:	42ab      	cmp	r3, r5
 8007fe2:	dc19      	bgt.n	8008018 <__multadd+0x74>
 8007fe4:	6861      	ldr	r1, [r4, #4]
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	3101      	adds	r1, #1
 8007fea:	f7ff ff79 	bl	8007ee0 <_Balloc>
 8007fee:	4680      	mov	r8, r0
 8007ff0:	b928      	cbnz	r0, 8007ffe <__multadd+0x5a>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	4b0c      	ldr	r3, [pc, #48]	; (8008028 <__multadd+0x84>)
 8007ff6:	480d      	ldr	r0, [pc, #52]	; (800802c <__multadd+0x88>)
 8007ff8:	21b5      	movs	r1, #181	; 0xb5
 8007ffa:	f000 fd57 	bl	8008aac <__assert_func>
 8007ffe:	6922      	ldr	r2, [r4, #16]
 8008000:	3202      	adds	r2, #2
 8008002:	f104 010c 	add.w	r1, r4, #12
 8008006:	0092      	lsls	r2, r2, #2
 8008008:	300c      	adds	r0, #12
 800800a:	f7ff ff5b 	bl	8007ec4 <memcpy>
 800800e:	4621      	mov	r1, r4
 8008010:	4638      	mov	r0, r7
 8008012:	f7ff ffa5 	bl	8007f60 <_Bfree>
 8008016:	4644      	mov	r4, r8
 8008018:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800801c:	3501      	adds	r5, #1
 800801e:	615e      	str	r6, [r3, #20]
 8008020:	6125      	str	r5, [r4, #16]
 8008022:	4620      	mov	r0, r4
 8008024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008028:	0800abe7 	.word	0x0800abe7
 800802c:	0800abf8 	.word	0x0800abf8

08008030 <__hi0bits>:
 8008030:	0c03      	lsrs	r3, r0, #16
 8008032:	041b      	lsls	r3, r3, #16
 8008034:	b9d3      	cbnz	r3, 800806c <__hi0bits+0x3c>
 8008036:	0400      	lsls	r0, r0, #16
 8008038:	2310      	movs	r3, #16
 800803a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800803e:	bf04      	itt	eq
 8008040:	0200      	lsleq	r0, r0, #8
 8008042:	3308      	addeq	r3, #8
 8008044:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008048:	bf04      	itt	eq
 800804a:	0100      	lsleq	r0, r0, #4
 800804c:	3304      	addeq	r3, #4
 800804e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008052:	bf04      	itt	eq
 8008054:	0080      	lsleq	r0, r0, #2
 8008056:	3302      	addeq	r3, #2
 8008058:	2800      	cmp	r0, #0
 800805a:	db05      	blt.n	8008068 <__hi0bits+0x38>
 800805c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008060:	f103 0301 	add.w	r3, r3, #1
 8008064:	bf08      	it	eq
 8008066:	2320      	moveq	r3, #32
 8008068:	4618      	mov	r0, r3
 800806a:	4770      	bx	lr
 800806c:	2300      	movs	r3, #0
 800806e:	e7e4      	b.n	800803a <__hi0bits+0xa>

08008070 <__lo0bits>:
 8008070:	6803      	ldr	r3, [r0, #0]
 8008072:	f013 0207 	ands.w	r2, r3, #7
 8008076:	4601      	mov	r1, r0
 8008078:	d00b      	beq.n	8008092 <__lo0bits+0x22>
 800807a:	07da      	lsls	r2, r3, #31
 800807c:	d423      	bmi.n	80080c6 <__lo0bits+0x56>
 800807e:	0798      	lsls	r0, r3, #30
 8008080:	bf49      	itett	mi
 8008082:	085b      	lsrmi	r3, r3, #1
 8008084:	089b      	lsrpl	r3, r3, #2
 8008086:	2001      	movmi	r0, #1
 8008088:	600b      	strmi	r3, [r1, #0]
 800808a:	bf5c      	itt	pl
 800808c:	600b      	strpl	r3, [r1, #0]
 800808e:	2002      	movpl	r0, #2
 8008090:	4770      	bx	lr
 8008092:	b298      	uxth	r0, r3
 8008094:	b9a8      	cbnz	r0, 80080c2 <__lo0bits+0x52>
 8008096:	0c1b      	lsrs	r3, r3, #16
 8008098:	2010      	movs	r0, #16
 800809a:	b2da      	uxtb	r2, r3
 800809c:	b90a      	cbnz	r2, 80080a2 <__lo0bits+0x32>
 800809e:	3008      	adds	r0, #8
 80080a0:	0a1b      	lsrs	r3, r3, #8
 80080a2:	071a      	lsls	r2, r3, #28
 80080a4:	bf04      	itt	eq
 80080a6:	091b      	lsreq	r3, r3, #4
 80080a8:	3004      	addeq	r0, #4
 80080aa:	079a      	lsls	r2, r3, #30
 80080ac:	bf04      	itt	eq
 80080ae:	089b      	lsreq	r3, r3, #2
 80080b0:	3002      	addeq	r0, #2
 80080b2:	07da      	lsls	r2, r3, #31
 80080b4:	d403      	bmi.n	80080be <__lo0bits+0x4e>
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	f100 0001 	add.w	r0, r0, #1
 80080bc:	d005      	beq.n	80080ca <__lo0bits+0x5a>
 80080be:	600b      	str	r3, [r1, #0]
 80080c0:	4770      	bx	lr
 80080c2:	4610      	mov	r0, r2
 80080c4:	e7e9      	b.n	800809a <__lo0bits+0x2a>
 80080c6:	2000      	movs	r0, #0
 80080c8:	4770      	bx	lr
 80080ca:	2020      	movs	r0, #32
 80080cc:	4770      	bx	lr
	...

080080d0 <__i2b>:
 80080d0:	b510      	push	{r4, lr}
 80080d2:	460c      	mov	r4, r1
 80080d4:	2101      	movs	r1, #1
 80080d6:	f7ff ff03 	bl	8007ee0 <_Balloc>
 80080da:	4602      	mov	r2, r0
 80080dc:	b928      	cbnz	r0, 80080ea <__i2b+0x1a>
 80080de:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <__i2b+0x24>)
 80080e0:	4805      	ldr	r0, [pc, #20]	; (80080f8 <__i2b+0x28>)
 80080e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80080e6:	f000 fce1 	bl	8008aac <__assert_func>
 80080ea:	2301      	movs	r3, #1
 80080ec:	6144      	str	r4, [r0, #20]
 80080ee:	6103      	str	r3, [r0, #16]
 80080f0:	bd10      	pop	{r4, pc}
 80080f2:	bf00      	nop
 80080f4:	0800abe7 	.word	0x0800abe7
 80080f8:	0800abf8 	.word	0x0800abf8

080080fc <__multiply>:
 80080fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008100:	4691      	mov	r9, r2
 8008102:	690a      	ldr	r2, [r1, #16]
 8008104:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008108:	429a      	cmp	r2, r3
 800810a:	bfb8      	it	lt
 800810c:	460b      	movlt	r3, r1
 800810e:	460c      	mov	r4, r1
 8008110:	bfbc      	itt	lt
 8008112:	464c      	movlt	r4, r9
 8008114:	4699      	movlt	r9, r3
 8008116:	6927      	ldr	r7, [r4, #16]
 8008118:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800811c:	68a3      	ldr	r3, [r4, #8]
 800811e:	6861      	ldr	r1, [r4, #4]
 8008120:	eb07 060a 	add.w	r6, r7, sl
 8008124:	42b3      	cmp	r3, r6
 8008126:	b085      	sub	sp, #20
 8008128:	bfb8      	it	lt
 800812a:	3101      	addlt	r1, #1
 800812c:	f7ff fed8 	bl	8007ee0 <_Balloc>
 8008130:	b930      	cbnz	r0, 8008140 <__multiply+0x44>
 8008132:	4602      	mov	r2, r0
 8008134:	4b44      	ldr	r3, [pc, #272]	; (8008248 <__multiply+0x14c>)
 8008136:	4845      	ldr	r0, [pc, #276]	; (800824c <__multiply+0x150>)
 8008138:	f240 115d 	movw	r1, #349	; 0x15d
 800813c:	f000 fcb6 	bl	8008aac <__assert_func>
 8008140:	f100 0514 	add.w	r5, r0, #20
 8008144:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008148:	462b      	mov	r3, r5
 800814a:	2200      	movs	r2, #0
 800814c:	4543      	cmp	r3, r8
 800814e:	d321      	bcc.n	8008194 <__multiply+0x98>
 8008150:	f104 0314 	add.w	r3, r4, #20
 8008154:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008158:	f109 0314 	add.w	r3, r9, #20
 800815c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008160:	9202      	str	r2, [sp, #8]
 8008162:	1b3a      	subs	r2, r7, r4
 8008164:	3a15      	subs	r2, #21
 8008166:	f022 0203 	bic.w	r2, r2, #3
 800816a:	3204      	adds	r2, #4
 800816c:	f104 0115 	add.w	r1, r4, #21
 8008170:	428f      	cmp	r7, r1
 8008172:	bf38      	it	cc
 8008174:	2204      	movcc	r2, #4
 8008176:	9201      	str	r2, [sp, #4]
 8008178:	9a02      	ldr	r2, [sp, #8]
 800817a:	9303      	str	r3, [sp, #12]
 800817c:	429a      	cmp	r2, r3
 800817e:	d80c      	bhi.n	800819a <__multiply+0x9e>
 8008180:	2e00      	cmp	r6, #0
 8008182:	dd03      	ble.n	800818c <__multiply+0x90>
 8008184:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008188:	2b00      	cmp	r3, #0
 800818a:	d05a      	beq.n	8008242 <__multiply+0x146>
 800818c:	6106      	str	r6, [r0, #16]
 800818e:	b005      	add	sp, #20
 8008190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008194:	f843 2b04 	str.w	r2, [r3], #4
 8008198:	e7d8      	b.n	800814c <__multiply+0x50>
 800819a:	f8b3 a000 	ldrh.w	sl, [r3]
 800819e:	f1ba 0f00 	cmp.w	sl, #0
 80081a2:	d024      	beq.n	80081ee <__multiply+0xf2>
 80081a4:	f104 0e14 	add.w	lr, r4, #20
 80081a8:	46a9      	mov	r9, r5
 80081aa:	f04f 0c00 	mov.w	ip, #0
 80081ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80081b2:	f8d9 1000 	ldr.w	r1, [r9]
 80081b6:	fa1f fb82 	uxth.w	fp, r2
 80081ba:	b289      	uxth	r1, r1
 80081bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80081c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80081c4:	f8d9 2000 	ldr.w	r2, [r9]
 80081c8:	4461      	add	r1, ip
 80081ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80081d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081d6:	b289      	uxth	r1, r1
 80081d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081dc:	4577      	cmp	r7, lr
 80081de:	f849 1b04 	str.w	r1, [r9], #4
 80081e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081e6:	d8e2      	bhi.n	80081ae <__multiply+0xb2>
 80081e8:	9a01      	ldr	r2, [sp, #4]
 80081ea:	f845 c002 	str.w	ip, [r5, r2]
 80081ee:	9a03      	ldr	r2, [sp, #12]
 80081f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081f4:	3304      	adds	r3, #4
 80081f6:	f1b9 0f00 	cmp.w	r9, #0
 80081fa:	d020      	beq.n	800823e <__multiply+0x142>
 80081fc:	6829      	ldr	r1, [r5, #0]
 80081fe:	f104 0c14 	add.w	ip, r4, #20
 8008202:	46ae      	mov	lr, r5
 8008204:	f04f 0a00 	mov.w	sl, #0
 8008208:	f8bc b000 	ldrh.w	fp, [ip]
 800820c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008210:	fb09 220b 	mla	r2, r9, fp, r2
 8008214:	4492      	add	sl, r2
 8008216:	b289      	uxth	r1, r1
 8008218:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800821c:	f84e 1b04 	str.w	r1, [lr], #4
 8008220:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008224:	f8be 1000 	ldrh.w	r1, [lr]
 8008228:	0c12      	lsrs	r2, r2, #16
 800822a:	fb09 1102 	mla	r1, r9, r2, r1
 800822e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008232:	4567      	cmp	r7, ip
 8008234:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008238:	d8e6      	bhi.n	8008208 <__multiply+0x10c>
 800823a:	9a01      	ldr	r2, [sp, #4]
 800823c:	50a9      	str	r1, [r5, r2]
 800823e:	3504      	adds	r5, #4
 8008240:	e79a      	b.n	8008178 <__multiply+0x7c>
 8008242:	3e01      	subs	r6, #1
 8008244:	e79c      	b.n	8008180 <__multiply+0x84>
 8008246:	bf00      	nop
 8008248:	0800abe7 	.word	0x0800abe7
 800824c:	0800abf8 	.word	0x0800abf8

08008250 <__pow5mult>:
 8008250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008254:	4615      	mov	r5, r2
 8008256:	f012 0203 	ands.w	r2, r2, #3
 800825a:	4606      	mov	r6, r0
 800825c:	460f      	mov	r7, r1
 800825e:	d007      	beq.n	8008270 <__pow5mult+0x20>
 8008260:	4c25      	ldr	r4, [pc, #148]	; (80082f8 <__pow5mult+0xa8>)
 8008262:	3a01      	subs	r2, #1
 8008264:	2300      	movs	r3, #0
 8008266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800826a:	f7ff fe9b 	bl	8007fa4 <__multadd>
 800826e:	4607      	mov	r7, r0
 8008270:	10ad      	asrs	r5, r5, #2
 8008272:	d03d      	beq.n	80082f0 <__pow5mult+0xa0>
 8008274:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008276:	b97c      	cbnz	r4, 8008298 <__pow5mult+0x48>
 8008278:	2010      	movs	r0, #16
 800827a:	f7ff fe1b 	bl	8007eb4 <malloc>
 800827e:	4602      	mov	r2, r0
 8008280:	6270      	str	r0, [r6, #36]	; 0x24
 8008282:	b928      	cbnz	r0, 8008290 <__pow5mult+0x40>
 8008284:	4b1d      	ldr	r3, [pc, #116]	; (80082fc <__pow5mult+0xac>)
 8008286:	481e      	ldr	r0, [pc, #120]	; (8008300 <__pow5mult+0xb0>)
 8008288:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800828c:	f000 fc0e 	bl	8008aac <__assert_func>
 8008290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008294:	6004      	str	r4, [r0, #0]
 8008296:	60c4      	str	r4, [r0, #12]
 8008298:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800829c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082a0:	b94c      	cbnz	r4, 80082b6 <__pow5mult+0x66>
 80082a2:	f240 2171 	movw	r1, #625	; 0x271
 80082a6:	4630      	mov	r0, r6
 80082a8:	f7ff ff12 	bl	80080d0 <__i2b>
 80082ac:	2300      	movs	r3, #0
 80082ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80082b2:	4604      	mov	r4, r0
 80082b4:	6003      	str	r3, [r0, #0]
 80082b6:	f04f 0900 	mov.w	r9, #0
 80082ba:	07eb      	lsls	r3, r5, #31
 80082bc:	d50a      	bpl.n	80082d4 <__pow5mult+0x84>
 80082be:	4639      	mov	r1, r7
 80082c0:	4622      	mov	r2, r4
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7ff ff1a 	bl	80080fc <__multiply>
 80082c8:	4639      	mov	r1, r7
 80082ca:	4680      	mov	r8, r0
 80082cc:	4630      	mov	r0, r6
 80082ce:	f7ff fe47 	bl	8007f60 <_Bfree>
 80082d2:	4647      	mov	r7, r8
 80082d4:	106d      	asrs	r5, r5, #1
 80082d6:	d00b      	beq.n	80082f0 <__pow5mult+0xa0>
 80082d8:	6820      	ldr	r0, [r4, #0]
 80082da:	b938      	cbnz	r0, 80082ec <__pow5mult+0x9c>
 80082dc:	4622      	mov	r2, r4
 80082de:	4621      	mov	r1, r4
 80082e0:	4630      	mov	r0, r6
 80082e2:	f7ff ff0b 	bl	80080fc <__multiply>
 80082e6:	6020      	str	r0, [r4, #0]
 80082e8:	f8c0 9000 	str.w	r9, [r0]
 80082ec:	4604      	mov	r4, r0
 80082ee:	e7e4      	b.n	80082ba <__pow5mult+0x6a>
 80082f0:	4638      	mov	r0, r7
 80082f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082f6:	bf00      	nop
 80082f8:	0800ad48 	.word	0x0800ad48
 80082fc:	0800ab75 	.word	0x0800ab75
 8008300:	0800abf8 	.word	0x0800abf8

08008304 <__lshift>:
 8008304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008308:	460c      	mov	r4, r1
 800830a:	6849      	ldr	r1, [r1, #4]
 800830c:	6923      	ldr	r3, [r4, #16]
 800830e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008312:	68a3      	ldr	r3, [r4, #8]
 8008314:	4607      	mov	r7, r0
 8008316:	4691      	mov	r9, r2
 8008318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800831c:	f108 0601 	add.w	r6, r8, #1
 8008320:	42b3      	cmp	r3, r6
 8008322:	db0b      	blt.n	800833c <__lshift+0x38>
 8008324:	4638      	mov	r0, r7
 8008326:	f7ff fddb 	bl	8007ee0 <_Balloc>
 800832a:	4605      	mov	r5, r0
 800832c:	b948      	cbnz	r0, 8008342 <__lshift+0x3e>
 800832e:	4602      	mov	r2, r0
 8008330:	4b2a      	ldr	r3, [pc, #168]	; (80083dc <__lshift+0xd8>)
 8008332:	482b      	ldr	r0, [pc, #172]	; (80083e0 <__lshift+0xdc>)
 8008334:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008338:	f000 fbb8 	bl	8008aac <__assert_func>
 800833c:	3101      	adds	r1, #1
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	e7ee      	b.n	8008320 <__lshift+0x1c>
 8008342:	2300      	movs	r3, #0
 8008344:	f100 0114 	add.w	r1, r0, #20
 8008348:	f100 0210 	add.w	r2, r0, #16
 800834c:	4618      	mov	r0, r3
 800834e:	4553      	cmp	r3, sl
 8008350:	db37      	blt.n	80083c2 <__lshift+0xbe>
 8008352:	6920      	ldr	r0, [r4, #16]
 8008354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008358:	f104 0314 	add.w	r3, r4, #20
 800835c:	f019 091f 	ands.w	r9, r9, #31
 8008360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008364:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008368:	d02f      	beq.n	80083ca <__lshift+0xc6>
 800836a:	f1c9 0e20 	rsb	lr, r9, #32
 800836e:	468a      	mov	sl, r1
 8008370:	f04f 0c00 	mov.w	ip, #0
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	fa02 f209 	lsl.w	r2, r2, r9
 800837a:	ea42 020c 	orr.w	r2, r2, ip
 800837e:	f84a 2b04 	str.w	r2, [sl], #4
 8008382:	f853 2b04 	ldr.w	r2, [r3], #4
 8008386:	4298      	cmp	r0, r3
 8008388:	fa22 fc0e 	lsr.w	ip, r2, lr
 800838c:	d8f2      	bhi.n	8008374 <__lshift+0x70>
 800838e:	1b03      	subs	r3, r0, r4
 8008390:	3b15      	subs	r3, #21
 8008392:	f023 0303 	bic.w	r3, r3, #3
 8008396:	3304      	adds	r3, #4
 8008398:	f104 0215 	add.w	r2, r4, #21
 800839c:	4290      	cmp	r0, r2
 800839e:	bf38      	it	cc
 80083a0:	2304      	movcc	r3, #4
 80083a2:	f841 c003 	str.w	ip, [r1, r3]
 80083a6:	f1bc 0f00 	cmp.w	ip, #0
 80083aa:	d001      	beq.n	80083b0 <__lshift+0xac>
 80083ac:	f108 0602 	add.w	r6, r8, #2
 80083b0:	3e01      	subs	r6, #1
 80083b2:	4638      	mov	r0, r7
 80083b4:	612e      	str	r6, [r5, #16]
 80083b6:	4621      	mov	r1, r4
 80083b8:	f7ff fdd2 	bl	8007f60 <_Bfree>
 80083bc:	4628      	mov	r0, r5
 80083be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80083c6:	3301      	adds	r3, #1
 80083c8:	e7c1      	b.n	800834e <__lshift+0x4a>
 80083ca:	3904      	subs	r1, #4
 80083cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80083d4:	4298      	cmp	r0, r3
 80083d6:	d8f9      	bhi.n	80083cc <__lshift+0xc8>
 80083d8:	e7ea      	b.n	80083b0 <__lshift+0xac>
 80083da:	bf00      	nop
 80083dc:	0800abe7 	.word	0x0800abe7
 80083e0:	0800abf8 	.word	0x0800abf8

080083e4 <__mcmp>:
 80083e4:	b530      	push	{r4, r5, lr}
 80083e6:	6902      	ldr	r2, [r0, #16]
 80083e8:	690c      	ldr	r4, [r1, #16]
 80083ea:	1b12      	subs	r2, r2, r4
 80083ec:	d10e      	bne.n	800840c <__mcmp+0x28>
 80083ee:	f100 0314 	add.w	r3, r0, #20
 80083f2:	3114      	adds	r1, #20
 80083f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80083f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80083fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008400:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008404:	42a5      	cmp	r5, r4
 8008406:	d003      	beq.n	8008410 <__mcmp+0x2c>
 8008408:	d305      	bcc.n	8008416 <__mcmp+0x32>
 800840a:	2201      	movs	r2, #1
 800840c:	4610      	mov	r0, r2
 800840e:	bd30      	pop	{r4, r5, pc}
 8008410:	4283      	cmp	r3, r0
 8008412:	d3f3      	bcc.n	80083fc <__mcmp+0x18>
 8008414:	e7fa      	b.n	800840c <__mcmp+0x28>
 8008416:	f04f 32ff 	mov.w	r2, #4294967295
 800841a:	e7f7      	b.n	800840c <__mcmp+0x28>

0800841c <__mdiff>:
 800841c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008420:	460c      	mov	r4, r1
 8008422:	4606      	mov	r6, r0
 8008424:	4611      	mov	r1, r2
 8008426:	4620      	mov	r0, r4
 8008428:	4690      	mov	r8, r2
 800842a:	f7ff ffdb 	bl	80083e4 <__mcmp>
 800842e:	1e05      	subs	r5, r0, #0
 8008430:	d110      	bne.n	8008454 <__mdiff+0x38>
 8008432:	4629      	mov	r1, r5
 8008434:	4630      	mov	r0, r6
 8008436:	f7ff fd53 	bl	8007ee0 <_Balloc>
 800843a:	b930      	cbnz	r0, 800844a <__mdiff+0x2e>
 800843c:	4b3a      	ldr	r3, [pc, #232]	; (8008528 <__mdiff+0x10c>)
 800843e:	4602      	mov	r2, r0
 8008440:	f240 2132 	movw	r1, #562	; 0x232
 8008444:	4839      	ldr	r0, [pc, #228]	; (800852c <__mdiff+0x110>)
 8008446:	f000 fb31 	bl	8008aac <__assert_func>
 800844a:	2301      	movs	r3, #1
 800844c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008454:	bfa4      	itt	ge
 8008456:	4643      	movge	r3, r8
 8008458:	46a0      	movge	r8, r4
 800845a:	4630      	mov	r0, r6
 800845c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008460:	bfa6      	itte	ge
 8008462:	461c      	movge	r4, r3
 8008464:	2500      	movge	r5, #0
 8008466:	2501      	movlt	r5, #1
 8008468:	f7ff fd3a 	bl	8007ee0 <_Balloc>
 800846c:	b920      	cbnz	r0, 8008478 <__mdiff+0x5c>
 800846e:	4b2e      	ldr	r3, [pc, #184]	; (8008528 <__mdiff+0x10c>)
 8008470:	4602      	mov	r2, r0
 8008472:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008476:	e7e5      	b.n	8008444 <__mdiff+0x28>
 8008478:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800847c:	6926      	ldr	r6, [r4, #16]
 800847e:	60c5      	str	r5, [r0, #12]
 8008480:	f104 0914 	add.w	r9, r4, #20
 8008484:	f108 0514 	add.w	r5, r8, #20
 8008488:	f100 0e14 	add.w	lr, r0, #20
 800848c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008490:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008494:	f108 0210 	add.w	r2, r8, #16
 8008498:	46f2      	mov	sl, lr
 800849a:	2100      	movs	r1, #0
 800849c:	f859 3b04 	ldr.w	r3, [r9], #4
 80084a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80084a4:	fa1f f883 	uxth.w	r8, r3
 80084a8:	fa11 f18b 	uxtah	r1, r1, fp
 80084ac:	0c1b      	lsrs	r3, r3, #16
 80084ae:	eba1 0808 	sub.w	r8, r1, r8
 80084b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80084b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80084ba:	fa1f f888 	uxth.w	r8, r8
 80084be:	1419      	asrs	r1, r3, #16
 80084c0:	454e      	cmp	r6, r9
 80084c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80084c6:	f84a 3b04 	str.w	r3, [sl], #4
 80084ca:	d8e7      	bhi.n	800849c <__mdiff+0x80>
 80084cc:	1b33      	subs	r3, r6, r4
 80084ce:	3b15      	subs	r3, #21
 80084d0:	f023 0303 	bic.w	r3, r3, #3
 80084d4:	3304      	adds	r3, #4
 80084d6:	3415      	adds	r4, #21
 80084d8:	42a6      	cmp	r6, r4
 80084da:	bf38      	it	cc
 80084dc:	2304      	movcc	r3, #4
 80084de:	441d      	add	r5, r3
 80084e0:	4473      	add	r3, lr
 80084e2:	469e      	mov	lr, r3
 80084e4:	462e      	mov	r6, r5
 80084e6:	4566      	cmp	r6, ip
 80084e8:	d30e      	bcc.n	8008508 <__mdiff+0xec>
 80084ea:	f10c 0203 	add.w	r2, ip, #3
 80084ee:	1b52      	subs	r2, r2, r5
 80084f0:	f022 0203 	bic.w	r2, r2, #3
 80084f4:	3d03      	subs	r5, #3
 80084f6:	45ac      	cmp	ip, r5
 80084f8:	bf38      	it	cc
 80084fa:	2200      	movcc	r2, #0
 80084fc:	441a      	add	r2, r3
 80084fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008502:	b17b      	cbz	r3, 8008524 <__mdiff+0x108>
 8008504:	6107      	str	r7, [r0, #16]
 8008506:	e7a3      	b.n	8008450 <__mdiff+0x34>
 8008508:	f856 8b04 	ldr.w	r8, [r6], #4
 800850c:	fa11 f288 	uxtah	r2, r1, r8
 8008510:	1414      	asrs	r4, r2, #16
 8008512:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008516:	b292      	uxth	r2, r2
 8008518:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800851c:	f84e 2b04 	str.w	r2, [lr], #4
 8008520:	1421      	asrs	r1, r4, #16
 8008522:	e7e0      	b.n	80084e6 <__mdiff+0xca>
 8008524:	3f01      	subs	r7, #1
 8008526:	e7ea      	b.n	80084fe <__mdiff+0xe2>
 8008528:	0800abe7 	.word	0x0800abe7
 800852c:	0800abf8 	.word	0x0800abf8

08008530 <__d2b>:
 8008530:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008534:	4689      	mov	r9, r1
 8008536:	2101      	movs	r1, #1
 8008538:	ec57 6b10 	vmov	r6, r7, d0
 800853c:	4690      	mov	r8, r2
 800853e:	f7ff fccf 	bl	8007ee0 <_Balloc>
 8008542:	4604      	mov	r4, r0
 8008544:	b930      	cbnz	r0, 8008554 <__d2b+0x24>
 8008546:	4602      	mov	r2, r0
 8008548:	4b25      	ldr	r3, [pc, #148]	; (80085e0 <__d2b+0xb0>)
 800854a:	4826      	ldr	r0, [pc, #152]	; (80085e4 <__d2b+0xb4>)
 800854c:	f240 310a 	movw	r1, #778	; 0x30a
 8008550:	f000 faac 	bl	8008aac <__assert_func>
 8008554:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008558:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800855c:	bb35      	cbnz	r5, 80085ac <__d2b+0x7c>
 800855e:	2e00      	cmp	r6, #0
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	d028      	beq.n	80085b6 <__d2b+0x86>
 8008564:	4668      	mov	r0, sp
 8008566:	9600      	str	r6, [sp, #0]
 8008568:	f7ff fd82 	bl	8008070 <__lo0bits>
 800856c:	9900      	ldr	r1, [sp, #0]
 800856e:	b300      	cbz	r0, 80085b2 <__d2b+0x82>
 8008570:	9a01      	ldr	r2, [sp, #4]
 8008572:	f1c0 0320 	rsb	r3, r0, #32
 8008576:	fa02 f303 	lsl.w	r3, r2, r3
 800857a:	430b      	orrs	r3, r1
 800857c:	40c2      	lsrs	r2, r0
 800857e:	6163      	str	r3, [r4, #20]
 8008580:	9201      	str	r2, [sp, #4]
 8008582:	9b01      	ldr	r3, [sp, #4]
 8008584:	61a3      	str	r3, [r4, #24]
 8008586:	2b00      	cmp	r3, #0
 8008588:	bf14      	ite	ne
 800858a:	2202      	movne	r2, #2
 800858c:	2201      	moveq	r2, #1
 800858e:	6122      	str	r2, [r4, #16]
 8008590:	b1d5      	cbz	r5, 80085c8 <__d2b+0x98>
 8008592:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008596:	4405      	add	r5, r0
 8008598:	f8c9 5000 	str.w	r5, [r9]
 800859c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80085a0:	f8c8 0000 	str.w	r0, [r8]
 80085a4:	4620      	mov	r0, r4
 80085a6:	b003      	add	sp, #12
 80085a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085b0:	e7d5      	b.n	800855e <__d2b+0x2e>
 80085b2:	6161      	str	r1, [r4, #20]
 80085b4:	e7e5      	b.n	8008582 <__d2b+0x52>
 80085b6:	a801      	add	r0, sp, #4
 80085b8:	f7ff fd5a 	bl	8008070 <__lo0bits>
 80085bc:	9b01      	ldr	r3, [sp, #4]
 80085be:	6163      	str	r3, [r4, #20]
 80085c0:	2201      	movs	r2, #1
 80085c2:	6122      	str	r2, [r4, #16]
 80085c4:	3020      	adds	r0, #32
 80085c6:	e7e3      	b.n	8008590 <__d2b+0x60>
 80085c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085d0:	f8c9 0000 	str.w	r0, [r9]
 80085d4:	6918      	ldr	r0, [r3, #16]
 80085d6:	f7ff fd2b 	bl	8008030 <__hi0bits>
 80085da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085de:	e7df      	b.n	80085a0 <__d2b+0x70>
 80085e0:	0800abe7 	.word	0x0800abe7
 80085e4:	0800abf8 	.word	0x0800abf8

080085e8 <_calloc_r>:
 80085e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085ea:	fba1 2402 	umull	r2, r4, r1, r2
 80085ee:	b94c      	cbnz	r4, 8008604 <_calloc_r+0x1c>
 80085f0:	4611      	mov	r1, r2
 80085f2:	9201      	str	r2, [sp, #4]
 80085f4:	f000 f87a 	bl	80086ec <_malloc_r>
 80085f8:	9a01      	ldr	r2, [sp, #4]
 80085fa:	4605      	mov	r5, r0
 80085fc:	b930      	cbnz	r0, 800860c <_calloc_r+0x24>
 80085fe:	4628      	mov	r0, r5
 8008600:	b003      	add	sp, #12
 8008602:	bd30      	pop	{r4, r5, pc}
 8008604:	220c      	movs	r2, #12
 8008606:	6002      	str	r2, [r0, #0]
 8008608:	2500      	movs	r5, #0
 800860a:	e7f8      	b.n	80085fe <_calloc_r+0x16>
 800860c:	4621      	mov	r1, r4
 800860e:	f7fe f8e9 	bl	80067e4 <memset>
 8008612:	e7f4      	b.n	80085fe <_calloc_r+0x16>

08008614 <_free_r>:
 8008614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008616:	2900      	cmp	r1, #0
 8008618:	d044      	beq.n	80086a4 <_free_r+0x90>
 800861a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800861e:	9001      	str	r0, [sp, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	f1a1 0404 	sub.w	r4, r1, #4
 8008626:	bfb8      	it	lt
 8008628:	18e4      	addlt	r4, r4, r3
 800862a:	f000 fa9b 	bl	8008b64 <__malloc_lock>
 800862e:	4a1e      	ldr	r2, [pc, #120]	; (80086a8 <_free_r+0x94>)
 8008630:	9801      	ldr	r0, [sp, #4]
 8008632:	6813      	ldr	r3, [r2, #0]
 8008634:	b933      	cbnz	r3, 8008644 <_free_r+0x30>
 8008636:	6063      	str	r3, [r4, #4]
 8008638:	6014      	str	r4, [r2, #0]
 800863a:	b003      	add	sp, #12
 800863c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008640:	f000 ba96 	b.w	8008b70 <__malloc_unlock>
 8008644:	42a3      	cmp	r3, r4
 8008646:	d908      	bls.n	800865a <_free_r+0x46>
 8008648:	6825      	ldr	r5, [r4, #0]
 800864a:	1961      	adds	r1, r4, r5
 800864c:	428b      	cmp	r3, r1
 800864e:	bf01      	itttt	eq
 8008650:	6819      	ldreq	r1, [r3, #0]
 8008652:	685b      	ldreq	r3, [r3, #4]
 8008654:	1949      	addeq	r1, r1, r5
 8008656:	6021      	streq	r1, [r4, #0]
 8008658:	e7ed      	b.n	8008636 <_free_r+0x22>
 800865a:	461a      	mov	r2, r3
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	b10b      	cbz	r3, 8008664 <_free_r+0x50>
 8008660:	42a3      	cmp	r3, r4
 8008662:	d9fa      	bls.n	800865a <_free_r+0x46>
 8008664:	6811      	ldr	r1, [r2, #0]
 8008666:	1855      	adds	r5, r2, r1
 8008668:	42a5      	cmp	r5, r4
 800866a:	d10b      	bne.n	8008684 <_free_r+0x70>
 800866c:	6824      	ldr	r4, [r4, #0]
 800866e:	4421      	add	r1, r4
 8008670:	1854      	adds	r4, r2, r1
 8008672:	42a3      	cmp	r3, r4
 8008674:	6011      	str	r1, [r2, #0]
 8008676:	d1e0      	bne.n	800863a <_free_r+0x26>
 8008678:	681c      	ldr	r4, [r3, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	6053      	str	r3, [r2, #4]
 800867e:	4421      	add	r1, r4
 8008680:	6011      	str	r1, [r2, #0]
 8008682:	e7da      	b.n	800863a <_free_r+0x26>
 8008684:	d902      	bls.n	800868c <_free_r+0x78>
 8008686:	230c      	movs	r3, #12
 8008688:	6003      	str	r3, [r0, #0]
 800868a:	e7d6      	b.n	800863a <_free_r+0x26>
 800868c:	6825      	ldr	r5, [r4, #0]
 800868e:	1961      	adds	r1, r4, r5
 8008690:	428b      	cmp	r3, r1
 8008692:	bf04      	itt	eq
 8008694:	6819      	ldreq	r1, [r3, #0]
 8008696:	685b      	ldreq	r3, [r3, #4]
 8008698:	6063      	str	r3, [r4, #4]
 800869a:	bf04      	itt	eq
 800869c:	1949      	addeq	r1, r1, r5
 800869e:	6021      	streq	r1, [r4, #0]
 80086a0:	6054      	str	r4, [r2, #4]
 80086a2:	e7ca      	b.n	800863a <_free_r+0x26>
 80086a4:	b003      	add	sp, #12
 80086a6:	bd30      	pop	{r4, r5, pc}
 80086a8:	200003b4 	.word	0x200003b4

080086ac <sbrk_aligned>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	4e0e      	ldr	r6, [pc, #56]	; (80086e8 <sbrk_aligned+0x3c>)
 80086b0:	460c      	mov	r4, r1
 80086b2:	6831      	ldr	r1, [r6, #0]
 80086b4:	4605      	mov	r5, r0
 80086b6:	b911      	cbnz	r1, 80086be <sbrk_aligned+0x12>
 80086b8:	f000 f9e8 	bl	8008a8c <_sbrk_r>
 80086bc:	6030      	str	r0, [r6, #0]
 80086be:	4621      	mov	r1, r4
 80086c0:	4628      	mov	r0, r5
 80086c2:	f000 f9e3 	bl	8008a8c <_sbrk_r>
 80086c6:	1c43      	adds	r3, r0, #1
 80086c8:	d00a      	beq.n	80086e0 <sbrk_aligned+0x34>
 80086ca:	1cc4      	adds	r4, r0, #3
 80086cc:	f024 0403 	bic.w	r4, r4, #3
 80086d0:	42a0      	cmp	r0, r4
 80086d2:	d007      	beq.n	80086e4 <sbrk_aligned+0x38>
 80086d4:	1a21      	subs	r1, r4, r0
 80086d6:	4628      	mov	r0, r5
 80086d8:	f000 f9d8 	bl	8008a8c <_sbrk_r>
 80086dc:	3001      	adds	r0, #1
 80086de:	d101      	bne.n	80086e4 <sbrk_aligned+0x38>
 80086e0:	f04f 34ff 	mov.w	r4, #4294967295
 80086e4:	4620      	mov	r0, r4
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
 80086e8:	200003b8 	.word	0x200003b8

080086ec <_malloc_r>:
 80086ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f0:	1ccd      	adds	r5, r1, #3
 80086f2:	f025 0503 	bic.w	r5, r5, #3
 80086f6:	3508      	adds	r5, #8
 80086f8:	2d0c      	cmp	r5, #12
 80086fa:	bf38      	it	cc
 80086fc:	250c      	movcc	r5, #12
 80086fe:	2d00      	cmp	r5, #0
 8008700:	4607      	mov	r7, r0
 8008702:	db01      	blt.n	8008708 <_malloc_r+0x1c>
 8008704:	42a9      	cmp	r1, r5
 8008706:	d905      	bls.n	8008714 <_malloc_r+0x28>
 8008708:	230c      	movs	r3, #12
 800870a:	603b      	str	r3, [r7, #0]
 800870c:	2600      	movs	r6, #0
 800870e:	4630      	mov	r0, r6
 8008710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008714:	4e2e      	ldr	r6, [pc, #184]	; (80087d0 <_malloc_r+0xe4>)
 8008716:	f000 fa25 	bl	8008b64 <__malloc_lock>
 800871a:	6833      	ldr	r3, [r6, #0]
 800871c:	461c      	mov	r4, r3
 800871e:	bb34      	cbnz	r4, 800876e <_malloc_r+0x82>
 8008720:	4629      	mov	r1, r5
 8008722:	4638      	mov	r0, r7
 8008724:	f7ff ffc2 	bl	80086ac <sbrk_aligned>
 8008728:	1c43      	adds	r3, r0, #1
 800872a:	4604      	mov	r4, r0
 800872c:	d14d      	bne.n	80087ca <_malloc_r+0xde>
 800872e:	6834      	ldr	r4, [r6, #0]
 8008730:	4626      	mov	r6, r4
 8008732:	2e00      	cmp	r6, #0
 8008734:	d140      	bne.n	80087b8 <_malloc_r+0xcc>
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	4631      	mov	r1, r6
 800873a:	4638      	mov	r0, r7
 800873c:	eb04 0803 	add.w	r8, r4, r3
 8008740:	f000 f9a4 	bl	8008a8c <_sbrk_r>
 8008744:	4580      	cmp	r8, r0
 8008746:	d13a      	bne.n	80087be <_malloc_r+0xd2>
 8008748:	6821      	ldr	r1, [r4, #0]
 800874a:	3503      	adds	r5, #3
 800874c:	1a6d      	subs	r5, r5, r1
 800874e:	f025 0503 	bic.w	r5, r5, #3
 8008752:	3508      	adds	r5, #8
 8008754:	2d0c      	cmp	r5, #12
 8008756:	bf38      	it	cc
 8008758:	250c      	movcc	r5, #12
 800875a:	4629      	mov	r1, r5
 800875c:	4638      	mov	r0, r7
 800875e:	f7ff ffa5 	bl	80086ac <sbrk_aligned>
 8008762:	3001      	adds	r0, #1
 8008764:	d02b      	beq.n	80087be <_malloc_r+0xd2>
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	442b      	add	r3, r5
 800876a:	6023      	str	r3, [r4, #0]
 800876c:	e00e      	b.n	800878c <_malloc_r+0xa0>
 800876e:	6822      	ldr	r2, [r4, #0]
 8008770:	1b52      	subs	r2, r2, r5
 8008772:	d41e      	bmi.n	80087b2 <_malloc_r+0xc6>
 8008774:	2a0b      	cmp	r2, #11
 8008776:	d916      	bls.n	80087a6 <_malloc_r+0xba>
 8008778:	1961      	adds	r1, r4, r5
 800877a:	42a3      	cmp	r3, r4
 800877c:	6025      	str	r5, [r4, #0]
 800877e:	bf18      	it	ne
 8008780:	6059      	strne	r1, [r3, #4]
 8008782:	6863      	ldr	r3, [r4, #4]
 8008784:	bf08      	it	eq
 8008786:	6031      	streq	r1, [r6, #0]
 8008788:	5162      	str	r2, [r4, r5]
 800878a:	604b      	str	r3, [r1, #4]
 800878c:	4638      	mov	r0, r7
 800878e:	f104 060b 	add.w	r6, r4, #11
 8008792:	f000 f9ed 	bl	8008b70 <__malloc_unlock>
 8008796:	f026 0607 	bic.w	r6, r6, #7
 800879a:	1d23      	adds	r3, r4, #4
 800879c:	1af2      	subs	r2, r6, r3
 800879e:	d0b6      	beq.n	800870e <_malloc_r+0x22>
 80087a0:	1b9b      	subs	r3, r3, r6
 80087a2:	50a3      	str	r3, [r4, r2]
 80087a4:	e7b3      	b.n	800870e <_malloc_r+0x22>
 80087a6:	6862      	ldr	r2, [r4, #4]
 80087a8:	42a3      	cmp	r3, r4
 80087aa:	bf0c      	ite	eq
 80087ac:	6032      	streq	r2, [r6, #0]
 80087ae:	605a      	strne	r2, [r3, #4]
 80087b0:	e7ec      	b.n	800878c <_malloc_r+0xa0>
 80087b2:	4623      	mov	r3, r4
 80087b4:	6864      	ldr	r4, [r4, #4]
 80087b6:	e7b2      	b.n	800871e <_malloc_r+0x32>
 80087b8:	4634      	mov	r4, r6
 80087ba:	6876      	ldr	r6, [r6, #4]
 80087bc:	e7b9      	b.n	8008732 <_malloc_r+0x46>
 80087be:	230c      	movs	r3, #12
 80087c0:	603b      	str	r3, [r7, #0]
 80087c2:	4638      	mov	r0, r7
 80087c4:	f000 f9d4 	bl	8008b70 <__malloc_unlock>
 80087c8:	e7a1      	b.n	800870e <_malloc_r+0x22>
 80087ca:	6025      	str	r5, [r4, #0]
 80087cc:	e7de      	b.n	800878c <_malloc_r+0xa0>
 80087ce:	bf00      	nop
 80087d0:	200003b4 	.word	0x200003b4

080087d4 <__ssputs_r>:
 80087d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087d8:	688e      	ldr	r6, [r1, #8]
 80087da:	429e      	cmp	r6, r3
 80087dc:	4682      	mov	sl, r0
 80087de:	460c      	mov	r4, r1
 80087e0:	4690      	mov	r8, r2
 80087e2:	461f      	mov	r7, r3
 80087e4:	d838      	bhi.n	8008858 <__ssputs_r+0x84>
 80087e6:	898a      	ldrh	r2, [r1, #12]
 80087e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087ec:	d032      	beq.n	8008854 <__ssputs_r+0x80>
 80087ee:	6825      	ldr	r5, [r4, #0]
 80087f0:	6909      	ldr	r1, [r1, #16]
 80087f2:	eba5 0901 	sub.w	r9, r5, r1
 80087f6:	6965      	ldr	r5, [r4, #20]
 80087f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008800:	3301      	adds	r3, #1
 8008802:	444b      	add	r3, r9
 8008804:	106d      	asrs	r5, r5, #1
 8008806:	429d      	cmp	r5, r3
 8008808:	bf38      	it	cc
 800880a:	461d      	movcc	r5, r3
 800880c:	0553      	lsls	r3, r2, #21
 800880e:	d531      	bpl.n	8008874 <__ssputs_r+0xa0>
 8008810:	4629      	mov	r1, r5
 8008812:	f7ff ff6b 	bl	80086ec <_malloc_r>
 8008816:	4606      	mov	r6, r0
 8008818:	b950      	cbnz	r0, 8008830 <__ssputs_r+0x5c>
 800881a:	230c      	movs	r3, #12
 800881c:	f8ca 3000 	str.w	r3, [sl]
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008826:	81a3      	strh	r3, [r4, #12]
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008830:	6921      	ldr	r1, [r4, #16]
 8008832:	464a      	mov	r2, r9
 8008834:	f7ff fb46 	bl	8007ec4 <memcpy>
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800883e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008842:	81a3      	strh	r3, [r4, #12]
 8008844:	6126      	str	r6, [r4, #16]
 8008846:	6165      	str	r5, [r4, #20]
 8008848:	444e      	add	r6, r9
 800884a:	eba5 0509 	sub.w	r5, r5, r9
 800884e:	6026      	str	r6, [r4, #0]
 8008850:	60a5      	str	r5, [r4, #8]
 8008852:	463e      	mov	r6, r7
 8008854:	42be      	cmp	r6, r7
 8008856:	d900      	bls.n	800885a <__ssputs_r+0x86>
 8008858:	463e      	mov	r6, r7
 800885a:	6820      	ldr	r0, [r4, #0]
 800885c:	4632      	mov	r2, r6
 800885e:	4641      	mov	r1, r8
 8008860:	f000 f966 	bl	8008b30 <memmove>
 8008864:	68a3      	ldr	r3, [r4, #8]
 8008866:	1b9b      	subs	r3, r3, r6
 8008868:	60a3      	str	r3, [r4, #8]
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	4433      	add	r3, r6
 800886e:	6023      	str	r3, [r4, #0]
 8008870:	2000      	movs	r0, #0
 8008872:	e7db      	b.n	800882c <__ssputs_r+0x58>
 8008874:	462a      	mov	r2, r5
 8008876:	f000 f981 	bl	8008b7c <_realloc_r>
 800887a:	4606      	mov	r6, r0
 800887c:	2800      	cmp	r0, #0
 800887e:	d1e1      	bne.n	8008844 <__ssputs_r+0x70>
 8008880:	6921      	ldr	r1, [r4, #16]
 8008882:	4650      	mov	r0, sl
 8008884:	f7ff fec6 	bl	8008614 <_free_r>
 8008888:	e7c7      	b.n	800881a <__ssputs_r+0x46>
	...

0800888c <_svfiprintf_r>:
 800888c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008890:	4698      	mov	r8, r3
 8008892:	898b      	ldrh	r3, [r1, #12]
 8008894:	061b      	lsls	r3, r3, #24
 8008896:	b09d      	sub	sp, #116	; 0x74
 8008898:	4607      	mov	r7, r0
 800889a:	460d      	mov	r5, r1
 800889c:	4614      	mov	r4, r2
 800889e:	d50e      	bpl.n	80088be <_svfiprintf_r+0x32>
 80088a0:	690b      	ldr	r3, [r1, #16]
 80088a2:	b963      	cbnz	r3, 80088be <_svfiprintf_r+0x32>
 80088a4:	2140      	movs	r1, #64	; 0x40
 80088a6:	f7ff ff21 	bl	80086ec <_malloc_r>
 80088aa:	6028      	str	r0, [r5, #0]
 80088ac:	6128      	str	r0, [r5, #16]
 80088ae:	b920      	cbnz	r0, 80088ba <_svfiprintf_r+0x2e>
 80088b0:	230c      	movs	r3, #12
 80088b2:	603b      	str	r3, [r7, #0]
 80088b4:	f04f 30ff 	mov.w	r0, #4294967295
 80088b8:	e0d1      	b.n	8008a5e <_svfiprintf_r+0x1d2>
 80088ba:	2340      	movs	r3, #64	; 0x40
 80088bc:	616b      	str	r3, [r5, #20]
 80088be:	2300      	movs	r3, #0
 80088c0:	9309      	str	r3, [sp, #36]	; 0x24
 80088c2:	2320      	movs	r3, #32
 80088c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80088cc:	2330      	movs	r3, #48	; 0x30
 80088ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008a78 <_svfiprintf_r+0x1ec>
 80088d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088d6:	f04f 0901 	mov.w	r9, #1
 80088da:	4623      	mov	r3, r4
 80088dc:	469a      	mov	sl, r3
 80088de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088e2:	b10a      	cbz	r2, 80088e8 <_svfiprintf_r+0x5c>
 80088e4:	2a25      	cmp	r2, #37	; 0x25
 80088e6:	d1f9      	bne.n	80088dc <_svfiprintf_r+0x50>
 80088e8:	ebba 0b04 	subs.w	fp, sl, r4
 80088ec:	d00b      	beq.n	8008906 <_svfiprintf_r+0x7a>
 80088ee:	465b      	mov	r3, fp
 80088f0:	4622      	mov	r2, r4
 80088f2:	4629      	mov	r1, r5
 80088f4:	4638      	mov	r0, r7
 80088f6:	f7ff ff6d 	bl	80087d4 <__ssputs_r>
 80088fa:	3001      	adds	r0, #1
 80088fc:	f000 80aa 	beq.w	8008a54 <_svfiprintf_r+0x1c8>
 8008900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008902:	445a      	add	r2, fp
 8008904:	9209      	str	r2, [sp, #36]	; 0x24
 8008906:	f89a 3000 	ldrb.w	r3, [sl]
 800890a:	2b00      	cmp	r3, #0
 800890c:	f000 80a2 	beq.w	8008a54 <_svfiprintf_r+0x1c8>
 8008910:	2300      	movs	r3, #0
 8008912:	f04f 32ff 	mov.w	r2, #4294967295
 8008916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800891a:	f10a 0a01 	add.w	sl, sl, #1
 800891e:	9304      	str	r3, [sp, #16]
 8008920:	9307      	str	r3, [sp, #28]
 8008922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008926:	931a      	str	r3, [sp, #104]	; 0x68
 8008928:	4654      	mov	r4, sl
 800892a:	2205      	movs	r2, #5
 800892c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008930:	4851      	ldr	r0, [pc, #324]	; (8008a78 <_svfiprintf_r+0x1ec>)
 8008932:	f7f7 fc75 	bl	8000220 <memchr>
 8008936:	9a04      	ldr	r2, [sp, #16]
 8008938:	b9d8      	cbnz	r0, 8008972 <_svfiprintf_r+0xe6>
 800893a:	06d0      	lsls	r0, r2, #27
 800893c:	bf44      	itt	mi
 800893e:	2320      	movmi	r3, #32
 8008940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008944:	0711      	lsls	r1, r2, #28
 8008946:	bf44      	itt	mi
 8008948:	232b      	movmi	r3, #43	; 0x2b
 800894a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800894e:	f89a 3000 	ldrb.w	r3, [sl]
 8008952:	2b2a      	cmp	r3, #42	; 0x2a
 8008954:	d015      	beq.n	8008982 <_svfiprintf_r+0xf6>
 8008956:	9a07      	ldr	r2, [sp, #28]
 8008958:	4654      	mov	r4, sl
 800895a:	2000      	movs	r0, #0
 800895c:	f04f 0c0a 	mov.w	ip, #10
 8008960:	4621      	mov	r1, r4
 8008962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008966:	3b30      	subs	r3, #48	; 0x30
 8008968:	2b09      	cmp	r3, #9
 800896a:	d94e      	bls.n	8008a0a <_svfiprintf_r+0x17e>
 800896c:	b1b0      	cbz	r0, 800899c <_svfiprintf_r+0x110>
 800896e:	9207      	str	r2, [sp, #28]
 8008970:	e014      	b.n	800899c <_svfiprintf_r+0x110>
 8008972:	eba0 0308 	sub.w	r3, r0, r8
 8008976:	fa09 f303 	lsl.w	r3, r9, r3
 800897a:	4313      	orrs	r3, r2
 800897c:	9304      	str	r3, [sp, #16]
 800897e:	46a2      	mov	sl, r4
 8008980:	e7d2      	b.n	8008928 <_svfiprintf_r+0x9c>
 8008982:	9b03      	ldr	r3, [sp, #12]
 8008984:	1d19      	adds	r1, r3, #4
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	9103      	str	r1, [sp, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	bfbb      	ittet	lt
 800898e:	425b      	neglt	r3, r3
 8008990:	f042 0202 	orrlt.w	r2, r2, #2
 8008994:	9307      	strge	r3, [sp, #28]
 8008996:	9307      	strlt	r3, [sp, #28]
 8008998:	bfb8      	it	lt
 800899a:	9204      	strlt	r2, [sp, #16]
 800899c:	7823      	ldrb	r3, [r4, #0]
 800899e:	2b2e      	cmp	r3, #46	; 0x2e
 80089a0:	d10c      	bne.n	80089bc <_svfiprintf_r+0x130>
 80089a2:	7863      	ldrb	r3, [r4, #1]
 80089a4:	2b2a      	cmp	r3, #42	; 0x2a
 80089a6:	d135      	bne.n	8008a14 <_svfiprintf_r+0x188>
 80089a8:	9b03      	ldr	r3, [sp, #12]
 80089aa:	1d1a      	adds	r2, r3, #4
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	9203      	str	r2, [sp, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	bfb8      	it	lt
 80089b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80089b8:	3402      	adds	r4, #2
 80089ba:	9305      	str	r3, [sp, #20]
 80089bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a88 <_svfiprintf_r+0x1fc>
 80089c0:	7821      	ldrb	r1, [r4, #0]
 80089c2:	2203      	movs	r2, #3
 80089c4:	4650      	mov	r0, sl
 80089c6:	f7f7 fc2b 	bl	8000220 <memchr>
 80089ca:	b140      	cbz	r0, 80089de <_svfiprintf_r+0x152>
 80089cc:	2340      	movs	r3, #64	; 0x40
 80089ce:	eba0 000a 	sub.w	r0, r0, sl
 80089d2:	fa03 f000 	lsl.w	r0, r3, r0
 80089d6:	9b04      	ldr	r3, [sp, #16]
 80089d8:	4303      	orrs	r3, r0
 80089da:	3401      	adds	r4, #1
 80089dc:	9304      	str	r3, [sp, #16]
 80089de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e2:	4826      	ldr	r0, [pc, #152]	; (8008a7c <_svfiprintf_r+0x1f0>)
 80089e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089e8:	2206      	movs	r2, #6
 80089ea:	f7f7 fc19 	bl	8000220 <memchr>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	d038      	beq.n	8008a64 <_svfiprintf_r+0x1d8>
 80089f2:	4b23      	ldr	r3, [pc, #140]	; (8008a80 <_svfiprintf_r+0x1f4>)
 80089f4:	bb1b      	cbnz	r3, 8008a3e <_svfiprintf_r+0x1b2>
 80089f6:	9b03      	ldr	r3, [sp, #12]
 80089f8:	3307      	adds	r3, #7
 80089fa:	f023 0307 	bic.w	r3, r3, #7
 80089fe:	3308      	adds	r3, #8
 8008a00:	9303      	str	r3, [sp, #12]
 8008a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a04:	4433      	add	r3, r6
 8008a06:	9309      	str	r3, [sp, #36]	; 0x24
 8008a08:	e767      	b.n	80088da <_svfiprintf_r+0x4e>
 8008a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a0e:	460c      	mov	r4, r1
 8008a10:	2001      	movs	r0, #1
 8008a12:	e7a5      	b.n	8008960 <_svfiprintf_r+0xd4>
 8008a14:	2300      	movs	r3, #0
 8008a16:	3401      	adds	r4, #1
 8008a18:	9305      	str	r3, [sp, #20]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	f04f 0c0a 	mov.w	ip, #10
 8008a20:	4620      	mov	r0, r4
 8008a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a26:	3a30      	subs	r2, #48	; 0x30
 8008a28:	2a09      	cmp	r2, #9
 8008a2a:	d903      	bls.n	8008a34 <_svfiprintf_r+0x1a8>
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d0c5      	beq.n	80089bc <_svfiprintf_r+0x130>
 8008a30:	9105      	str	r1, [sp, #20]
 8008a32:	e7c3      	b.n	80089bc <_svfiprintf_r+0x130>
 8008a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a38:	4604      	mov	r4, r0
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e7f0      	b.n	8008a20 <_svfiprintf_r+0x194>
 8008a3e:	ab03      	add	r3, sp, #12
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	462a      	mov	r2, r5
 8008a44:	4b0f      	ldr	r3, [pc, #60]	; (8008a84 <_svfiprintf_r+0x1f8>)
 8008a46:	a904      	add	r1, sp, #16
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f7fd ff73 	bl	8006934 <_printf_float>
 8008a4e:	1c42      	adds	r2, r0, #1
 8008a50:	4606      	mov	r6, r0
 8008a52:	d1d6      	bne.n	8008a02 <_svfiprintf_r+0x176>
 8008a54:	89ab      	ldrh	r3, [r5, #12]
 8008a56:	065b      	lsls	r3, r3, #25
 8008a58:	f53f af2c 	bmi.w	80088b4 <_svfiprintf_r+0x28>
 8008a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a5e:	b01d      	add	sp, #116	; 0x74
 8008a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a64:	ab03      	add	r3, sp, #12
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	462a      	mov	r2, r5
 8008a6a:	4b06      	ldr	r3, [pc, #24]	; (8008a84 <_svfiprintf_r+0x1f8>)
 8008a6c:	a904      	add	r1, sp, #16
 8008a6e:	4638      	mov	r0, r7
 8008a70:	f7fe fa04 	bl	8006e7c <_printf_i>
 8008a74:	e7eb      	b.n	8008a4e <_svfiprintf_r+0x1c2>
 8008a76:	bf00      	nop
 8008a78:	0800ad54 	.word	0x0800ad54
 8008a7c:	0800ad5e 	.word	0x0800ad5e
 8008a80:	08006935 	.word	0x08006935
 8008a84:	080087d5 	.word	0x080087d5
 8008a88:	0800ad5a 	.word	0x0800ad5a

08008a8c <_sbrk_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4d06      	ldr	r5, [pc, #24]	; (8008aa8 <_sbrk_r+0x1c>)
 8008a90:	2300      	movs	r3, #0
 8008a92:	4604      	mov	r4, r0
 8008a94:	4608      	mov	r0, r1
 8008a96:	602b      	str	r3, [r5, #0]
 8008a98:	f7fa f826 	bl	8002ae8 <_sbrk>
 8008a9c:	1c43      	adds	r3, r0, #1
 8008a9e:	d102      	bne.n	8008aa6 <_sbrk_r+0x1a>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	b103      	cbz	r3, 8008aa6 <_sbrk_r+0x1a>
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	bd38      	pop	{r3, r4, r5, pc}
 8008aa8:	200003bc 	.word	0x200003bc

08008aac <__assert_func>:
 8008aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008aae:	4614      	mov	r4, r2
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	4b09      	ldr	r3, [pc, #36]	; (8008ad8 <__assert_func+0x2c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	68d8      	ldr	r0, [r3, #12]
 8008aba:	b14c      	cbz	r4, 8008ad0 <__assert_func+0x24>
 8008abc:	4b07      	ldr	r3, [pc, #28]	; (8008adc <__assert_func+0x30>)
 8008abe:	9100      	str	r1, [sp, #0]
 8008ac0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ac4:	4906      	ldr	r1, [pc, #24]	; (8008ae0 <__assert_func+0x34>)
 8008ac6:	462b      	mov	r3, r5
 8008ac8:	f000 f80e 	bl	8008ae8 <fiprintf>
 8008acc:	f7fd fe59 	bl	8006782 <abort>
 8008ad0:	4b04      	ldr	r3, [pc, #16]	; (8008ae4 <__assert_func+0x38>)
 8008ad2:	461c      	mov	r4, r3
 8008ad4:	e7f3      	b.n	8008abe <__assert_func+0x12>
 8008ad6:	bf00      	nop
 8008ad8:	20000034 	.word	0x20000034
 8008adc:	0800ad65 	.word	0x0800ad65
 8008ae0:	0800ad72 	.word	0x0800ad72
 8008ae4:	0800ada0 	.word	0x0800ada0

08008ae8 <fiprintf>:
 8008ae8:	b40e      	push	{r1, r2, r3}
 8008aea:	b503      	push	{r0, r1, lr}
 8008aec:	4601      	mov	r1, r0
 8008aee:	ab03      	add	r3, sp, #12
 8008af0:	4805      	ldr	r0, [pc, #20]	; (8008b08 <fiprintf+0x20>)
 8008af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008af6:	6800      	ldr	r0, [r0, #0]
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	f000 f897 	bl	8008c2c <_vfiprintf_r>
 8008afe:	b002      	add	sp, #8
 8008b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b04:	b003      	add	sp, #12
 8008b06:	4770      	bx	lr
 8008b08:	20000034 	.word	0x20000034

08008b0c <__ascii_mbtowc>:
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	b901      	cbnz	r1, 8008b12 <__ascii_mbtowc+0x6>
 8008b10:	a901      	add	r1, sp, #4
 8008b12:	b142      	cbz	r2, 8008b26 <__ascii_mbtowc+0x1a>
 8008b14:	b14b      	cbz	r3, 8008b2a <__ascii_mbtowc+0x1e>
 8008b16:	7813      	ldrb	r3, [r2, #0]
 8008b18:	600b      	str	r3, [r1, #0]
 8008b1a:	7812      	ldrb	r2, [r2, #0]
 8008b1c:	1e10      	subs	r0, r2, #0
 8008b1e:	bf18      	it	ne
 8008b20:	2001      	movne	r0, #1
 8008b22:	b002      	add	sp, #8
 8008b24:	4770      	bx	lr
 8008b26:	4610      	mov	r0, r2
 8008b28:	e7fb      	b.n	8008b22 <__ascii_mbtowc+0x16>
 8008b2a:	f06f 0001 	mvn.w	r0, #1
 8008b2e:	e7f8      	b.n	8008b22 <__ascii_mbtowc+0x16>

08008b30 <memmove>:
 8008b30:	4288      	cmp	r0, r1
 8008b32:	b510      	push	{r4, lr}
 8008b34:	eb01 0402 	add.w	r4, r1, r2
 8008b38:	d902      	bls.n	8008b40 <memmove+0x10>
 8008b3a:	4284      	cmp	r4, r0
 8008b3c:	4623      	mov	r3, r4
 8008b3e:	d807      	bhi.n	8008b50 <memmove+0x20>
 8008b40:	1e43      	subs	r3, r0, #1
 8008b42:	42a1      	cmp	r1, r4
 8008b44:	d008      	beq.n	8008b58 <memmove+0x28>
 8008b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b4e:	e7f8      	b.n	8008b42 <memmove+0x12>
 8008b50:	4402      	add	r2, r0
 8008b52:	4601      	mov	r1, r0
 8008b54:	428a      	cmp	r2, r1
 8008b56:	d100      	bne.n	8008b5a <memmove+0x2a>
 8008b58:	bd10      	pop	{r4, pc}
 8008b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b62:	e7f7      	b.n	8008b54 <memmove+0x24>

08008b64 <__malloc_lock>:
 8008b64:	4801      	ldr	r0, [pc, #4]	; (8008b6c <__malloc_lock+0x8>)
 8008b66:	f000 bc17 	b.w	8009398 <__retarget_lock_acquire_recursive>
 8008b6a:	bf00      	nop
 8008b6c:	200003c0 	.word	0x200003c0

08008b70 <__malloc_unlock>:
 8008b70:	4801      	ldr	r0, [pc, #4]	; (8008b78 <__malloc_unlock+0x8>)
 8008b72:	f000 bc12 	b.w	800939a <__retarget_lock_release_recursive>
 8008b76:	bf00      	nop
 8008b78:	200003c0 	.word	0x200003c0

08008b7c <_realloc_r>:
 8008b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b80:	4680      	mov	r8, r0
 8008b82:	4614      	mov	r4, r2
 8008b84:	460e      	mov	r6, r1
 8008b86:	b921      	cbnz	r1, 8008b92 <_realloc_r+0x16>
 8008b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	f7ff bdad 	b.w	80086ec <_malloc_r>
 8008b92:	b92a      	cbnz	r2, 8008ba0 <_realloc_r+0x24>
 8008b94:	f7ff fd3e 	bl	8008614 <_free_r>
 8008b98:	4625      	mov	r5, r4
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba0:	f000 fc62 	bl	8009468 <_malloc_usable_size_r>
 8008ba4:	4284      	cmp	r4, r0
 8008ba6:	4607      	mov	r7, r0
 8008ba8:	d802      	bhi.n	8008bb0 <_realloc_r+0x34>
 8008baa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008bae:	d812      	bhi.n	8008bd6 <_realloc_r+0x5a>
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	f7ff fd9a 	bl	80086ec <_malloc_r>
 8008bb8:	4605      	mov	r5, r0
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	d0ed      	beq.n	8008b9a <_realloc_r+0x1e>
 8008bbe:	42bc      	cmp	r4, r7
 8008bc0:	4622      	mov	r2, r4
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	bf28      	it	cs
 8008bc6:	463a      	movcs	r2, r7
 8008bc8:	f7ff f97c 	bl	8007ec4 <memcpy>
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4640      	mov	r0, r8
 8008bd0:	f7ff fd20 	bl	8008614 <_free_r>
 8008bd4:	e7e1      	b.n	8008b9a <_realloc_r+0x1e>
 8008bd6:	4635      	mov	r5, r6
 8008bd8:	e7df      	b.n	8008b9a <_realloc_r+0x1e>

08008bda <__sfputc_r>:
 8008bda:	6893      	ldr	r3, [r2, #8]
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	b410      	push	{r4}
 8008be2:	6093      	str	r3, [r2, #8]
 8008be4:	da08      	bge.n	8008bf8 <__sfputc_r+0x1e>
 8008be6:	6994      	ldr	r4, [r2, #24]
 8008be8:	42a3      	cmp	r3, r4
 8008bea:	db01      	blt.n	8008bf0 <__sfputc_r+0x16>
 8008bec:	290a      	cmp	r1, #10
 8008bee:	d103      	bne.n	8008bf8 <__sfputc_r+0x1e>
 8008bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bf4:	f000 b94a 	b.w	8008e8c <__swbuf_r>
 8008bf8:	6813      	ldr	r3, [r2, #0]
 8008bfa:	1c58      	adds	r0, r3, #1
 8008bfc:	6010      	str	r0, [r2, #0]
 8008bfe:	7019      	strb	r1, [r3, #0]
 8008c00:	4608      	mov	r0, r1
 8008c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <__sfputs_r>:
 8008c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	460f      	mov	r7, r1
 8008c0e:	4614      	mov	r4, r2
 8008c10:	18d5      	adds	r5, r2, r3
 8008c12:	42ac      	cmp	r4, r5
 8008c14:	d101      	bne.n	8008c1a <__sfputs_r+0x12>
 8008c16:	2000      	movs	r0, #0
 8008c18:	e007      	b.n	8008c2a <__sfputs_r+0x22>
 8008c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c1e:	463a      	mov	r2, r7
 8008c20:	4630      	mov	r0, r6
 8008c22:	f7ff ffda 	bl	8008bda <__sfputc_r>
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	d1f3      	bne.n	8008c12 <__sfputs_r+0xa>
 8008c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c2c <_vfiprintf_r>:
 8008c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c30:	460d      	mov	r5, r1
 8008c32:	b09d      	sub	sp, #116	; 0x74
 8008c34:	4614      	mov	r4, r2
 8008c36:	4698      	mov	r8, r3
 8008c38:	4606      	mov	r6, r0
 8008c3a:	b118      	cbz	r0, 8008c44 <_vfiprintf_r+0x18>
 8008c3c:	6983      	ldr	r3, [r0, #24]
 8008c3e:	b90b      	cbnz	r3, 8008c44 <_vfiprintf_r+0x18>
 8008c40:	f000 fb0c 	bl	800925c <__sinit>
 8008c44:	4b89      	ldr	r3, [pc, #548]	; (8008e6c <_vfiprintf_r+0x240>)
 8008c46:	429d      	cmp	r5, r3
 8008c48:	d11b      	bne.n	8008c82 <_vfiprintf_r+0x56>
 8008c4a:	6875      	ldr	r5, [r6, #4]
 8008c4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c4e:	07d9      	lsls	r1, r3, #31
 8008c50:	d405      	bmi.n	8008c5e <_vfiprintf_r+0x32>
 8008c52:	89ab      	ldrh	r3, [r5, #12]
 8008c54:	059a      	lsls	r2, r3, #22
 8008c56:	d402      	bmi.n	8008c5e <_vfiprintf_r+0x32>
 8008c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c5a:	f000 fb9d 	bl	8009398 <__retarget_lock_acquire_recursive>
 8008c5e:	89ab      	ldrh	r3, [r5, #12]
 8008c60:	071b      	lsls	r3, r3, #28
 8008c62:	d501      	bpl.n	8008c68 <_vfiprintf_r+0x3c>
 8008c64:	692b      	ldr	r3, [r5, #16]
 8008c66:	b9eb      	cbnz	r3, 8008ca4 <_vfiprintf_r+0x78>
 8008c68:	4629      	mov	r1, r5
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f000 f96e 	bl	8008f4c <__swsetup_r>
 8008c70:	b1c0      	cbz	r0, 8008ca4 <_vfiprintf_r+0x78>
 8008c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c74:	07dc      	lsls	r4, r3, #31
 8008c76:	d50e      	bpl.n	8008c96 <_vfiprintf_r+0x6a>
 8008c78:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7c:	b01d      	add	sp, #116	; 0x74
 8008c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c82:	4b7b      	ldr	r3, [pc, #492]	; (8008e70 <_vfiprintf_r+0x244>)
 8008c84:	429d      	cmp	r5, r3
 8008c86:	d101      	bne.n	8008c8c <_vfiprintf_r+0x60>
 8008c88:	68b5      	ldr	r5, [r6, #8]
 8008c8a:	e7df      	b.n	8008c4c <_vfiprintf_r+0x20>
 8008c8c:	4b79      	ldr	r3, [pc, #484]	; (8008e74 <_vfiprintf_r+0x248>)
 8008c8e:	429d      	cmp	r5, r3
 8008c90:	bf08      	it	eq
 8008c92:	68f5      	ldreq	r5, [r6, #12]
 8008c94:	e7da      	b.n	8008c4c <_vfiprintf_r+0x20>
 8008c96:	89ab      	ldrh	r3, [r5, #12]
 8008c98:	0598      	lsls	r0, r3, #22
 8008c9a:	d4ed      	bmi.n	8008c78 <_vfiprintf_r+0x4c>
 8008c9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c9e:	f000 fb7c 	bl	800939a <__retarget_lock_release_recursive>
 8008ca2:	e7e9      	b.n	8008c78 <_vfiprintf_r+0x4c>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ca8:	2320      	movs	r3, #32
 8008caa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cae:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cb2:	2330      	movs	r3, #48	; 0x30
 8008cb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e78 <_vfiprintf_r+0x24c>
 8008cb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cbc:	f04f 0901 	mov.w	r9, #1
 8008cc0:	4623      	mov	r3, r4
 8008cc2:	469a      	mov	sl, r3
 8008cc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cc8:	b10a      	cbz	r2, 8008cce <_vfiprintf_r+0xa2>
 8008cca:	2a25      	cmp	r2, #37	; 0x25
 8008ccc:	d1f9      	bne.n	8008cc2 <_vfiprintf_r+0x96>
 8008cce:	ebba 0b04 	subs.w	fp, sl, r4
 8008cd2:	d00b      	beq.n	8008cec <_vfiprintf_r+0xc0>
 8008cd4:	465b      	mov	r3, fp
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f7ff ff94 	bl	8008c08 <__sfputs_r>
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	f000 80aa 	beq.w	8008e3a <_vfiprintf_r+0x20e>
 8008ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ce8:	445a      	add	r2, fp
 8008cea:	9209      	str	r2, [sp, #36]	; 0x24
 8008cec:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 80a2 	beq.w	8008e3a <_vfiprintf_r+0x20e>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d00:	f10a 0a01 	add.w	sl, sl, #1
 8008d04:	9304      	str	r3, [sp, #16]
 8008d06:	9307      	str	r3, [sp, #28]
 8008d08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d0c:	931a      	str	r3, [sp, #104]	; 0x68
 8008d0e:	4654      	mov	r4, sl
 8008d10:	2205      	movs	r2, #5
 8008d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d16:	4858      	ldr	r0, [pc, #352]	; (8008e78 <_vfiprintf_r+0x24c>)
 8008d18:	f7f7 fa82 	bl	8000220 <memchr>
 8008d1c:	9a04      	ldr	r2, [sp, #16]
 8008d1e:	b9d8      	cbnz	r0, 8008d58 <_vfiprintf_r+0x12c>
 8008d20:	06d1      	lsls	r1, r2, #27
 8008d22:	bf44      	itt	mi
 8008d24:	2320      	movmi	r3, #32
 8008d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d2a:	0713      	lsls	r3, r2, #28
 8008d2c:	bf44      	itt	mi
 8008d2e:	232b      	movmi	r3, #43	; 0x2b
 8008d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d34:	f89a 3000 	ldrb.w	r3, [sl]
 8008d38:	2b2a      	cmp	r3, #42	; 0x2a
 8008d3a:	d015      	beq.n	8008d68 <_vfiprintf_r+0x13c>
 8008d3c:	9a07      	ldr	r2, [sp, #28]
 8008d3e:	4654      	mov	r4, sl
 8008d40:	2000      	movs	r0, #0
 8008d42:	f04f 0c0a 	mov.w	ip, #10
 8008d46:	4621      	mov	r1, r4
 8008d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d4c:	3b30      	subs	r3, #48	; 0x30
 8008d4e:	2b09      	cmp	r3, #9
 8008d50:	d94e      	bls.n	8008df0 <_vfiprintf_r+0x1c4>
 8008d52:	b1b0      	cbz	r0, 8008d82 <_vfiprintf_r+0x156>
 8008d54:	9207      	str	r2, [sp, #28]
 8008d56:	e014      	b.n	8008d82 <_vfiprintf_r+0x156>
 8008d58:	eba0 0308 	sub.w	r3, r0, r8
 8008d5c:	fa09 f303 	lsl.w	r3, r9, r3
 8008d60:	4313      	orrs	r3, r2
 8008d62:	9304      	str	r3, [sp, #16]
 8008d64:	46a2      	mov	sl, r4
 8008d66:	e7d2      	b.n	8008d0e <_vfiprintf_r+0xe2>
 8008d68:	9b03      	ldr	r3, [sp, #12]
 8008d6a:	1d19      	adds	r1, r3, #4
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	9103      	str	r1, [sp, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	bfbb      	ittet	lt
 8008d74:	425b      	neglt	r3, r3
 8008d76:	f042 0202 	orrlt.w	r2, r2, #2
 8008d7a:	9307      	strge	r3, [sp, #28]
 8008d7c:	9307      	strlt	r3, [sp, #28]
 8008d7e:	bfb8      	it	lt
 8008d80:	9204      	strlt	r2, [sp, #16]
 8008d82:	7823      	ldrb	r3, [r4, #0]
 8008d84:	2b2e      	cmp	r3, #46	; 0x2e
 8008d86:	d10c      	bne.n	8008da2 <_vfiprintf_r+0x176>
 8008d88:	7863      	ldrb	r3, [r4, #1]
 8008d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d8c:	d135      	bne.n	8008dfa <_vfiprintf_r+0x1ce>
 8008d8e:	9b03      	ldr	r3, [sp, #12]
 8008d90:	1d1a      	adds	r2, r3, #4
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	9203      	str	r2, [sp, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	bfb8      	it	lt
 8008d9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d9e:	3402      	adds	r4, #2
 8008da0:	9305      	str	r3, [sp, #20]
 8008da2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e88 <_vfiprintf_r+0x25c>
 8008da6:	7821      	ldrb	r1, [r4, #0]
 8008da8:	2203      	movs	r2, #3
 8008daa:	4650      	mov	r0, sl
 8008dac:	f7f7 fa38 	bl	8000220 <memchr>
 8008db0:	b140      	cbz	r0, 8008dc4 <_vfiprintf_r+0x198>
 8008db2:	2340      	movs	r3, #64	; 0x40
 8008db4:	eba0 000a 	sub.w	r0, r0, sl
 8008db8:	fa03 f000 	lsl.w	r0, r3, r0
 8008dbc:	9b04      	ldr	r3, [sp, #16]
 8008dbe:	4303      	orrs	r3, r0
 8008dc0:	3401      	adds	r4, #1
 8008dc2:	9304      	str	r3, [sp, #16]
 8008dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc8:	482c      	ldr	r0, [pc, #176]	; (8008e7c <_vfiprintf_r+0x250>)
 8008dca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dce:	2206      	movs	r2, #6
 8008dd0:	f7f7 fa26 	bl	8000220 <memchr>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d03f      	beq.n	8008e58 <_vfiprintf_r+0x22c>
 8008dd8:	4b29      	ldr	r3, [pc, #164]	; (8008e80 <_vfiprintf_r+0x254>)
 8008dda:	bb1b      	cbnz	r3, 8008e24 <_vfiprintf_r+0x1f8>
 8008ddc:	9b03      	ldr	r3, [sp, #12]
 8008dde:	3307      	adds	r3, #7
 8008de0:	f023 0307 	bic.w	r3, r3, #7
 8008de4:	3308      	adds	r3, #8
 8008de6:	9303      	str	r3, [sp, #12]
 8008de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dea:	443b      	add	r3, r7
 8008dec:	9309      	str	r3, [sp, #36]	; 0x24
 8008dee:	e767      	b.n	8008cc0 <_vfiprintf_r+0x94>
 8008df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008df4:	460c      	mov	r4, r1
 8008df6:	2001      	movs	r0, #1
 8008df8:	e7a5      	b.n	8008d46 <_vfiprintf_r+0x11a>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	3401      	adds	r4, #1
 8008dfe:	9305      	str	r3, [sp, #20]
 8008e00:	4619      	mov	r1, r3
 8008e02:	f04f 0c0a 	mov.w	ip, #10
 8008e06:	4620      	mov	r0, r4
 8008e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e0c:	3a30      	subs	r2, #48	; 0x30
 8008e0e:	2a09      	cmp	r2, #9
 8008e10:	d903      	bls.n	8008e1a <_vfiprintf_r+0x1ee>
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d0c5      	beq.n	8008da2 <_vfiprintf_r+0x176>
 8008e16:	9105      	str	r1, [sp, #20]
 8008e18:	e7c3      	b.n	8008da2 <_vfiprintf_r+0x176>
 8008e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e1e:	4604      	mov	r4, r0
 8008e20:	2301      	movs	r3, #1
 8008e22:	e7f0      	b.n	8008e06 <_vfiprintf_r+0x1da>
 8008e24:	ab03      	add	r3, sp, #12
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	462a      	mov	r2, r5
 8008e2a:	4b16      	ldr	r3, [pc, #88]	; (8008e84 <_vfiprintf_r+0x258>)
 8008e2c:	a904      	add	r1, sp, #16
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f7fd fd80 	bl	8006934 <_printf_float>
 8008e34:	4607      	mov	r7, r0
 8008e36:	1c78      	adds	r0, r7, #1
 8008e38:	d1d6      	bne.n	8008de8 <_vfiprintf_r+0x1bc>
 8008e3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e3c:	07d9      	lsls	r1, r3, #31
 8008e3e:	d405      	bmi.n	8008e4c <_vfiprintf_r+0x220>
 8008e40:	89ab      	ldrh	r3, [r5, #12]
 8008e42:	059a      	lsls	r2, r3, #22
 8008e44:	d402      	bmi.n	8008e4c <_vfiprintf_r+0x220>
 8008e46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e48:	f000 faa7 	bl	800939a <__retarget_lock_release_recursive>
 8008e4c:	89ab      	ldrh	r3, [r5, #12]
 8008e4e:	065b      	lsls	r3, r3, #25
 8008e50:	f53f af12 	bmi.w	8008c78 <_vfiprintf_r+0x4c>
 8008e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e56:	e711      	b.n	8008c7c <_vfiprintf_r+0x50>
 8008e58:	ab03      	add	r3, sp, #12
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	462a      	mov	r2, r5
 8008e5e:	4b09      	ldr	r3, [pc, #36]	; (8008e84 <_vfiprintf_r+0x258>)
 8008e60:	a904      	add	r1, sp, #16
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7fe f80a 	bl	8006e7c <_printf_i>
 8008e68:	e7e4      	b.n	8008e34 <_vfiprintf_r+0x208>
 8008e6a:	bf00      	nop
 8008e6c:	0800aecc 	.word	0x0800aecc
 8008e70:	0800aeec 	.word	0x0800aeec
 8008e74:	0800aeac 	.word	0x0800aeac
 8008e78:	0800ad54 	.word	0x0800ad54
 8008e7c:	0800ad5e 	.word	0x0800ad5e
 8008e80:	08006935 	.word	0x08006935
 8008e84:	08008c09 	.word	0x08008c09
 8008e88:	0800ad5a 	.word	0x0800ad5a

08008e8c <__swbuf_r>:
 8008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8e:	460e      	mov	r6, r1
 8008e90:	4614      	mov	r4, r2
 8008e92:	4605      	mov	r5, r0
 8008e94:	b118      	cbz	r0, 8008e9e <__swbuf_r+0x12>
 8008e96:	6983      	ldr	r3, [r0, #24]
 8008e98:	b90b      	cbnz	r3, 8008e9e <__swbuf_r+0x12>
 8008e9a:	f000 f9df 	bl	800925c <__sinit>
 8008e9e:	4b21      	ldr	r3, [pc, #132]	; (8008f24 <__swbuf_r+0x98>)
 8008ea0:	429c      	cmp	r4, r3
 8008ea2:	d12b      	bne.n	8008efc <__swbuf_r+0x70>
 8008ea4:	686c      	ldr	r4, [r5, #4]
 8008ea6:	69a3      	ldr	r3, [r4, #24]
 8008ea8:	60a3      	str	r3, [r4, #8]
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	071a      	lsls	r2, r3, #28
 8008eae:	d52f      	bpl.n	8008f10 <__swbuf_r+0x84>
 8008eb0:	6923      	ldr	r3, [r4, #16]
 8008eb2:	b36b      	cbz	r3, 8008f10 <__swbuf_r+0x84>
 8008eb4:	6923      	ldr	r3, [r4, #16]
 8008eb6:	6820      	ldr	r0, [r4, #0]
 8008eb8:	1ac0      	subs	r0, r0, r3
 8008eba:	6963      	ldr	r3, [r4, #20]
 8008ebc:	b2f6      	uxtb	r6, r6
 8008ebe:	4283      	cmp	r3, r0
 8008ec0:	4637      	mov	r7, r6
 8008ec2:	dc04      	bgt.n	8008ece <__swbuf_r+0x42>
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f000 f934 	bl	8009134 <_fflush_r>
 8008ecc:	bb30      	cbnz	r0, 8008f1c <__swbuf_r+0x90>
 8008ece:	68a3      	ldr	r3, [r4, #8]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	60a3      	str	r3, [r4, #8]
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	6022      	str	r2, [r4, #0]
 8008eda:	701e      	strb	r6, [r3, #0]
 8008edc:	6963      	ldr	r3, [r4, #20]
 8008ede:	3001      	adds	r0, #1
 8008ee0:	4283      	cmp	r3, r0
 8008ee2:	d004      	beq.n	8008eee <__swbuf_r+0x62>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	07db      	lsls	r3, r3, #31
 8008ee8:	d506      	bpl.n	8008ef8 <__swbuf_r+0x6c>
 8008eea:	2e0a      	cmp	r6, #10
 8008eec:	d104      	bne.n	8008ef8 <__swbuf_r+0x6c>
 8008eee:	4621      	mov	r1, r4
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	f000 f91f 	bl	8009134 <_fflush_r>
 8008ef6:	b988      	cbnz	r0, 8008f1c <__swbuf_r+0x90>
 8008ef8:	4638      	mov	r0, r7
 8008efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008efc:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <__swbuf_r+0x9c>)
 8008efe:	429c      	cmp	r4, r3
 8008f00:	d101      	bne.n	8008f06 <__swbuf_r+0x7a>
 8008f02:	68ac      	ldr	r4, [r5, #8]
 8008f04:	e7cf      	b.n	8008ea6 <__swbuf_r+0x1a>
 8008f06:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <__swbuf_r+0xa0>)
 8008f08:	429c      	cmp	r4, r3
 8008f0a:	bf08      	it	eq
 8008f0c:	68ec      	ldreq	r4, [r5, #12]
 8008f0e:	e7ca      	b.n	8008ea6 <__swbuf_r+0x1a>
 8008f10:	4621      	mov	r1, r4
 8008f12:	4628      	mov	r0, r5
 8008f14:	f000 f81a 	bl	8008f4c <__swsetup_r>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d0cb      	beq.n	8008eb4 <__swbuf_r+0x28>
 8008f1c:	f04f 37ff 	mov.w	r7, #4294967295
 8008f20:	e7ea      	b.n	8008ef8 <__swbuf_r+0x6c>
 8008f22:	bf00      	nop
 8008f24:	0800aecc 	.word	0x0800aecc
 8008f28:	0800aeec 	.word	0x0800aeec
 8008f2c:	0800aeac 	.word	0x0800aeac

08008f30 <__ascii_wctomb>:
 8008f30:	b149      	cbz	r1, 8008f46 <__ascii_wctomb+0x16>
 8008f32:	2aff      	cmp	r2, #255	; 0xff
 8008f34:	bf85      	ittet	hi
 8008f36:	238a      	movhi	r3, #138	; 0x8a
 8008f38:	6003      	strhi	r3, [r0, #0]
 8008f3a:	700a      	strbls	r2, [r1, #0]
 8008f3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f40:	bf98      	it	ls
 8008f42:	2001      	movls	r0, #1
 8008f44:	4770      	bx	lr
 8008f46:	4608      	mov	r0, r1
 8008f48:	4770      	bx	lr
	...

08008f4c <__swsetup_r>:
 8008f4c:	4b32      	ldr	r3, [pc, #200]	; (8009018 <__swsetup_r+0xcc>)
 8008f4e:	b570      	push	{r4, r5, r6, lr}
 8008f50:	681d      	ldr	r5, [r3, #0]
 8008f52:	4606      	mov	r6, r0
 8008f54:	460c      	mov	r4, r1
 8008f56:	b125      	cbz	r5, 8008f62 <__swsetup_r+0x16>
 8008f58:	69ab      	ldr	r3, [r5, #24]
 8008f5a:	b913      	cbnz	r3, 8008f62 <__swsetup_r+0x16>
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f000 f97d 	bl	800925c <__sinit>
 8008f62:	4b2e      	ldr	r3, [pc, #184]	; (800901c <__swsetup_r+0xd0>)
 8008f64:	429c      	cmp	r4, r3
 8008f66:	d10f      	bne.n	8008f88 <__swsetup_r+0x3c>
 8008f68:	686c      	ldr	r4, [r5, #4]
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f70:	0719      	lsls	r1, r3, #28
 8008f72:	d42c      	bmi.n	8008fce <__swsetup_r+0x82>
 8008f74:	06dd      	lsls	r5, r3, #27
 8008f76:	d411      	bmi.n	8008f9c <__swsetup_r+0x50>
 8008f78:	2309      	movs	r3, #9
 8008f7a:	6033      	str	r3, [r6, #0]
 8008f7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f80:	81a3      	strh	r3, [r4, #12]
 8008f82:	f04f 30ff 	mov.w	r0, #4294967295
 8008f86:	e03e      	b.n	8009006 <__swsetup_r+0xba>
 8008f88:	4b25      	ldr	r3, [pc, #148]	; (8009020 <__swsetup_r+0xd4>)
 8008f8a:	429c      	cmp	r4, r3
 8008f8c:	d101      	bne.n	8008f92 <__swsetup_r+0x46>
 8008f8e:	68ac      	ldr	r4, [r5, #8]
 8008f90:	e7eb      	b.n	8008f6a <__swsetup_r+0x1e>
 8008f92:	4b24      	ldr	r3, [pc, #144]	; (8009024 <__swsetup_r+0xd8>)
 8008f94:	429c      	cmp	r4, r3
 8008f96:	bf08      	it	eq
 8008f98:	68ec      	ldreq	r4, [r5, #12]
 8008f9a:	e7e6      	b.n	8008f6a <__swsetup_r+0x1e>
 8008f9c:	0758      	lsls	r0, r3, #29
 8008f9e:	d512      	bpl.n	8008fc6 <__swsetup_r+0x7a>
 8008fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fa2:	b141      	cbz	r1, 8008fb6 <__swsetup_r+0x6a>
 8008fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fa8:	4299      	cmp	r1, r3
 8008faa:	d002      	beq.n	8008fb2 <__swsetup_r+0x66>
 8008fac:	4630      	mov	r0, r6
 8008fae:	f7ff fb31 	bl	8008614 <_free_r>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8008fb6:	89a3      	ldrh	r3, [r4, #12]
 8008fb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fbc:	81a3      	strh	r3, [r4, #12]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	6063      	str	r3, [r4, #4]
 8008fc2:	6923      	ldr	r3, [r4, #16]
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	f043 0308 	orr.w	r3, r3, #8
 8008fcc:	81a3      	strh	r3, [r4, #12]
 8008fce:	6923      	ldr	r3, [r4, #16]
 8008fd0:	b94b      	cbnz	r3, 8008fe6 <__swsetup_r+0x9a>
 8008fd2:	89a3      	ldrh	r3, [r4, #12]
 8008fd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fdc:	d003      	beq.n	8008fe6 <__swsetup_r+0x9a>
 8008fde:	4621      	mov	r1, r4
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f000 fa01 	bl	80093e8 <__smakebuf_r>
 8008fe6:	89a0      	ldrh	r0, [r4, #12]
 8008fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fec:	f010 0301 	ands.w	r3, r0, #1
 8008ff0:	d00a      	beq.n	8009008 <__swsetup_r+0xbc>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60a3      	str	r3, [r4, #8]
 8008ff6:	6963      	ldr	r3, [r4, #20]
 8008ff8:	425b      	negs	r3, r3
 8008ffa:	61a3      	str	r3, [r4, #24]
 8008ffc:	6923      	ldr	r3, [r4, #16]
 8008ffe:	b943      	cbnz	r3, 8009012 <__swsetup_r+0xc6>
 8009000:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009004:	d1ba      	bne.n	8008f7c <__swsetup_r+0x30>
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	0781      	lsls	r1, r0, #30
 800900a:	bf58      	it	pl
 800900c:	6963      	ldrpl	r3, [r4, #20]
 800900e:	60a3      	str	r3, [r4, #8]
 8009010:	e7f4      	b.n	8008ffc <__swsetup_r+0xb0>
 8009012:	2000      	movs	r0, #0
 8009014:	e7f7      	b.n	8009006 <__swsetup_r+0xba>
 8009016:	bf00      	nop
 8009018:	20000034 	.word	0x20000034
 800901c:	0800aecc 	.word	0x0800aecc
 8009020:	0800aeec 	.word	0x0800aeec
 8009024:	0800aeac 	.word	0x0800aeac

08009028 <__sflush_r>:
 8009028:	898a      	ldrh	r2, [r1, #12]
 800902a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800902e:	4605      	mov	r5, r0
 8009030:	0710      	lsls	r0, r2, #28
 8009032:	460c      	mov	r4, r1
 8009034:	d458      	bmi.n	80090e8 <__sflush_r+0xc0>
 8009036:	684b      	ldr	r3, [r1, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	dc05      	bgt.n	8009048 <__sflush_r+0x20>
 800903c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800903e:	2b00      	cmp	r3, #0
 8009040:	dc02      	bgt.n	8009048 <__sflush_r+0x20>
 8009042:	2000      	movs	r0, #0
 8009044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800904a:	2e00      	cmp	r6, #0
 800904c:	d0f9      	beq.n	8009042 <__sflush_r+0x1a>
 800904e:	2300      	movs	r3, #0
 8009050:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009054:	682f      	ldr	r7, [r5, #0]
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	d032      	beq.n	80090c0 <__sflush_r+0x98>
 800905a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	075a      	lsls	r2, r3, #29
 8009060:	d505      	bpl.n	800906e <__sflush_r+0x46>
 8009062:	6863      	ldr	r3, [r4, #4]
 8009064:	1ac0      	subs	r0, r0, r3
 8009066:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009068:	b10b      	cbz	r3, 800906e <__sflush_r+0x46>
 800906a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800906c:	1ac0      	subs	r0, r0, r3
 800906e:	2300      	movs	r3, #0
 8009070:	4602      	mov	r2, r0
 8009072:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009074:	6a21      	ldr	r1, [r4, #32]
 8009076:	4628      	mov	r0, r5
 8009078:	47b0      	blx	r6
 800907a:	1c43      	adds	r3, r0, #1
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	d106      	bne.n	800908e <__sflush_r+0x66>
 8009080:	6829      	ldr	r1, [r5, #0]
 8009082:	291d      	cmp	r1, #29
 8009084:	d82c      	bhi.n	80090e0 <__sflush_r+0xb8>
 8009086:	4a2a      	ldr	r2, [pc, #168]	; (8009130 <__sflush_r+0x108>)
 8009088:	40ca      	lsrs	r2, r1
 800908a:	07d6      	lsls	r6, r2, #31
 800908c:	d528      	bpl.n	80090e0 <__sflush_r+0xb8>
 800908e:	2200      	movs	r2, #0
 8009090:	6062      	str	r2, [r4, #4]
 8009092:	04d9      	lsls	r1, r3, #19
 8009094:	6922      	ldr	r2, [r4, #16]
 8009096:	6022      	str	r2, [r4, #0]
 8009098:	d504      	bpl.n	80090a4 <__sflush_r+0x7c>
 800909a:	1c42      	adds	r2, r0, #1
 800909c:	d101      	bne.n	80090a2 <__sflush_r+0x7a>
 800909e:	682b      	ldr	r3, [r5, #0]
 80090a0:	b903      	cbnz	r3, 80090a4 <__sflush_r+0x7c>
 80090a2:	6560      	str	r0, [r4, #84]	; 0x54
 80090a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090a6:	602f      	str	r7, [r5, #0]
 80090a8:	2900      	cmp	r1, #0
 80090aa:	d0ca      	beq.n	8009042 <__sflush_r+0x1a>
 80090ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090b0:	4299      	cmp	r1, r3
 80090b2:	d002      	beq.n	80090ba <__sflush_r+0x92>
 80090b4:	4628      	mov	r0, r5
 80090b6:	f7ff faad 	bl	8008614 <_free_r>
 80090ba:	2000      	movs	r0, #0
 80090bc:	6360      	str	r0, [r4, #52]	; 0x34
 80090be:	e7c1      	b.n	8009044 <__sflush_r+0x1c>
 80090c0:	6a21      	ldr	r1, [r4, #32]
 80090c2:	2301      	movs	r3, #1
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b0      	blx	r6
 80090c8:	1c41      	adds	r1, r0, #1
 80090ca:	d1c7      	bne.n	800905c <__sflush_r+0x34>
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d0c4      	beq.n	800905c <__sflush_r+0x34>
 80090d2:	2b1d      	cmp	r3, #29
 80090d4:	d001      	beq.n	80090da <__sflush_r+0xb2>
 80090d6:	2b16      	cmp	r3, #22
 80090d8:	d101      	bne.n	80090de <__sflush_r+0xb6>
 80090da:	602f      	str	r7, [r5, #0]
 80090dc:	e7b1      	b.n	8009042 <__sflush_r+0x1a>
 80090de:	89a3      	ldrh	r3, [r4, #12]
 80090e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090e4:	81a3      	strh	r3, [r4, #12]
 80090e6:	e7ad      	b.n	8009044 <__sflush_r+0x1c>
 80090e8:	690f      	ldr	r7, [r1, #16]
 80090ea:	2f00      	cmp	r7, #0
 80090ec:	d0a9      	beq.n	8009042 <__sflush_r+0x1a>
 80090ee:	0793      	lsls	r3, r2, #30
 80090f0:	680e      	ldr	r6, [r1, #0]
 80090f2:	bf08      	it	eq
 80090f4:	694b      	ldreq	r3, [r1, #20]
 80090f6:	600f      	str	r7, [r1, #0]
 80090f8:	bf18      	it	ne
 80090fa:	2300      	movne	r3, #0
 80090fc:	eba6 0807 	sub.w	r8, r6, r7
 8009100:	608b      	str	r3, [r1, #8]
 8009102:	f1b8 0f00 	cmp.w	r8, #0
 8009106:	dd9c      	ble.n	8009042 <__sflush_r+0x1a>
 8009108:	6a21      	ldr	r1, [r4, #32]
 800910a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800910c:	4643      	mov	r3, r8
 800910e:	463a      	mov	r2, r7
 8009110:	4628      	mov	r0, r5
 8009112:	47b0      	blx	r6
 8009114:	2800      	cmp	r0, #0
 8009116:	dc06      	bgt.n	8009126 <__sflush_r+0xfe>
 8009118:	89a3      	ldrh	r3, [r4, #12]
 800911a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800911e:	81a3      	strh	r3, [r4, #12]
 8009120:	f04f 30ff 	mov.w	r0, #4294967295
 8009124:	e78e      	b.n	8009044 <__sflush_r+0x1c>
 8009126:	4407      	add	r7, r0
 8009128:	eba8 0800 	sub.w	r8, r8, r0
 800912c:	e7e9      	b.n	8009102 <__sflush_r+0xda>
 800912e:	bf00      	nop
 8009130:	20400001 	.word	0x20400001

08009134 <_fflush_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	690b      	ldr	r3, [r1, #16]
 8009138:	4605      	mov	r5, r0
 800913a:	460c      	mov	r4, r1
 800913c:	b913      	cbnz	r3, 8009144 <_fflush_r+0x10>
 800913e:	2500      	movs	r5, #0
 8009140:	4628      	mov	r0, r5
 8009142:	bd38      	pop	{r3, r4, r5, pc}
 8009144:	b118      	cbz	r0, 800914e <_fflush_r+0x1a>
 8009146:	6983      	ldr	r3, [r0, #24]
 8009148:	b90b      	cbnz	r3, 800914e <_fflush_r+0x1a>
 800914a:	f000 f887 	bl	800925c <__sinit>
 800914e:	4b14      	ldr	r3, [pc, #80]	; (80091a0 <_fflush_r+0x6c>)
 8009150:	429c      	cmp	r4, r3
 8009152:	d11b      	bne.n	800918c <_fflush_r+0x58>
 8009154:	686c      	ldr	r4, [r5, #4]
 8009156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d0ef      	beq.n	800913e <_fflush_r+0xa>
 800915e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009160:	07d0      	lsls	r0, r2, #31
 8009162:	d404      	bmi.n	800916e <_fflush_r+0x3a>
 8009164:	0599      	lsls	r1, r3, #22
 8009166:	d402      	bmi.n	800916e <_fflush_r+0x3a>
 8009168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800916a:	f000 f915 	bl	8009398 <__retarget_lock_acquire_recursive>
 800916e:	4628      	mov	r0, r5
 8009170:	4621      	mov	r1, r4
 8009172:	f7ff ff59 	bl	8009028 <__sflush_r>
 8009176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009178:	07da      	lsls	r2, r3, #31
 800917a:	4605      	mov	r5, r0
 800917c:	d4e0      	bmi.n	8009140 <_fflush_r+0xc>
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	059b      	lsls	r3, r3, #22
 8009182:	d4dd      	bmi.n	8009140 <_fflush_r+0xc>
 8009184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009186:	f000 f908 	bl	800939a <__retarget_lock_release_recursive>
 800918a:	e7d9      	b.n	8009140 <_fflush_r+0xc>
 800918c:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <_fflush_r+0x70>)
 800918e:	429c      	cmp	r4, r3
 8009190:	d101      	bne.n	8009196 <_fflush_r+0x62>
 8009192:	68ac      	ldr	r4, [r5, #8]
 8009194:	e7df      	b.n	8009156 <_fflush_r+0x22>
 8009196:	4b04      	ldr	r3, [pc, #16]	; (80091a8 <_fflush_r+0x74>)
 8009198:	429c      	cmp	r4, r3
 800919a:	bf08      	it	eq
 800919c:	68ec      	ldreq	r4, [r5, #12]
 800919e:	e7da      	b.n	8009156 <_fflush_r+0x22>
 80091a0:	0800aecc 	.word	0x0800aecc
 80091a4:	0800aeec 	.word	0x0800aeec
 80091a8:	0800aeac 	.word	0x0800aeac

080091ac <std>:
 80091ac:	2300      	movs	r3, #0
 80091ae:	b510      	push	{r4, lr}
 80091b0:	4604      	mov	r4, r0
 80091b2:	e9c0 3300 	strd	r3, r3, [r0]
 80091b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091ba:	6083      	str	r3, [r0, #8]
 80091bc:	8181      	strh	r1, [r0, #12]
 80091be:	6643      	str	r3, [r0, #100]	; 0x64
 80091c0:	81c2      	strh	r2, [r0, #14]
 80091c2:	6183      	str	r3, [r0, #24]
 80091c4:	4619      	mov	r1, r3
 80091c6:	2208      	movs	r2, #8
 80091c8:	305c      	adds	r0, #92	; 0x5c
 80091ca:	f7fd fb0b 	bl	80067e4 <memset>
 80091ce:	4b05      	ldr	r3, [pc, #20]	; (80091e4 <std+0x38>)
 80091d0:	6263      	str	r3, [r4, #36]	; 0x24
 80091d2:	4b05      	ldr	r3, [pc, #20]	; (80091e8 <std+0x3c>)
 80091d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80091d6:	4b05      	ldr	r3, [pc, #20]	; (80091ec <std+0x40>)
 80091d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091da:	4b05      	ldr	r3, [pc, #20]	; (80091f0 <std+0x44>)
 80091dc:	6224      	str	r4, [r4, #32]
 80091de:	6323      	str	r3, [r4, #48]	; 0x30
 80091e0:	bd10      	pop	{r4, pc}
 80091e2:	bf00      	nop
 80091e4:	08009479 	.word	0x08009479
 80091e8:	0800949b 	.word	0x0800949b
 80091ec:	080094d3 	.word	0x080094d3
 80091f0:	080094f7 	.word	0x080094f7

080091f4 <_cleanup_r>:
 80091f4:	4901      	ldr	r1, [pc, #4]	; (80091fc <_cleanup_r+0x8>)
 80091f6:	f000 b8af 	b.w	8009358 <_fwalk_reent>
 80091fa:	bf00      	nop
 80091fc:	08009135 	.word	0x08009135

08009200 <__sfmoreglue>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	2268      	movs	r2, #104	; 0x68
 8009204:	1e4d      	subs	r5, r1, #1
 8009206:	4355      	muls	r5, r2
 8009208:	460e      	mov	r6, r1
 800920a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800920e:	f7ff fa6d 	bl	80086ec <_malloc_r>
 8009212:	4604      	mov	r4, r0
 8009214:	b140      	cbz	r0, 8009228 <__sfmoreglue+0x28>
 8009216:	2100      	movs	r1, #0
 8009218:	e9c0 1600 	strd	r1, r6, [r0]
 800921c:	300c      	adds	r0, #12
 800921e:	60a0      	str	r0, [r4, #8]
 8009220:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009224:	f7fd fade 	bl	80067e4 <memset>
 8009228:	4620      	mov	r0, r4
 800922a:	bd70      	pop	{r4, r5, r6, pc}

0800922c <__sfp_lock_acquire>:
 800922c:	4801      	ldr	r0, [pc, #4]	; (8009234 <__sfp_lock_acquire+0x8>)
 800922e:	f000 b8b3 	b.w	8009398 <__retarget_lock_acquire_recursive>
 8009232:	bf00      	nop
 8009234:	200003c1 	.word	0x200003c1

08009238 <__sfp_lock_release>:
 8009238:	4801      	ldr	r0, [pc, #4]	; (8009240 <__sfp_lock_release+0x8>)
 800923a:	f000 b8ae 	b.w	800939a <__retarget_lock_release_recursive>
 800923e:	bf00      	nop
 8009240:	200003c1 	.word	0x200003c1

08009244 <__sinit_lock_acquire>:
 8009244:	4801      	ldr	r0, [pc, #4]	; (800924c <__sinit_lock_acquire+0x8>)
 8009246:	f000 b8a7 	b.w	8009398 <__retarget_lock_acquire_recursive>
 800924a:	bf00      	nop
 800924c:	200003c2 	.word	0x200003c2

08009250 <__sinit_lock_release>:
 8009250:	4801      	ldr	r0, [pc, #4]	; (8009258 <__sinit_lock_release+0x8>)
 8009252:	f000 b8a2 	b.w	800939a <__retarget_lock_release_recursive>
 8009256:	bf00      	nop
 8009258:	200003c2 	.word	0x200003c2

0800925c <__sinit>:
 800925c:	b510      	push	{r4, lr}
 800925e:	4604      	mov	r4, r0
 8009260:	f7ff fff0 	bl	8009244 <__sinit_lock_acquire>
 8009264:	69a3      	ldr	r3, [r4, #24]
 8009266:	b11b      	cbz	r3, 8009270 <__sinit+0x14>
 8009268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800926c:	f7ff bff0 	b.w	8009250 <__sinit_lock_release>
 8009270:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009274:	6523      	str	r3, [r4, #80]	; 0x50
 8009276:	4b13      	ldr	r3, [pc, #76]	; (80092c4 <__sinit+0x68>)
 8009278:	4a13      	ldr	r2, [pc, #76]	; (80092c8 <__sinit+0x6c>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	62a2      	str	r2, [r4, #40]	; 0x28
 800927e:	42a3      	cmp	r3, r4
 8009280:	bf04      	itt	eq
 8009282:	2301      	moveq	r3, #1
 8009284:	61a3      	streq	r3, [r4, #24]
 8009286:	4620      	mov	r0, r4
 8009288:	f000 f820 	bl	80092cc <__sfp>
 800928c:	6060      	str	r0, [r4, #4]
 800928e:	4620      	mov	r0, r4
 8009290:	f000 f81c 	bl	80092cc <__sfp>
 8009294:	60a0      	str	r0, [r4, #8]
 8009296:	4620      	mov	r0, r4
 8009298:	f000 f818 	bl	80092cc <__sfp>
 800929c:	2200      	movs	r2, #0
 800929e:	60e0      	str	r0, [r4, #12]
 80092a0:	2104      	movs	r1, #4
 80092a2:	6860      	ldr	r0, [r4, #4]
 80092a4:	f7ff ff82 	bl	80091ac <std>
 80092a8:	68a0      	ldr	r0, [r4, #8]
 80092aa:	2201      	movs	r2, #1
 80092ac:	2109      	movs	r1, #9
 80092ae:	f7ff ff7d 	bl	80091ac <std>
 80092b2:	68e0      	ldr	r0, [r4, #12]
 80092b4:	2202      	movs	r2, #2
 80092b6:	2112      	movs	r1, #18
 80092b8:	f7ff ff78 	bl	80091ac <std>
 80092bc:	2301      	movs	r3, #1
 80092be:	61a3      	str	r3, [r4, #24]
 80092c0:	e7d2      	b.n	8009268 <__sinit+0xc>
 80092c2:	bf00      	nop
 80092c4:	0800ab30 	.word	0x0800ab30
 80092c8:	080091f5 	.word	0x080091f5

080092cc <__sfp>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	4607      	mov	r7, r0
 80092d0:	f7ff ffac 	bl	800922c <__sfp_lock_acquire>
 80092d4:	4b1e      	ldr	r3, [pc, #120]	; (8009350 <__sfp+0x84>)
 80092d6:	681e      	ldr	r6, [r3, #0]
 80092d8:	69b3      	ldr	r3, [r6, #24]
 80092da:	b913      	cbnz	r3, 80092e2 <__sfp+0x16>
 80092dc:	4630      	mov	r0, r6
 80092de:	f7ff ffbd 	bl	800925c <__sinit>
 80092e2:	3648      	adds	r6, #72	; 0x48
 80092e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	d503      	bpl.n	80092f4 <__sfp+0x28>
 80092ec:	6833      	ldr	r3, [r6, #0]
 80092ee:	b30b      	cbz	r3, 8009334 <__sfp+0x68>
 80092f0:	6836      	ldr	r6, [r6, #0]
 80092f2:	e7f7      	b.n	80092e4 <__sfp+0x18>
 80092f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092f8:	b9d5      	cbnz	r5, 8009330 <__sfp+0x64>
 80092fa:	4b16      	ldr	r3, [pc, #88]	; (8009354 <__sfp+0x88>)
 80092fc:	60e3      	str	r3, [r4, #12]
 80092fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009302:	6665      	str	r5, [r4, #100]	; 0x64
 8009304:	f000 f847 	bl	8009396 <__retarget_lock_init_recursive>
 8009308:	f7ff ff96 	bl	8009238 <__sfp_lock_release>
 800930c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009310:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009314:	6025      	str	r5, [r4, #0]
 8009316:	61a5      	str	r5, [r4, #24]
 8009318:	2208      	movs	r2, #8
 800931a:	4629      	mov	r1, r5
 800931c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009320:	f7fd fa60 	bl	80067e4 <memset>
 8009324:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009328:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800932c:	4620      	mov	r0, r4
 800932e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009330:	3468      	adds	r4, #104	; 0x68
 8009332:	e7d9      	b.n	80092e8 <__sfp+0x1c>
 8009334:	2104      	movs	r1, #4
 8009336:	4638      	mov	r0, r7
 8009338:	f7ff ff62 	bl	8009200 <__sfmoreglue>
 800933c:	4604      	mov	r4, r0
 800933e:	6030      	str	r0, [r6, #0]
 8009340:	2800      	cmp	r0, #0
 8009342:	d1d5      	bne.n	80092f0 <__sfp+0x24>
 8009344:	f7ff ff78 	bl	8009238 <__sfp_lock_release>
 8009348:	230c      	movs	r3, #12
 800934a:	603b      	str	r3, [r7, #0]
 800934c:	e7ee      	b.n	800932c <__sfp+0x60>
 800934e:	bf00      	nop
 8009350:	0800ab30 	.word	0x0800ab30
 8009354:	ffff0001 	.word	0xffff0001

08009358 <_fwalk_reent>:
 8009358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800935c:	4606      	mov	r6, r0
 800935e:	4688      	mov	r8, r1
 8009360:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009364:	2700      	movs	r7, #0
 8009366:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800936a:	f1b9 0901 	subs.w	r9, r9, #1
 800936e:	d505      	bpl.n	800937c <_fwalk_reent+0x24>
 8009370:	6824      	ldr	r4, [r4, #0]
 8009372:	2c00      	cmp	r4, #0
 8009374:	d1f7      	bne.n	8009366 <_fwalk_reent+0xe>
 8009376:	4638      	mov	r0, r7
 8009378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800937c:	89ab      	ldrh	r3, [r5, #12]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d907      	bls.n	8009392 <_fwalk_reent+0x3a>
 8009382:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009386:	3301      	adds	r3, #1
 8009388:	d003      	beq.n	8009392 <_fwalk_reent+0x3a>
 800938a:	4629      	mov	r1, r5
 800938c:	4630      	mov	r0, r6
 800938e:	47c0      	blx	r8
 8009390:	4307      	orrs	r7, r0
 8009392:	3568      	adds	r5, #104	; 0x68
 8009394:	e7e9      	b.n	800936a <_fwalk_reent+0x12>

08009396 <__retarget_lock_init_recursive>:
 8009396:	4770      	bx	lr

08009398 <__retarget_lock_acquire_recursive>:
 8009398:	4770      	bx	lr

0800939a <__retarget_lock_release_recursive>:
 800939a:	4770      	bx	lr

0800939c <__swhatbuf_r>:
 800939c:	b570      	push	{r4, r5, r6, lr}
 800939e:	460e      	mov	r6, r1
 80093a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a4:	2900      	cmp	r1, #0
 80093a6:	b096      	sub	sp, #88	; 0x58
 80093a8:	4614      	mov	r4, r2
 80093aa:	461d      	mov	r5, r3
 80093ac:	da08      	bge.n	80093c0 <__swhatbuf_r+0x24>
 80093ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	602a      	str	r2, [r5, #0]
 80093b6:	061a      	lsls	r2, r3, #24
 80093b8:	d410      	bmi.n	80093dc <__swhatbuf_r+0x40>
 80093ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093be:	e00e      	b.n	80093de <__swhatbuf_r+0x42>
 80093c0:	466a      	mov	r2, sp
 80093c2:	f000 f8bf 	bl	8009544 <_fstat_r>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	dbf1      	blt.n	80093ae <__swhatbuf_r+0x12>
 80093ca:	9a01      	ldr	r2, [sp, #4]
 80093cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093d4:	425a      	negs	r2, r3
 80093d6:	415a      	adcs	r2, r3
 80093d8:	602a      	str	r2, [r5, #0]
 80093da:	e7ee      	b.n	80093ba <__swhatbuf_r+0x1e>
 80093dc:	2340      	movs	r3, #64	; 0x40
 80093de:	2000      	movs	r0, #0
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	b016      	add	sp, #88	; 0x58
 80093e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080093e8 <__smakebuf_r>:
 80093e8:	898b      	ldrh	r3, [r1, #12]
 80093ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093ec:	079d      	lsls	r5, r3, #30
 80093ee:	4606      	mov	r6, r0
 80093f0:	460c      	mov	r4, r1
 80093f2:	d507      	bpl.n	8009404 <__smakebuf_r+0x1c>
 80093f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	6123      	str	r3, [r4, #16]
 80093fc:	2301      	movs	r3, #1
 80093fe:	6163      	str	r3, [r4, #20]
 8009400:	b002      	add	sp, #8
 8009402:	bd70      	pop	{r4, r5, r6, pc}
 8009404:	ab01      	add	r3, sp, #4
 8009406:	466a      	mov	r2, sp
 8009408:	f7ff ffc8 	bl	800939c <__swhatbuf_r>
 800940c:	9900      	ldr	r1, [sp, #0]
 800940e:	4605      	mov	r5, r0
 8009410:	4630      	mov	r0, r6
 8009412:	f7ff f96b 	bl	80086ec <_malloc_r>
 8009416:	b948      	cbnz	r0, 800942c <__smakebuf_r+0x44>
 8009418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941c:	059a      	lsls	r2, r3, #22
 800941e:	d4ef      	bmi.n	8009400 <__smakebuf_r+0x18>
 8009420:	f023 0303 	bic.w	r3, r3, #3
 8009424:	f043 0302 	orr.w	r3, r3, #2
 8009428:	81a3      	strh	r3, [r4, #12]
 800942a:	e7e3      	b.n	80093f4 <__smakebuf_r+0xc>
 800942c:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <__smakebuf_r+0x7c>)
 800942e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	6020      	str	r0, [r4, #0]
 8009434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009438:	81a3      	strh	r3, [r4, #12]
 800943a:	9b00      	ldr	r3, [sp, #0]
 800943c:	6163      	str	r3, [r4, #20]
 800943e:	9b01      	ldr	r3, [sp, #4]
 8009440:	6120      	str	r0, [r4, #16]
 8009442:	b15b      	cbz	r3, 800945c <__smakebuf_r+0x74>
 8009444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009448:	4630      	mov	r0, r6
 800944a:	f000 f88d 	bl	8009568 <_isatty_r>
 800944e:	b128      	cbz	r0, 800945c <__smakebuf_r+0x74>
 8009450:	89a3      	ldrh	r3, [r4, #12]
 8009452:	f023 0303 	bic.w	r3, r3, #3
 8009456:	f043 0301 	orr.w	r3, r3, #1
 800945a:	81a3      	strh	r3, [r4, #12]
 800945c:	89a0      	ldrh	r0, [r4, #12]
 800945e:	4305      	orrs	r5, r0
 8009460:	81a5      	strh	r5, [r4, #12]
 8009462:	e7cd      	b.n	8009400 <__smakebuf_r+0x18>
 8009464:	080091f5 	.word	0x080091f5

08009468 <_malloc_usable_size_r>:
 8009468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800946c:	1f18      	subs	r0, r3, #4
 800946e:	2b00      	cmp	r3, #0
 8009470:	bfbc      	itt	lt
 8009472:	580b      	ldrlt	r3, [r1, r0]
 8009474:	18c0      	addlt	r0, r0, r3
 8009476:	4770      	bx	lr

08009478 <__sread>:
 8009478:	b510      	push	{r4, lr}
 800947a:	460c      	mov	r4, r1
 800947c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009480:	f000 f894 	bl	80095ac <_read_r>
 8009484:	2800      	cmp	r0, #0
 8009486:	bfab      	itete	ge
 8009488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800948a:	89a3      	ldrhlt	r3, [r4, #12]
 800948c:	181b      	addge	r3, r3, r0
 800948e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009492:	bfac      	ite	ge
 8009494:	6563      	strge	r3, [r4, #84]	; 0x54
 8009496:	81a3      	strhlt	r3, [r4, #12]
 8009498:	bd10      	pop	{r4, pc}

0800949a <__swrite>:
 800949a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949e:	461f      	mov	r7, r3
 80094a0:	898b      	ldrh	r3, [r1, #12]
 80094a2:	05db      	lsls	r3, r3, #23
 80094a4:	4605      	mov	r5, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	4616      	mov	r6, r2
 80094aa:	d505      	bpl.n	80094b8 <__swrite+0x1e>
 80094ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b0:	2302      	movs	r3, #2
 80094b2:	2200      	movs	r2, #0
 80094b4:	f000 f868 	bl	8009588 <_lseek_r>
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094c2:	81a3      	strh	r3, [r4, #12]
 80094c4:	4632      	mov	r2, r6
 80094c6:	463b      	mov	r3, r7
 80094c8:	4628      	mov	r0, r5
 80094ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094ce:	f000 b817 	b.w	8009500 <_write_r>

080094d2 <__sseek>:
 80094d2:	b510      	push	{r4, lr}
 80094d4:	460c      	mov	r4, r1
 80094d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094da:	f000 f855 	bl	8009588 <_lseek_r>
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	bf15      	itete	ne
 80094e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80094e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094ee:	81a3      	strheq	r3, [r4, #12]
 80094f0:	bf18      	it	ne
 80094f2:	81a3      	strhne	r3, [r4, #12]
 80094f4:	bd10      	pop	{r4, pc}

080094f6 <__sclose>:
 80094f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fa:	f000 b813 	b.w	8009524 <_close_r>
	...

08009500 <_write_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4d07      	ldr	r5, [pc, #28]	; (8009520 <_write_r+0x20>)
 8009504:	4604      	mov	r4, r0
 8009506:	4608      	mov	r0, r1
 8009508:	4611      	mov	r1, r2
 800950a:	2200      	movs	r2, #0
 800950c:	602a      	str	r2, [r5, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	f7f9 fa99 	bl	8002a46 <_write>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_write_r+0x1e>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_write_r+0x1e>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	200003bc 	.word	0x200003bc

08009524 <_close_r>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	4d06      	ldr	r5, [pc, #24]	; (8009540 <_close_r+0x1c>)
 8009528:	2300      	movs	r3, #0
 800952a:	4604      	mov	r4, r0
 800952c:	4608      	mov	r0, r1
 800952e:	602b      	str	r3, [r5, #0]
 8009530:	f7f9 faa5 	bl	8002a7e <_close>
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d102      	bne.n	800953e <_close_r+0x1a>
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	b103      	cbz	r3, 800953e <_close_r+0x1a>
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	200003bc 	.word	0x200003bc

08009544 <_fstat_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4d07      	ldr	r5, [pc, #28]	; (8009564 <_fstat_r+0x20>)
 8009548:	2300      	movs	r3, #0
 800954a:	4604      	mov	r4, r0
 800954c:	4608      	mov	r0, r1
 800954e:	4611      	mov	r1, r2
 8009550:	602b      	str	r3, [r5, #0]
 8009552:	f7f9 faa0 	bl	8002a96 <_fstat>
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	d102      	bne.n	8009560 <_fstat_r+0x1c>
 800955a:	682b      	ldr	r3, [r5, #0]
 800955c:	b103      	cbz	r3, 8009560 <_fstat_r+0x1c>
 800955e:	6023      	str	r3, [r4, #0]
 8009560:	bd38      	pop	{r3, r4, r5, pc}
 8009562:	bf00      	nop
 8009564:	200003bc 	.word	0x200003bc

08009568 <_isatty_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	4d06      	ldr	r5, [pc, #24]	; (8009584 <_isatty_r+0x1c>)
 800956c:	2300      	movs	r3, #0
 800956e:	4604      	mov	r4, r0
 8009570:	4608      	mov	r0, r1
 8009572:	602b      	str	r3, [r5, #0]
 8009574:	f7f9 fa9f 	bl	8002ab6 <_isatty>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	d102      	bne.n	8009582 <_isatty_r+0x1a>
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	b103      	cbz	r3, 8009582 <_isatty_r+0x1a>
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	bd38      	pop	{r3, r4, r5, pc}
 8009584:	200003bc 	.word	0x200003bc

08009588 <_lseek_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d07      	ldr	r5, [pc, #28]	; (80095a8 <_lseek_r+0x20>)
 800958c:	4604      	mov	r4, r0
 800958e:	4608      	mov	r0, r1
 8009590:	4611      	mov	r1, r2
 8009592:	2200      	movs	r2, #0
 8009594:	602a      	str	r2, [r5, #0]
 8009596:	461a      	mov	r2, r3
 8009598:	f7f9 fa98 	bl	8002acc <_lseek>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d102      	bne.n	80095a6 <_lseek_r+0x1e>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	b103      	cbz	r3, 80095a6 <_lseek_r+0x1e>
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	200003bc 	.word	0x200003bc

080095ac <_read_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4d07      	ldr	r5, [pc, #28]	; (80095cc <_read_r+0x20>)
 80095b0:	4604      	mov	r4, r0
 80095b2:	4608      	mov	r0, r1
 80095b4:	4611      	mov	r1, r2
 80095b6:	2200      	movs	r2, #0
 80095b8:	602a      	str	r2, [r5, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	f7f9 fa26 	bl	8002a0c <_read>
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	d102      	bne.n	80095ca <_read_r+0x1e>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	b103      	cbz	r3, 80095ca <_read_r+0x1e>
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	200003bc 	.word	0x200003bc

080095d0 <_init>:
 80095d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d2:	bf00      	nop
 80095d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d6:	bc08      	pop	{r3}
 80095d8:	469e      	mov	lr, r3
 80095da:	4770      	bx	lr

080095dc <_fini>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	bf00      	nop
 80095e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e2:	bc08      	pop	{r3}
 80095e4:	469e      	mov	lr, r3
 80095e6:	4770      	bx	lr
