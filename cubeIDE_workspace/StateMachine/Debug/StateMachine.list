
StateMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001904  080093b8  080093b8  000193b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acbc  0800acbc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800acbc  0800acbc  0001acbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acc4  0800acc4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acc4  0800acc4  0001acc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acc8  0800acc8  0001acc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800accc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001f4  0800aec0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  0800aec0  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016283  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c72  00000000  00000000  000364a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00039120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0003a458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e9e  00000000  00000000  0003b688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171ec  00000000  00000000  00062526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e32ca  00000000  00000000  00079712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c9dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063e0  00000000  00000000  0015ca2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080093a0 	.word	0x080093a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	080093a0 	.word	0x080093a0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <_ZN7SSD1305C1EP17I2C_HandleTypeDefhhh>:
 *      Author: SNA1BP
 */

#include "SSD1305.hpp"

SSD1305::SSD1305(
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	461a      	mov	r2, r3
 8000efa:	460b      	mov	r3, r1
 8000efc:	71fb      	strb	r3, [r7, #7]
 8000efe:	4613      	mov	r3, r2
 8000f00:	71bb      	strb	r3, [r7, #6]
		I2C_HandleTypeDef* hi2c_p,
		uint8_t address_p,
		uint8_t width_p,
		uint8_t height_p)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2204      	movs	r2, #4
 8000f06:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
{
	this->hi2c = hi2c_p;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	601a      	str	r2, [r3, #0]
	this->address = address_p;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	79fa      	ldrb	r2, [r7, #7]
 8000f14:	711a      	strb	r2, [r3, #4]
	this->width = width_p;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	79ba      	ldrb	r2, [r7, #6]
 8000f1a:	715a      	strb	r2, [r3, #5]
	this->height = height_p;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	7e3a      	ldrb	r2, [r7, #24]
 8000f20:	719a      	strb	r2, [r3, #6]
}
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_ZN7SSD13054InitEv>:

bool SSD1305::Init()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	6078      	str	r0, [r7, #4]


    int status = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]

	status += SetDisplayON_OFF(DisplayOffSleepMode);
 8000f3c:	21ae      	movs	r1, #174	; 0xae
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 fbe1 	bl	8001706 <_ZN7SSD130516SetDisplayON_OFFE11DisplayMode>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
	status += SetMultiplexRatio(height-1);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	799b      	ldrb	r3, [r3, #6]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	4619      	mov	r1, r3
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 fbba 	bl	80016d2 <_ZN7SSD130517SetMultiplexRatioEh>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
	status += SetDisplayOffset(0);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 fbef 	bl	800174e <_ZN7SSD130516SetDisplayOffsetEh>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
	status += SetDisplayStartLine(0);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 fb08 	bl	8001592 <_ZN7SSD130519SetDisplayStartLineEh>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4413      	add	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
	status += SetColorAndPowerMode(monochromeMode, normalPowerMode);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 fbf6 	bl	8001782 <_ZN7SSD130520SetColorAndPowerModeE9ColorMode9PowerMode>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]
	status += SetMemoryAddressingMode(horizontal);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 fa98 	bl	80014d8 <_ZN7SSD130523SetMemoryAddressingModeE20MemoryAddressingMode>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
	status += SetSegmentReMap(columnAddress131toSEG0);
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 fb53 	bl	8001660 <_ZN7SSD130515SetSegmentReMapE12SegmentRemap>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]
	status += SetLUT(0x3F, 0x3F, 0x3F, 0x3F);
 8000fc4:	233f      	movs	r3, #63	; 0x3f
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	233f      	movs	r3, #63	; 0x3f
 8000fca:	223f      	movs	r2, #63	; 0x3f
 8000fcc:	213f      	movs	r1, #63	; 0x3f
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 faf9 	bl	80015c6 <_ZN7SSD13056SetLUTEhhhh>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
	status += SetPrechargePeriod(13, 2);
 8000fde:	2202      	movs	r2, #2
 8000fe0:	210d      	movs	r1, #13
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 fbeb 	bl	80017be <_ZN7SSD130518SetPrechargePeriodEhh>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
	status += SetDisplayOffset(0);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 fbaa 	bl	800174e <_ZN7SSD130516SetDisplayOffsetEh>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4413      	add	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
	status += SetComOutputScanDirection(remappedMode);
 8001004:	21c8      	movs	r1, #200	; 0xc8
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 fb8f 	bl	800172a <_ZN7SSD130525SetComOutputScanDirectionE22ComOutputScanDirection>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
	status += SetNormalInverse(normal);
 8001016:	21a6      	movs	r1, #166	; 0xa6
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 fb48 	bl	80016ae <_ZN7SSD130516SetNormalInverseE18DisplayInverseMode>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4413      	add	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]

    status += SetColumnAddress(v_offset, (width - 1) + v_offset);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 1211 	ldrb.w	r1, [r3, #529]	; 0x211
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	795a      	ldrb	r2, [r3, #5]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001038:	4413      	add	r3, r2
 800103a:	b2db      	uxtb	r3, r3
 800103c:	3b01      	subs	r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 fa5d 	bl	8001502 <_ZN7SSD130516SetColumnAddressEhh>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
	status += SetPageAddress(0, 3);
 8001052:	2203      	movs	r2, #3
 8001054:	2100      	movs	r1, #0
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 fa77 	bl	800154a <_ZN7SSD130514SetPageAddressEhh>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]

	status += Fill(Black);
 8001066:	2100      	movs	r1, #0
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 f88d 	bl	8001188 <_ZN7SSD13054FillE13SSD1305_COLOR>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4413      	add	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]

    status += SetDisplayON_OFF(DisplayOnNormalMode);
 8001078:	21af      	movs	r1, #175	; 0xaf
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 fb43 	bl	8001706 <_ZN7SSD130516SetDisplayON_OFFE11DisplayMode>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
    status += EntireDisplayON(ResumeToRAMContent);
 800108a:	21a4      	movs	r1, #164	; 0xa4
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 fafc 	bl	800168a <_ZN7SSD130515EntireDisplayONE13DisplayONMode>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <_ZN7SSD13054InitEv+0x176>
        return false;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <_ZN7SSD13054InitEv+0x178>
    }

    return true;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <_ZN7SSD13059GetHeightEv>:

uint8_t SSD1305::GetHeight(){return height;}
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	799b      	ldrb	r3, [r3, #6]
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <_ZN7SSD130519WriteBitmapToScreenEv>:
uint8_t SSD1305::GetWidth(){return width;}

HAL_StatusTypeDef SSD1305::WriteBitmapToScreen()
{
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af04      	add	r7, sp, #16
 80010ce:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	size_t size = sizeof(bitmapBuffer);
 80010d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d4:	60fb      	str	r3, [r7, #12]

    status =  SetMemoryAddressingMode(horizontal);
 80010d6:	2100      	movs	r1, #0
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f9fd 	bl	80014d8 <_ZN7SSD130523SetMemoryAddressingModeE20MemoryAddressingMode>
 80010de:	4603      	mov	r3, r0
 80010e0:	72fb      	strb	r3, [r7, #11]

    if (status != HAL_OK)
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <_ZN7SSD130519WriteBitmapToScreenEv+0x24>
    {
    	return status;
 80010e8:	7afb      	ldrb	r3, [r7, #11]
 80010ea:	e01b      	b.n	8001124 <_ZN7SSD130519WriteBitmapToScreenEv+0x5c>
    }
    else
    {
		return HAL_I2C_Mem_Write(hi2c, address<<1, DATA_ADDRESS, 1, bitmapBuffer, size, size*10);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681c      	ldr	r4, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	791b      	ldrb	r3, [r3, #4]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	b29d      	uxth	r5, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f103 0111 	add.w	r1, r3, #17
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	b298      	uxth	r0, r3
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	9001      	str	r0, [sp, #4]
 8001112:	9100      	str	r1, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	2240      	movs	r2, #64	; 0x40
 8001118:	4629      	mov	r1, r5
 800111a:	4620      	mov	r0, r4
 800111c:	f003 f9d4 	bl	80044c8 <HAL_I2C_Mem_Write>
 8001120:	4603      	mov	r3, r0
 8001122:	bf00      	nop
    }
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bdb0      	pop	{r4, r5, r7, pc}

0800112c <_ZN7SSD130516FillBitmapBufferE13SSD1305_COLOR>:
		return HAL_I2C_Mem_Write(hi2c, address<<1, DATA_ADDRESS, 1, bitmap, size, size*10);
    }
}

void SSD1305::FillBitmapBuffer(SSD1305_COLOR color_p)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
	uint8_t data = (color_p == Black) ? 0x00 : 0xFF;
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <_ZN7SSD130516FillBitmapBufferE13SSD1305_COLOR+0x16>
 800113e:	2300      	movs	r3, #0
 8001140:	e000      	b.n	8001144 <_ZN7SSD130516FillBitmapBufferE13SSD1305_COLOR+0x18>
 8001142:	23ff      	movs	r3, #255	; 0xff
 8001144:	72fb      	strb	r3, [r7, #11]

	for(int i = 0; i<(width * height) / 8; i++)
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	795b      	ldrb	r3, [r3, #5]
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	799b      	ldrb	r3, [r3, #6]
 8001154:	fb02 f303 	mul.w	r3, r2, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	da00      	bge.n	800115e <_ZN7SSD130516FillBitmapBufferE13SSD1305_COLOR+0x32>
 800115c:	3307      	adds	r3, #7
 800115e:	10db      	asrs	r3, r3, #3
 8001160:	461a      	mov	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4293      	cmp	r3, r2
 8001166:	da09      	bge.n	800117c <_ZN7SSD130516FillBitmapBufferE13SSD1305_COLOR+0x50>
	{
		bitmapBuffer[i] = data;
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	3311      	adds	r3, #17
 8001170:	7afa      	ldrb	r2, [r7, #11]
 8001172:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<(width * height) / 8; i++)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3301      	adds	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	e7e6      	b.n	800114a <_ZN7SSD130516FillBitmapBufferE13SSD1305_COLOR+0x1e>
	}
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <_ZN7SSD13054FillE13SSD1305_COLOR>:

HAL_StatusTypeDef SSD1305::Fill(SSD1305_COLOR color_p)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af04      	add	r7, sp, #16
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;
	status = EnterReadModifyWrite();
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 fb3a 	bl	800180e <_ZN7SSD130520EnterReadModifyWriteEv>
 800119a:	4603      	mov	r3, r0
 800119c:	72fb      	strb	r3, [r7, #11]

    if (status != HAL_OK)
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <_ZN7SSD13054FillE13SSD1305_COLOR+0x20>
    {
    	return status;
 80011a4:	7afb      	ldrb	r3, [r7, #11]
 80011a6:	e046      	b.n	8001236 <_ZN7SSD13054FillE13SSD1305_COLOR+0xae>
    }
    else
    {
		uint8_t data = (color_p == Black) ? 0x00 : 0xFF;
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <_ZN7SSD13054FillE13SSD1305_COLOR+0x2a>
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <_ZN7SSD13054FillE13SSD1305_COLOR+0x2c>
 80011b2:	23ff      	movs	r3, #255	; 0xff
 80011b4:	72bb      	strb	r3, [r7, #10]

		for(int i = 0; i<(width * height) / 8; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	795b      	ldrb	r3, [r3, #5]
 80011be:	461a      	mov	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	799b      	ldrb	r3, [r3, #6]
 80011c4:	fb02 f303 	mul.w	r3, r2, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da00      	bge.n	80011ce <_ZN7SSD13054FillE13SSD1305_COLOR+0x46>
 80011cc:	3307      	adds	r3, #7
 80011ce:	10db      	asrs	r3, r3, #3
 80011d0:	461a      	mov	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4293      	cmp	r3, r2
 80011d6:	da23      	bge.n	8001220 <_ZN7SSD13054FillE13SSD1305_COLOR+0x98>
		{
			bitmapBuffer[i] = data;
 80011d8:	7ab9      	ldrb	r1, [r7, #10]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	3311      	adds	r3, #17
 80011e2:	460a      	mov	r2, r1
 80011e4:	701a      	strb	r2, [r3, #0]
			status = HAL_I2C_Mem_Write(hi2c, address<<1, DATA_ADDRESS, 1, &data, 1, 10);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	791b      	ldrb	r3, [r3, #4]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	b299      	uxth	r1, r3
 80011f4:	230a      	movs	r3, #10
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	2301      	movs	r3, #1
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	f107 030a 	add.w	r3, r7, #10
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	2240      	movs	r2, #64	; 0x40
 8001206:	f003 f95f 	bl	80044c8 <HAL_I2C_Mem_Write>
 800120a:	4603      	mov	r3, r0
 800120c:	72fb      	strb	r3, [r7, #11]
		    if (status != HAL_OK)
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <_ZN7SSD13054FillE13SSD1305_COLOR+0x90>
		    {
		    	return status;
 8001214:	7afb      	ldrb	r3, [r7, #11]
 8001216:	e00e      	b.n	8001236 <_ZN7SSD13054FillE13SSD1305_COLOR+0xae>
		for(int i = 0; i<(width * height) / 8; i++)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3301      	adds	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	e7cc      	b.n	80011ba <_ZN7SSD13054FillE13SSD1305_COLOR+0x32>
		    }
		}
    }

	status = ExitReadModifyWrite();
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fb04 	bl	800182e <_ZN7SSD130519ExitReadModifyWriteEv>
 8001226:	4603      	mov	r3, r0
 8001228:	72fb      	strb	r3, [r7, #11]

    if (status != HAL_OK)
 800122a:	7afb      	ldrb	r3, [r7, #11]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <_ZN7SSD13054FillE13SSD1305_COLOR+0xac>
    {
    	return status;
 8001230:	7afb      	ldrb	r3, [r7, #11]
 8001232:	e000      	b.n	8001236 <_ZN7SSD13054FillE13SSD1305_COLOR+0xae>
    }
	return status;
 8001234:	7afb      	ldrb	r3, [r7, #11]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR>:

//this method is based on the method void ssd1306_DrawPixel
bool SSD1305::DrawPixel(uint8_t x, uint8_t y, SSD1305_COLOR color_p)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	4608      	mov	r0, r1
 8001248:	4611      	mov	r1, r2
 800124a:	461a      	mov	r2, r3
 800124c:	4603      	mov	r3, r0
 800124e:	70fb      	strb	r3, [r7, #3]
 8001250:	460b      	mov	r3, r1
 8001252:	70bb      	strb	r3, [r7, #2]
 8001254:	4613      	mov	r3, r2
 8001256:	707b      	strb	r3, [r7, #1]
	if (x >= width || y >= height)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	795b      	ldrb	r3, [r3, #5]
 800125c:	78fa      	ldrb	r2, [r7, #3]
 800125e:	429a      	cmp	r2, r3
 8001260:	d204      	bcs.n	800126c <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR+0x2e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	799b      	ldrb	r3, [r3, #6]
 8001266:	78ba      	ldrb	r2, [r7, #2]
 8001268:	429a      	cmp	r2, r3
 800126a:	d301      	bcc.n	8001270 <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR+0x32>
	{
		// Don't write outside the buffer
		return 0;
 800126c:	2300      	movs	r3, #0
 800126e:	e04a      	b.n	8001306 <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR+0xc8>
	}

	// Draw in the correct color
	if (color_p == White)
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d122      	bne.n	80012bc <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR+0x7e>
	{
		bitmapBuffer[x + (y / 8) * width] |= 1 << (y % 8);
 8001276:	78fa      	ldrb	r2, [r7, #3]
 8001278:	78bb      	ldrb	r3, [r7, #2]
 800127a:	08db      	lsrs	r3, r3, #3
 800127c:	b2d8      	uxtb	r0, r3
 800127e:	4601      	mov	r1, r0
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	795b      	ldrb	r3, [r3, #5]
 8001284:	fb01 f303 	mul.w	r3, r1, r3
 8001288:	4413      	add	r3, r2
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	7c5b      	ldrb	r3, [r3, #17]
 8001290:	b25a      	sxtb	r2, r3
 8001292:	78bb      	ldrb	r3, [r7, #2]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	2101      	movs	r1, #1
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b259      	sxtb	r1, r3
 80012a4:	78fa      	ldrb	r2, [r7, #3]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	795b      	ldrb	r3, [r3, #5]
 80012aa:	fb00 f303 	mul.w	r3, r0, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	b2c9      	uxtb	r1, r1
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	460a      	mov	r2, r1
 80012b8:	745a      	strb	r2, [r3, #17]
 80012ba:	e023      	b.n	8001304 <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR+0xc6>
	}
	else
	{
		bitmapBuffer[x + (y / 8) * width] &= ~(1 << (y % 8));
 80012bc:	78fa      	ldrb	r2, [r7, #3]
 80012be:	78bb      	ldrb	r3, [r7, #2]
 80012c0:	08db      	lsrs	r3, r3, #3
 80012c2:	b2d8      	uxtb	r0, r3
 80012c4:	4601      	mov	r1, r0
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	795b      	ldrb	r3, [r3, #5]
 80012ca:	fb01 f303 	mul.w	r3, r1, r3
 80012ce:	4413      	add	r3, r2
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	7c5b      	ldrb	r3, [r3, #17]
 80012d6:	b25a      	sxtb	r2, r3
 80012d8:	78bb      	ldrb	r3, [r7, #2]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	2101      	movs	r1, #1
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	4013      	ands	r3, r2
 80012ec:	b259      	sxtb	r1, r3
 80012ee:	78fa      	ldrb	r2, [r7, #3]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	795b      	ldrb	r3, [r3, #5]
 80012f4:	fb00 f303 	mul.w	r3, r0, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	b2c9      	uxtb	r1, r1
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	460a      	mov	r2, r1
 8001302:	745a      	strb	r2, [r3, #17]
	}

	return 1;
 8001304:	2301      	movs	r3, #1
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR>:

//this method is based on the method ssd1306_WriteChar
char SSD1305::WriteChar(char ch, FontDef Font, SSD1305_COLOR color)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b088      	sub	sp, #32
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	4608      	mov	r0, r1
 800131c:	4639      	mov	r1, r7
 800131e:	e881 000c 	stmia.w	r1, {r2, r3}
 8001322:	4603      	mov	r3, r0
 8001324:	72fb      	strb	r3, [r7, #11]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (width < (currentX + Font.FontWidth) ||
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	795b      	ldrb	r3, [r3, #5]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	891b      	ldrh	r3, [r3, #8]
 8001330:	4619      	mov	r1, r3
 8001332:	783b      	ldrb	r3, [r7, #0]
 8001334:	440b      	add	r3, r1
 8001336:	429a      	cmp	r2, r3
 8001338:	db09      	blt.n	800134e <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0x3c>
        height < (currentY + Font.FontHeight))
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	799b      	ldrb	r3, [r3, #6]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	895b      	ldrh	r3, [r3, #10]
 8001344:	4619      	mov	r1, r3
 8001346:	787b      	ldrb	r3, [r7, #1]
 8001348:	440b      	add	r3, r1
    if (width < (currentX + Font.FontWidth) ||
 800134a:	429a      	cmp	r2, r3
 800134c:	da01      	bge.n	8001352 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0x40>
    {
        // Not enough space on current line
        return 0;
 800134e:	2300      	movs	r3, #0
 8001350:	e05f      	b.n	8001412 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0x100>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
 8001356:	787b      	ldrb	r3, [r7, #1]
 8001358:	461a      	mov	r2, r3
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	4293      	cmp	r3, r2
 800135e:	d24f      	bcs.n	8001400 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0xee>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	7afb      	ldrb	r3, [r7, #11]
 8001364:	3b20      	subs	r3, #32
 8001366:	7879      	ldrb	r1, [r7, #1]
 8001368:	fb01 f303 	mul.w	r3, r1, r3
 800136c:	4619      	mov	r1, r3
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	440b      	add	r3, r1
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	783b      	ldrb	r3, [r7, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	4293      	cmp	r3, r2
 8001386:	d237      	bcs.n	80013f8 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0xe6>
        {
            if ((b << j) & 0x8000)
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d013      	beq.n	80013c0 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0xae>
            {
            	DrawPixel(currentX + j, (currentY + i), color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	891b      	ldrh	r3, [r3, #8]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	b2d9      	uxtb	r1, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	895b      	ldrh	r3, [r3, #10]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4413      	add	r3, r2
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f7ff ff40 	bl	800123e <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR>
 80013be:	e017      	b.n	80013f0 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0xde>
            }
            else
            {
            	DrawPixel(currentX + j, (currentY + i), (SSD1305_COLOR)!color);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	891b      	ldrh	r3, [r3, #8]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4413      	add	r3, r2
 80013cc:	b2d9      	uxtb	r1, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	895b      	ldrh	r3, [r3, #10]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	4413      	add	r3, r2
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf0c      	ite	eq
 80013e4:	2301      	moveq	r3, #1
 80013e6:	2300      	movne	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f7ff ff27 	bl	800123e <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR>
        for (j = 0; j < Font.FontWidth; j++)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	3301      	adds	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	e7c2      	b.n	800137e <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0x6c>
    for (i = 0; i < Font.FontHeight; i++)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	3301      	adds	r3, #1
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	e7aa      	b.n	8001356 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR+0x44>
            }
        }
    }

    // The current space is now taken
    currentX += Font.FontWidth;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	891a      	ldrh	r2, [r3, #8]
 8001404:	783b      	ldrb	r3, [r7, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	4413      	add	r3, r2
 800140a:	b29a      	uxth	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	811a      	strh	r2, [r3, #8]

    // Return written char for validation
    return ch;
 8001410:	7afb      	ldrb	r3, [r7, #11]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>:

//this method is based on the method ssd1306_WriteString
bool SSD1305::WriteString(const char* str, FontDef Font, SSD1305_COLOR color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af02      	add	r7, sp, #8
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4639      	mov	r1, r7
 8001426:	e881 000c 	stmia.w	r1, {r2, r3}
    // Write until null-byte
    while (*str)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d019      	beq.n	8001466 <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR+0x4c>
    {
        if (WriteChar(*str, Font, color) != *str)
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	7819      	ldrb	r1, [r3, #0]
 8001436:	7e3b      	ldrb	r3, [r7, #24]
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	463b      	mov	r3, r7
 800143c:	cb0c      	ldmia	r3, {r2, r3}
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f7ff ff67 	bl	8001312 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR>
 8001444:	4603      	mov	r3, r0
 8001446:	461a      	mov	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	bf14      	ite	ne
 8001450:	2301      	movne	r3, #1
 8001452:	2300      	moveq	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR+0x44>
        {
            // Char could not be written
            return 0;
 800145a:	2300      	movs	r3, #0
 800145c:	e004      	b.n	8001468 <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR+0x4e>
        }

        // Next char
        str++;
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3301      	adds	r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
    while (*str)
 8001464:	e7e1      	b.n	800142a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR+0x10>
    }

    // Everything ok
    return 1;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <_ZN7SSD13059SetCursorEhh>:

void SSD1305::SetCursor(uint8_t x, uint8_t y)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
 800147c:	4613      	mov	r3, r2
 800147e:	70bb      	strb	r3, [r7, #2]
	currentX = x;
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	b29a      	uxth	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	811a      	strh	r2, [r3, #8]
	currentY = y;
 8001488:	78bb      	ldrb	r3, [r7, #2]
 800148a:	b29a      	uxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	815a      	strh	r2, [r3, #10]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_ZN7SSD130511SendCommandEh>:
////REALISE THE METHODS OF THE IC////
/////////////////////////////////////


HAL_StatusTypeDef SSD1305::SendCommand(uint8_t commandSize)
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b087      	sub	sp, #28
 80014a0:	af04      	add	r7, sp, #16
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Mem_Write(hi2c, address<<1, COMMAND_ADDRESS, 1, commandBuffer, commandSize, 10);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	791b      	ldrb	r3, [r3, #4]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	b299      	uxth	r1, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	330c      	adds	r3, #12
 80014ba:	78fa      	ldrb	r2, [r7, #3]
 80014bc:	b292      	uxth	r2, r2
 80014be:	240a      	movs	r4, #10
 80014c0:	9402      	str	r4, [sp, #8]
 80014c2:	9201      	str	r2, [sp, #4]
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2301      	movs	r3, #1
 80014c8:	2200      	movs	r2, #0
 80014ca:	f002 fffd 	bl	80044c8 <HAL_I2C_Mem_Write>
 80014ce:	4603      	mov	r3, r0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}

080014d8 <_ZN7SSD130523SetMemoryAddressingModeE20MemoryAddressingMode>:
	commandBuffer[0] = SSD1305_SET_HIGHER_COLUMN | startAddress_p;
	return SendCommand(1);
}

HAL_StatusTypeDef SSD1305::SetMemoryAddressingMode(MemoryAddressingMode mode_p)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = SSD1305_MEMORY_ADDR_MODE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2220      	movs	r2, #32
 80014e8:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = mode_p;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	78fa      	ldrb	r2, [r7, #3]
 80014ee:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 80014f0:	2102      	movs	r1, #2
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffd2 	bl	800149c <_ZN7SSD130511SendCommandEh>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_ZN7SSD130516SetColumnAddressEhh>:

HAL_StatusTypeDef SSD1305::SetColumnAddress(uint8_t startAddres_p, uint8_t endAddres_p)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	460b      	mov	r3, r1
 800150c:	70fb      	strb	r3, [r7, #3]
 800150e:	4613      	mov	r3, r2
 8001510:	70bb      	strb	r3, [r7, #2]
	if(startAddres_p > 131)
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	2b83      	cmp	r3, #131	; 0x83
 8001516:	d901      	bls.n	800151c <_ZN7SSD130516SetColumnAddressEhh+0x1a>
	{
		startAddres_p = 130;
 8001518:	2382      	movs	r3, #130	; 0x82
 800151a:	70fb      	strb	r3, [r7, #3]
	}
	if(endAddres_p > 131)
 800151c:	78bb      	ldrb	r3, [r7, #2]
 800151e:	2b83      	cmp	r3, #131	; 0x83
 8001520:	d901      	bls.n	8001526 <_ZN7SSD130516SetColumnAddressEhh+0x24>
	{
		endAddres_p =  131;
 8001522:	2383      	movs	r3, #131	; 0x83
 8001524:	70bb      	strb	r3, [r7, #2]
	}

	commandBuffer[0] = SSD1305_SET_COLUMN_ADDR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2221      	movs	r2, #33	; 0x21
 800152a:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = startAddres_p;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	78fa      	ldrb	r2, [r7, #3]
 8001530:	735a      	strb	r2, [r3, #13]
	commandBuffer[2] = endAddres_p;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	78ba      	ldrb	r2, [r7, #2]
 8001536:	739a      	strb	r2, [r3, #14]

	return SendCommand(3);
 8001538:	2103      	movs	r1, #3
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffae 	bl	800149c <_ZN7SSD130511SendCommandEh>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_ZN7SSD130514SetPageAddressEhh>:

HAL_StatusTypeDef SSD1305::SetPageAddress(uint8_t startAddres_p, uint8_t endAddres_p)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	460b      	mov	r3, r1
 8001554:	70fb      	strb	r3, [r7, #3]
 8001556:	4613      	mov	r3, r2
 8001558:	70bb      	strb	r3, [r7, #2]
	if(startAddres_p > 7)
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	2b07      	cmp	r3, #7
 800155e:	d901      	bls.n	8001564 <_ZN7SSD130514SetPageAddressEhh+0x1a>
	{
		startAddres_p = 7;
 8001560:	2307      	movs	r3, #7
 8001562:	70fb      	strb	r3, [r7, #3]
	}
	if(endAddres_p > 7)
 8001564:	78bb      	ldrb	r3, [r7, #2]
 8001566:	2b07      	cmp	r3, #7
 8001568:	d901      	bls.n	800156e <_ZN7SSD130514SetPageAddressEhh+0x24>
	{
		endAddres_p =  7;
 800156a:	2307      	movs	r3, #7
 800156c:	70bb      	strb	r3, [r7, #2]
	}

	commandBuffer[0] = SSD1305_SET_PAGE_ADDR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2222      	movs	r2, #34	; 0x22
 8001572:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = startAddres_p;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	735a      	strb	r2, [r3, #13]
	commandBuffer[2] = endAddres_p;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	78ba      	ldrb	r2, [r7, #2]
 800157e:	739a      	strb	r2, [r3, #14]

	return SendCommand(3);
 8001580:	2103      	movs	r1, #3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ff8a 	bl	800149c <_ZN7SSD130511SendCommandEh>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_ZN7SSD130519SetDisplayStartLineEh>:

HAL_StatusTypeDef SSD1305::SetDisplayStartLine(uint8_t line_p)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	460b      	mov	r3, r1
 800159c:	70fb      	strb	r3, [r7, #3]
	if(line_p > 63)
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	2b3f      	cmp	r3, #63	; 0x3f
 80015a2:	d901      	bls.n	80015a8 <_ZN7SSD130519SetDisplayStartLineEh+0x16>
	{
		line_p = 63;
 80015a4:	233f      	movs	r3, #63	; 0x3f
 80015a6:	70fb      	strb	r3, [r7, #3]
	}

	commandBuffer[0] = SSD1305_SET_START_LINE | line_p;
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 80015b4:	2101      	movs	r1, #1
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ff70 	bl	800149c <_ZN7SSD130511SendCommandEh>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_ZN7SSD13056SetLUTEhhhh>:

	return SendCommand(2);
}

HAL_StatusTypeDef SSD1305::SetLUT(uint8_t LUT_BANK0_p, uint8_t LUT_ColorA_p, uint8_t LUT_ColorB_p, uint8_t LUT_ColorC_p)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	4608      	mov	r0, r1
 80015d0:	4611      	mov	r1, r2
 80015d2:	461a      	mov	r2, r3
 80015d4:	4603      	mov	r3, r0
 80015d6:	70fb      	strb	r3, [r7, #3]
 80015d8:	460b      	mov	r3, r1
 80015da:	70bb      	strb	r3, [r7, #2]
 80015dc:	4613      	mov	r3, r2
 80015de:	707b      	strb	r3, [r7, #1]
	if(LUT_BANK0_p < 32){
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	2b1f      	cmp	r3, #31
 80015e4:	d801      	bhi.n	80015ea <_ZN7SSD13056SetLUTEhhhh+0x24>
		LUT_BANK0_p = 32;
 80015e6:	2320      	movs	r3, #32
 80015e8:	70fb      	strb	r3, [r7, #3]
	}
	if(LUT_BANK0_p > 63){
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	2b3f      	cmp	r3, #63	; 0x3f
 80015ee:	d901      	bls.n	80015f4 <_ZN7SSD13056SetLUTEhhhh+0x2e>
		LUT_BANK0_p = 63;
 80015f0:	233f      	movs	r3, #63	; 0x3f
 80015f2:	70fb      	strb	r3, [r7, #3]
	}
	//--//
	if(LUT_ColorA_p < 32){
 80015f4:	78bb      	ldrb	r3, [r7, #2]
 80015f6:	2b1f      	cmp	r3, #31
 80015f8:	d801      	bhi.n	80015fe <_ZN7SSD13056SetLUTEhhhh+0x38>
		LUT_ColorA_p = 32;
 80015fa:	2320      	movs	r3, #32
 80015fc:	70bb      	strb	r3, [r7, #2]
	}
	if(LUT_ColorA_p > 63){
 80015fe:	78bb      	ldrb	r3, [r7, #2]
 8001600:	2b3f      	cmp	r3, #63	; 0x3f
 8001602:	d901      	bls.n	8001608 <_ZN7SSD13056SetLUTEhhhh+0x42>
		LUT_ColorA_p = 63;
 8001604:	233f      	movs	r3, #63	; 0x3f
 8001606:	70bb      	strb	r3, [r7, #2]
	}
	//--//
	if(LUT_ColorB_p < 32){
 8001608:	787b      	ldrb	r3, [r7, #1]
 800160a:	2b1f      	cmp	r3, #31
 800160c:	d801      	bhi.n	8001612 <_ZN7SSD13056SetLUTEhhhh+0x4c>
		LUT_ColorB_p = 32;
 800160e:	2320      	movs	r3, #32
 8001610:	707b      	strb	r3, [r7, #1]
	}
	if(LUT_ColorB_p > 63){
 8001612:	787b      	ldrb	r3, [r7, #1]
 8001614:	2b3f      	cmp	r3, #63	; 0x3f
 8001616:	d901      	bls.n	800161c <_ZN7SSD13056SetLUTEhhhh+0x56>
		LUT_ColorB_p = 63;
 8001618:	233f      	movs	r3, #63	; 0x3f
 800161a:	707b      	strb	r3, [r7, #1]
	}
	//--//
	if(LUT_ColorC_p < 32){
 800161c:	7c3b      	ldrb	r3, [r7, #16]
 800161e:	2b1f      	cmp	r3, #31
 8001620:	d801      	bhi.n	8001626 <_ZN7SSD13056SetLUTEhhhh+0x60>
		LUT_ColorC_p = 32;
 8001622:	2320      	movs	r3, #32
 8001624:	743b      	strb	r3, [r7, #16]
	}
	if(LUT_ColorC_p > 63){
 8001626:	7c3b      	ldrb	r3, [r7, #16]
 8001628:	2b3f      	cmp	r3, #63	; 0x3f
 800162a:	d901      	bls.n	8001630 <_ZN7SSD13056SetLUTEhhhh+0x6a>
		LUT_ColorC_p = 63;
 800162c:	233f      	movs	r3, #63	; 0x3f
 800162e:	743b      	strb	r3, [r7, #16]
	}

	commandBuffer[0] = SSD1305_SET_LUT;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2291      	movs	r2, #145	; 0x91
 8001634:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = LUT_BANK0_p;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	735a      	strb	r2, [r3, #13]
	commandBuffer[2] = LUT_ColorA_p;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	78ba      	ldrb	r2, [r7, #2]
 8001640:	739a      	strb	r2, [r3, #14]
	commandBuffer[3] = LUT_ColorB_p;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	787a      	ldrb	r2, [r7, #1]
 8001646:	73da      	strb	r2, [r3, #15]
	commandBuffer[4] = LUT_ColorC_p;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7c3a      	ldrb	r2, [r7, #16]
 800164c:	741a      	strb	r2, [r3, #16]

	return SendCommand(5);
 800164e:	2105      	movs	r1, #5
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff23 	bl	800149c <_ZN7SSD130511SendCommandEh>
 8001656:	4603      	mov	r3, r0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_ZN7SSD130515SetSegmentReMapE12SegmentRemap>:

HAL_StatusTypeDef SSD1305::SetSegmentReMap(SegmentRemap remap_p)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = SSD1305_SEG_REMAP | remap_p;
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001672:	b2da      	uxtb	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8001678:	2101      	movs	r1, #1
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff0e 	bl	800149c <_ZN7SSD130511SendCommandEh>
 8001680:	4603      	mov	r3, r0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <_ZN7SSD130515EntireDisplayONE13DisplayONMode>:

HAL_StatusTypeDef SSD1305::EntireDisplayON(DisplayONMode displayONMode_p)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = displayONMode_p;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	78fa      	ldrb	r2, [r7, #3]
 800169a:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 800169c:	2101      	movs	r1, #1
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fefc 	bl	800149c <_ZN7SSD130511SendCommandEh>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_ZN7SSD130516SetNormalInverseE18DisplayInverseMode>:

HAL_StatusTypeDef SSD1305::SetNormalInverse(DisplayInverseMode inversMode_p)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = inversMode_p;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 80016c0:	2101      	movs	r1, #1
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff feea 	bl	800149c <_ZN7SSD130511SendCommandEh>
 80016c8:	4603      	mov	r3, r0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_ZN7SSD130517SetMultiplexRatioEh>:

HAL_StatusTypeDef SSD1305::SetMultiplexRatio(uint8_t ratio_p)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	70fb      	strb	r3, [r7, #3]
	if(ratio_p < 15)
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	2b0e      	cmp	r3, #14
 80016e2:	d801      	bhi.n	80016e8 <_ZN7SSD130517SetMultiplexRatioEh+0x16>
	{
		ratio_p = 15;
 80016e4:	230f      	movs	r3, #15
 80016e6:	70fb      	strb	r3, [r7, #3]
	}

	commandBuffer[0] = 	SSD1305_SET_MULTIPLEX_RATIO;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	22a8      	movs	r2, #168	; 0xa8
 80016ec:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = ratio_p;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	78fa      	ldrb	r2, [r7, #3]
 80016f2:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 80016f4:	2102      	movs	r1, #2
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fed0 	bl	800149c <_ZN7SSD130511SendCommandEh>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <_ZN7SSD130516SetDisplayON_OFFE11DisplayMode>:

	return SendCommand(4);
}

HAL_StatusTypeDef SSD1305::SetDisplayON_OFF(DisplayMode mode_p)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = mode_p;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 8001718:	2101      	movs	r1, #1
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff febe 	bl	800149c <_ZN7SSD130511SendCommandEh>
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_ZN7SSD130525SetComOutputScanDirectionE22ComOutputScanDirection>:

	return SendCommand(1);
}

HAL_StatusTypeDef SSD1305::SetComOutputScanDirection(ComOutputScanDirection scanDirection_p)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	70fb      	strb	r3, [r7, #3]
	commandBuffer[0] = scanDirection_p;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 800173c:	2101      	movs	r1, #1
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff feac 	bl	800149c <_ZN7SSD130511SendCommandEh>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <_ZN7SSD130516SetDisplayOffsetEh>:

HAL_StatusTypeDef SSD1305::SetDisplayOffset(uint8_t verticalShift_p)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	70fb      	strb	r3, [r7, #3]
	if (verticalShift_p > 63)
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	2b3f      	cmp	r3, #63	; 0x3f
 800175e:	d901      	bls.n	8001764 <_ZN7SSD130516SetDisplayOffsetEh+0x16>
	{
		verticalShift_p = 63;
 8001760:	233f      	movs	r3, #63	; 0x3f
 8001762:	70fb      	strb	r3, [r7, #3]
	}

	commandBuffer[0] = SSD1305_SET_DISPLAY_OFFSET;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	22d3      	movs	r2, #211	; 0xd3
 8001768:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = verticalShift_p;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 8001770:	2102      	movs	r1, #2
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fe92 	bl	800149c <_ZN7SSD130511SendCommandEh>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_ZN7SSD130520SetColorAndPowerModeE9ColorMode9PowerMode>:

	return SendCommand(2);
}

HAL_StatusTypeDef SSD1305::SetColorAndPowerMode(ColorMode colorMode_p, PowerMode powerMode_p)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	460b      	mov	r3, r1
 800178c:	70fb      	strb	r3, [r7, #3]
 800178e:	4613      	mov	r3, r2
 8001790:	70bb      	strb	r3, [r7, #2]
	commandBuffer[0] = SSD1305_SET_COLOR_n_POWER_MODE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	22d8      	movs	r2, #216	; 0xd8
 8001796:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = (colorMode_p << 4) | powerMode_p;
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	b25a      	sxtb	r2, r3
 800179e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 80017ac:	2102      	movs	r1, #2
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fe74 	bl	800149c <_ZN7SSD130511SendCommandEh>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_ZN7SSD130518SetPrechargePeriodEhh>:

HAL_StatusTypeDef SSD1305::SetPrechargePeriod(uint8_t phase1_p, uint8_t phase2_p)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	70fb      	strb	r3, [r7, #3]
 80017ca:	4613      	mov	r3, r2
 80017cc:	70bb      	strb	r3, [r7, #2]
	if(phase1_p > 0xF)
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d901      	bls.n	80017d8 <_ZN7SSD130518SetPrechargePeriodEhh+0x1a>
	{
		phase1_p = 0xF;
 80017d4:	230f      	movs	r3, #15
 80017d6:	70fb      	strb	r3, [r7, #3]
	}

	if(phase2_p > 0xF)
 80017d8:	78bb      	ldrb	r3, [r7, #2]
 80017da:	2b0f      	cmp	r3, #15
 80017dc:	d901      	bls.n	80017e2 <_ZN7SSD130518SetPrechargePeriodEhh+0x24>
	{
		phase2_p = 0xF;
 80017de:	230f      	movs	r3, #15
 80017e0:	70bb      	strb	r3, [r7, #2]
	}

	commandBuffer[0] = SSD1305_SET_PRECHARGE_PERIOD;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	22d9      	movs	r2, #217	; 0xd9
 80017e6:	731a      	strb	r2, [r3, #12]
	commandBuffer[1] = (phase2_p << 4) | phase1_p;
 80017e8:	78bb      	ldrb	r3, [r7, #2]
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	b25a      	sxtb	r2, r3
 80017ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	735a      	strb	r2, [r3, #13]

	return SendCommand(2);
 80017fc:	2102      	movs	r1, #2
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fe4c 	bl	800149c <_ZN7SSD130511SendCommandEh>
 8001804:	4603      	mov	r3, r0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_ZN7SSD130520EnterReadModifyWriteEv>:

	return SendCommand(2);
}

HAL_StatusTypeDef SSD1305::EnterReadModifyWrite()
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
	commandBuffer[0] = SSD1305_READ_MODIFY_WRITE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	22e0      	movs	r2, #224	; 0xe0
 800181a:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 800181c:	2101      	movs	r1, #1
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fe3c 	bl	800149c <_ZN7SSD130511SendCommandEh>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_ZN7SSD130519ExitReadModifyWriteEv>:

	return SendCommand(1);
}

HAL_StatusTypeDef SSD1305::ExitReadModifyWrite()
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
	commandBuffer[0] = SSD1305_EXIT_RMW;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	22ee      	movs	r2, #238	; 0xee
 800183a:	731a      	strb	r2, [r3, #12]

	return SendCommand(1);
 800183c:	2101      	movs	r1, #1
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fe2c 	bl	800149c <_ZN7SSD130511SendCommandEh>
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 8001856:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001858:	f001 f8b4 	bl	80029c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185c:	f000 f9c2 	bl	8001be4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001860:	f000 fb72 	bl	8001f48 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001864:	f000 fb50 	bl	8001f08 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8001868:	f000 fb20 	bl	8001eac <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 800186c:	f000 fa32 	bl	8001cd4 <_ZL12MX_ADC1_Initv>
  MX_TIM5_Init();
 8001870:	f000 fac0 	bl	8001df4 <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 8001874:	f000 fa8a 	bl	8001d8c <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT( &htim5 );
 8001878:	48c5      	ldr	r0, [pc, #788]	; (8001b90 <main+0x340>)
 800187a:	f003 ff75 	bl	8005768 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(OLED_RESET_NOT_GPIO_Port, OLED_RESET_NOT_Pin, GPIO_PIN_SET);
 800187e:	2201      	movs	r2, #1
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	48c4      	ldr	r0, [pc, #784]	; (8001b94 <main+0x344>)
 8001884:	f002 fca8 	bl	80041d8 <HAL_GPIO_WritePin>

  SSD1305 display(&hi2c1, 0x3C, 128, 32);
 8001888:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800188c:	2320      	movs	r3, #32
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	223c      	movs	r2, #60	; 0x3c
 8001894:	49c0      	ldr	r1, [pc, #768]	; (8001b98 <main+0x348>)
 8001896:	f7ff fb29 	bl	8000eec <_ZN7SSD1305C1EP17I2C_HandleTypeDefhhh>
  display.Init();
 800189a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fb46 	bl	8000f30 <_ZN7SSD13054InitEv>
  display.Fill(Black);
 80018a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fc6c 	bl	8001188 <_ZN7SSD13054FillE13SSD1305_COLOR>

  FontDef font = Font_7x10;
 80018b0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80018b4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80018b8:	4ab8      	ldr	r2, [pc, #736]	; (8001b9c <main+0x34c>)
 80018ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018be:	e883 0003 	stmia.w	r3, {r0, r1}
  char msg[100];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  snprintf(msg, sizeof(msg), "NO BUTTON");
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	4ab6      	ldr	r2, [pc, #728]	; (8001ba0 <main+0x350>)
 80018c8:	2164      	movs	r1, #100	; 0x64
 80018ca:	4618      	mov	r0, r3
 80018cc:	f005 fadc 	bl	8006e88 <sniprintf>
  uint8_t number[3] = {0,0,0};
 80018d0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80018d4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80018d8:	4ab2      	ldr	r2, [pc, #712]	; (8001ba4 <main+0x354>)
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	4611      	mov	r1, r2
 80018de:	8019      	strh	r1, [r3, #0]
 80018e0:	3302      	adds	r3, #2
 80018e2:	0c12      	lsrs	r2, r2, #16
 80018e4:	701a      	strb	r2, [r3, #0]
  uint8_t currentNum = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
  states currentState = setNum1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 3296 	strb.w	r3, [r7, #662]	; 0x296

  DrawGUI(&display, 1, x, y, 130, 131, 12.3, 1.8);
 80018f2:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80018f6:	2382      	movs	r3, #130	; 0x82
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	ed9f 1aab 	vldr	s2, [pc, #684]	; 8001ba8 <main+0x358>
 80018fe:	eddf 0aab 	vldr	s1, [pc, #684]	; 8001bac <main+0x35c>
 8001902:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8001bb0 <main+0x360>
 8001906:	2301      	movs	r3, #1
 8001908:	2200      	movs	r2, #0
 800190a:	2101      	movs	r1, #1
 800190c:	f000 fbd2 	bl	80020b4 <_Z7DrawGUIP7SSD1305h4axesS1_tfff>
  while (1)
  {
	  if(adc_buff_read > 4000)
 8001910:	4ba8      	ldr	r3, [pc, #672]	; (8001bb4 <main+0x364>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001918:	d903      	bls.n	8001922 <main+0xd2>
	  {
		  currentNum = 3;
 800191a:	2303      	movs	r3, #3
 800191c:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
 8001920:	e010      	b.n	8001944 <main+0xf4>
	  }
	  else if(adc_buff_read > 2000)
 8001922:	4ba4      	ldr	r3, [pc, #656]	; (8001bb4 <main+0x364>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800192a:	d903      	bls.n	8001934 <main+0xe4>
	  {
		  currentNum = 2;
 800192c:	2302      	movs	r3, #2
 800192e:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
 8001932:	e007      	b.n	8001944 <main+0xf4>
	  }
	  else if(adc_buff_read > 1000)
 8001934:	4b9f      	ldr	r3, [pc, #636]	; (8001bb4 <main+0x364>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800193c:	d902      	bls.n	8001944 <main+0xf4>
	  {
		  currentNum = 1;
 800193e:	2301      	movs	r3, #1
 8001940:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
	  }

	  switch (currentState) {
 8001944:	f897 3296 	ldrb.w	r3, [r7, #662]	; 0x296
 8001948:	2b02      	cmp	r3, #2
 800194a:	d070      	beq.n	8001a2e <main+0x1de>
 800194c:	2b02      	cmp	r3, #2
 800194e:	f300 80a2 	bgt.w	8001a96 <main+0x246>
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <main+0x10c>
 8001956:	2b01      	cmp	r3, #1
 8001958:	d035      	beq.n	80019c6 <main+0x176>
				currentState = setNum1;
				currentNum = number[0];
			}
			break;
		default:
			break;
 800195a:	e09c      	b.n	8001a96 <main+0x246>
			number[0] = currentNum;
 800195c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001960:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001964:	f897 2297 	ldrb.w	r2, [r7, #663]	; 0x297
 8001968:	701a      	strb	r2, [r3, #0]
			if(HAL_GPIO_ReadPin(PINK_BTN_GPIO_Port, PINK_BTN_Pin))
 800196a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800196e:	4892      	ldr	r0, [pc, #584]	; (8001bb8 <main+0x368>)
 8001970:	f002 fc1a 	bl	80041a8 <HAL_GPIO_ReadPin>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf14      	ite	ne
 800197a:	2301      	movne	r3, #1
 800197c:	2300      	moveq	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 808a 	beq.w	8001a9a <main+0x24a>
				HAL_Delay(10);
 8001986:	200a      	movs	r0, #10
 8001988:	f001 f88e 	bl	8002aa8 <HAL_Delay>
				while(HAL_GPIO_ReadPin(PINK_BTN_GPIO_Port, PINK_BTN_Pin)){__NOP();}
 800198c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001990:	4889      	ldr	r0, [pc, #548]	; (8001bb8 <main+0x368>)
 8001992:	f002 fc09 	bl	80041a8 <HAL_GPIO_ReadPin>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf14      	ite	ne
 800199c:	2301      	movne	r3, #1
 800199e:	2300      	moveq	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <main+0x15a>
 80019a6:	bf00      	nop
 80019a8:	e7f0      	b.n	800198c <main+0x13c>
				HAL_Delay(10);
 80019aa:	200a      	movs	r0, #10
 80019ac:	f001 f87c 	bl	8002aa8 <HAL_Delay>
				currentState = setNum2;
 80019b0:	2301      	movs	r3, #1
 80019b2:	f887 3296 	strb.w	r3, [r7, #662]	; 0x296
				currentNum = number[1];
 80019b6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80019ba:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80019be:	785b      	ldrb	r3, [r3, #1]
 80019c0:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
			break;
 80019c4:	e069      	b.n	8001a9a <main+0x24a>
			number[1] = currentNum;
 80019c6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80019ca:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80019ce:	f897 2297 	ldrb.w	r2, [r7, #663]	; 0x297
 80019d2:	705a      	strb	r2, [r3, #1]
			if(HAL_GPIO_ReadPin(PINK_BTN_GPIO_Port, PINK_BTN_Pin))
 80019d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019d8:	4877      	ldr	r0, [pc, #476]	; (8001bb8 <main+0x368>)
 80019da:	f002 fbe5 	bl	80041a8 <HAL_GPIO_ReadPin>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf14      	ite	ne
 80019e4:	2301      	movne	r3, #1
 80019e6:	2300      	moveq	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d057      	beq.n	8001a9e <main+0x24e>
				HAL_Delay(10);
 80019ee:	200a      	movs	r0, #10
 80019f0:	f001 f85a 	bl	8002aa8 <HAL_Delay>
				while(HAL_GPIO_ReadPin(PINK_BTN_GPIO_Port, PINK_BTN_Pin)){__NOP();}
 80019f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f8:	486f      	ldr	r0, [pc, #444]	; (8001bb8 <main+0x368>)
 80019fa:	f002 fbd5 	bl	80041a8 <HAL_GPIO_ReadPin>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf14      	ite	ne
 8001a04:	2301      	movne	r3, #1
 8001a06:	2300      	moveq	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <main+0x1c2>
 8001a0e:	bf00      	nop
 8001a10:	e7f0      	b.n	80019f4 <main+0x1a4>
				HAL_Delay(10);
 8001a12:	200a      	movs	r0, #10
 8001a14:	f001 f848 	bl	8002aa8 <HAL_Delay>
				currentState = setNum3;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	f887 3296 	strb.w	r3, [r7, #662]	; 0x296
				currentNum = number[2];
 8001a1e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001a22:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001a26:	789b      	ldrb	r3, [r3, #2]
 8001a28:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
			break;
 8001a2c:	e037      	b.n	8001a9e <main+0x24e>
			number[2] = currentNum;
 8001a2e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001a32:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001a36:	f897 2297 	ldrb.w	r2, [r7, #663]	; 0x297
 8001a3a:	709a      	strb	r2, [r3, #2]
			if(HAL_GPIO_ReadPin(PINK_BTN_GPIO_Port, PINK_BTN_Pin))
 8001a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a40:	485d      	ldr	r0, [pc, #372]	; (8001bb8 <main+0x368>)
 8001a42:	f002 fbb1 	bl	80041a8 <HAL_GPIO_ReadPin>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf14      	ite	ne
 8001a4c:	2301      	movne	r3, #1
 8001a4e:	2300      	moveq	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d025      	beq.n	8001aa2 <main+0x252>
				HAL_Delay(10);
 8001a56:	200a      	movs	r0, #10
 8001a58:	f001 f826 	bl	8002aa8 <HAL_Delay>
				while(HAL_GPIO_ReadPin(PINK_BTN_GPIO_Port, PINK_BTN_Pin)){__NOP();}
 8001a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a60:	4855      	ldr	r0, [pc, #340]	; (8001bb8 <main+0x368>)
 8001a62:	f002 fba1 	bl	80041a8 <HAL_GPIO_ReadPin>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf14      	ite	ne
 8001a6c:	2301      	movne	r3, #1
 8001a6e:	2300      	moveq	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <main+0x22a>
 8001a76:	bf00      	nop
 8001a78:	e7f0      	b.n	8001a5c <main+0x20c>
				HAL_Delay(10);
 8001a7a:	200a      	movs	r0, #10
 8001a7c:	f001 f814 	bl	8002aa8 <HAL_Delay>
				currentState = setNum1;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 3296 	strb.w	r3, [r7, #662]	; 0x296
				currentNum = number[0];
 8001a86:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001a8a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
			break;
 8001a94:	e005      	b.n	8001aa2 <main+0x252>
			break;
 8001a96:	bf00      	nop
 8001a98:	e004      	b.n	8001aa4 <main+0x254>
			break;
 8001a9a:	bf00      	nop
 8001a9c:	e002      	b.n	8001aa4 <main+0x254>
			break;
 8001a9e:	bf00      	nop
 8001aa0:	e000      	b.n	8001aa4 <main+0x254>
			break;
 8001aa2:	bf00      	nop
	}

    /* USER CODE END WHILE */
	  display.SetCursor(0, 0);
 8001aa4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fcdf 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
	  //snprintf(msg, sizeof(msg), "%hu", adc_buff_read[0]);
	  int i, k = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
	  for (i = 0; i < 3; i++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8001abe:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	dc17      	bgt.n	8001af6 <main+0x2a6>
	      k = 10 * k + number[i];
 8001ac6:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001ad8:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8001adc:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001ae0:	4413      	add	r3, r2
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	440b      	add	r3, r1
 8001ae6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
	  for (i = 0; i < 3; i++)
 8001aea:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001aee:	3301      	adds	r3, #1
 8001af0:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8001af4:	e7e3      	b.n	8001abe <main+0x26e>

	  //snprintf(msg, sizeof(msg), "%d", k);
	  for(int i = 0; i<3; i++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8001afc:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	dc5d      	bgt.n	8001bc0 <main+0x370>
	  {
		  display.SetCursor(i*font.FontWidth, 0);
 8001b04:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001b08:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	fb12 f303 	smulbb	r3, r2, r3
 8001b18:	b2d9      	uxtb	r1, r3
 8001b1a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fca5 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
		  snprintf(msg, sizeof(msg), "%d", number[i]);
 8001b26:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001b2a:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8001b2e:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8001b32:	4413      	add	r3, r2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	f107 0008 	add.w	r0, r7, #8
 8001b3a:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <main+0x36c>)
 8001b3c:	2164      	movs	r1, #100	; 0x64
 8001b3e:	f005 f9a3 	bl	8006e88 <sniprintf>

		  if(i == currentState)
 8001b42:	f897 3296 	ldrb.w	r3, [r7, #662]	; 0x296
 8001b46:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d10d      	bne.n	8001b6a <main+0x31a>
		  {
			  display.WriteString(msg, font, Black);
 8001b4e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001b52:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001b56:	f107 0108 	add.w	r1, r7, #8
 8001b5a:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001b5e:	2200      	movs	r2, #0
 8001b60:	9200      	str	r2, [sp, #0]
 8001b62:	cb0c      	ldmia	r3, {r2, r3}
 8001b64:	f7ff fc59 	bl	800141a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
 8001b68:	e00c      	b.n	8001b84 <main+0x334>
		  }
		  else
		  {
			  display.WriteString(msg, font, White);
 8001b6a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001b6e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001b72:	f107 0108 	add.w	r1, r7, #8
 8001b76:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	9200      	str	r2, [sp, #0]
 8001b7e:	cb0c      	ldmia	r3, {r2, r3}
 8001b80:	f7ff fc4b 	bl	800141a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
	  for(int i = 0; i<3; i++)
 8001b84:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8001b8e:	e7b5      	b.n	8001afc <main+0x2ac>
 8001b90:	2000030c 	.word	0x2000030c
 8001b94:	40020800 	.word	0x40020800
 8001b98:	200002b8 	.word	0x200002b8
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	080093b8 	.word	0x080093b8
 8001ba4:	080093c8 	.word	0x080093c8
 8001ba8:	3fe66666 	.word	0x3fe66666
 8001bac:	4144cccd 	.word	0x4144cccd
 8001bb0:	43030000 	.word	0x43030000
 8001bb4:	2000039a 	.word	0x2000039a
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	080093c4 	.word	0x080093c4
		  }
	  }
	  //display.WriteString(msg, font, Black);
	  display.WriteBitmapToScreen();
 8001bc0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fa7f 	bl	80010c8 <_ZN7SSD130519WriteBitmapToScreenEv>
	  display.FillBitmapBuffer(Black);
 8001bca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff faab 	bl	800112c <_ZN7SSD130516FillBitmapBufferE13SSD1305_COLOR>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001bd6:	2120      	movs	r1, #32
 8001bd8:	4801      	ldr	r0, [pc, #4]	; (8001be0 <main+0x390>)
 8001bda:	f002 fb16 	bl	800420a <HAL_GPIO_TogglePin>
    /* USER CODE BEGIN 3 */
  }
 8001bde:	e697      	b.n	8001910 <main+0xc0>
 8001be0:	40020000 	.word	0x40020000

08001be4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b094      	sub	sp, #80	; 0x50
 8001be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	2234      	movs	r2, #52	; 0x34
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f004 fcd6 	bl	80065a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf8:	f107 0308 	add.w	r3, r7, #8
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <_Z18SystemClock_Configv+0xe8>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	4a2e      	ldr	r2, [pc, #184]	; (8001ccc <_Z18SystemClock_Configv+0xe8>)
 8001c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c16:	6413      	str	r3, [r2, #64]	; 0x40
 8001c18:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <_Z18SystemClock_Configv+0xe8>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c24:	2300      	movs	r3, #0
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <_Z18SystemClock_Configv+0xec>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c30:	4a27      	ldr	r2, [pc, #156]	; (8001cd0 <_Z18SystemClock_Configv+0xec>)
 8001c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <_Z18SystemClock_Configv+0xec>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c44:	2302      	movs	r3, #2
 8001c46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c4c:	2310      	movs	r3, #16
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c50:	2302      	movs	r3, #2
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c54:	2300      	movs	r3, #0
 8001c56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c58:	2310      	movs	r3, #16
 8001c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c5c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c62:	2304      	movs	r3, #4
 8001c64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c66:	2302      	movs	r3, #2
 8001c68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 fa8a 	bl	800518c <HAL_RCC_OscConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf14      	ite	ne
 8001c7e:	2301      	movne	r3, #1
 8001c80:	2300      	moveq	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8001c88:	f000 fbee 	bl	8002468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8c:	230f      	movs	r3, #15
 8001c8e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c90:	2302      	movs	r3, #2
 8001c92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 ff25 	bl	8004af8 <HAL_RCC_ClockConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf14      	ite	ne
 8001cb4:	2301      	movne	r3, #1
 8001cb6:	2300      	moveq	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8001cbe:	f000 fbd3 	bl	8002468 <Error_Handler>
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3750      	adds	r7, #80	; 0x50
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40007000 	.word	0x40007000

08001cd4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <_ZL12MX_ADC1_Initv+0xac>)
 8001ce8:	4a26      	ldr	r2, [pc, #152]	; (8001d84 <_ZL12MX_ADC1_Initv+0xb0>)
 8001cea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cec:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <_ZL12MX_ADC1_Initv+0xac>)
 8001cee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cf2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cf4:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <_ZL12MX_ADC1_Initv+0xac>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <_ZL12MX_ADC1_Initv+0xac>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d00:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <_ZL12MX_ADC1_Initv+0xac>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <_ZL12MX_ADC1_Initv+0xac>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <_ZL12MX_ADC1_Initv+0xac>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <_ZL12MX_ADC1_Initv+0xac>)
 8001d16:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <_ZL12MX_ADC1_Initv+0xb4>)
 8001d18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <_ZL12MX_ADC1_Initv+0xac>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <_ZL12MX_ADC1_Initv+0xac>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <_ZL12MX_ADC1_Initv+0xac>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <_ZL12MX_ADC1_Initv+0xac>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d34:	4812      	ldr	r0, [pc, #72]	; (8001d80 <_ZL12MX_ADC1_Initv+0xac>)
 8001d36:	f000 fedb 	bl	8002af0 <HAL_ADC_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8001d4a:	f000 fb8d 	bl	8002468 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4808      	ldr	r0, [pc, #32]	; (8001d80 <_ZL12MX_ADC1_Initv+0xac>)
 8001d60:	f001 f952 	bl	8003008 <HAL_ADC_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bf14      	ite	ne
 8001d6a:	2301      	movne	r3, #1
 8001d6c:	2300      	moveq	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8001d74:	f000 fb78 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000210 	.word	0x20000210
 8001d84:	40012000 	.word	0x40012000
 8001d88:	0f000001 	.word	0x0f000001

08001d8c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d92:	4a16      	ldr	r2, [pc, #88]	; (8001dec <_ZL12MX_I2C1_Initv+0x60>)
 8001d94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d98:	4a15      	ldr	r2, [pc, #84]	; (8001df0 <_ZL12MX_I2C1_Initv+0x64>)
 8001d9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001daa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db0:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dc8:	4807      	ldr	r0, [pc, #28]	; (8001de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001dca:	f002 fa39 	bl	8004240 <HAL_I2C_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf14      	ite	ne
 8001dd4:	2301      	movne	r3, #1
 8001dd6:	2300      	moveq	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001dde:	f000 fb43 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200002b8 	.word	0x200002b8
 8001dec:	40005400 	.word	0x40005400
 8001df0:	000186a0 	.word	0x000186a0

08001df4 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e08:	463b      	mov	r3, r7
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e10:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <_ZL12MX_TIM5_Initv+0xb0>)
 8001e12:	4a25      	ldr	r2, [pc, #148]	; (8001ea8 <_ZL12MX_TIM5_Initv+0xb4>)
 8001e14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <_ZL12MX_TIM5_Initv+0xb0>)
 8001e18:	2253      	movs	r2, #83	; 0x53
 8001e1a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1c:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <_ZL12MX_TIM5_Initv+0xb0>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8001e22:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <_ZL12MX_TIM5_Initv+0xb0>)
 8001e24:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <_ZL12MX_TIM5_Initv+0xb0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e30:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <_ZL12MX_TIM5_Initv+0xb0>)
 8001e32:	2280      	movs	r2, #128	; 0x80
 8001e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e36:	481b      	ldr	r0, [pc, #108]	; (8001ea4 <_ZL12MX_TIM5_Initv+0xb0>)
 8001e38:	f003 fc46 	bl	80056c8 <HAL_TIM_Base_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bf14      	ite	ne
 8001e42:	2301      	movne	r3, #1
 8001e44:	2300      	moveq	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <_ZL12MX_TIM5_Initv+0x5c>
  {
    Error_Handler();
 8001e4c:	f000 fb0c 	bl	8002468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e56:	f107 0308 	add.w	r3, r7, #8
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4811      	ldr	r0, [pc, #68]	; (8001ea4 <_ZL12MX_TIM5_Initv+0xb0>)
 8001e5e:	f003 fdfb 	bl	8005a58 <HAL_TIM_ConfigClockSource>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf14      	ite	ne
 8001e68:	2301      	movne	r3, #1
 8001e6a:	2300      	moveq	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <_ZL12MX_TIM5_Initv+0x82>
  {
    Error_Handler();
 8001e72:	f000 faf9 	bl	8002468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e7e:	463b      	mov	r3, r7
 8001e80:	4619      	mov	r1, r3
 8001e82:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <_ZL12MX_TIM5_Initv+0xb0>)
 8001e84:	f004 f812 	bl	8005eac <HAL_TIMEx_MasterConfigSynchronization>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bf14      	ite	ne
 8001e8e:	2301      	movne	r3, #1
 8001e90:	2300      	moveq	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <_ZL12MX_TIM5_Initv+0xa8>
  {
    Error_Handler();
 8001e98:	f000 fae6 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000030c 	.word	0x2000030c
 8001ea8:	40000c00 	.word	0x40000c00

08001eac <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001eb2:	4a14      	ldr	r2, [pc, #80]	; (8001f04 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001eb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ebc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ee2:	4807      	ldr	r0, [pc, #28]	; (8001f00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ee4:	f004 f872 	bl	8005fcc <HAL_UART_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf14      	ite	ne
 8001eee:	2301      	movne	r3, #1
 8001ef0:	2300      	moveq	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001ef8:	f000 fab6 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000354 	.word	0x20000354
 8001f04:	40004400 	.word	0x40004400

08001f08 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <_ZL11MX_DMA_Initv+0x3c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <_ZL11MX_DMA_Initv+0x3c>)
 8001f18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <_ZL11MX_DMA_Initv+0x3c>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2038      	movs	r0, #56	; 0x38
 8001f30:	f001 fbff 	bl	8003732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f34:	2038      	movs	r0, #56	; 0x38
 8001f36:	f001 fc18 	bl	800376a <HAL_NVIC_EnableIRQ>

}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800

08001f48 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <_ZL12MX_GPIO_Initv+0x110>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a3c      	ldr	r2, [pc, #240]	; (8002058 <_ZL12MX_GPIO_Initv+0x110>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b3a      	ldr	r3, [pc, #232]	; (8002058 <_ZL12MX_GPIO_Initv+0x110>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b36      	ldr	r3, [pc, #216]	; (8002058 <_ZL12MX_GPIO_Initv+0x110>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a35      	ldr	r2, [pc, #212]	; (8002058 <_ZL12MX_GPIO_Initv+0x110>)
 8001f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b33      	ldr	r3, [pc, #204]	; (8002058 <_ZL12MX_GPIO_Initv+0x110>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <_ZL12MX_GPIO_Initv+0x110>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a2e      	ldr	r2, [pc, #184]	; (8002058 <_ZL12MX_GPIO_Initv+0x110>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <_ZL12MX_GPIO_Initv+0x110>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	4b28      	ldr	r3, [pc, #160]	; (8002058 <_ZL12MX_GPIO_Initv+0x110>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a27      	ldr	r2, [pc, #156]	; (8002058 <_ZL12MX_GPIO_Initv+0x110>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b25      	ldr	r3, [pc, #148]	; (8002058 <_ZL12MX_GPIO_Initv+0x110>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2120      	movs	r1, #32
 8001fd2:	4822      	ldr	r0, [pc, #136]	; (800205c <_ZL12MX_GPIO_Initv+0x114>)
 8001fd4:	f002 f900 	bl	80041d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_NOT_GPIO_Port, OLED_RESET_NOT_Pin, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	4820      	ldr	r0, [pc, #128]	; (8002060 <_ZL12MX_GPIO_Initv+0x118>)
 8001fde:	f002 f8fb 	bl	80041d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fe8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4819      	ldr	r0, [pc, #100]	; (8002060 <_ZL12MX_GPIO_Initv+0x118>)
 8001ffa:	f001 ff41 	bl	8003e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ffe:	2320      	movs	r3, #32
 8002000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002002:	2301      	movs	r3, #1
 8002004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	4811      	ldr	r0, [pc, #68]	; (800205c <_ZL12MX_GPIO_Initv+0x114>)
 8002016:	f001 ff33 	bl	8003e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RESET_NOT_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_NOT_Pin;
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201e:	2301      	movs	r3, #1
 8002020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_RESET_NOT_GPIO_Port, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	480b      	ldr	r0, [pc, #44]	; (8002060 <_ZL12MX_GPIO_Initv+0x118>)
 8002032:	f001 ff25 	bl	8003e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PINK_BTN_Pin */
  GPIO_InitStruct.Pin = PINK_BTN_Pin;
 8002036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800203a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002040:	2302      	movs	r3, #2
 8002042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PINK_BTN_GPIO_Port, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	4804      	ldr	r0, [pc, #16]	; (800205c <_ZL12MX_GPIO_Initv+0x114>)
 800204c:	f001 ff18 	bl	8003e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	; 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40023800 	.word	0x40023800
 800205c:	40020000 	.word	0x40020000
 8002060:	40020800 	.word	0x40020800

08002064 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef stat;

	if (htim == &dmaCyclerTimer)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d112      	bne.n	800209a <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		uint16_t* tmp = ptr_adc_read_buff;
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
		ptr_adc_read_buff = ptr_adc_written_buff;
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002080:	6013      	str	r3, [r2, #0]
		ptr_adc_written_buff = tmp;
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6013      	str	r3, [r2, #0]

		stat = HAL_ADC_Start_DMA(&configedADC, (uint32_t*)ptr_adc_written_buff, 1);
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2201      	movs	r2, #1
 800208e:	4619      	mov	r1, r3
 8002090:	4807      	ldr	r0, [pc, #28]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002092:	f000 fe81 	bl	8002d98 <HAL_ADC_Start_DMA>
 8002096:	4603      	mov	r3, r0
 8002098:	72fb      	strb	r3, [r7, #11]
	}

}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000030c 	.word	0x2000030c
 80020a8:	20000014 	.word	0x20000014
 80020ac:	20000010 	.word	0x20000010
 80020b0:	20000210 	.word	0x20000210

080020b4 <_Z7DrawGUIP7SSD1305h4axesS1_tfff>:
#define LINE_1_Y 0
#define LINE_2_Y 11
#define LINE_3_Y 22

void DrawGUI(SSD1305* display, uint8_t memslot, axes fixedax, axes trackedax, uint16_t setdeg, float refX, float refY, float refZ)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	6178      	str	r0, [r7, #20]
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	ed87 0a03 	vstr	s0, [r7, #12]
 80020c6:	edc7 0a02 	vstr	s1, [r7, #8]
 80020ca:	ed87 1a01 	vstr	s2, [r7, #4]
 80020ce:	4603      	mov	r3, r0
 80020d0:	74fb      	strb	r3, [r7, #19]
 80020d2:	460b      	mov	r3, r1
 80020d4:	74bb      	strb	r3, [r7, #18]
 80020d6:	4613      	mov	r3, r2
 80020d8:	747b      	strb	r3, [r7, #17]
	//MEM section -> x = 0..21
	display->SetCursor(0, LINE_1_Y);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff f9c6 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
	display->WriteString("MEM", Font_7x10, White);
 80020e4:	4b41      	ldr	r3, [pc, #260]	; (80021ec <_Z7DrawGUIP7SSD1305h4axesS1_tfff+0x138>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	9200      	str	r2, [sp, #0]
 80020ea:	cb0c      	ldmia	r3, {r2, r3}
 80020ec:	4940      	ldr	r1, [pc, #256]	; (80021f0 <_Z7DrawGUIP7SSD1305h4axesS1_tfff+0x13c>)
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7ff f993 	bl	800141a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>

	DisplayMemslot(display, memslot);
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	4619      	mov	r1, r3
 80020f8:	6978      	ldr	r0, [r7, #20]
 80020fa:	f000 f8ad 	bl	8002258 <_Z14DisplayMemslotP7SSD1305h>

	DrawYline(display, 23, White);
 80020fe:	2201      	movs	r2, #1
 8002100:	2117      	movs	r1, #23
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f000 f882 	bl	800220c <_Z9DrawYlineP7SSD1305h13SSD1305_COLOR>

	//Fixed, Tracked, Angle -> x = 22...78
	display->SetCursor(25, LINE_1_Y);
 8002108:	2200      	movs	r2, #0
 800210a:	2119      	movs	r1, #25
 800210c:	6978      	ldr	r0, [r7, #20]
 800210e:	f7ff f9af 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
	display->WriteString("FixAx:", Font_7x10, White);
 8002112:	4b36      	ldr	r3, [pc, #216]	; (80021ec <_Z7DrawGUIP7SSD1305h4axesS1_tfff+0x138>)
 8002114:	2201      	movs	r2, #1
 8002116:	9200      	str	r2, [sp, #0]
 8002118:	cb0c      	ldmia	r3, {r2, r3}
 800211a:	4936      	ldr	r1, [pc, #216]	; (80021f4 <_Z7DrawGUIP7SSD1305h4axesS1_tfff+0x140>)
 800211c:	6978      	ldr	r0, [r7, #20]
 800211e:	f7ff f97c 	bl	800141a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
	display->SetCursor(25, LINE_2_Y);
 8002122:	220b      	movs	r2, #11
 8002124:	2119      	movs	r1, #25
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7ff f9a2 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
	display->WriteString("Track:", Font_7x10, White);
 800212c:	4b2f      	ldr	r3, [pc, #188]	; (80021ec <_Z7DrawGUIP7SSD1305h4axesS1_tfff+0x138>)
 800212e:	2201      	movs	r2, #1
 8002130:	9200      	str	r2, [sp, #0]
 8002132:	cb0c      	ldmia	r3, {r2, r3}
 8002134:	4930      	ldr	r1, [pc, #192]	; (80021f8 <_Z7DrawGUIP7SSD1305h4axesS1_tfff+0x144>)
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f7ff f96f 	bl	800141a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
	display->SetCursor(25, LINE_3_Y);
 800213c:	2216      	movs	r2, #22
 800213e:	2119      	movs	r1, #25
 8002140:	6978      	ldr	r0, [r7, #20]
 8002142:	f7ff f995 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
	display->WriteString("Deg:", Font_7x10, White);
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <_Z7DrawGUIP7SSD1305h4axesS1_tfff+0x138>)
 8002148:	2201      	movs	r2, #1
 800214a:	9200      	str	r2, [sp, #0]
 800214c:	cb0c      	ldmia	r3, {r2, r3}
 800214e:	492b      	ldr	r1, [pc, #172]	; (80021fc <_Z7DrawGUIP7SSD1305h4axesS1_tfff+0x148>)
 8002150:	6978      	ldr	r0, [r7, #20]
 8002152:	f7ff f962 	bl	800141a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>

	DisplayFixedAx(display, fixedax);
 8002156:	7cbb      	ldrb	r3, [r7, #18]
 8002158:	4619      	mov	r1, r3
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f000 f8a0 	bl	80022a0 <_Z14DisplayFixedAxP7SSD13054axes>
	DisplayTrackedAx(display, trackedax);
 8002160:	7c7b      	ldrb	r3, [r7, #17]
 8002162:	4619      	mov	r1, r3
 8002164:	6978      	ldr	r0, [r7, #20]
 8002166:	f000 f8c9 	bl	80022fc <_Z16DisplayTrackedAxP7SSD13054axes>
	DisplaySetAngle(display, setdeg);
 800216a:	8c3b      	ldrh	r3, [r7, #32]
 800216c:	4619      	mov	r1, r3
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f000 f8f2 	bl	8002358 <_Z15DisplaySetAngleP7SSD1305t>

	DrawYline(display, 76, White);
 8002174:	2201      	movs	r2, #1
 8002176:	214c      	movs	r1, #76	; 0x4c
 8002178:	6978      	ldr	r0, [r7, #20]
 800217a:	f000 f847 	bl	800220c <_Z9DrawYlineP7SSD1305h13SSD1305_COLOR>

	//REF section -> x = 78...
	display->SetCursor(78, LINE_1_Y);
 800217e:	2200      	movs	r2, #0
 8002180:	214e      	movs	r1, #78	; 0x4e
 8002182:	6978      	ldr	r0, [r7, #20]
 8002184:	f7ff f974 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
	display->WriteString("rx", Font_7x10, White);
 8002188:	4b18      	ldr	r3, [pc, #96]	; (80021ec <_Z7DrawGUIP7SSD1305h4axesS1_tfff+0x138>)
 800218a:	2201      	movs	r2, #1
 800218c:	9200      	str	r2, [sp, #0]
 800218e:	cb0c      	ldmia	r3, {r2, r3}
 8002190:	491b      	ldr	r1, [pc, #108]	; (8002200 <_Z7DrawGUIP7SSD1305h4axesS1_tfff+0x14c>)
 8002192:	6978      	ldr	r0, [r7, #20]
 8002194:	f7ff f941 	bl	800141a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
	display->SetCursor(78, LINE_2_Y);
 8002198:	220b      	movs	r2, #11
 800219a:	214e      	movs	r1, #78	; 0x4e
 800219c:	6978      	ldr	r0, [r7, #20]
 800219e:	f7ff f967 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
	display->WriteString("ry", Font_7x10, White);
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <_Z7DrawGUIP7SSD1305h4axesS1_tfff+0x138>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	9200      	str	r2, [sp, #0]
 80021a8:	cb0c      	ldmia	r3, {r2, r3}
 80021aa:	4916      	ldr	r1, [pc, #88]	; (8002204 <_Z7DrawGUIP7SSD1305h4axesS1_tfff+0x150>)
 80021ac:	6978      	ldr	r0, [r7, #20]
 80021ae:	f7ff f934 	bl	800141a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
	display->SetCursor(78, LINE_3_Y);
 80021b2:	2216      	movs	r2, #22
 80021b4:	214e      	movs	r1, #78	; 0x4e
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff f95a 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
	display->WriteString("rz", Font_7x10, White);
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <_Z7DrawGUIP7SSD1305h4axesS1_tfff+0x138>)
 80021be:	2201      	movs	r2, #1
 80021c0:	9200      	str	r2, [sp, #0]
 80021c2:	cb0c      	ldmia	r3, {r2, r3}
 80021c4:	4910      	ldr	r1, [pc, #64]	; (8002208 <_Z7DrawGUIP7SSD1305h4axesS1_tfff+0x154>)
 80021c6:	6978      	ldr	r0, [r7, #20]
 80021c8:	f7ff f927 	bl	800141a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>

	DisplayRefDegs(display, refX, refY, refZ);
 80021cc:	ed97 1a01 	vldr	s2, [r7, #4]
 80021d0:	edd7 0a02 	vldr	s1, [r7, #8]
 80021d4:	ed97 0a03 	vldr	s0, [r7, #12]
 80021d8:	6978      	ldr	r0, [r7, #20]
 80021da:	f000 f8e1 	bl	80023a0 <_Z14DisplayRefDegsP7SSD1305fff>

	//Put all to display
	display->WriteBitmapToScreen();
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f7fe ff72 	bl	80010c8 <_ZN7SSD130519WriteBitmapToScreenEv>
}
 80021e4:	bf00      	nop
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000000 	.word	0x20000000
 80021f0:	080093cc 	.word	0x080093cc
 80021f4:	080093d0 	.word	0x080093d0
 80021f8:	080093d8 	.word	0x080093d8
 80021fc:	080093e0 	.word	0x080093e0
 8002200:	080093e8 	.word	0x080093e8
 8002204:	080093ec 	.word	0x080093ec
 8002208:	080093f0 	.word	0x080093f0

0800220c <_Z9DrawYlineP7SSD1305h13SSD1305_COLOR>:

void DrawYline(SSD1305* display, uint8_t x, SSD1305_COLOR color)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	70fb      	strb	r3, [r7, #3]
 8002218:	4613      	mov	r3, r2
 800221a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < display->GetHeight(); i++)
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7fe ff45 	bl	80010b0 <_ZN7SSD13059GetHeightEv>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	4293      	cmp	r3, r2
 800222e:	bf34      	ite	cc
 8002230:	2301      	movcc	r3, #1
 8002232:	2300      	movcs	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <_Z9DrawYlineP7SSD1305h13SSD1305_COLOR+0x42>
	{
		display->DrawPixel(x, i, color);
 800223a:	78bb      	ldrb	r3, [r7, #2]
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	78f9      	ldrb	r1, [r7, #3]
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7fe fffc 	bl	800123e <_ZN7SSD13059DrawPixelEhh13SSD1305_COLOR>
	for(uint8_t i = 0; i < display->GetHeight(); i++)
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	3301      	adds	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	e7e8      	b.n	8002220 <_Z9DrawYlineP7SSD1305h13SSD1305_COLOR+0x14>
	}
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <_Z14DisplayMemslotP7SSD1305h>:

void DisplayMemslot(SSD1305* display, uint8_t memslot)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af02      	add	r7, sp, #8
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	70fb      	strb	r3, [r7, #3]
	char memslotString[2];
	snprintf(memslotString, sizeof(memslotString), "%d", memslot);
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	f107 000c 	add.w	r0, r7, #12
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <_Z14DisplayMemslotP7SSD1305h+0x40>)
 800226c:	2102      	movs	r1, #2
 800226e:	f004 fe0b 	bl	8006e88 <sniprintf>
	display->SetCursor(5, 12);
 8002272:	220c      	movs	r2, #12
 8002274:	2105      	movs	r1, #5
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff f8fa 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
	display->WriteString(memslotString, Font_11x18, White);
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <_Z14DisplayMemslotP7SSD1305h+0x44>)
 800227e:	f107 010c 	add.w	r1, r7, #12
 8002282:	2201      	movs	r2, #1
 8002284:	9200      	str	r2, [sp, #0]
 8002286:	cb0c      	ldmia	r3, {r2, r3}
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff f8c6 	bl	800141a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	080093c4 	.word	0x080093c4
 800229c:	20000008 	.word	0x20000008

080022a0 <_Z14DisplayFixedAxP7SSD13054axes>:

void DisplayFixedAx(SSD1305* display, axes fixedax)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
	char axesChar;
	switch (fixedax) {
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d00c      	beq.n	80022cc <_Z14DisplayFixedAxP7SSD13054axes+0x2c>
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	dc0d      	bgt.n	80022d2 <_Z14DisplayFixedAxP7SSD13054axes+0x32>
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <_Z14DisplayFixedAxP7SSD13054axes+0x20>
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d003      	beq.n	80022c6 <_Z14DisplayFixedAxP7SSD13054axes+0x26>
			break;
		case z:
			axesChar = 'z';
			break;
		default:
			break;
 80022be:	e008      	b.n	80022d2 <_Z14DisplayFixedAxP7SSD13054axes+0x32>
			axesChar = 'x';
 80022c0:	2378      	movs	r3, #120	; 0x78
 80022c2:	73fb      	strb	r3, [r7, #15]
			break;
 80022c4:	e006      	b.n	80022d4 <_Z14DisplayFixedAxP7SSD13054axes+0x34>
			axesChar = 'y';
 80022c6:	2379      	movs	r3, #121	; 0x79
 80022c8:	73fb      	strb	r3, [r7, #15]
			break;
 80022ca:	e003      	b.n	80022d4 <_Z14DisplayFixedAxP7SSD13054axes+0x34>
			axesChar = 'z';
 80022cc:	237a      	movs	r3, #122	; 0x7a
 80022ce:	73fb      	strb	r3, [r7, #15]
			break;
 80022d0:	e000      	b.n	80022d4 <_Z14DisplayFixedAxP7SSD13054axes+0x34>
			break;
 80022d2:	bf00      	nop
	}

	display->SetCursor(67, LINE_1_Y);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2143      	movs	r1, #67	; 0x43
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff f8c9 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
	display->WriteChar(axesChar, Font_7x10, White);
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <_Z14DisplayFixedAxP7SSD13054axes+0x58>)
 80022e0:	7bf9      	ldrb	r1, [r7, #15]
 80022e2:	2201      	movs	r2, #1
 80022e4:	9200      	str	r2, [sp, #0]
 80022e6:	cb0c      	ldmia	r3, {r2, r3}
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff f812 	bl	8001312 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR>
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000000 	.word	0x20000000

080022fc <_Z16DisplayTrackedAxP7SSD13054axes>:

void DisplayTrackedAx(SSD1305* display, axes trackedax)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af02      	add	r7, sp, #8
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	70fb      	strb	r3, [r7, #3]
	char axesChar;
	switch (trackedax) {
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d00c      	beq.n	8002328 <_Z16DisplayTrackedAxP7SSD13054axes+0x2c>
 800230e:	2b02      	cmp	r3, #2
 8002310:	dc0d      	bgt.n	800232e <_Z16DisplayTrackedAxP7SSD13054axes+0x32>
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <_Z16DisplayTrackedAxP7SSD13054axes+0x20>
 8002316:	2b01      	cmp	r3, #1
 8002318:	d003      	beq.n	8002322 <_Z16DisplayTrackedAxP7SSD13054axes+0x26>
			break;
		case z:
			axesChar = 'z';
			break;
		default:
			break;
 800231a:	e008      	b.n	800232e <_Z16DisplayTrackedAxP7SSD13054axes+0x32>
			axesChar = 'x';
 800231c:	2378      	movs	r3, #120	; 0x78
 800231e:	73fb      	strb	r3, [r7, #15]
			break;
 8002320:	e006      	b.n	8002330 <_Z16DisplayTrackedAxP7SSD13054axes+0x34>
			axesChar = 'y';
 8002322:	2379      	movs	r3, #121	; 0x79
 8002324:	73fb      	strb	r3, [r7, #15]
			break;
 8002326:	e003      	b.n	8002330 <_Z16DisplayTrackedAxP7SSD13054axes+0x34>
			axesChar = 'z';
 8002328:	237a      	movs	r3, #122	; 0x7a
 800232a:	73fb      	strb	r3, [r7, #15]
			break;
 800232c:	e000      	b.n	8002330 <_Z16DisplayTrackedAxP7SSD13054axes+0x34>
			break;
 800232e:	bf00      	nop
	}

	display->SetCursor(67, LINE_2_Y);
 8002330:	220b      	movs	r2, #11
 8002332:	2143      	movs	r1, #67	; 0x43
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff f89b 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
	display->WriteChar(axesChar, Font_7x10, White);
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <_Z16DisplayTrackedAxP7SSD13054axes+0x58>)
 800233c:	7bf9      	ldrb	r1, [r7, #15]
 800233e:	2201      	movs	r2, #1
 8002340:	9200      	str	r2, [sp, #0]
 8002342:	cb0c      	ldmia	r3, {r2, r3}
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7fe ffe4 	bl	8001312 <_ZN7SSD13059WriteCharEc7FontDef13SSD1305_COLOR>
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000000 	.word	0x20000000

08002358 <_Z15DisplaySetAngleP7SSD1305t>:

void DisplaySetAngle(SSD1305* display, uint16_t setdeg)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af02      	add	r7, sp, #8
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
	char setDegString[4];
	snprintf(setDegString, sizeof(setDegString), "%d", setdeg);
 8002364:	887b      	ldrh	r3, [r7, #2]
 8002366:	f107 000c 	add.w	r0, r7, #12
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <_Z15DisplaySetAngleP7SSD1305t+0x40>)
 800236c:	2104      	movs	r1, #4
 800236e:	f004 fd8b 	bl	8006e88 <sniprintf>
	display->SetCursor(53, LINE_3_Y);
 8002372:	2216      	movs	r2, #22
 8002374:	2135      	movs	r1, #53	; 0x35
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff f87a 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
	display->WriteString(setDegString, Font_7x10, White);
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <_Z15DisplaySetAngleP7SSD1305t+0x44>)
 800237e:	f107 010c 	add.w	r1, r7, #12
 8002382:	2201      	movs	r2, #1
 8002384:	9200      	str	r2, [sp, #0]
 8002386:	cb0c      	ldmia	r3, {r2, r3}
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff f846 	bl	800141a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	080093c4 	.word	0x080093c4
 800239c:	20000000 	.word	0x20000000

080023a0 <_Z14DisplayRefDegsP7SSD1305fff>:

void DisplayRefDegs(SSD1305* display, float refX, float refY, float refZ)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80023ac:	edc7 0a01 	vstr	s1, [r7, #4]
 80023b0:	ed87 1a00 	vstr	s2, [r7]
	char refDegStr[6];
	snprintf(refDegStr, sizeof(refDegStr), "%05.1f", refX);
 80023b4:	68b8      	ldr	r0, [r7, #8]
 80023b6:	f7fe f8e7 	bl	8000588 <__aeabi_f2d>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	f107 0010 	add.w	r0, r7, #16
 80023c2:	e9cd 2300 	strd	r2, r3, [sp]
 80023c6:	4a26      	ldr	r2, [pc, #152]	; (8002460 <_Z14DisplayRefDegsP7SSD1305fff+0xc0>)
 80023c8:	2106      	movs	r1, #6
 80023ca:	f004 fd5d 	bl	8006e88 <sniprintf>
	display->SetCursor(93, LINE_1_Y);
 80023ce:	2200      	movs	r2, #0
 80023d0:	215d      	movs	r1, #93	; 0x5d
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f7ff f84c 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
	display->WriteString(refDegStr, Font_7x10, White);
 80023d8:	4b22      	ldr	r3, [pc, #136]	; (8002464 <_Z14DisplayRefDegsP7SSD1305fff+0xc4>)
 80023da:	f107 0110 	add.w	r1, r7, #16
 80023de:	2201      	movs	r2, #1
 80023e0:	9200      	str	r2, [sp, #0]
 80023e2:	cb0c      	ldmia	r3, {r2, r3}
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f7ff f818 	bl	800141a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>

	snprintf(refDegStr, sizeof(refDegStr), "%05.1f", refY);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe f8cc 	bl	8000588 <__aeabi_f2d>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	f107 0010 	add.w	r0, r7, #16
 80023f8:	e9cd 2300 	strd	r2, r3, [sp]
 80023fc:	4a18      	ldr	r2, [pc, #96]	; (8002460 <_Z14DisplayRefDegsP7SSD1305fff+0xc0>)
 80023fe:	2106      	movs	r1, #6
 8002400:	f004 fd42 	bl	8006e88 <sniprintf>
	display->SetCursor(93, LINE_2_Y);
 8002404:	220b      	movs	r2, #11
 8002406:	215d      	movs	r1, #93	; 0x5d
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f7ff f831 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
	display->WriteString(refDegStr, Font_7x10, White);
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <_Z14DisplayRefDegsP7SSD1305fff+0xc4>)
 8002410:	f107 0110 	add.w	r1, r7, #16
 8002414:	2201      	movs	r2, #1
 8002416:	9200      	str	r2, [sp, #0]
 8002418:	cb0c      	ldmia	r3, {r2, r3}
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f7fe fffd 	bl	800141a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>

	snprintf(refDegStr, sizeof(refDegStr), "%05.1f", refZ);
 8002420:	6838      	ldr	r0, [r7, #0]
 8002422:	f7fe f8b1 	bl	8000588 <__aeabi_f2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	f107 0010 	add.w	r0, r7, #16
 800242e:	e9cd 2300 	strd	r2, r3, [sp]
 8002432:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <_Z14DisplayRefDegsP7SSD1305fff+0xc0>)
 8002434:	2106      	movs	r1, #6
 8002436:	f004 fd27 	bl	8006e88 <sniprintf>
	display->SetCursor(93, LINE_3_Y);
 800243a:	2216      	movs	r2, #22
 800243c:	215d      	movs	r1, #93	; 0x5d
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f7ff f816 	bl	8001470 <_ZN7SSD13059SetCursorEhh>
	display->WriteString(refDegStr, Font_7x10, White);
 8002444:	4b07      	ldr	r3, [pc, #28]	; (8002464 <_Z14DisplayRefDegsP7SSD1305fff+0xc4>)
 8002446:	f107 0110 	add.w	r1, r7, #16
 800244a:	2201      	movs	r2, #1
 800244c:	9200      	str	r2, [sp, #0]
 800244e:	cb0c      	ldmia	r3, {r2, r3}
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f7fe ffe2 	bl	800141a <_ZN7SSD130511WriteStringEPKc7FontDef13SSD1305_COLOR>
}
 8002456:	bf00      	nop
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	080093f4 	.word	0x080093f4
 8002464:	20000000 	.word	0x20000000

08002468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800246c:	b672      	cpsid	i
}
 800246e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002470:	e7fe      	b.n	8002470 <Error_Handler+0x8>
	...

08002474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <HAL_MspInit+0x4c>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <HAL_MspInit+0x4c>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_MspInit+0x4c>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	603b      	str	r3, [r7, #0]
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_MspInit+0x4c>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a08      	ldr	r2, [pc, #32]	; (80024c0 <HAL_MspInit+0x4c>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_MspInit+0x4c>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024b2:	2007      	movs	r0, #7
 80024b4:	f001 f932 	bl	800371c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40023800 	.word	0x40023800

080024c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a32      	ldr	r2, [pc, #200]	; (80025ac <HAL_ADC_MspInit+0xe8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d15e      	bne.n	80025a4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <HAL_ADC_MspInit+0xec>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	4a30      	ldr	r2, [pc, #192]	; (80025b0 <HAL_ADC_MspInit+0xec>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6453      	str	r3, [r2, #68]	; 0x44
 80024f6:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <HAL_ADC_MspInit+0xec>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <HAL_ADC_MspInit+0xec>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a29      	ldr	r2, [pc, #164]	; (80025b0 <HAL_ADC_MspInit+0xec>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <HAL_ADC_MspInit+0xec>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC_NUMPAD_Pin;
 800251e:	2301      	movs	r3, #1
 8002520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002522:	2303      	movs	r3, #3
 8002524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_NUMPAD_GPIO_Port, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	4820      	ldr	r0, [pc, #128]	; (80025b4 <HAL_ADC_MspInit+0xf0>)
 8002532:	f001 fca5 	bl	8003e80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_ADC_MspInit+0xf4>)
 8002538:	4a20      	ldr	r2, [pc, #128]	; (80025bc <HAL_ADC_MspInit+0xf8>)
 800253a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_ADC_MspInit+0xf4>)
 800253e:	2200      	movs	r2, #0
 8002540:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_ADC_MspInit+0xf4>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_ADC_MspInit+0xf4>)
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_ADC_MspInit+0xf4>)
 8002550:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002554:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <HAL_ADC_MspInit+0xf4>)
 8002558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800255c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800255e:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <HAL_ADC_MspInit+0xf4>)
 8002560:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002564:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <HAL_ADC_MspInit+0xf4>)
 8002568:	2200      	movs	r2, #0
 800256a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_ADC_MspInit+0xf4>)
 800256e:	2200      	movs	r2, #0
 8002570:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_ADC_MspInit+0xf4>)
 8002574:	2200      	movs	r2, #0
 8002576:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002578:	480f      	ldr	r0, [pc, #60]	; (80025b8 <HAL_ADC_MspInit+0xf4>)
 800257a:	f001 f911 	bl	80037a0 <HAL_DMA_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002584:	f7ff ff70 	bl	8002468 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <HAL_ADC_MspInit+0xf4>)
 800258c:	639a      	str	r2, [r3, #56]	; 0x38
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <HAL_ADC_MspInit+0xf4>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002594:	2200      	movs	r2, #0
 8002596:	2100      	movs	r1, #0
 8002598:	2012      	movs	r0, #18
 800259a:	f001 f8ca 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800259e:	2012      	movs	r0, #18
 80025a0:	f001 f8e3 	bl	800376a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025a4:	bf00      	nop
 80025a6:	3728      	adds	r7, #40	; 0x28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40012000 	.word	0x40012000
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020000 	.word	0x40020000
 80025b8:	20000258 	.word	0x20000258
 80025bc:	40026410 	.word	0x40026410

080025c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	; 0x28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a19      	ldr	r2, [pc, #100]	; (8002644 <HAL_I2C_MspInit+0x84>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d12c      	bne.n	800263c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_I2C_MspInit+0x88>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a17      	ldr	r2, [pc, #92]	; (8002648 <HAL_I2C_MspInit+0x88>)
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_I2C_MspInit+0x88>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002604:	2312      	movs	r3, #18
 8002606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260c:	2303      	movs	r3, #3
 800260e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002610:	2304      	movs	r3, #4
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	4619      	mov	r1, r3
 800261a:	480c      	ldr	r0, [pc, #48]	; (800264c <HAL_I2C_MspInit+0x8c>)
 800261c:	f001 fc30 	bl	8003e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_I2C_MspInit+0x88>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	4a07      	ldr	r2, [pc, #28]	; (8002648 <HAL_I2C_MspInit+0x88>)
 800262a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800262e:	6413      	str	r3, [r2, #64]	; 0x40
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_I2C_MspInit+0x88>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800263c:	bf00      	nop
 800263e:	3728      	adds	r7, #40	; 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40005400 	.word	0x40005400
 8002648:	40023800 	.word	0x40023800
 800264c:	40020400 	.word	0x40020400

08002650 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <HAL_TIM_Base_MspInit+0x48>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d115      	bne.n	800268e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_TIM_Base_MspInit+0x4c>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a0c      	ldr	r2, [pc, #48]	; (800269c <HAL_TIM_Base_MspInit+0x4c>)
 800266c:	f043 0308 	orr.w	r3, r3, #8
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_TIM_Base_MspInit+0x4c>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2100      	movs	r1, #0
 8002682:	2032      	movs	r0, #50	; 0x32
 8002684:	f001 f855 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002688:	2032      	movs	r0, #50	; 0x32
 800268a:	f001 f86e 	bl	800376a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40000c00 	.word	0x40000c00
 800269c:	40023800 	.word	0x40023800

080026a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_UART_MspInit+0x84>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d12b      	bne.n	800271a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_UART_MspInit+0x88>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a17      	ldr	r2, [pc, #92]	; (8002728 <HAL_UART_MspInit+0x88>)
 80026cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_UART_MspInit+0x88>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <HAL_UART_MspInit+0x88>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a10      	ldr	r2, [pc, #64]	; (8002728 <HAL_UART_MspInit+0x88>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <HAL_UART_MspInit+0x88>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026fa:	230c      	movs	r3, #12
 80026fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002706:	2303      	movs	r3, #3
 8002708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800270a:	2307      	movs	r3, #7
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	4619      	mov	r1, r3
 8002714:	4805      	ldr	r0, [pc, #20]	; (800272c <HAL_UART_MspInit+0x8c>)
 8002716:	f001 fbb3 	bl	8003e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800271a:	bf00      	nop
 800271c:	3728      	adds	r7, #40	; 0x28
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40004400 	.word	0x40004400
 8002728:	40023800 	.word	0x40023800
 800272c:	40020000 	.word	0x40020000

08002730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <NMI_Handler+0x4>

08002736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800273a:	e7fe      	b.n	800273a <HardFault_Handler+0x4>

0800273c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <MemManage_Handler+0x4>

08002742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002746:	e7fe      	b.n	8002746 <BusFault_Handler+0x4>

08002748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <UsageFault_Handler+0x4>

0800274e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800277c:	f000 f974 	bl	8002a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}

08002784 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <ADC_IRQHandler+0x10>)
 800278a:	f000 f9f4 	bl	8002b76 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000210 	.word	0x20000210

08002798 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <TIM5_IRQHandler+0x10>)
 800279e:	f003 f853 	bl	8005848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000030c 	.word	0x2000030c

080027ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <DMA2_Stream0_IRQHandler+0x10>)
 80027b2:	f001 f8fb 	bl	80039ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000258 	.word	0x20000258

080027c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return 1;
 80027c4:	2301      	movs	r3, #1
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <_kill>:

int _kill(int pid, int sig)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027da:	f003 feb9 	bl	8006550 <__errno>
 80027de:	4603      	mov	r3, r0
 80027e0:	2216      	movs	r2, #22
 80027e2:	601a      	str	r2, [r3, #0]
  return -1;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_exit>:

void _exit (int status)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ffe7 	bl	80027d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002802:	e7fe      	b.n	8002802 <_exit+0x12>

08002804 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	e00a      	b.n	800282c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002816:	f3af 8000 	nop.w
 800281a:	4601      	mov	r1, r0
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	60ba      	str	r2, [r7, #8]
 8002822:	b2ca      	uxtb	r2, r1
 8002824:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3301      	adds	r3, #1
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	dbf0      	blt.n	8002816 <_read+0x12>
  }

  return len;
 8002834:	687b      	ldr	r3, [r7, #4]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	e009      	b.n	8002864 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	60ba      	str	r2, [r7, #8]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	3301      	adds	r3, #1
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	429a      	cmp	r2, r3
 800286a:	dbf1      	blt.n	8002850 <_write+0x12>
  }
  return len;
 800286c:	687b      	ldr	r3, [r7, #4]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <_close>:

int _close(int file)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800287e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800289e:	605a      	str	r2, [r3, #4]
  return 0;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <_isatty>:

int _isatty(int file)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028b6:	2301      	movs	r3, #1
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e8:	4a14      	ldr	r2, [pc, #80]	; (800293c <_sbrk+0x5c>)
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <_sbrk+0x60>)
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <_sbrk+0x64>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <_sbrk+0x64>)
 80028fe:	4a12      	ldr	r2, [pc, #72]	; (8002948 <_sbrk+0x68>)
 8002900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <_sbrk+0x64>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	429a      	cmp	r2, r3
 800290e:	d207      	bcs.n	8002920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002910:	f003 fe1e 	bl	8006550 <__errno>
 8002914:	4603      	mov	r3, r0
 8002916:	220c      	movs	r2, #12
 8002918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800291a:	f04f 33ff 	mov.w	r3, #4294967295
 800291e:	e009      	b.n	8002934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <_sbrk+0x64>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	4a05      	ldr	r2, [pc, #20]	; (8002944 <_sbrk+0x64>)
 8002930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002932:	68fb      	ldr	r3, [r7, #12]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20020000 	.word	0x20020000
 8002940:	00000400 	.word	0x00000400
 8002944:	2000039c 	.word	0x2000039c
 8002948:	200003b8 	.word	0x200003b8

0800294c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <SystemInit+0x20>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	4a05      	ldr	r2, [pc, #20]	; (800296c <SystemInit+0x20>)
 8002958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800295c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002974:	480d      	ldr	r0, [pc, #52]	; (80029ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002976:	490e      	ldr	r1, [pc, #56]	; (80029b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002978:	4a0e      	ldr	r2, [pc, #56]	; (80029b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800297c:	e002      	b.n	8002984 <LoopCopyDataInit>

0800297e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002982:	3304      	adds	r3, #4

08002984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002988:	d3f9      	bcc.n	800297e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298a:	4a0b      	ldr	r2, [pc, #44]	; (80029b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800298c:	4c0b      	ldr	r4, [pc, #44]	; (80029bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002990:	e001      	b.n	8002996 <LoopFillZerobss>

08002992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002994:	3204      	adds	r2, #4

08002996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002998:	d3fb      	bcc.n	8002992 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800299a:	f7ff ffd7 	bl	800294c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800299e:	f003 fddd 	bl	800655c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029a2:	f7fe ff55 	bl	8001850 <main>
  bx  lr    
 80029a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80029b4:	0800accc 	.word	0x0800accc
  ldr r2, =_sbss
 80029b8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80029bc:	200003b4 	.word	0x200003b4

080029c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029c0:	e7fe      	b.n	80029c0 <CAN1_RX0_IRQHandler>
	...

080029c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c8:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_Init+0x40>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0d      	ldr	r2, [pc, #52]	; (8002a04 <HAL_Init+0x40>)
 80029ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_Init+0x40>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <HAL_Init+0x40>)
 80029da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <HAL_Init+0x40>)
 80029e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ec:	2003      	movs	r0, #3
 80029ee:	f000 fe95 	bl	800371c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029f2:	2000      	movs	r0, #0
 80029f4:	f000 f808 	bl	8002a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f8:	f7ff fd3c 	bl	8002474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023c00 	.word	0x40023c00

08002a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_InitTick+0x54>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_InitTick+0x58>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fead 	bl	8003786 <HAL_SYSTICK_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00e      	b.n	8002a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b0f      	cmp	r3, #15
 8002a3a:	d80a      	bhi.n	8002a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	f000 fe75 	bl	8003732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a48:	4a06      	ldr	r2, [pc, #24]	; (8002a64 <HAL_InitTick+0x5c>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e000      	b.n	8002a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000018 	.word	0x20000018
 8002a60:	20000020 	.word	0x20000020
 8002a64:	2000001c 	.word	0x2000001c

08002a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_IncTick+0x20>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_IncTick+0x24>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <HAL_IncTick+0x24>)
 8002a7a:	6013      	str	r3, [r2, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000020 	.word	0x20000020
 8002a8c:	200003a0 	.word	0x200003a0

08002a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return uwTick;
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <HAL_GetTick+0x14>)
 8002a96:	681b      	ldr	r3, [r3, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	200003a0 	.word	0x200003a0

08002aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7ff ffee 	bl	8002a90 <HAL_GetTick>
 8002ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d005      	beq.n	8002ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_Delay+0x44>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ace:	bf00      	nop
 8002ad0:	f7ff ffde 	bl	8002a90 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d8f7      	bhi.n	8002ad0 <HAL_Delay+0x28>
  {
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000020 	.word	0x20000020

08002af0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e033      	b.n	8002b6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fcd8 	bl	80024c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d118      	bne.n	8002b60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b36:	f023 0302 	bic.w	r3, r3, #2
 8002b3a:	f043 0202 	orr.w	r2, r3, #2
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fb92 	bl	800326c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	f043 0201 	orr.w	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b5e:	e001      	b.n	8002b64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d049      	beq.n	8002c40 <HAL_ADC_IRQHandler+0xca>
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d046      	beq.n	8002c40 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d105      	bne.n	8002bca <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d12b      	bne.n	8002c30 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d127      	bne.n	8002c30 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d119      	bne.n	8002c30 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0220 	bic.w	r2, r2, #32
 8002c0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f043 0201 	orr.w	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f9c1 	bl	8002fb8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f06f 0212 	mvn.w	r2, #18
 8002c3e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d057      	beq.n	8002d06 <HAL_ADC_IRQHandler+0x190>
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d054      	beq.n	8002d06 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d139      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d006      	beq.n	8002c9e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d12b      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d124      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d11d      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d119      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cd0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fc36 	bl	8003568 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 020c 	mvn.w	r2, #12
 8002d04:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d14:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d017      	beq.n	8002d4c <HAL_ADC_IRQHandler+0x1d6>
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d014      	beq.n	8002d4c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10d      	bne.n	8002d4c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f94f 	bl	8002fe0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f06f 0201 	mvn.w	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d5a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d015      	beq.n	8002d8e <HAL_ADC_IRQHandler+0x218>
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d012      	beq.n	8002d8e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6c:	f043 0202 	orr.w	r2, r3, #2
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0220 	mvn.w	r2, #32
 8002d7c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f938 	bl	8002ff4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0220 	mvn.w	r2, #32
 8002d8c:	601a      	str	r2, [r3, #0]
  }
}
 8002d8e:	bf00      	nop
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_Start_DMA+0x1e>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e0e9      	b.n	8002f8a <HAL_ADC_Start_DMA+0x1f2>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d018      	beq.n	8002dfe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ddc:	4b6d      	ldr	r3, [pc, #436]	; (8002f94 <HAL_ADC_Start_DMA+0x1fc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a6d      	ldr	r2, [pc, #436]	; (8002f98 <HAL_ADC_Start_DMA+0x200>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	0c9a      	lsrs	r2, r3, #18
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002df0:	e002      	b.n	8002df8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f9      	bne.n	8002df2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e0c:	d107      	bne.n	8002e1e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	f040 80a1 	bne.w	8002f70 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e36:	f023 0301 	bic.w	r3, r3, #1
 8002e3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6c:	d106      	bne.n	8002e7c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	f023 0206 	bic.w	r2, r3, #6
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44
 8002e7a:	e002      	b.n	8002e82 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e8a:	4b44      	ldr	r3, [pc, #272]	; (8002f9c <HAL_ADC_Start_DMA+0x204>)
 8002e8c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	4a43      	ldr	r2, [pc, #268]	; (8002fa0 <HAL_ADC_Start_DMA+0x208>)
 8002e94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	4a42      	ldr	r2, [pc, #264]	; (8002fa4 <HAL_ADC_Start_DMA+0x20c>)
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea2:	4a41      	ldr	r2, [pc, #260]	; (8002fa8 <HAL_ADC_Start_DMA+0x210>)
 8002ea4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002eae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ebe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ece:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	334c      	adds	r3, #76	; 0x4c
 8002eda:	4619      	mov	r1, r3
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f000 fd0c 	bl	80038fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d12a      	bne.n	8002f46 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a2d      	ldr	r2, [pc, #180]	; (8002fac <HAL_ADC_Start_DMA+0x214>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d015      	beq.n	8002f26 <HAL_ADC_Start_DMA+0x18e>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a2c      	ldr	r2, [pc, #176]	; (8002fb0 <HAL_ADC_Start_DMA+0x218>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d105      	bne.n	8002f10 <HAL_ADC_Start_DMA+0x178>
 8002f04:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <HAL_ADC_Start_DMA+0x204>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <HAL_ADC_Start_DMA+0x21c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d136      	bne.n	8002f88 <HAL_ADC_Start_DMA+0x1f0>
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_ADC_Start_DMA+0x204>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d130      	bne.n	8002f88 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d129      	bne.n	8002f88 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	e020      	b.n	8002f88 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a18      	ldr	r2, [pc, #96]	; (8002fac <HAL_ADC_Start_DMA+0x214>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d11b      	bne.n	8002f88 <HAL_ADC_Start_DMA+0x1f0>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d114      	bne.n	8002f88 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	e00b      	b.n	8002f88 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f043 0210 	orr.w	r2, r3, #16
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f80:	f043 0201 	orr.w	r2, r3, #1
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000018 	.word	0x20000018
 8002f98:	431bde83 	.word	0x431bde83
 8002f9c:	40012300 	.word	0x40012300
 8002fa0:	08003465 	.word	0x08003465
 8002fa4:	0800351f 	.word	0x0800351f
 8002fa8:	0800353b 	.word	0x0800353b
 8002fac:	40012000 	.word	0x40012000
 8002fb0:	40012100 	.word	0x40012100
 8002fb4:	40012200 	.word	0x40012200

08002fb8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x1c>
 8003020:	2302      	movs	r3, #2
 8003022:	e113      	b.n	800324c <HAL_ADC_ConfigChannel+0x244>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b09      	cmp	r3, #9
 8003032:	d925      	bls.n	8003080 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68d9      	ldr	r1, [r3, #12]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	3b1e      	subs	r3, #30
 800304a:	2207      	movs	r2, #7
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43da      	mvns	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	400a      	ands	r2, r1
 8003058:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68d9      	ldr	r1, [r3, #12]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	b29b      	uxth	r3, r3
 800306a:	4618      	mov	r0, r3
 800306c:	4603      	mov	r3, r0
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	4403      	add	r3, r0
 8003072:	3b1e      	subs	r3, #30
 8003074:	409a      	lsls	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	e022      	b.n	80030c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6919      	ldr	r1, [r3, #16]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	4613      	mov	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	2207      	movs	r2, #7
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43da      	mvns	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	400a      	ands	r2, r1
 80030a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6919      	ldr	r1, [r3, #16]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	4618      	mov	r0, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4403      	add	r3, r0
 80030bc:	409a      	lsls	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d824      	bhi.n	8003118 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	3b05      	subs	r3, #5
 80030e0:	221f      	movs	r2, #31
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43da      	mvns	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	400a      	ands	r2, r1
 80030ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	4618      	mov	r0, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	3b05      	subs	r3, #5
 800310a:	fa00 f203 	lsl.w	r2, r0, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	635a      	str	r2, [r3, #52]	; 0x34
 8003116:	e04c      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b0c      	cmp	r3, #12
 800311e:	d824      	bhi.n	800316a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	3b23      	subs	r3, #35	; 0x23
 8003132:	221f      	movs	r2, #31
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43da      	mvns	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	400a      	ands	r2, r1
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	b29b      	uxth	r3, r3
 800314e:	4618      	mov	r0, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	3b23      	subs	r3, #35	; 0x23
 800315c:	fa00 f203 	lsl.w	r2, r0, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
 8003168:	e023      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	3b41      	subs	r3, #65	; 0x41
 800317c:	221f      	movs	r2, #31
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43da      	mvns	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	400a      	ands	r2, r1
 800318a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	4618      	mov	r0, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	3b41      	subs	r3, #65	; 0x41
 80031a6:	fa00 f203 	lsl.w	r2, r0, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031b2:	4b29      	ldr	r3, [pc, #164]	; (8003258 <HAL_ADC_ConfigChannel+0x250>)
 80031b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a28      	ldr	r2, [pc, #160]	; (800325c <HAL_ADC_ConfigChannel+0x254>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d10f      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x1d8>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b12      	cmp	r3, #18
 80031c6:	d10b      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1d      	ldr	r2, [pc, #116]	; (800325c <HAL_ADC_ConfigChannel+0x254>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d12b      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x23a>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <HAL_ADC_ConfigChannel+0x258>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d003      	beq.n	80031fc <HAL_ADC_ConfigChannel+0x1f4>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b11      	cmp	r3, #17
 80031fa:	d122      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a11      	ldr	r2, [pc, #68]	; (8003260 <HAL_ADC_ConfigChannel+0x258>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d111      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800321e:	4b11      	ldr	r3, [pc, #68]	; (8003264 <HAL_ADC_ConfigChannel+0x25c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a11      	ldr	r2, [pc, #68]	; (8003268 <HAL_ADC_ConfigChannel+0x260>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	0c9a      	lsrs	r2, r3, #18
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003234:	e002      	b.n	800323c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	3b01      	subs	r3, #1
 800323a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f9      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40012300 	.word	0x40012300
 800325c:	40012000 	.word	0x40012000
 8003260:	10000012 	.word	0x10000012
 8003264:	20000018 	.word	0x20000018
 8003268:	431bde83 	.word	0x431bde83

0800326c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003274:	4b79      	ldr	r3, [pc, #484]	; (800345c <ADC_Init+0x1f0>)
 8003276:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	431a      	orrs	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	021a      	lsls	r2, r3, #8
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6899      	ldr	r1, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	4a58      	ldr	r2, [pc, #352]	; (8003460 <ADC_Init+0x1f4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d022      	beq.n	800334a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003312:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6899      	ldr	r1, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6899      	ldr	r1, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	e00f      	b.n	800336a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003358:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003368:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0202 	bic.w	r2, r2, #2
 8003378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6899      	ldr	r1, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	7e1b      	ldrb	r3, [r3, #24]
 8003384:	005a      	lsls	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01b      	beq.n	80033d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6859      	ldr	r1, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	3b01      	subs	r3, #1
 80033c4:	035a      	lsls	r2, r3, #13
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	e007      	b.n	80033e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	051a      	lsls	r2, r3, #20
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6899      	ldr	r1, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003422:	025a      	lsls	r2, r3, #9
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6899      	ldr	r1, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	029a      	lsls	r2, r3, #10
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	609a      	str	r2, [r3, #8]
}
 8003450:	bf00      	nop
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	40012300 	.word	0x40012300
 8003460:	0f000001 	.word	0x0f000001

08003464 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800347a:	2b00      	cmp	r3, #0
 800347c:	d13c      	bne.n	80034f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d12b      	bne.n	80034f0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800349c:	2b00      	cmp	r3, #0
 800349e:	d127      	bne.n	80034f0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d006      	beq.n	80034bc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d119      	bne.n	80034f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0220 	bic.w	r2, r2, #32
 80034ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f7ff fd61 	bl	8002fb8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034f6:	e00e      	b.n	8003516 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff fd75 	bl	8002ff4 <HAL_ADC_ErrorCallback>
}
 800350a:	e004      	b.n	8003516 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4798      	blx	r3
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff fd4d 	bl	8002fcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2240      	movs	r2, #64	; 0x40
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	f043 0204 	orr.w	r2, r3, #4
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f7ff fd4a 	bl	8002ff4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <__NVIC_SetPriorityGrouping+0x44>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003598:	4013      	ands	r3, r2
 800359a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ae:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <__NVIC_SetPriorityGrouping+0x44>)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	60d3      	str	r3, [r2, #12]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c8:	4b04      	ldr	r3, [pc, #16]	; (80035dc <__NVIC_GetPriorityGrouping+0x18>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	0a1b      	lsrs	r3, r3, #8
 80035ce:	f003 0307 	and.w	r3, r3, #7
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	db0b      	blt.n	800360a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	f003 021f 	and.w	r2, r3, #31
 80035f8:	4907      	ldr	r1, [pc, #28]	; (8003618 <__NVIC_EnableIRQ+0x38>)
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	2001      	movs	r0, #1
 8003602:	fa00 f202 	lsl.w	r2, r0, r2
 8003606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	e000e100 	.word	0xe000e100

0800361c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	6039      	str	r1, [r7, #0]
 8003626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362c:	2b00      	cmp	r3, #0
 800362e:	db0a      	blt.n	8003646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	b2da      	uxtb	r2, r3
 8003634:	490c      	ldr	r1, [pc, #48]	; (8003668 <__NVIC_SetPriority+0x4c>)
 8003636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363a:	0112      	lsls	r2, r2, #4
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	440b      	add	r3, r1
 8003640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003644:	e00a      	b.n	800365c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4908      	ldr	r1, [pc, #32]	; (800366c <__NVIC_SetPriority+0x50>)
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	3b04      	subs	r3, #4
 8003654:	0112      	lsls	r2, r2, #4
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	440b      	add	r3, r1
 800365a:	761a      	strb	r2, [r3, #24]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000e100 	.word	0xe000e100
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003670:	b480      	push	{r7}
 8003672:	b089      	sub	sp, #36	; 0x24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f1c3 0307 	rsb	r3, r3, #7
 800368a:	2b04      	cmp	r3, #4
 800368c:	bf28      	it	cs
 800368e:	2304      	movcs	r3, #4
 8003690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3304      	adds	r3, #4
 8003696:	2b06      	cmp	r3, #6
 8003698:	d902      	bls.n	80036a0 <NVIC_EncodePriority+0x30>
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3b03      	subs	r3, #3
 800369e:	e000      	b.n	80036a2 <NVIC_EncodePriority+0x32>
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	f04f 32ff 	mov.w	r2, #4294967295
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43da      	mvns	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	401a      	ands	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b8:	f04f 31ff 	mov.w	r1, #4294967295
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	43d9      	mvns	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	4313      	orrs	r3, r2
         );
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3724      	adds	r7, #36	; 0x24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e8:	d301      	bcc.n	80036ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00f      	b.n	800370e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ee:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <SysTick_Config+0x40>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036f6:	210f      	movs	r1, #15
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	f7ff ff8e 	bl	800361c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <SysTick_Config+0x40>)
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003706:	4b04      	ldr	r3, [pc, #16]	; (8003718 <SysTick_Config+0x40>)
 8003708:	2207      	movs	r2, #7
 800370a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	e000e010 	.word	0xe000e010

0800371c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ff29 	bl	800357c <__NVIC_SetPriorityGrouping>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003732:	b580      	push	{r7, lr}
 8003734:	b086      	sub	sp, #24
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003744:	f7ff ff3e 	bl	80035c4 <__NVIC_GetPriorityGrouping>
 8003748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	6978      	ldr	r0, [r7, #20]
 8003750:	f7ff ff8e 	bl	8003670 <NVIC_EncodePriority>
 8003754:	4602      	mov	r2, r0
 8003756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff ff5d 	bl	800361c <__NVIC_SetPriority>
}
 8003762:	bf00      	nop
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	4603      	mov	r3, r0
 8003772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ff31 	bl	80035e0 <__NVIC_EnableIRQ>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ffa2 	bl	80036d8 <SysTick_Config>
 8003794:	4603      	mov	r3, r0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037ac:	f7ff f970 	bl	8002a90 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e099      	b.n	80038f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037dc:	e00f      	b.n	80037fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037de:	f7ff f957 	bl	8002a90 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b05      	cmp	r3, #5
 80037ea:	d908      	bls.n	80037fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2203      	movs	r2, #3
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e078      	b.n	80038f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e8      	bne.n	80037de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4b38      	ldr	r3, [pc, #224]	; (80038f8 <HAL_DMA_Init+0x158>)
 8003818:	4013      	ands	r3, r2
 800381a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800382a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003836:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003842:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4313      	orrs	r3, r2
 800384e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	2b04      	cmp	r3, #4
 8003856:	d107      	bne.n	8003868 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	4313      	orrs	r3, r2
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f023 0307 	bic.w	r3, r3, #7
 800387e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	2b04      	cmp	r3, #4
 8003890:	d117      	bne.n	80038c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00e      	beq.n	80038c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fa6f 	bl	8003d88 <DMA_CheckFifoParam>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2240      	movs	r2, #64	; 0x40
 80038b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038be:	2301      	movs	r3, #1
 80038c0:	e016      	b.n	80038f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa26 	bl	8003d1c <DMA_CalcBaseAndBitshift>
 80038d0:	4603      	mov	r3, r0
 80038d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	223f      	movs	r2, #63	; 0x3f
 80038da:	409a      	lsls	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	f010803f 	.word	0xf010803f

080038fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003912:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_DMA_Start_IT+0x26>
 800391e:	2302      	movs	r3, #2
 8003920:	e040      	b.n	80039a4 <HAL_DMA_Start_IT+0xa8>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d12f      	bne.n	8003996 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2202      	movs	r2, #2
 800393a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f9b8 	bl	8003cc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003954:	223f      	movs	r2, #63	; 0x3f
 8003956:	409a      	lsls	r2, r3
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0216 	orr.w	r2, r2, #22
 800396a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0208 	orr.w	r2, r2, #8
 8003982:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e005      	b.n	80039a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800399e:	2302      	movs	r3, #2
 80039a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039b8:	4b8e      	ldr	r3, [pc, #568]	; (8003bf4 <HAL_DMA_IRQHandler+0x248>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a8e      	ldr	r2, [pc, #568]	; (8003bf8 <HAL_DMA_IRQHandler+0x24c>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	0a9b      	lsrs	r3, r3, #10
 80039c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	2208      	movs	r2, #8
 80039d8:	409a      	lsls	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01a      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d013      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0204 	bic.w	r2, r2, #4
 80039fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	2208      	movs	r2, #8
 8003a06:	409a      	lsls	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	f043 0201 	orr.w	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d012      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	f043 0202 	orr.w	r2, r3, #2
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	2204      	movs	r2, #4
 8003a54:	409a      	lsls	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d012      	beq.n	8003a84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00b      	beq.n	8003a84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	2204      	movs	r2, #4
 8003a72:	409a      	lsls	r2, r3
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	f043 0204 	orr.w	r2, r3, #4
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	2210      	movs	r2, #16
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d043      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d03c      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d018      	beq.n	8003aee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d108      	bne.n	8003adc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d024      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	4798      	blx	r3
 8003ada:	e01f      	b.n	8003b1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01b      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	4798      	blx	r3
 8003aec:	e016      	b.n	8003b1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d107      	bne.n	8003b0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0208 	bic.w	r2, r2, #8
 8003b0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	2220      	movs	r2, #32
 8003b22:	409a      	lsls	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 808f 	beq.w	8003c4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8087 	beq.w	8003c4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b42:	2220      	movs	r2, #32
 8003b44:	409a      	lsls	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b05      	cmp	r3, #5
 8003b54:	d136      	bne.n	8003bc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0216 	bic.w	r2, r2, #22
 8003b64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <HAL_DMA_IRQHandler+0x1da>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d007      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0208 	bic.w	r2, r2, #8
 8003b94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9a:	223f      	movs	r2, #63	; 0x3f
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d07e      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4798      	blx	r3
        }
        return;
 8003bc2:	e079      	b.n	8003cb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d01d      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10d      	bne.n	8003bfc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d031      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4798      	blx	r3
 8003bf0:	e02c      	b.n	8003c4c <HAL_DMA_IRQHandler+0x2a0>
 8003bf2:	bf00      	nop
 8003bf4:	20000018 	.word	0x20000018
 8003bf8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d023      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
 8003c0c:	e01e      	b.n	8003c4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10f      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0210 	bic.w	r2, r2, #16
 8003c2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d032      	beq.n	8003cba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d022      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2205      	movs	r2, #5
 8003c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0201 	bic.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d307      	bcc.n	8003c94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f2      	bne.n	8003c78 <HAL_DMA_IRQHandler+0x2cc>
 8003c92:	e000      	b.n	8003c96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	4798      	blx	r3
 8003cb6:	e000      	b.n	8003cba <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cb8:	bf00      	nop
    }
  }
}
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d108      	bne.n	8003d00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cfe:	e007      	b.n	8003d10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	60da      	str	r2, [r3, #12]
}
 8003d10:	bf00      	nop
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	3b10      	subs	r3, #16
 8003d2c:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <DMA_CalcBaseAndBitshift+0x64>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	091b      	lsrs	r3, r3, #4
 8003d34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d36:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <DMA_CalcBaseAndBitshift+0x68>)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d909      	bls.n	8003d5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	1d1a      	adds	r2, r3, #4
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	659a      	str	r2, [r3, #88]	; 0x58
 8003d5c:	e007      	b.n	8003d6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	aaaaaaab 	.word	0xaaaaaaab
 8003d84:	0800a8dc 	.word	0x0800a8dc

08003d88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d11f      	bne.n	8003de2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d856      	bhi.n	8003e56 <DMA_CheckFifoParam+0xce>
 8003da8:	a201      	add	r2, pc, #4	; (adr r2, 8003db0 <DMA_CheckFifoParam+0x28>)
 8003daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dae:	bf00      	nop
 8003db0:	08003dc1 	.word	0x08003dc1
 8003db4:	08003dd3 	.word	0x08003dd3
 8003db8:	08003dc1 	.word	0x08003dc1
 8003dbc:	08003e57 	.word	0x08003e57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d046      	beq.n	8003e5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd0:	e043      	b.n	8003e5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dda:	d140      	bne.n	8003e5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de0:	e03d      	b.n	8003e5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dea:	d121      	bne.n	8003e30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d837      	bhi.n	8003e62 <DMA_CheckFifoParam+0xda>
 8003df2:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <DMA_CheckFifoParam+0x70>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003e09 	.word	0x08003e09
 8003dfc:	08003e0f 	.word	0x08003e0f
 8003e00:	08003e09 	.word	0x08003e09
 8003e04:	08003e21 	.word	0x08003e21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e0c:	e030      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d025      	beq.n	8003e66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e1e:	e022      	b.n	8003e66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e28:	d11f      	bne.n	8003e6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e2e:	e01c      	b.n	8003e6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d903      	bls.n	8003e3e <DMA_CheckFifoParam+0xb6>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d003      	beq.n	8003e44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e3c:	e018      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
      break;
 8003e42:	e015      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00e      	beq.n	8003e6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
      break;
 8003e54:	e00b      	b.n	8003e6e <DMA_CheckFifoParam+0xe6>
      break;
 8003e56:	bf00      	nop
 8003e58:	e00a      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e008      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
      break;
 8003e5e:	bf00      	nop
 8003e60:	e006      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
      break;
 8003e62:	bf00      	nop
 8003e64:	e004      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
      break;
 8003e66:	bf00      	nop
 8003e68:	e002      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e6a:	bf00      	nop
 8003e6c:	e000      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
      break;
 8003e6e:	bf00      	nop
    }
  } 
  
  return status; 
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop

08003e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	e165      	b.n	8004168 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4013      	ands	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	f040 8154 	bne.w	8004162 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d005      	beq.n	8003ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d130      	bne.n	8003f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	2203      	movs	r2, #3
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f08:	2201      	movs	r2, #1
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 0201 	and.w	r2, r3, #1
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d017      	beq.n	8003f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d123      	bne.n	8003fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	08da      	lsrs	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3208      	adds	r2, #8
 8003f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	220f      	movs	r2, #15
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	08da      	lsrs	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3208      	adds	r2, #8
 8003fbe:	69b9      	ldr	r1, [r7, #24]
 8003fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	2203      	movs	r2, #3
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 0203 	and.w	r2, r3, #3
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80ae 	beq.w	8004162 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	4b5d      	ldr	r3, [pc, #372]	; (8004180 <HAL_GPIO_Init+0x300>)
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	4a5c      	ldr	r2, [pc, #368]	; (8004180 <HAL_GPIO_Init+0x300>)
 8004010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004014:	6453      	str	r3, [r2, #68]	; 0x44
 8004016:	4b5a      	ldr	r3, [pc, #360]	; (8004180 <HAL_GPIO_Init+0x300>)
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004022:	4a58      	ldr	r2, [pc, #352]	; (8004184 <HAL_GPIO_Init+0x304>)
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	089b      	lsrs	r3, r3, #2
 8004028:	3302      	adds	r3, #2
 800402a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	220f      	movs	r2, #15
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4013      	ands	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a4f      	ldr	r2, [pc, #316]	; (8004188 <HAL_GPIO_Init+0x308>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d025      	beq.n	800409a <HAL_GPIO_Init+0x21a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a4e      	ldr	r2, [pc, #312]	; (800418c <HAL_GPIO_Init+0x30c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01f      	beq.n	8004096 <HAL_GPIO_Init+0x216>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a4d      	ldr	r2, [pc, #308]	; (8004190 <HAL_GPIO_Init+0x310>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d019      	beq.n	8004092 <HAL_GPIO_Init+0x212>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a4c      	ldr	r2, [pc, #304]	; (8004194 <HAL_GPIO_Init+0x314>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <HAL_GPIO_Init+0x20e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a4b      	ldr	r2, [pc, #300]	; (8004198 <HAL_GPIO_Init+0x318>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00d      	beq.n	800408a <HAL_GPIO_Init+0x20a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a4a      	ldr	r2, [pc, #296]	; (800419c <HAL_GPIO_Init+0x31c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d007      	beq.n	8004086 <HAL_GPIO_Init+0x206>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a49      	ldr	r2, [pc, #292]	; (80041a0 <HAL_GPIO_Init+0x320>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d101      	bne.n	8004082 <HAL_GPIO_Init+0x202>
 800407e:	2306      	movs	r3, #6
 8004080:	e00c      	b.n	800409c <HAL_GPIO_Init+0x21c>
 8004082:	2307      	movs	r3, #7
 8004084:	e00a      	b.n	800409c <HAL_GPIO_Init+0x21c>
 8004086:	2305      	movs	r3, #5
 8004088:	e008      	b.n	800409c <HAL_GPIO_Init+0x21c>
 800408a:	2304      	movs	r3, #4
 800408c:	e006      	b.n	800409c <HAL_GPIO_Init+0x21c>
 800408e:	2303      	movs	r3, #3
 8004090:	e004      	b.n	800409c <HAL_GPIO_Init+0x21c>
 8004092:	2302      	movs	r3, #2
 8004094:	e002      	b.n	800409c <HAL_GPIO_Init+0x21c>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_GPIO_Init+0x21c>
 800409a:	2300      	movs	r3, #0
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	f002 0203 	and.w	r2, r2, #3
 80040a2:	0092      	lsls	r2, r2, #2
 80040a4:	4093      	lsls	r3, r2
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040ac:	4935      	ldr	r1, [pc, #212]	; (8004184 <HAL_GPIO_Init+0x304>)
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	089b      	lsrs	r3, r3, #2
 80040b2:	3302      	adds	r3, #2
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ba:	4b3a      	ldr	r3, [pc, #232]	; (80041a4 <HAL_GPIO_Init+0x324>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	43db      	mvns	r3, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4013      	ands	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040de:	4a31      	ldr	r2, [pc, #196]	; (80041a4 <HAL_GPIO_Init+0x324>)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040e4:	4b2f      	ldr	r3, [pc, #188]	; (80041a4 <HAL_GPIO_Init+0x324>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004108:	4a26      	ldr	r2, [pc, #152]	; (80041a4 <HAL_GPIO_Init+0x324>)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800410e:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <HAL_GPIO_Init+0x324>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	43db      	mvns	r3, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4013      	ands	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004132:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <HAL_GPIO_Init+0x324>)
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004138:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <HAL_GPIO_Init+0x324>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	43db      	mvns	r3, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800415c:	4a11      	ldr	r2, [pc, #68]	; (80041a4 <HAL_GPIO_Init+0x324>)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	3301      	adds	r3, #1
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	2b0f      	cmp	r3, #15
 800416c:	f67f ae96 	bls.w	8003e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004170:	bf00      	nop
 8004172:	bf00      	nop
 8004174:	3724      	adds	r7, #36	; 0x24
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800
 8004184:	40013800 	.word	0x40013800
 8004188:	40020000 	.word	0x40020000
 800418c:	40020400 	.word	0x40020400
 8004190:	40020800 	.word	0x40020800
 8004194:	40020c00 	.word	0x40020c00
 8004198:	40021000 	.word	0x40021000
 800419c:	40021400 	.word	0x40021400
 80041a0:	40021800 	.word	0x40021800
 80041a4:	40013c00 	.word	0x40013c00

080041a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	887b      	ldrh	r3, [r7, #2]
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
 80041c4:	e001      	b.n	80041ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	807b      	strh	r3, [r7, #2]
 80041e4:	4613      	mov	r3, r2
 80041e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041e8:	787b      	ldrb	r3, [r7, #1]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ee:	887a      	ldrh	r2, [r7, #2]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041f4:	e003      	b.n	80041fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041f6:	887b      	ldrh	r3, [r7, #2]
 80041f8:	041a      	lsls	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	619a      	str	r2, [r3, #24]
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	460b      	mov	r3, r1
 8004214:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800421c:	887a      	ldrh	r2, [r7, #2]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4013      	ands	r3, r2
 8004222:	041a      	lsls	r2, r3, #16
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	43d9      	mvns	r1, r3
 8004228:	887b      	ldrh	r3, [r7, #2]
 800422a:	400b      	ands	r3, r1
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	619a      	str	r2, [r3, #24]
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
	...

08004240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e12b      	b.n	80044aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fe f9aa 	bl	80025c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2224      	movs	r2, #36	; 0x24
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0201 	bic.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042a4:	f000 fd1a 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 80042a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4a81      	ldr	r2, [pc, #516]	; (80044b4 <HAL_I2C_Init+0x274>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d807      	bhi.n	80042c4 <HAL_I2C_Init+0x84>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4a80      	ldr	r2, [pc, #512]	; (80044b8 <HAL_I2C_Init+0x278>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	bf94      	ite	ls
 80042bc:	2301      	movls	r3, #1
 80042be:	2300      	movhi	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	e006      	b.n	80042d2 <HAL_I2C_Init+0x92>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a7d      	ldr	r2, [pc, #500]	; (80044bc <HAL_I2C_Init+0x27c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	bf94      	ite	ls
 80042cc:	2301      	movls	r3, #1
 80042ce:	2300      	movhi	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e0e7      	b.n	80044aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4a78      	ldr	r2, [pc, #480]	; (80044c0 <HAL_I2C_Init+0x280>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	0c9b      	lsrs	r3, r3, #18
 80042e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a6a      	ldr	r2, [pc, #424]	; (80044b4 <HAL_I2C_Init+0x274>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d802      	bhi.n	8004314 <HAL_I2C_Init+0xd4>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	3301      	adds	r3, #1
 8004312:	e009      	b.n	8004328 <HAL_I2C_Init+0xe8>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800431a:	fb02 f303 	mul.w	r3, r2, r3
 800431e:	4a69      	ldr	r2, [pc, #420]	; (80044c4 <HAL_I2C_Init+0x284>)
 8004320:	fba2 2303 	umull	r2, r3, r2, r3
 8004324:	099b      	lsrs	r3, r3, #6
 8004326:	3301      	adds	r3, #1
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	430b      	orrs	r3, r1
 800432e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800433a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	495c      	ldr	r1, [pc, #368]	; (80044b4 <HAL_I2C_Init+0x274>)
 8004344:	428b      	cmp	r3, r1
 8004346:	d819      	bhi.n	800437c <HAL_I2C_Init+0x13c>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1e59      	subs	r1, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	fbb1 f3f3 	udiv	r3, r1, r3
 8004356:	1c59      	adds	r1, r3, #1
 8004358:	f640 73fc 	movw	r3, #4092	; 0xffc
 800435c:	400b      	ands	r3, r1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_I2C_Init+0x138>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1e59      	subs	r1, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004370:	3301      	adds	r3, #1
 8004372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004376:	e051      	b.n	800441c <HAL_I2C_Init+0x1dc>
 8004378:	2304      	movs	r3, #4
 800437a:	e04f      	b.n	800441c <HAL_I2C_Init+0x1dc>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d111      	bne.n	80043a8 <HAL_I2C_Init+0x168>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	1e58      	subs	r0, r3, #1
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6859      	ldr	r1, [r3, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	440b      	add	r3, r1
 8004392:	fbb0 f3f3 	udiv	r3, r0, r3
 8004396:	3301      	adds	r3, #1
 8004398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf0c      	ite	eq
 80043a0:	2301      	moveq	r3, #1
 80043a2:	2300      	movne	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	e012      	b.n	80043ce <HAL_I2C_Init+0x18e>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1e58      	subs	r0, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6859      	ldr	r1, [r3, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	0099      	lsls	r1, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80043be:	3301      	adds	r3, #1
 80043c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	bf0c      	ite	eq
 80043c8:	2301      	moveq	r3, #1
 80043ca:	2300      	movne	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_I2C_Init+0x196>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e022      	b.n	800441c <HAL_I2C_Init+0x1dc>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10e      	bne.n	80043fc <HAL_I2C_Init+0x1bc>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1e58      	subs	r0, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6859      	ldr	r1, [r3, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	440b      	add	r3, r1
 80043ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f0:	3301      	adds	r3, #1
 80043f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fa:	e00f      	b.n	800441c <HAL_I2C_Init+0x1dc>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1e58      	subs	r0, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6859      	ldr	r1, [r3, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	0099      	lsls	r1, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004412:	3301      	adds	r3, #1
 8004414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	6809      	ldr	r1, [r1, #0]
 8004420:	4313      	orrs	r3, r2
 8004422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69da      	ldr	r2, [r3, #28]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800444a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6911      	ldr	r1, [r2, #16]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	68d2      	ldr	r2, [r2, #12]
 8004456:	4311      	orrs	r1, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	430b      	orrs	r3, r1
 800445e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	000186a0 	.word	0x000186a0
 80044b8:	001e847f 	.word	0x001e847f
 80044bc:	003d08ff 	.word	0x003d08ff
 80044c0:	431bde83 	.word	0x431bde83
 80044c4:	10624dd3 	.word	0x10624dd3

080044c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	4608      	mov	r0, r1
 80044d2:	4611      	mov	r1, r2
 80044d4:	461a      	mov	r2, r3
 80044d6:	4603      	mov	r3, r0
 80044d8:	817b      	strh	r3, [r7, #10]
 80044da:	460b      	mov	r3, r1
 80044dc:	813b      	strh	r3, [r7, #8]
 80044de:	4613      	mov	r3, r2
 80044e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044e2:	f7fe fad5 	bl	8002a90 <HAL_GetTick>
 80044e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	f040 80d9 	bne.w	80046a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	2319      	movs	r3, #25
 80044fc:	2201      	movs	r2, #1
 80044fe:	496d      	ldr	r1, [pc, #436]	; (80046b4 <HAL_I2C_Mem_Write+0x1ec>)
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f971 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
 800450e:	e0cc      	b.n	80046aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_I2C_Mem_Write+0x56>
 800451a:	2302      	movs	r3, #2
 800451c:	e0c5      	b.n	80046aa <HAL_I2C_Mem_Write+0x1e2>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d007      	beq.n	8004544 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004552:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2221      	movs	r2, #33	; 0x21
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2240      	movs	r2, #64	; 0x40
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a3a      	ldr	r2, [r7, #32]
 800456e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004574:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a4d      	ldr	r2, [pc, #308]	; (80046b8 <HAL_I2C_Mem_Write+0x1f0>)
 8004584:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004586:	88f8      	ldrh	r0, [r7, #6]
 8004588:	893a      	ldrh	r2, [r7, #8]
 800458a:	8979      	ldrh	r1, [r7, #10]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	4603      	mov	r3, r0
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f890 	bl	80046bc <I2C_RequestMemoryWrite>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d052      	beq.n	8004648 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e081      	b.n	80046aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f9f2 	bl	8004994 <I2C_WaitOnTXEFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00d      	beq.n	80045d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d107      	bne.n	80045ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e06b      	b.n	80046aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	781a      	ldrb	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b04      	cmp	r3, #4
 800460e:	d11b      	bne.n	8004648 <HAL_I2C_Mem_Write+0x180>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004614:	2b00      	cmp	r3, #0
 8004616:	d017      	beq.n	8004648 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	781a      	ldrb	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1aa      	bne.n	80045a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f9de 	bl	8004a16 <I2C_WaitOnBTFFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00d      	beq.n	800467c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	2b04      	cmp	r3, #4
 8004666:	d107      	bne.n	8004678 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004676:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e016      	b.n	80046aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800468a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e000      	b.n	80046aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	00100002 	.word	0x00100002
 80046b8:	ffff0000 	.word	0xffff0000

080046bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	4608      	mov	r0, r1
 80046c6:	4611      	mov	r1, r2
 80046c8:	461a      	mov	r2, r3
 80046ca:	4603      	mov	r3, r0
 80046cc:	817b      	strh	r3, [r7, #10]
 80046ce:	460b      	mov	r3, r1
 80046d0:	813b      	strh	r3, [r7, #8]
 80046d2:	4613      	mov	r3, r2
 80046d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f878 	bl	80047e8 <I2C_WaitOnFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00d      	beq.n	800471a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470c:	d103      	bne.n	8004716 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e05f      	b.n	80047da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800471a:	897b      	ldrh	r3, [r7, #10]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	461a      	mov	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004728:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	6a3a      	ldr	r2, [r7, #32]
 800472e:	492d      	ldr	r1, [pc, #180]	; (80047e4 <I2C_RequestMemoryWrite+0x128>)
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f8b0 	bl	8004896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e04c      	b.n	80047da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004758:	6a39      	ldr	r1, [r7, #32]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f91a 	bl	8004994 <I2C_WaitOnTXEFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00d      	beq.n	8004782 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2b04      	cmp	r3, #4
 800476c:	d107      	bne.n	800477e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e02b      	b.n	80047da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d105      	bne.n	8004794 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004788:	893b      	ldrh	r3, [r7, #8]
 800478a:	b2da      	uxtb	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	611a      	str	r2, [r3, #16]
 8004792:	e021      	b.n	80047d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004794:	893b      	ldrh	r3, [r7, #8]
 8004796:	0a1b      	lsrs	r3, r3, #8
 8004798:	b29b      	uxth	r3, r3
 800479a:	b2da      	uxtb	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a4:	6a39      	ldr	r1, [r7, #32]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f8f4 	bl	8004994 <I2C_WaitOnTXEFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00d      	beq.n	80047ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d107      	bne.n	80047ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e005      	b.n	80047da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047ce:	893b      	ldrh	r3, [r7, #8]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	00010002 	.word	0x00010002

080047e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	4613      	mov	r3, r2
 80047f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047f8:	e025      	b.n	8004846 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d021      	beq.n	8004846 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004802:	f7fe f945 	bl	8002a90 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d302      	bcc.n	8004818 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d116      	bne.n	8004846 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f043 0220 	orr.w	r2, r3, #32
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e023      	b.n	800488e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d10d      	bne.n	800486c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	43da      	mvns	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4013      	ands	r3, r2
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	bf0c      	ite	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	2300      	movne	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	e00c      	b.n	8004886 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	43da      	mvns	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4013      	ands	r3, r2
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	bf0c      	ite	eq
 800487e:	2301      	moveq	r3, #1
 8004880:	2300      	movne	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	429a      	cmp	r2, r3
 800488a:	d0b6      	beq.n	80047fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
 80048a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048a4:	e051      	b.n	800494a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b4:	d123      	bne.n	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f043 0204 	orr.w	r2, r3, #4
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e046      	b.n	800498c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d021      	beq.n	800494a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004906:	f7fe f8c3 	bl	8002a90 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	429a      	cmp	r2, r3
 8004914:	d302      	bcc.n	800491c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d116      	bne.n	800494a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f043 0220 	orr.w	r2, r3, #32
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e020      	b.n	800498c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	d10c      	bne.n	800496e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	43da      	mvns	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4013      	ands	r3, r2
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	bf14      	ite	ne
 8004966:	2301      	movne	r3, #1
 8004968:	2300      	moveq	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	e00b      	b.n	8004986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	43da      	mvns	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4013      	ands	r3, r2
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	bf14      	ite	ne
 8004980:	2301      	movne	r3, #1
 8004982:	2300      	moveq	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d18d      	bne.n	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049a0:	e02d      	b.n	80049fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f878 	bl	8004a98 <I2C_IsAcknowledgeFailed>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e02d      	b.n	8004a0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d021      	beq.n	80049fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7fe f869 	bl	8002a90 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d116      	bne.n	80049fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f043 0220 	orr.w	r2, r3, #32
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e007      	b.n	8004a0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a08:	2b80      	cmp	r3, #128	; 0x80
 8004a0a:	d1ca      	bne.n	80049a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a22:	e02d      	b.n	8004a80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f837 	bl	8004a98 <I2C_IsAcknowledgeFailed>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e02d      	b.n	8004a90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d021      	beq.n	8004a80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3c:	f7fe f828 	bl	8002a90 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d302      	bcc.n	8004a52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d116      	bne.n	8004a80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	f043 0220 	orr.w	r2, r3, #32
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e007      	b.n	8004a90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d1ca      	bne.n	8004a24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aae:	d11b      	bne.n	8004ae8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ab8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	f043 0204 	orr.w	r2, r3, #4
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e000      	b.n	8004aea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0cc      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b0c:	4b68      	ldr	r3, [pc, #416]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d90c      	bls.n	8004b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1a:	4b65      	ldr	r3, [pc, #404]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b22:	4b63      	ldr	r3, [pc, #396]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0b8      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d020      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b4c:	4b59      	ldr	r3, [pc, #356]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4a58      	ldr	r2, [pc, #352]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b64:	4b53      	ldr	r3, [pc, #332]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	4a52      	ldr	r2, [pc, #328]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b70:	4b50      	ldr	r3, [pc, #320]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	494d      	ldr	r1, [pc, #308]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d044      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d107      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b96:	4b47      	ldr	r3, [pc, #284]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d119      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e07f      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d003      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d107      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb6:	4b3f      	ldr	r3, [pc, #252]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d109      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e06f      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc6:	4b3b      	ldr	r3, [pc, #236]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e067      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bd6:	4b37      	ldr	r3, [pc, #220]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f023 0203 	bic.w	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	4934      	ldr	r1, [pc, #208]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004be8:	f7fd ff52 	bl	8002a90 <HAL_GetTick>
 8004bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bee:	e00a      	b.n	8004c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf0:	f7fd ff4e 	bl	8002a90 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e04f      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c06:	4b2b      	ldr	r3, [pc, #172]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 020c 	and.w	r2, r3, #12
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d1eb      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c18:	4b25      	ldr	r3, [pc, #148]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d20c      	bcs.n	8004c40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c26:	4b22      	ldr	r3, [pc, #136]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2e:	4b20      	ldr	r3, [pc, #128]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d001      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e032      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c4c:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	4916      	ldr	r1, [pc, #88]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	490e      	ldr	r1, [pc, #56]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c7e:	f000 f855 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004c82:	4602      	mov	r2, r0
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	490a      	ldr	r1, [pc, #40]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c90:	5ccb      	ldrb	r3, [r1, r3]
 8004c92:	fa22 f303 	lsr.w	r3, r2, r3
 8004c96:	4a09      	ldr	r2, [pc, #36]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c9a:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fd feb2 	bl	8002a08 <HAL_InitTick>

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40023c00 	.word	0x40023c00
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	0800a8c4 	.word	0x0800a8c4
 8004cbc:	20000018 	.word	0x20000018
 8004cc0:	2000001c 	.word	0x2000001c

08004cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc8:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cca:	681b      	ldr	r3, [r3, #0]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	20000018 	.word	0x20000018

08004cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ce0:	f7ff fff0 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	0a9b      	lsrs	r3, r3, #10
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	4903      	ldr	r1, [pc, #12]	; (8004d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cf2:	5ccb      	ldrb	r3, [r1, r3]
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	0800a8d4 	.word	0x0800a8d4

08004d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d08:	f7ff ffdc 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	0b5b      	lsrs	r3, r3, #13
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	4903      	ldr	r1, [pc, #12]	; (8004d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d1a:	5ccb      	ldrb	r3, [r1, r3]
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40023800 	.word	0x40023800
 8004d28:	0800a8d4 	.word	0x0800a8d4

08004d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d30:	b0ae      	sub	sp, #184	; 0xb8
 8004d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d52:	4bcb      	ldr	r3, [pc, #812]	; (8005080 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b0c      	cmp	r3, #12
 8004d5c:	f200 8206 	bhi.w	800516c <HAL_RCC_GetSysClockFreq+0x440>
 8004d60:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004d9d 	.word	0x08004d9d
 8004d6c:	0800516d 	.word	0x0800516d
 8004d70:	0800516d 	.word	0x0800516d
 8004d74:	0800516d 	.word	0x0800516d
 8004d78:	08004da5 	.word	0x08004da5
 8004d7c:	0800516d 	.word	0x0800516d
 8004d80:	0800516d 	.word	0x0800516d
 8004d84:	0800516d 	.word	0x0800516d
 8004d88:	08004dad 	.word	0x08004dad
 8004d8c:	0800516d 	.word	0x0800516d
 8004d90:	0800516d 	.word	0x0800516d
 8004d94:	0800516d 	.word	0x0800516d
 8004d98:	08004f9d 	.word	0x08004f9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d9c:	4bb9      	ldr	r3, [pc, #740]	; (8005084 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004da2:	e1e7      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004da4:	4bb8      	ldr	r3, [pc, #736]	; (8005088 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004da6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004daa:	e1e3      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dac:	4bb4      	ldr	r3, [pc, #720]	; (8005080 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004db8:	4bb1      	ldr	r3, [pc, #708]	; (8005080 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d071      	beq.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc4:	4bae      	ldr	r3, [pc, #696]	; (8005080 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	099b      	lsrs	r3, r3, #6
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dd0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004de0:	2300      	movs	r3, #0
 8004de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004de6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004dea:	4622      	mov	r2, r4
 8004dec:	462b      	mov	r3, r5
 8004dee:	f04f 0000 	mov.w	r0, #0
 8004df2:	f04f 0100 	mov.w	r1, #0
 8004df6:	0159      	lsls	r1, r3, #5
 8004df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dfc:	0150      	lsls	r0, r2, #5
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4621      	mov	r1, r4
 8004e04:	1a51      	subs	r1, r2, r1
 8004e06:	6439      	str	r1, [r7, #64]	; 0x40
 8004e08:	4629      	mov	r1, r5
 8004e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	018b      	lsls	r3, r1, #6
 8004e20:	4641      	mov	r1, r8
 8004e22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e26:	4641      	mov	r1, r8
 8004e28:	018a      	lsls	r2, r1, #6
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	1a51      	subs	r1, r2, r1
 8004e2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e30:	4649      	mov	r1, r9
 8004e32:	eb63 0301 	sbc.w	r3, r3, r1
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004e44:	4649      	mov	r1, r9
 8004e46:	00cb      	lsls	r3, r1, #3
 8004e48:	4641      	mov	r1, r8
 8004e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e4e:	4641      	mov	r1, r8
 8004e50:	00ca      	lsls	r2, r1, #3
 8004e52:	4610      	mov	r0, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	4603      	mov	r3, r0
 8004e58:	4622      	mov	r2, r4
 8004e5a:	189b      	adds	r3, r3, r2
 8004e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e5e:	462b      	mov	r3, r5
 8004e60:	460a      	mov	r2, r1
 8004e62:	eb42 0303 	adc.w	r3, r2, r3
 8004e66:	637b      	str	r3, [r7, #52]	; 0x34
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e74:	4629      	mov	r1, r5
 8004e76:	024b      	lsls	r3, r1, #9
 8004e78:	4621      	mov	r1, r4
 8004e7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e7e:	4621      	mov	r1, r4
 8004e80:	024a      	lsls	r2, r1, #9
 8004e82:	4610      	mov	r0, r2
 8004e84:	4619      	mov	r1, r3
 8004e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004e98:	f7fb fea6 	bl	8000be8 <__aeabi_uldivmod>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ea6:	e067      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea8:	4b75      	ldr	r3, [pc, #468]	; (8005080 <HAL_RCC_GetSysClockFreq+0x354>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	099b      	lsrs	r3, r3, #6
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004eb4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ec6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004eca:	4622      	mov	r2, r4
 8004ecc:	462b      	mov	r3, r5
 8004ece:	f04f 0000 	mov.w	r0, #0
 8004ed2:	f04f 0100 	mov.w	r1, #0
 8004ed6:	0159      	lsls	r1, r3, #5
 8004ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004edc:	0150      	lsls	r0, r2, #5
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	1a51      	subs	r1, r2, r1
 8004ee6:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ee8:	4629      	mov	r1, r5
 8004eea:	eb63 0301 	sbc.w	r3, r3, r1
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004efc:	4649      	mov	r1, r9
 8004efe:	018b      	lsls	r3, r1, #6
 8004f00:	4641      	mov	r1, r8
 8004f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f06:	4641      	mov	r1, r8
 8004f08:	018a      	lsls	r2, r1, #6
 8004f0a:	4641      	mov	r1, r8
 8004f0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f10:	4649      	mov	r1, r9
 8004f12:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f2a:	4692      	mov	sl, r2
 8004f2c:	469b      	mov	fp, r3
 8004f2e:	4623      	mov	r3, r4
 8004f30:	eb1a 0303 	adds.w	r3, sl, r3
 8004f34:	623b      	str	r3, [r7, #32]
 8004f36:	462b      	mov	r3, r5
 8004f38:	eb4b 0303 	adc.w	r3, fp, r3
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	028b      	lsls	r3, r1, #10
 8004f4e:	4621      	mov	r1, r4
 8004f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f54:	4621      	mov	r1, r4
 8004f56:	028a      	lsls	r2, r1, #10
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f60:	2200      	movs	r2, #0
 8004f62:	673b      	str	r3, [r7, #112]	; 0x70
 8004f64:	677a      	str	r2, [r7, #116]	; 0x74
 8004f66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004f6a:	f7fb fe3d 	bl	8000be8 <__aeabi_uldivmod>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4613      	mov	r3, r2
 8004f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f78:	4b41      	ldr	r3, [pc, #260]	; (8005080 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	0c1b      	lsrs	r3, r3, #16
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	3301      	adds	r3, #1
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004f9a:	e0eb      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f9c:	4b38      	ldr	r3, [pc, #224]	; (8005080 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fa8:	4b35      	ldr	r3, [pc, #212]	; (8005080 <HAL_RCC_GetSysClockFreq+0x354>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d06b      	beq.n	800508c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fb4:	4b32      	ldr	r3, [pc, #200]	; (8005080 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	099b      	lsrs	r3, r3, #6
 8004fba:	2200      	movs	r2, #0
 8004fbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc6:	663b      	str	r3, [r7, #96]	; 0x60
 8004fc8:	2300      	movs	r3, #0
 8004fca:	667b      	str	r3, [r7, #100]	; 0x64
 8004fcc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004fd0:	4622      	mov	r2, r4
 8004fd2:	462b      	mov	r3, r5
 8004fd4:	f04f 0000 	mov.w	r0, #0
 8004fd8:	f04f 0100 	mov.w	r1, #0
 8004fdc:	0159      	lsls	r1, r3, #5
 8004fde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fe2:	0150      	lsls	r0, r2, #5
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4621      	mov	r1, r4
 8004fea:	1a51      	subs	r1, r2, r1
 8004fec:	61b9      	str	r1, [r7, #24]
 8004fee:	4629      	mov	r1, r5
 8004ff0:	eb63 0301 	sbc.w	r3, r3, r1
 8004ff4:	61fb      	str	r3, [r7, #28]
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005002:	4659      	mov	r1, fp
 8005004:	018b      	lsls	r3, r1, #6
 8005006:	4651      	mov	r1, sl
 8005008:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800500c:	4651      	mov	r1, sl
 800500e:	018a      	lsls	r2, r1, #6
 8005010:	4651      	mov	r1, sl
 8005012:	ebb2 0801 	subs.w	r8, r2, r1
 8005016:	4659      	mov	r1, fp
 8005018:	eb63 0901 	sbc.w	r9, r3, r1
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005028:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800502c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005030:	4690      	mov	r8, r2
 8005032:	4699      	mov	r9, r3
 8005034:	4623      	mov	r3, r4
 8005036:	eb18 0303 	adds.w	r3, r8, r3
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	462b      	mov	r3, r5
 800503e:	eb49 0303 	adc.w	r3, r9, r3
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005050:	4629      	mov	r1, r5
 8005052:	024b      	lsls	r3, r1, #9
 8005054:	4621      	mov	r1, r4
 8005056:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800505a:	4621      	mov	r1, r4
 800505c:	024a      	lsls	r2, r1, #9
 800505e:	4610      	mov	r0, r2
 8005060:	4619      	mov	r1, r3
 8005062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005066:	2200      	movs	r2, #0
 8005068:	65bb      	str	r3, [r7, #88]	; 0x58
 800506a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800506c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005070:	f7fb fdba 	bl	8000be8 <__aeabi_uldivmod>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4613      	mov	r3, r2
 800507a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800507e:	e065      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x420>
 8005080:	40023800 	.word	0x40023800
 8005084:	00f42400 	.word	0x00f42400
 8005088:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800508c:	4b3d      	ldr	r3, [pc, #244]	; (8005184 <HAL_RCC_GetSysClockFreq+0x458>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	099b      	lsrs	r3, r3, #6
 8005092:	2200      	movs	r2, #0
 8005094:	4618      	mov	r0, r3
 8005096:	4611      	mov	r1, r2
 8005098:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800509c:	653b      	str	r3, [r7, #80]	; 0x50
 800509e:	2300      	movs	r3, #0
 80050a0:	657b      	str	r3, [r7, #84]	; 0x54
 80050a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80050a6:	4642      	mov	r2, r8
 80050a8:	464b      	mov	r3, r9
 80050aa:	f04f 0000 	mov.w	r0, #0
 80050ae:	f04f 0100 	mov.w	r1, #0
 80050b2:	0159      	lsls	r1, r3, #5
 80050b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050b8:	0150      	lsls	r0, r2, #5
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	4641      	mov	r1, r8
 80050c0:	1a51      	subs	r1, r2, r1
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	4649      	mov	r1, r9
 80050c6:	eb63 0301 	sbc.w	r3, r3, r1
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80050d8:	4659      	mov	r1, fp
 80050da:	018b      	lsls	r3, r1, #6
 80050dc:	4651      	mov	r1, sl
 80050de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050e2:	4651      	mov	r1, sl
 80050e4:	018a      	lsls	r2, r1, #6
 80050e6:	4651      	mov	r1, sl
 80050e8:	1a54      	subs	r4, r2, r1
 80050ea:	4659      	mov	r1, fp
 80050ec:	eb63 0501 	sbc.w	r5, r3, r1
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	00eb      	lsls	r3, r5, #3
 80050fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050fe:	00e2      	lsls	r2, r4, #3
 8005100:	4614      	mov	r4, r2
 8005102:	461d      	mov	r5, r3
 8005104:	4643      	mov	r3, r8
 8005106:	18e3      	adds	r3, r4, r3
 8005108:	603b      	str	r3, [r7, #0]
 800510a:	464b      	mov	r3, r9
 800510c:	eb45 0303 	adc.w	r3, r5, r3
 8005110:	607b      	str	r3, [r7, #4]
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800511e:	4629      	mov	r1, r5
 8005120:	028b      	lsls	r3, r1, #10
 8005122:	4621      	mov	r1, r4
 8005124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005128:	4621      	mov	r1, r4
 800512a:	028a      	lsls	r2, r1, #10
 800512c:	4610      	mov	r0, r2
 800512e:	4619      	mov	r1, r3
 8005130:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005134:	2200      	movs	r2, #0
 8005136:	64bb      	str	r3, [r7, #72]	; 0x48
 8005138:	64fa      	str	r2, [r7, #76]	; 0x4c
 800513a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800513e:	f7fb fd53 	bl	8000be8 <__aeabi_uldivmod>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4613      	mov	r3, r2
 8005148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800514c:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <HAL_RCC_GetSysClockFreq+0x458>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	0f1b      	lsrs	r3, r3, #28
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800515a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800515e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005162:	fbb2 f3f3 	udiv	r3, r2, r3
 8005166:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800516a:	e003      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <HAL_RCC_GetSysClockFreq+0x45c>)
 800516e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005172:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005174:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005178:	4618      	mov	r0, r3
 800517a:	37b8      	adds	r7, #184	; 0xb8
 800517c:	46bd      	mov	sp, r7
 800517e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005182:	bf00      	nop
 8005184:	40023800 	.word	0x40023800
 8005188:	00f42400 	.word	0x00f42400

0800518c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e28d      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8083 	beq.w	80052b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80051ac:	4b94      	ldr	r3, [pc, #592]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 030c 	and.w	r3, r3, #12
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d019      	beq.n	80051ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051b8:	4b91      	ldr	r3, [pc, #580]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d106      	bne.n	80051d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051c4:	4b8e      	ldr	r3, [pc, #568]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d0:	d00c      	beq.n	80051ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051d2:	4b8b      	ldr	r3, [pc, #556]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051da:	2b0c      	cmp	r3, #12
 80051dc:	d112      	bne.n	8005204 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051de:	4b88      	ldr	r3, [pc, #544]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051ea:	d10b      	bne.n	8005204 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ec:	4b84      	ldr	r3, [pc, #528]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d05b      	beq.n	80052b0 <HAL_RCC_OscConfig+0x124>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d157      	bne.n	80052b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e25a      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520c:	d106      	bne.n	800521c <HAL_RCC_OscConfig+0x90>
 800520e:	4b7c      	ldr	r3, [pc, #496]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a7b      	ldr	r2, [pc, #492]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e01d      	b.n	8005258 <HAL_RCC_OscConfig+0xcc>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0xb4>
 8005226:	4b76      	ldr	r3, [pc, #472]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a75      	ldr	r2, [pc, #468]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 800522c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	4b73      	ldr	r3, [pc, #460]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a72      	ldr	r2, [pc, #456]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e00b      	b.n	8005258 <HAL_RCC_OscConfig+0xcc>
 8005240:	4b6f      	ldr	r3, [pc, #444]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a6e      	ldr	r2, [pc, #440]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	4b6c      	ldr	r3, [pc, #432]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a6b      	ldr	r2, [pc, #428]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d013      	beq.n	8005288 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fd fc16 	bl	8002a90 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005268:	f7fd fc12 	bl	8002a90 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b64      	cmp	r3, #100	; 0x64
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e21f      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527a:	4b61      	ldr	r3, [pc, #388]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0xdc>
 8005286:	e014      	b.n	80052b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fd fc02 	bl	8002a90 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005290:	f7fd fbfe 	bl	8002a90 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b64      	cmp	r3, #100	; 0x64
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e20b      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052a2:	4b57      	ldr	r3, [pc, #348]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x104>
 80052ae:	e000      	b.n	80052b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d06f      	beq.n	800539e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80052be:	4b50      	ldr	r3, [pc, #320]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d017      	beq.n	80052fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80052ca:	4b4d      	ldr	r3, [pc, #308]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d105      	bne.n	80052e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80052d6:	4b4a      	ldr	r3, [pc, #296]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052e2:	4b47      	ldr	r3, [pc, #284]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d11c      	bne.n	8005328 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ee:	4b44      	ldr	r3, [pc, #272]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d116      	bne.n	8005328 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052fa:	4b41      	ldr	r3, [pc, #260]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_RCC_OscConfig+0x186>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d001      	beq.n	8005312 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e1d3      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005312:	4b3b      	ldr	r3, [pc, #236]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	4937      	ldr	r1, [pc, #220]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005322:	4313      	orrs	r3, r2
 8005324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005326:	e03a      	b.n	800539e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d020      	beq.n	8005372 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005330:	4b34      	ldr	r3, [pc, #208]	; (8005404 <HAL_RCC_OscConfig+0x278>)
 8005332:	2201      	movs	r2, #1
 8005334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005336:	f7fd fbab 	bl	8002a90 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800533e:	f7fd fba7 	bl	8002a90 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e1b4      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005350:	4b2b      	ldr	r3, [pc, #172]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f0      	beq.n	800533e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535c:	4b28      	ldr	r3, [pc, #160]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	4925      	ldr	r1, [pc, #148]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 800536c:	4313      	orrs	r3, r2
 800536e:	600b      	str	r3, [r1, #0]
 8005370:	e015      	b.n	800539e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005372:	4b24      	ldr	r3, [pc, #144]	; (8005404 <HAL_RCC_OscConfig+0x278>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005378:	f7fd fb8a 	bl	8002a90 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005380:	f7fd fb86 	bl	8002a90 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e193      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005392:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d036      	beq.n	8005418 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d016      	beq.n	80053e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053b2:	4b15      	ldr	r3, [pc, #84]	; (8005408 <HAL_RCC_OscConfig+0x27c>)
 80053b4:	2201      	movs	r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b8:	f7fd fb6a 	bl	8002a90 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053c0:	f7fd fb66 	bl	8002a90 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e173      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053d2:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80053d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCC_OscConfig+0x234>
 80053de:	e01b      	b.n	8005418 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053e0:	4b09      	ldr	r3, [pc, #36]	; (8005408 <HAL_RCC_OscConfig+0x27c>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e6:	f7fd fb53 	bl	8002a90 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ec:	e00e      	b.n	800540c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ee:	f7fd fb4f 	bl	8002a90 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d907      	bls.n	800540c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e15c      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
 8005400:	40023800 	.word	0x40023800
 8005404:	42470000 	.word	0x42470000
 8005408:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800540c:	4b8a      	ldr	r3, [pc, #552]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800540e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1ea      	bne.n	80053ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 8097 	beq.w	8005554 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005426:	2300      	movs	r3, #0
 8005428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800542a:	4b83      	ldr	r3, [pc, #524]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10f      	bne.n	8005456 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	4b7f      	ldr	r3, [pc, #508]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	4a7e      	ldr	r2, [pc, #504]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005444:	6413      	str	r3, [r2, #64]	; 0x40
 8005446:	4b7c      	ldr	r3, [pc, #496]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544e:	60bb      	str	r3, [r7, #8]
 8005450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005452:	2301      	movs	r3, #1
 8005454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005456:	4b79      	ldr	r3, [pc, #484]	; (800563c <HAL_RCC_OscConfig+0x4b0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545e:	2b00      	cmp	r3, #0
 8005460:	d118      	bne.n	8005494 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005462:	4b76      	ldr	r3, [pc, #472]	; (800563c <HAL_RCC_OscConfig+0x4b0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a75      	ldr	r2, [pc, #468]	; (800563c <HAL_RCC_OscConfig+0x4b0>)
 8005468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800546c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800546e:	f7fd fb0f 	bl	8002a90 <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005474:	e008      	b.n	8005488 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005476:	f7fd fb0b 	bl	8002a90 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e118      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005488:	4b6c      	ldr	r3, [pc, #432]	; (800563c <HAL_RCC_OscConfig+0x4b0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0f0      	beq.n	8005476 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d106      	bne.n	80054aa <HAL_RCC_OscConfig+0x31e>
 800549c:	4b66      	ldr	r3, [pc, #408]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a0:	4a65      	ldr	r2, [pc, #404]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	6713      	str	r3, [r2, #112]	; 0x70
 80054a8:	e01c      	b.n	80054e4 <HAL_RCC_OscConfig+0x358>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	d10c      	bne.n	80054cc <HAL_RCC_OscConfig+0x340>
 80054b2:	4b61      	ldr	r3, [pc, #388]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b6:	4a60      	ldr	r2, [pc, #384]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054b8:	f043 0304 	orr.w	r3, r3, #4
 80054bc:	6713      	str	r3, [r2, #112]	; 0x70
 80054be:	4b5e      	ldr	r3, [pc, #376]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c2:	4a5d      	ldr	r2, [pc, #372]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	6713      	str	r3, [r2, #112]	; 0x70
 80054ca:	e00b      	b.n	80054e4 <HAL_RCC_OscConfig+0x358>
 80054cc:	4b5a      	ldr	r3, [pc, #360]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d0:	4a59      	ldr	r2, [pc, #356]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054d2:	f023 0301 	bic.w	r3, r3, #1
 80054d6:	6713      	str	r3, [r2, #112]	; 0x70
 80054d8:	4b57      	ldr	r3, [pc, #348]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	4a56      	ldr	r2, [pc, #344]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054de:	f023 0304 	bic.w	r3, r3, #4
 80054e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d015      	beq.n	8005518 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ec:	f7fd fad0 	bl	8002a90 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f2:	e00a      	b.n	800550a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054f4:	f7fd facc 	bl	8002a90 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005502:	4293      	cmp	r3, r2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e0d7      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800550a:	4b4b      	ldr	r3, [pc, #300]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0ee      	beq.n	80054f4 <HAL_RCC_OscConfig+0x368>
 8005516:	e014      	b.n	8005542 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fd faba 	bl	8002a90 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800551e:	e00a      	b.n	8005536 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005520:	f7fd fab6 	bl	8002a90 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	; 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e0c1      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005536:	4b40      	ldr	r3, [pc, #256]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1ee      	bne.n	8005520 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d105      	bne.n	8005554 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005548:	4b3b      	ldr	r3, [pc, #236]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	4a3a      	ldr	r2, [pc, #232]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800554e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005552:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80ad 	beq.w	80056b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800555e:	4b36      	ldr	r3, [pc, #216]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	2b08      	cmp	r3, #8
 8005568:	d060      	beq.n	800562c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d145      	bne.n	80055fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005572:	4b33      	ldr	r3, [pc, #204]	; (8005640 <HAL_RCC_OscConfig+0x4b4>)
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005578:	f7fd fa8a 	bl	8002a90 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005580:	f7fd fa86 	bl	8002a90 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e093      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005592:	4b29      	ldr	r3, [pc, #164]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f0      	bne.n	8005580 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69da      	ldr	r2, [r3, #28]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	019b      	lsls	r3, r3, #6
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b4:	085b      	lsrs	r3, r3, #1
 80055b6:	3b01      	subs	r3, #1
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	061b      	lsls	r3, r3, #24
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	071b      	lsls	r3, r3, #28
 80055ca:	491b      	ldr	r1, [pc, #108]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055d0:	4b1b      	ldr	r3, [pc, #108]	; (8005640 <HAL_RCC_OscConfig+0x4b4>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d6:	f7fd fa5b 	bl	8002a90 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055de:	f7fd fa57 	bl	8002a90 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e064      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f0:	4b11      	ldr	r3, [pc, #68]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0f0      	beq.n	80055de <HAL_RCC_OscConfig+0x452>
 80055fc:	e05c      	b.n	80056b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <HAL_RCC_OscConfig+0x4b4>)
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fd fa44 	bl	8002a90 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800560c:	f7fd fa40 	bl	8002a90 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e04d      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561e:	4b06      	ldr	r3, [pc, #24]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x480>
 800562a:	e045      	b.n	80056b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d107      	bne.n	8005644 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e040      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
 8005638:	40023800 	.word	0x40023800
 800563c:	40007000 	.word	0x40007000
 8005640:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005644:	4b1f      	ldr	r3, [pc, #124]	; (80056c4 <HAL_RCC_OscConfig+0x538>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d030      	beq.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d129      	bne.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800566a:	429a      	cmp	r2, r3
 800566c:	d122      	bne.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005674:	4013      	ands	r3, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800567a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800567c:	4293      	cmp	r3, r2
 800567e:	d119      	bne.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	085b      	lsrs	r3, r3, #1
 800568c:	3b01      	subs	r3, #1
 800568e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005690:	429a      	cmp	r2, r3
 8005692:	d10f      	bne.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d107      	bne.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d001      	beq.n	80056b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40023800 	.word	0x40023800

080056c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e041      	b.n	800575e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fc ffae 	bl	8002650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3304      	adds	r3, #4
 8005704:	4619      	mov	r1, r3
 8005706:	4610      	mov	r0, r2
 8005708:	f000 fa96 	bl	8005c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	d001      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e04e      	b.n	800581e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0201 	orr.w	r2, r2, #1
 8005796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a23      	ldr	r2, [pc, #140]	; (800582c <HAL_TIM_Base_Start_IT+0xc4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d022      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x80>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057aa:	d01d      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x80>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1f      	ldr	r2, [pc, #124]	; (8005830 <HAL_TIM_Base_Start_IT+0xc8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d018      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x80>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1e      	ldr	r2, [pc, #120]	; (8005834 <HAL_TIM_Base_Start_IT+0xcc>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d013      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x80>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1c      	ldr	r2, [pc, #112]	; (8005838 <HAL_TIM_Base_Start_IT+0xd0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00e      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x80>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1b      	ldr	r2, [pc, #108]	; (800583c <HAL_TIM_Base_Start_IT+0xd4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d009      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x80>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a19      	ldr	r2, [pc, #100]	; (8005840 <HAL_TIM_Base_Start_IT+0xd8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d004      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x80>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a18      	ldr	r2, [pc, #96]	; (8005844 <HAL_TIM_Base_Start_IT+0xdc>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d111      	bne.n	800580c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b06      	cmp	r3, #6
 80057f8:	d010      	beq.n	800581c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0201 	orr.w	r2, r2, #1
 8005808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800580a:	e007      	b.n	800581c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	40010000 	.word	0x40010000
 8005830:	40000400 	.word	0x40000400
 8005834:	40000800 	.word	0x40000800
 8005838:	40000c00 	.word	0x40000c00
 800583c:	40010400 	.word	0x40010400
 8005840:	40014000 	.word	0x40014000
 8005844:	40001800 	.word	0x40001800

08005848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b02      	cmp	r3, #2
 800585c:	d122      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b02      	cmp	r3, #2
 800586a:	d11b      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0202 	mvn.w	r2, #2
 8005874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f9b5 	bl	8005bfa <HAL_TIM_IC_CaptureCallback>
 8005890:	e005      	b.n	800589e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f9a7 	bl	8005be6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f9b8 	bl	8005c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d122      	bne.n	80058f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d11b      	bne.n	80058f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0204 	mvn.w	r2, #4
 80058c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2202      	movs	r2, #2
 80058ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f98b 	bl	8005bfa <HAL_TIM_IC_CaptureCallback>
 80058e4:	e005      	b.n	80058f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f97d 	bl	8005be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f98e 	bl	8005c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b08      	cmp	r3, #8
 8005904:	d122      	bne.n	800594c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b08      	cmp	r3, #8
 8005912:	d11b      	bne.n	800594c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0208 	mvn.w	r2, #8
 800591c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2204      	movs	r2, #4
 8005922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f961 	bl	8005bfa <HAL_TIM_IC_CaptureCallback>
 8005938:	e005      	b.n	8005946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f953 	bl	8005be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f964 	bl	8005c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b10      	cmp	r3, #16
 8005958:	d122      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b10      	cmp	r3, #16
 8005966:	d11b      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0210 	mvn.w	r2, #16
 8005970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2208      	movs	r2, #8
 8005976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f937 	bl	8005bfa <HAL_TIM_IC_CaptureCallback>
 800598c:	e005      	b.n	800599a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f929 	bl	8005be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f93a 	bl	8005c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d10e      	bne.n	80059cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d107      	bne.n	80059cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0201 	mvn.w	r2, #1
 80059c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fc fb4c 	bl	8002064 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d6:	2b80      	cmp	r3, #128	; 0x80
 80059d8:	d10e      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e4:	2b80      	cmp	r3, #128	; 0x80
 80059e6:	d107      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fae0 	bl	8005fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	d10e      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	2b40      	cmp	r3, #64	; 0x40
 8005a12:	d107      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f8ff 	bl	8005c22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	d10e      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d107      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0220 	mvn.w	r2, #32
 8005a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 faaa 	bl	8005fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIM_ConfigClockSource+0x1c>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e0b4      	b.n	8005bde <HAL_TIM_ConfigClockSource+0x186>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aac:	d03e      	beq.n	8005b2c <HAL_TIM_ConfigClockSource+0xd4>
 8005aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab2:	f200 8087 	bhi.w	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aba:	f000 8086 	beq.w	8005bca <HAL_TIM_ConfigClockSource+0x172>
 8005abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac2:	d87f      	bhi.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac4:	2b70      	cmp	r3, #112	; 0x70
 8005ac6:	d01a      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0xa6>
 8005ac8:	2b70      	cmp	r3, #112	; 0x70
 8005aca:	d87b      	bhi.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005acc:	2b60      	cmp	r3, #96	; 0x60
 8005ace:	d050      	beq.n	8005b72 <HAL_TIM_ConfigClockSource+0x11a>
 8005ad0:	2b60      	cmp	r3, #96	; 0x60
 8005ad2:	d877      	bhi.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad4:	2b50      	cmp	r3, #80	; 0x50
 8005ad6:	d03c      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0xfa>
 8005ad8:	2b50      	cmp	r3, #80	; 0x50
 8005ada:	d873      	bhi.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005adc:	2b40      	cmp	r3, #64	; 0x40
 8005ade:	d058      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0x13a>
 8005ae0:	2b40      	cmp	r3, #64	; 0x40
 8005ae2:	d86f      	bhi.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae4:	2b30      	cmp	r3, #48	; 0x30
 8005ae6:	d064      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ae8:	2b30      	cmp	r3, #48	; 0x30
 8005aea:	d86b      	bhi.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d060      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	d867      	bhi.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d05c      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005af8:	2b10      	cmp	r3, #16
 8005afa:	d05a      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005afc:	e062      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	6899      	ldr	r1, [r3, #8]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f000 f9ad 	bl	8005e6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	609a      	str	r2, [r3, #8]
      break;
 8005b2a:	e04f      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6818      	ldr	r0, [r3, #0]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	6899      	ldr	r1, [r3, #8]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f000 f996 	bl	8005e6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b4e:	609a      	str	r2, [r3, #8]
      break;
 8005b50:	e03c      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	6859      	ldr	r1, [r3, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f000 f90a 	bl	8005d78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2150      	movs	r1, #80	; 0x50
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f963 	bl	8005e36 <TIM_ITRx_SetConfig>
      break;
 8005b70:	e02c      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6859      	ldr	r1, [r3, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f000 f929 	bl	8005dd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2160      	movs	r1, #96	; 0x60
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 f953 	bl	8005e36 <TIM_ITRx_SetConfig>
      break;
 8005b90:	e01c      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	6859      	ldr	r1, [r3, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f000 f8ea 	bl	8005d78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2140      	movs	r1, #64	; 0x40
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 f943 	bl	8005e36 <TIM_ITRx_SetConfig>
      break;
 8005bb0:	e00c      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	f000 f93a 	bl	8005e36 <TIM_ITRx_SetConfig>
      break;
 8005bc2:	e003      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bc8:	e000      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
	...

08005c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a40      	ldr	r2, [pc, #256]	; (8005d4c <TIM_Base_SetConfig+0x114>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d013      	beq.n	8005c78 <TIM_Base_SetConfig+0x40>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c56:	d00f      	beq.n	8005c78 <TIM_Base_SetConfig+0x40>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a3d      	ldr	r2, [pc, #244]	; (8005d50 <TIM_Base_SetConfig+0x118>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d00b      	beq.n	8005c78 <TIM_Base_SetConfig+0x40>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a3c      	ldr	r2, [pc, #240]	; (8005d54 <TIM_Base_SetConfig+0x11c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d007      	beq.n	8005c78 <TIM_Base_SetConfig+0x40>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a3b      	ldr	r2, [pc, #236]	; (8005d58 <TIM_Base_SetConfig+0x120>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <TIM_Base_SetConfig+0x40>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a3a      	ldr	r2, [pc, #232]	; (8005d5c <TIM_Base_SetConfig+0x124>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d108      	bne.n	8005c8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a2f      	ldr	r2, [pc, #188]	; (8005d4c <TIM_Base_SetConfig+0x114>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d02b      	beq.n	8005cea <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c98:	d027      	beq.n	8005cea <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a2c      	ldr	r2, [pc, #176]	; (8005d50 <TIM_Base_SetConfig+0x118>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d023      	beq.n	8005cea <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2b      	ldr	r2, [pc, #172]	; (8005d54 <TIM_Base_SetConfig+0x11c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d01f      	beq.n	8005cea <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a2a      	ldr	r2, [pc, #168]	; (8005d58 <TIM_Base_SetConfig+0x120>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d01b      	beq.n	8005cea <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a29      	ldr	r2, [pc, #164]	; (8005d5c <TIM_Base_SetConfig+0x124>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d017      	beq.n	8005cea <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a28      	ldr	r2, [pc, #160]	; (8005d60 <TIM_Base_SetConfig+0x128>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d013      	beq.n	8005cea <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a27      	ldr	r2, [pc, #156]	; (8005d64 <TIM_Base_SetConfig+0x12c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00f      	beq.n	8005cea <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a26      	ldr	r2, [pc, #152]	; (8005d68 <TIM_Base_SetConfig+0x130>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00b      	beq.n	8005cea <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a25      	ldr	r2, [pc, #148]	; (8005d6c <TIM_Base_SetConfig+0x134>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d007      	beq.n	8005cea <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a24      	ldr	r2, [pc, #144]	; (8005d70 <TIM_Base_SetConfig+0x138>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d003      	beq.n	8005cea <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a23      	ldr	r2, [pc, #140]	; (8005d74 <TIM_Base_SetConfig+0x13c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d108      	bne.n	8005cfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <TIM_Base_SetConfig+0x114>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d003      	beq.n	8005d30 <TIM_Base_SetConfig+0xf8>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a0c      	ldr	r2, [pc, #48]	; (8005d5c <TIM_Base_SetConfig+0x124>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d103      	bne.n	8005d38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	615a      	str	r2, [r3, #20]
}
 8005d3e:	bf00      	nop
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40010000 	.word	0x40010000
 8005d50:	40000400 	.word	0x40000400
 8005d54:	40000800 	.word	0x40000800
 8005d58:	40000c00 	.word	0x40000c00
 8005d5c:	40010400 	.word	0x40010400
 8005d60:	40014000 	.word	0x40014000
 8005d64:	40014400 	.word	0x40014400
 8005d68:	40014800 	.word	0x40014800
 8005d6c:	40001800 	.word	0x40001800
 8005d70:	40001c00 	.word	0x40001c00
 8005d74:	40002000 	.word	0x40002000

08005d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f023 0201 	bic.w	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f023 030a 	bic.w	r3, r3, #10
 8005db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	621a      	str	r2, [r3, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b087      	sub	sp, #28
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	f023 0210 	bic.w	r2, r3, #16
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	031b      	lsls	r3, r3, #12
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	621a      	str	r2, [r3, #32]
}
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f043 0307 	orr.w	r3, r3, #7
 8005e58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	609a      	str	r2, [r3, #8]
}
 8005e60:	bf00      	nop
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	021a      	lsls	r2, r3, #8
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	609a      	str	r2, [r3, #8]
}
 8005ea0:	bf00      	nop
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e05a      	b.n	8005f7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a21      	ldr	r2, [pc, #132]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d022      	beq.n	8005f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f10:	d01d      	beq.n	8005f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1d      	ldr	r2, [pc, #116]	; (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d018      	beq.n	8005f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1b      	ldr	r2, [pc, #108]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d013      	beq.n	8005f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1a      	ldr	r2, [pc, #104]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d00e      	beq.n	8005f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d009      	beq.n	8005f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a17      	ldr	r2, [pc, #92]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d004      	beq.n	8005f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d10c      	bne.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40010000 	.word	0x40010000
 8005f8c:	40000400 	.word	0x40000400
 8005f90:	40000800 	.word	0x40000800
 8005f94:	40000c00 	.word	0x40000c00
 8005f98:	40010400 	.word	0x40010400
 8005f9c:	40014000 	.word	0x40014000
 8005fa0:	40001800 	.word	0x40001800

08005fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e03f      	b.n	800605e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fc fb54 	bl	80026a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2224      	movs	r2, #36	; 0x24
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800600e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f829 	bl	8006068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695a      	ldr	r2, [r3, #20]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68da      	ldr	r2, [r3, #12]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800606c:	b0c0      	sub	sp, #256	; 0x100
 800606e:	af00      	add	r7, sp, #0
 8006070:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	68d9      	ldr	r1, [r3, #12]
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	ea40 0301 	orr.w	r3, r0, r1
 8006090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	431a      	orrs	r2, r3
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060c0:	f021 010c 	bic.w	r1, r1, #12
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060ce:	430b      	orrs	r3, r1
 80060d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e2:	6999      	ldr	r1, [r3, #24]
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	ea40 0301 	orr.w	r3, r0, r1
 80060ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b8f      	ldr	r3, [pc, #572]	; (8006334 <UART_SetConfig+0x2cc>)
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d005      	beq.n	8006108 <UART_SetConfig+0xa0>
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b8d      	ldr	r3, [pc, #564]	; (8006338 <UART_SetConfig+0x2d0>)
 8006104:	429a      	cmp	r2, r3
 8006106:	d104      	bne.n	8006112 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006108:	f7fe fdfc 	bl	8004d04 <HAL_RCC_GetPCLK2Freq>
 800610c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006110:	e003      	b.n	800611a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006112:	f7fe fde3 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 8006116:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006124:	f040 810c 	bne.w	8006340 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800612c:	2200      	movs	r2, #0
 800612e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006132:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006136:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800613a:	4622      	mov	r2, r4
 800613c:	462b      	mov	r3, r5
 800613e:	1891      	adds	r1, r2, r2
 8006140:	65b9      	str	r1, [r7, #88]	; 0x58
 8006142:	415b      	adcs	r3, r3
 8006144:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006146:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800614a:	4621      	mov	r1, r4
 800614c:	eb12 0801 	adds.w	r8, r2, r1
 8006150:	4629      	mov	r1, r5
 8006152:	eb43 0901 	adc.w	r9, r3, r1
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800616a:	4690      	mov	r8, r2
 800616c:	4699      	mov	r9, r3
 800616e:	4623      	mov	r3, r4
 8006170:	eb18 0303 	adds.w	r3, r8, r3
 8006174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006178:	462b      	mov	r3, r5
 800617a:	eb49 0303 	adc.w	r3, r9, r3
 800617e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800618e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006192:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006196:	460b      	mov	r3, r1
 8006198:	18db      	adds	r3, r3, r3
 800619a:	653b      	str	r3, [r7, #80]	; 0x50
 800619c:	4613      	mov	r3, r2
 800619e:	eb42 0303 	adc.w	r3, r2, r3
 80061a2:	657b      	str	r3, [r7, #84]	; 0x54
 80061a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061ac:	f7fa fd1c 	bl	8000be8 <__aeabi_uldivmod>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4b61      	ldr	r3, [pc, #388]	; (800633c <UART_SetConfig+0x2d4>)
 80061b6:	fba3 2302 	umull	r2, r3, r3, r2
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	011c      	lsls	r4, r3, #4
 80061be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061d0:	4642      	mov	r2, r8
 80061d2:	464b      	mov	r3, r9
 80061d4:	1891      	adds	r1, r2, r2
 80061d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80061d8:	415b      	adcs	r3, r3
 80061da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061e0:	4641      	mov	r1, r8
 80061e2:	eb12 0a01 	adds.w	sl, r2, r1
 80061e6:	4649      	mov	r1, r9
 80061e8:	eb43 0b01 	adc.w	fp, r3, r1
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006200:	4692      	mov	sl, r2
 8006202:	469b      	mov	fp, r3
 8006204:	4643      	mov	r3, r8
 8006206:	eb1a 0303 	adds.w	r3, sl, r3
 800620a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800620e:	464b      	mov	r3, r9
 8006210:	eb4b 0303 	adc.w	r3, fp, r3
 8006214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006224:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006228:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800622c:	460b      	mov	r3, r1
 800622e:	18db      	adds	r3, r3, r3
 8006230:	643b      	str	r3, [r7, #64]	; 0x40
 8006232:	4613      	mov	r3, r2
 8006234:	eb42 0303 	adc.w	r3, r2, r3
 8006238:	647b      	str	r3, [r7, #68]	; 0x44
 800623a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800623e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006242:	f7fa fcd1 	bl	8000be8 <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4611      	mov	r1, r2
 800624c:	4b3b      	ldr	r3, [pc, #236]	; (800633c <UART_SetConfig+0x2d4>)
 800624e:	fba3 2301 	umull	r2, r3, r3, r1
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	2264      	movs	r2, #100	; 0x64
 8006256:	fb02 f303 	mul.w	r3, r2, r3
 800625a:	1acb      	subs	r3, r1, r3
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006262:	4b36      	ldr	r3, [pc, #216]	; (800633c <UART_SetConfig+0x2d4>)
 8006264:	fba3 2302 	umull	r2, r3, r3, r2
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006270:	441c      	add	r4, r3
 8006272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006276:	2200      	movs	r2, #0
 8006278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800627c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006280:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006284:	4642      	mov	r2, r8
 8006286:	464b      	mov	r3, r9
 8006288:	1891      	adds	r1, r2, r2
 800628a:	63b9      	str	r1, [r7, #56]	; 0x38
 800628c:	415b      	adcs	r3, r3
 800628e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006294:	4641      	mov	r1, r8
 8006296:	1851      	adds	r1, r2, r1
 8006298:	6339      	str	r1, [r7, #48]	; 0x30
 800629a:	4649      	mov	r1, r9
 800629c:	414b      	adcs	r3, r1
 800629e:	637b      	str	r3, [r7, #52]	; 0x34
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062ac:	4659      	mov	r1, fp
 80062ae:	00cb      	lsls	r3, r1, #3
 80062b0:	4651      	mov	r1, sl
 80062b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062b6:	4651      	mov	r1, sl
 80062b8:	00ca      	lsls	r2, r1, #3
 80062ba:	4610      	mov	r0, r2
 80062bc:	4619      	mov	r1, r3
 80062be:	4603      	mov	r3, r0
 80062c0:	4642      	mov	r2, r8
 80062c2:	189b      	adds	r3, r3, r2
 80062c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062c8:	464b      	mov	r3, r9
 80062ca:	460a      	mov	r2, r1
 80062cc:	eb42 0303 	adc.w	r3, r2, r3
 80062d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062e8:	460b      	mov	r3, r1
 80062ea:	18db      	adds	r3, r3, r3
 80062ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ee:	4613      	mov	r3, r2
 80062f0:	eb42 0303 	adc.w	r3, r2, r3
 80062f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062fe:	f7fa fc73 	bl	8000be8 <__aeabi_uldivmod>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4b0d      	ldr	r3, [pc, #52]	; (800633c <UART_SetConfig+0x2d4>)
 8006308:	fba3 1302 	umull	r1, r3, r3, r2
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	2164      	movs	r1, #100	; 0x64
 8006310:	fb01 f303 	mul.w	r3, r1, r3
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	3332      	adds	r3, #50	; 0x32
 800631a:	4a08      	ldr	r2, [pc, #32]	; (800633c <UART_SetConfig+0x2d4>)
 800631c:	fba2 2303 	umull	r2, r3, r2, r3
 8006320:	095b      	lsrs	r3, r3, #5
 8006322:	f003 0207 	and.w	r2, r3, #7
 8006326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4422      	add	r2, r4
 800632e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006330:	e105      	b.n	800653e <UART_SetConfig+0x4d6>
 8006332:	bf00      	nop
 8006334:	40011000 	.word	0x40011000
 8006338:	40011400 	.word	0x40011400
 800633c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006344:	2200      	movs	r2, #0
 8006346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800634a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800634e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006352:	4642      	mov	r2, r8
 8006354:	464b      	mov	r3, r9
 8006356:	1891      	adds	r1, r2, r2
 8006358:	6239      	str	r1, [r7, #32]
 800635a:	415b      	adcs	r3, r3
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
 800635e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006362:	4641      	mov	r1, r8
 8006364:	1854      	adds	r4, r2, r1
 8006366:	4649      	mov	r1, r9
 8006368:	eb43 0501 	adc.w	r5, r3, r1
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	f04f 0300 	mov.w	r3, #0
 8006374:	00eb      	lsls	r3, r5, #3
 8006376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800637a:	00e2      	lsls	r2, r4, #3
 800637c:	4614      	mov	r4, r2
 800637e:	461d      	mov	r5, r3
 8006380:	4643      	mov	r3, r8
 8006382:	18e3      	adds	r3, r4, r3
 8006384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006388:	464b      	mov	r3, r9
 800638a:	eb45 0303 	adc.w	r3, r5, r3
 800638e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800639e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063a2:	f04f 0200 	mov.w	r2, #0
 80063a6:	f04f 0300 	mov.w	r3, #0
 80063aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063ae:	4629      	mov	r1, r5
 80063b0:	008b      	lsls	r3, r1, #2
 80063b2:	4621      	mov	r1, r4
 80063b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063b8:	4621      	mov	r1, r4
 80063ba:	008a      	lsls	r2, r1, #2
 80063bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063c0:	f7fa fc12 	bl	8000be8 <__aeabi_uldivmod>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4b60      	ldr	r3, [pc, #384]	; (800654c <UART_SetConfig+0x4e4>)
 80063ca:	fba3 2302 	umull	r2, r3, r3, r2
 80063ce:	095b      	lsrs	r3, r3, #5
 80063d0:	011c      	lsls	r4, r3, #4
 80063d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063e4:	4642      	mov	r2, r8
 80063e6:	464b      	mov	r3, r9
 80063e8:	1891      	adds	r1, r2, r2
 80063ea:	61b9      	str	r1, [r7, #24]
 80063ec:	415b      	adcs	r3, r3
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063f4:	4641      	mov	r1, r8
 80063f6:	1851      	adds	r1, r2, r1
 80063f8:	6139      	str	r1, [r7, #16]
 80063fa:	4649      	mov	r1, r9
 80063fc:	414b      	adcs	r3, r1
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800640c:	4659      	mov	r1, fp
 800640e:	00cb      	lsls	r3, r1, #3
 8006410:	4651      	mov	r1, sl
 8006412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006416:	4651      	mov	r1, sl
 8006418:	00ca      	lsls	r2, r1, #3
 800641a:	4610      	mov	r0, r2
 800641c:	4619      	mov	r1, r3
 800641e:	4603      	mov	r3, r0
 8006420:	4642      	mov	r2, r8
 8006422:	189b      	adds	r3, r3, r2
 8006424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006428:	464b      	mov	r3, r9
 800642a:	460a      	mov	r2, r1
 800642c:	eb42 0303 	adc.w	r3, r2, r3
 8006430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	67bb      	str	r3, [r7, #120]	; 0x78
 800643e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800644c:	4649      	mov	r1, r9
 800644e:	008b      	lsls	r3, r1, #2
 8006450:	4641      	mov	r1, r8
 8006452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006456:	4641      	mov	r1, r8
 8006458:	008a      	lsls	r2, r1, #2
 800645a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800645e:	f7fa fbc3 	bl	8000be8 <__aeabi_uldivmod>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4b39      	ldr	r3, [pc, #228]	; (800654c <UART_SetConfig+0x4e4>)
 8006468:	fba3 1302 	umull	r1, r3, r3, r2
 800646c:	095b      	lsrs	r3, r3, #5
 800646e:	2164      	movs	r1, #100	; 0x64
 8006470:	fb01 f303 	mul.w	r3, r1, r3
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	3332      	adds	r3, #50	; 0x32
 800647a:	4a34      	ldr	r2, [pc, #208]	; (800654c <UART_SetConfig+0x4e4>)
 800647c:	fba2 2303 	umull	r2, r3, r2, r3
 8006480:	095b      	lsrs	r3, r3, #5
 8006482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006486:	441c      	add	r4, r3
 8006488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800648c:	2200      	movs	r2, #0
 800648e:	673b      	str	r3, [r7, #112]	; 0x70
 8006490:	677a      	str	r2, [r7, #116]	; 0x74
 8006492:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006496:	4642      	mov	r2, r8
 8006498:	464b      	mov	r3, r9
 800649a:	1891      	adds	r1, r2, r2
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	415b      	adcs	r3, r3
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064a6:	4641      	mov	r1, r8
 80064a8:	1851      	adds	r1, r2, r1
 80064aa:	6039      	str	r1, [r7, #0]
 80064ac:	4649      	mov	r1, r9
 80064ae:	414b      	adcs	r3, r1
 80064b0:	607b      	str	r3, [r7, #4]
 80064b2:	f04f 0200 	mov.w	r2, #0
 80064b6:	f04f 0300 	mov.w	r3, #0
 80064ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064be:	4659      	mov	r1, fp
 80064c0:	00cb      	lsls	r3, r1, #3
 80064c2:	4651      	mov	r1, sl
 80064c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064c8:	4651      	mov	r1, sl
 80064ca:	00ca      	lsls	r2, r1, #3
 80064cc:	4610      	mov	r0, r2
 80064ce:	4619      	mov	r1, r3
 80064d0:	4603      	mov	r3, r0
 80064d2:	4642      	mov	r2, r8
 80064d4:	189b      	adds	r3, r3, r2
 80064d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80064d8:	464b      	mov	r3, r9
 80064da:	460a      	mov	r2, r1
 80064dc:	eb42 0303 	adc.w	r3, r2, r3
 80064e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	663b      	str	r3, [r7, #96]	; 0x60
 80064ec:	667a      	str	r2, [r7, #100]	; 0x64
 80064ee:	f04f 0200 	mov.w	r2, #0
 80064f2:	f04f 0300 	mov.w	r3, #0
 80064f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064fa:	4649      	mov	r1, r9
 80064fc:	008b      	lsls	r3, r1, #2
 80064fe:	4641      	mov	r1, r8
 8006500:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006504:	4641      	mov	r1, r8
 8006506:	008a      	lsls	r2, r1, #2
 8006508:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800650c:	f7fa fb6c 	bl	8000be8 <__aeabi_uldivmod>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4b0d      	ldr	r3, [pc, #52]	; (800654c <UART_SetConfig+0x4e4>)
 8006516:	fba3 1302 	umull	r1, r3, r3, r2
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	2164      	movs	r1, #100	; 0x64
 800651e:	fb01 f303 	mul.w	r3, r1, r3
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	3332      	adds	r3, #50	; 0x32
 8006528:	4a08      	ldr	r2, [pc, #32]	; (800654c <UART_SetConfig+0x4e4>)
 800652a:	fba2 2303 	umull	r2, r3, r2, r3
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	f003 020f 	and.w	r2, r3, #15
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4422      	add	r2, r4
 800653c:	609a      	str	r2, [r3, #8]
}
 800653e:	bf00      	nop
 8006540:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006544:	46bd      	mov	sp, r7
 8006546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800654a:	bf00      	nop
 800654c:	51eb851f 	.word	0x51eb851f

08006550 <__errno>:
 8006550:	4b01      	ldr	r3, [pc, #4]	; (8006558 <__errno+0x8>)
 8006552:	6818      	ldr	r0, [r3, #0]
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	20000024 	.word	0x20000024

0800655c <__libc_init_array>:
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	4d0d      	ldr	r5, [pc, #52]	; (8006594 <__libc_init_array+0x38>)
 8006560:	4c0d      	ldr	r4, [pc, #52]	; (8006598 <__libc_init_array+0x3c>)
 8006562:	1b64      	subs	r4, r4, r5
 8006564:	10a4      	asrs	r4, r4, #2
 8006566:	2600      	movs	r6, #0
 8006568:	42a6      	cmp	r6, r4
 800656a:	d109      	bne.n	8006580 <__libc_init_array+0x24>
 800656c:	4d0b      	ldr	r5, [pc, #44]	; (800659c <__libc_init_array+0x40>)
 800656e:	4c0c      	ldr	r4, [pc, #48]	; (80065a0 <__libc_init_array+0x44>)
 8006570:	f002 ff16 	bl	80093a0 <_init>
 8006574:	1b64      	subs	r4, r4, r5
 8006576:	10a4      	asrs	r4, r4, #2
 8006578:	2600      	movs	r6, #0
 800657a:	42a6      	cmp	r6, r4
 800657c:	d105      	bne.n	800658a <__libc_init_array+0x2e>
 800657e:	bd70      	pop	{r4, r5, r6, pc}
 8006580:	f855 3b04 	ldr.w	r3, [r5], #4
 8006584:	4798      	blx	r3
 8006586:	3601      	adds	r6, #1
 8006588:	e7ee      	b.n	8006568 <__libc_init_array+0xc>
 800658a:	f855 3b04 	ldr.w	r3, [r5], #4
 800658e:	4798      	blx	r3
 8006590:	3601      	adds	r6, #1
 8006592:	e7f2      	b.n	800657a <__libc_init_array+0x1e>
 8006594:	0800acc4 	.word	0x0800acc4
 8006598:	0800acc4 	.word	0x0800acc4
 800659c:	0800acc4 	.word	0x0800acc4
 80065a0:	0800acc8 	.word	0x0800acc8

080065a4 <memset>:
 80065a4:	4402      	add	r2, r0
 80065a6:	4603      	mov	r3, r0
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d100      	bne.n	80065ae <memset+0xa>
 80065ac:	4770      	bx	lr
 80065ae:	f803 1b01 	strb.w	r1, [r3], #1
 80065b2:	e7f9      	b.n	80065a8 <memset+0x4>

080065b4 <__cvt>:
 80065b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065b8:	ec55 4b10 	vmov	r4, r5, d0
 80065bc:	2d00      	cmp	r5, #0
 80065be:	460e      	mov	r6, r1
 80065c0:	4619      	mov	r1, r3
 80065c2:	462b      	mov	r3, r5
 80065c4:	bfbb      	ittet	lt
 80065c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065ca:	461d      	movlt	r5, r3
 80065cc:	2300      	movge	r3, #0
 80065ce:	232d      	movlt	r3, #45	; 0x2d
 80065d0:	700b      	strb	r3, [r1, #0]
 80065d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80065d8:	4691      	mov	r9, r2
 80065da:	f023 0820 	bic.w	r8, r3, #32
 80065de:	bfbc      	itt	lt
 80065e0:	4622      	movlt	r2, r4
 80065e2:	4614      	movlt	r4, r2
 80065e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065e8:	d005      	beq.n	80065f6 <__cvt+0x42>
 80065ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065ee:	d100      	bne.n	80065f2 <__cvt+0x3e>
 80065f0:	3601      	adds	r6, #1
 80065f2:	2102      	movs	r1, #2
 80065f4:	e000      	b.n	80065f8 <__cvt+0x44>
 80065f6:	2103      	movs	r1, #3
 80065f8:	ab03      	add	r3, sp, #12
 80065fa:	9301      	str	r3, [sp, #4]
 80065fc:	ab02      	add	r3, sp, #8
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	ec45 4b10 	vmov	d0, r4, r5
 8006604:	4653      	mov	r3, sl
 8006606:	4632      	mov	r2, r6
 8006608:	f000 fcfe 	bl	8007008 <_dtoa_r>
 800660c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006610:	4607      	mov	r7, r0
 8006612:	d102      	bne.n	800661a <__cvt+0x66>
 8006614:	f019 0f01 	tst.w	r9, #1
 8006618:	d022      	beq.n	8006660 <__cvt+0xac>
 800661a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800661e:	eb07 0906 	add.w	r9, r7, r6
 8006622:	d110      	bne.n	8006646 <__cvt+0x92>
 8006624:	783b      	ldrb	r3, [r7, #0]
 8006626:	2b30      	cmp	r3, #48	; 0x30
 8006628:	d10a      	bne.n	8006640 <__cvt+0x8c>
 800662a:	2200      	movs	r2, #0
 800662c:	2300      	movs	r3, #0
 800662e:	4620      	mov	r0, r4
 8006630:	4629      	mov	r1, r5
 8006632:	f7fa fa69 	bl	8000b08 <__aeabi_dcmpeq>
 8006636:	b918      	cbnz	r0, 8006640 <__cvt+0x8c>
 8006638:	f1c6 0601 	rsb	r6, r6, #1
 800663c:	f8ca 6000 	str.w	r6, [sl]
 8006640:	f8da 3000 	ldr.w	r3, [sl]
 8006644:	4499      	add	r9, r3
 8006646:	2200      	movs	r2, #0
 8006648:	2300      	movs	r3, #0
 800664a:	4620      	mov	r0, r4
 800664c:	4629      	mov	r1, r5
 800664e:	f7fa fa5b 	bl	8000b08 <__aeabi_dcmpeq>
 8006652:	b108      	cbz	r0, 8006658 <__cvt+0xa4>
 8006654:	f8cd 900c 	str.w	r9, [sp, #12]
 8006658:	2230      	movs	r2, #48	; 0x30
 800665a:	9b03      	ldr	r3, [sp, #12]
 800665c:	454b      	cmp	r3, r9
 800665e:	d307      	bcc.n	8006670 <__cvt+0xbc>
 8006660:	9b03      	ldr	r3, [sp, #12]
 8006662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006664:	1bdb      	subs	r3, r3, r7
 8006666:	4638      	mov	r0, r7
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	b004      	add	sp, #16
 800666c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006670:	1c59      	adds	r1, r3, #1
 8006672:	9103      	str	r1, [sp, #12]
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	e7f0      	b.n	800665a <__cvt+0xa6>

08006678 <__exponent>:
 8006678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800667a:	4603      	mov	r3, r0
 800667c:	2900      	cmp	r1, #0
 800667e:	bfb8      	it	lt
 8006680:	4249      	neglt	r1, r1
 8006682:	f803 2b02 	strb.w	r2, [r3], #2
 8006686:	bfb4      	ite	lt
 8006688:	222d      	movlt	r2, #45	; 0x2d
 800668a:	222b      	movge	r2, #43	; 0x2b
 800668c:	2909      	cmp	r1, #9
 800668e:	7042      	strb	r2, [r0, #1]
 8006690:	dd2a      	ble.n	80066e8 <__exponent+0x70>
 8006692:	f10d 0407 	add.w	r4, sp, #7
 8006696:	46a4      	mov	ip, r4
 8006698:	270a      	movs	r7, #10
 800669a:	46a6      	mov	lr, r4
 800669c:	460a      	mov	r2, r1
 800669e:	fb91 f6f7 	sdiv	r6, r1, r7
 80066a2:	fb07 1516 	mls	r5, r7, r6, r1
 80066a6:	3530      	adds	r5, #48	; 0x30
 80066a8:	2a63      	cmp	r2, #99	; 0x63
 80066aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80066ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066b2:	4631      	mov	r1, r6
 80066b4:	dcf1      	bgt.n	800669a <__exponent+0x22>
 80066b6:	3130      	adds	r1, #48	; 0x30
 80066b8:	f1ae 0502 	sub.w	r5, lr, #2
 80066bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066c0:	1c44      	adds	r4, r0, #1
 80066c2:	4629      	mov	r1, r5
 80066c4:	4561      	cmp	r1, ip
 80066c6:	d30a      	bcc.n	80066de <__exponent+0x66>
 80066c8:	f10d 0209 	add.w	r2, sp, #9
 80066cc:	eba2 020e 	sub.w	r2, r2, lr
 80066d0:	4565      	cmp	r5, ip
 80066d2:	bf88      	it	hi
 80066d4:	2200      	movhi	r2, #0
 80066d6:	4413      	add	r3, r2
 80066d8:	1a18      	subs	r0, r3, r0
 80066da:	b003      	add	sp, #12
 80066dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066e6:	e7ed      	b.n	80066c4 <__exponent+0x4c>
 80066e8:	2330      	movs	r3, #48	; 0x30
 80066ea:	3130      	adds	r1, #48	; 0x30
 80066ec:	7083      	strb	r3, [r0, #2]
 80066ee:	70c1      	strb	r1, [r0, #3]
 80066f0:	1d03      	adds	r3, r0, #4
 80066f2:	e7f1      	b.n	80066d8 <__exponent+0x60>

080066f4 <_printf_float>:
 80066f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f8:	ed2d 8b02 	vpush	{d8}
 80066fc:	b08d      	sub	sp, #52	; 0x34
 80066fe:	460c      	mov	r4, r1
 8006700:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006704:	4616      	mov	r6, r2
 8006706:	461f      	mov	r7, r3
 8006708:	4605      	mov	r5, r0
 800670a:	f001 fa6b 	bl	8007be4 <_localeconv_r>
 800670e:	f8d0 a000 	ldr.w	sl, [r0]
 8006712:	4650      	mov	r0, sl
 8006714:	f7f9 fd7c 	bl	8000210 <strlen>
 8006718:	2300      	movs	r3, #0
 800671a:	930a      	str	r3, [sp, #40]	; 0x28
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	9305      	str	r3, [sp, #20]
 8006720:	f8d8 3000 	ldr.w	r3, [r8]
 8006724:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006728:	3307      	adds	r3, #7
 800672a:	f023 0307 	bic.w	r3, r3, #7
 800672e:	f103 0208 	add.w	r2, r3, #8
 8006732:	f8c8 2000 	str.w	r2, [r8]
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800673e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006742:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006746:	9307      	str	r3, [sp, #28]
 8006748:	f8cd 8018 	str.w	r8, [sp, #24]
 800674c:	ee08 0a10 	vmov	s16, r0
 8006750:	4b9f      	ldr	r3, [pc, #636]	; (80069d0 <_printf_float+0x2dc>)
 8006752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006756:	f04f 32ff 	mov.w	r2, #4294967295
 800675a:	f7fa fa07 	bl	8000b6c <__aeabi_dcmpun>
 800675e:	bb88      	cbnz	r0, 80067c4 <_printf_float+0xd0>
 8006760:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006764:	4b9a      	ldr	r3, [pc, #616]	; (80069d0 <_printf_float+0x2dc>)
 8006766:	f04f 32ff 	mov.w	r2, #4294967295
 800676a:	f7fa f9e1 	bl	8000b30 <__aeabi_dcmple>
 800676e:	bb48      	cbnz	r0, 80067c4 <_printf_float+0xd0>
 8006770:	2200      	movs	r2, #0
 8006772:	2300      	movs	r3, #0
 8006774:	4640      	mov	r0, r8
 8006776:	4649      	mov	r1, r9
 8006778:	f7fa f9d0 	bl	8000b1c <__aeabi_dcmplt>
 800677c:	b110      	cbz	r0, 8006784 <_printf_float+0x90>
 800677e:	232d      	movs	r3, #45	; 0x2d
 8006780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006784:	4b93      	ldr	r3, [pc, #588]	; (80069d4 <_printf_float+0x2e0>)
 8006786:	4894      	ldr	r0, [pc, #592]	; (80069d8 <_printf_float+0x2e4>)
 8006788:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800678c:	bf94      	ite	ls
 800678e:	4698      	movls	r8, r3
 8006790:	4680      	movhi	r8, r0
 8006792:	2303      	movs	r3, #3
 8006794:	6123      	str	r3, [r4, #16]
 8006796:	9b05      	ldr	r3, [sp, #20]
 8006798:	f023 0204 	bic.w	r2, r3, #4
 800679c:	6022      	str	r2, [r4, #0]
 800679e:	f04f 0900 	mov.w	r9, #0
 80067a2:	9700      	str	r7, [sp, #0]
 80067a4:	4633      	mov	r3, r6
 80067a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80067a8:	4621      	mov	r1, r4
 80067aa:	4628      	mov	r0, r5
 80067ac:	f000 f9d8 	bl	8006b60 <_printf_common>
 80067b0:	3001      	adds	r0, #1
 80067b2:	f040 8090 	bne.w	80068d6 <_printf_float+0x1e2>
 80067b6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ba:	b00d      	add	sp, #52	; 0x34
 80067bc:	ecbd 8b02 	vpop	{d8}
 80067c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c4:	4642      	mov	r2, r8
 80067c6:	464b      	mov	r3, r9
 80067c8:	4640      	mov	r0, r8
 80067ca:	4649      	mov	r1, r9
 80067cc:	f7fa f9ce 	bl	8000b6c <__aeabi_dcmpun>
 80067d0:	b140      	cbz	r0, 80067e4 <_printf_float+0xf0>
 80067d2:	464b      	mov	r3, r9
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	bfbc      	itt	lt
 80067d8:	232d      	movlt	r3, #45	; 0x2d
 80067da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067de:	487f      	ldr	r0, [pc, #508]	; (80069dc <_printf_float+0x2e8>)
 80067e0:	4b7f      	ldr	r3, [pc, #508]	; (80069e0 <_printf_float+0x2ec>)
 80067e2:	e7d1      	b.n	8006788 <_printf_float+0x94>
 80067e4:	6863      	ldr	r3, [r4, #4]
 80067e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80067ea:	9206      	str	r2, [sp, #24]
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	d13f      	bne.n	8006870 <_printf_float+0x17c>
 80067f0:	2306      	movs	r3, #6
 80067f2:	6063      	str	r3, [r4, #4]
 80067f4:	9b05      	ldr	r3, [sp, #20]
 80067f6:	6861      	ldr	r1, [r4, #4]
 80067f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80067fc:	2300      	movs	r3, #0
 80067fe:	9303      	str	r3, [sp, #12]
 8006800:	ab0a      	add	r3, sp, #40	; 0x28
 8006802:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006806:	ab09      	add	r3, sp, #36	; 0x24
 8006808:	ec49 8b10 	vmov	d0, r8, r9
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	6022      	str	r2, [r4, #0]
 8006810:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006814:	4628      	mov	r0, r5
 8006816:	f7ff fecd 	bl	80065b4 <__cvt>
 800681a:	9b06      	ldr	r3, [sp, #24]
 800681c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800681e:	2b47      	cmp	r3, #71	; 0x47
 8006820:	4680      	mov	r8, r0
 8006822:	d108      	bne.n	8006836 <_printf_float+0x142>
 8006824:	1cc8      	adds	r0, r1, #3
 8006826:	db02      	blt.n	800682e <_printf_float+0x13a>
 8006828:	6863      	ldr	r3, [r4, #4]
 800682a:	4299      	cmp	r1, r3
 800682c:	dd41      	ble.n	80068b2 <_printf_float+0x1be>
 800682e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006832:	fa5f fb8b 	uxtb.w	fp, fp
 8006836:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800683a:	d820      	bhi.n	800687e <_printf_float+0x18a>
 800683c:	3901      	subs	r1, #1
 800683e:	465a      	mov	r2, fp
 8006840:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006844:	9109      	str	r1, [sp, #36]	; 0x24
 8006846:	f7ff ff17 	bl	8006678 <__exponent>
 800684a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800684c:	1813      	adds	r3, r2, r0
 800684e:	2a01      	cmp	r2, #1
 8006850:	4681      	mov	r9, r0
 8006852:	6123      	str	r3, [r4, #16]
 8006854:	dc02      	bgt.n	800685c <_printf_float+0x168>
 8006856:	6822      	ldr	r2, [r4, #0]
 8006858:	07d2      	lsls	r2, r2, #31
 800685a:	d501      	bpl.n	8006860 <_printf_float+0x16c>
 800685c:	3301      	adds	r3, #1
 800685e:	6123      	str	r3, [r4, #16]
 8006860:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006864:	2b00      	cmp	r3, #0
 8006866:	d09c      	beq.n	80067a2 <_printf_float+0xae>
 8006868:	232d      	movs	r3, #45	; 0x2d
 800686a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800686e:	e798      	b.n	80067a2 <_printf_float+0xae>
 8006870:	9a06      	ldr	r2, [sp, #24]
 8006872:	2a47      	cmp	r2, #71	; 0x47
 8006874:	d1be      	bne.n	80067f4 <_printf_float+0x100>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1bc      	bne.n	80067f4 <_printf_float+0x100>
 800687a:	2301      	movs	r3, #1
 800687c:	e7b9      	b.n	80067f2 <_printf_float+0xfe>
 800687e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006882:	d118      	bne.n	80068b6 <_printf_float+0x1c2>
 8006884:	2900      	cmp	r1, #0
 8006886:	6863      	ldr	r3, [r4, #4]
 8006888:	dd0b      	ble.n	80068a2 <_printf_float+0x1ae>
 800688a:	6121      	str	r1, [r4, #16]
 800688c:	b913      	cbnz	r3, 8006894 <_printf_float+0x1a0>
 800688e:	6822      	ldr	r2, [r4, #0]
 8006890:	07d0      	lsls	r0, r2, #31
 8006892:	d502      	bpl.n	800689a <_printf_float+0x1a6>
 8006894:	3301      	adds	r3, #1
 8006896:	440b      	add	r3, r1
 8006898:	6123      	str	r3, [r4, #16]
 800689a:	65a1      	str	r1, [r4, #88]	; 0x58
 800689c:	f04f 0900 	mov.w	r9, #0
 80068a0:	e7de      	b.n	8006860 <_printf_float+0x16c>
 80068a2:	b913      	cbnz	r3, 80068aa <_printf_float+0x1b6>
 80068a4:	6822      	ldr	r2, [r4, #0]
 80068a6:	07d2      	lsls	r2, r2, #31
 80068a8:	d501      	bpl.n	80068ae <_printf_float+0x1ba>
 80068aa:	3302      	adds	r3, #2
 80068ac:	e7f4      	b.n	8006898 <_printf_float+0x1a4>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e7f2      	b.n	8006898 <_printf_float+0x1a4>
 80068b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80068b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b8:	4299      	cmp	r1, r3
 80068ba:	db05      	blt.n	80068c8 <_printf_float+0x1d4>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	6121      	str	r1, [r4, #16]
 80068c0:	07d8      	lsls	r0, r3, #31
 80068c2:	d5ea      	bpl.n	800689a <_printf_float+0x1a6>
 80068c4:	1c4b      	adds	r3, r1, #1
 80068c6:	e7e7      	b.n	8006898 <_printf_float+0x1a4>
 80068c8:	2900      	cmp	r1, #0
 80068ca:	bfd4      	ite	le
 80068cc:	f1c1 0202 	rsble	r2, r1, #2
 80068d0:	2201      	movgt	r2, #1
 80068d2:	4413      	add	r3, r2
 80068d4:	e7e0      	b.n	8006898 <_printf_float+0x1a4>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	055a      	lsls	r2, r3, #21
 80068da:	d407      	bmi.n	80068ec <_printf_float+0x1f8>
 80068dc:	6923      	ldr	r3, [r4, #16]
 80068de:	4642      	mov	r2, r8
 80068e0:	4631      	mov	r1, r6
 80068e2:	4628      	mov	r0, r5
 80068e4:	47b8      	blx	r7
 80068e6:	3001      	adds	r0, #1
 80068e8:	d12c      	bne.n	8006944 <_printf_float+0x250>
 80068ea:	e764      	b.n	80067b6 <_printf_float+0xc2>
 80068ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068f0:	f240 80e0 	bls.w	8006ab4 <_printf_float+0x3c0>
 80068f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068f8:	2200      	movs	r2, #0
 80068fa:	2300      	movs	r3, #0
 80068fc:	f7fa f904 	bl	8000b08 <__aeabi_dcmpeq>
 8006900:	2800      	cmp	r0, #0
 8006902:	d034      	beq.n	800696e <_printf_float+0x27a>
 8006904:	4a37      	ldr	r2, [pc, #220]	; (80069e4 <_printf_float+0x2f0>)
 8006906:	2301      	movs	r3, #1
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	f43f af51 	beq.w	80067b6 <_printf_float+0xc2>
 8006914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006918:	429a      	cmp	r2, r3
 800691a:	db02      	blt.n	8006922 <_printf_float+0x22e>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	07d8      	lsls	r0, r3, #31
 8006920:	d510      	bpl.n	8006944 <_printf_float+0x250>
 8006922:	ee18 3a10 	vmov	r3, s16
 8006926:	4652      	mov	r2, sl
 8006928:	4631      	mov	r1, r6
 800692a:	4628      	mov	r0, r5
 800692c:	47b8      	blx	r7
 800692e:	3001      	adds	r0, #1
 8006930:	f43f af41 	beq.w	80067b6 <_printf_float+0xc2>
 8006934:	f04f 0800 	mov.w	r8, #0
 8006938:	f104 091a 	add.w	r9, r4, #26
 800693c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800693e:	3b01      	subs	r3, #1
 8006940:	4543      	cmp	r3, r8
 8006942:	dc09      	bgt.n	8006958 <_printf_float+0x264>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	079b      	lsls	r3, r3, #30
 8006948:	f100 8105 	bmi.w	8006b56 <_printf_float+0x462>
 800694c:	68e0      	ldr	r0, [r4, #12]
 800694e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006950:	4298      	cmp	r0, r3
 8006952:	bfb8      	it	lt
 8006954:	4618      	movlt	r0, r3
 8006956:	e730      	b.n	80067ba <_printf_float+0xc6>
 8006958:	2301      	movs	r3, #1
 800695a:	464a      	mov	r2, r9
 800695c:	4631      	mov	r1, r6
 800695e:	4628      	mov	r0, r5
 8006960:	47b8      	blx	r7
 8006962:	3001      	adds	r0, #1
 8006964:	f43f af27 	beq.w	80067b6 <_printf_float+0xc2>
 8006968:	f108 0801 	add.w	r8, r8, #1
 800696c:	e7e6      	b.n	800693c <_printf_float+0x248>
 800696e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006970:	2b00      	cmp	r3, #0
 8006972:	dc39      	bgt.n	80069e8 <_printf_float+0x2f4>
 8006974:	4a1b      	ldr	r2, [pc, #108]	; (80069e4 <_printf_float+0x2f0>)
 8006976:	2301      	movs	r3, #1
 8006978:	4631      	mov	r1, r6
 800697a:	4628      	mov	r0, r5
 800697c:	47b8      	blx	r7
 800697e:	3001      	adds	r0, #1
 8006980:	f43f af19 	beq.w	80067b6 <_printf_float+0xc2>
 8006984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006988:	4313      	orrs	r3, r2
 800698a:	d102      	bne.n	8006992 <_printf_float+0x29e>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	07d9      	lsls	r1, r3, #31
 8006990:	d5d8      	bpl.n	8006944 <_printf_float+0x250>
 8006992:	ee18 3a10 	vmov	r3, s16
 8006996:	4652      	mov	r2, sl
 8006998:	4631      	mov	r1, r6
 800699a:	4628      	mov	r0, r5
 800699c:	47b8      	blx	r7
 800699e:	3001      	adds	r0, #1
 80069a0:	f43f af09 	beq.w	80067b6 <_printf_float+0xc2>
 80069a4:	f04f 0900 	mov.w	r9, #0
 80069a8:	f104 0a1a 	add.w	sl, r4, #26
 80069ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ae:	425b      	negs	r3, r3
 80069b0:	454b      	cmp	r3, r9
 80069b2:	dc01      	bgt.n	80069b8 <_printf_float+0x2c4>
 80069b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b6:	e792      	b.n	80068de <_printf_float+0x1ea>
 80069b8:	2301      	movs	r3, #1
 80069ba:	4652      	mov	r2, sl
 80069bc:	4631      	mov	r1, r6
 80069be:	4628      	mov	r0, r5
 80069c0:	47b8      	blx	r7
 80069c2:	3001      	adds	r0, #1
 80069c4:	f43f aef7 	beq.w	80067b6 <_printf_float+0xc2>
 80069c8:	f109 0901 	add.w	r9, r9, #1
 80069cc:	e7ee      	b.n	80069ac <_printf_float+0x2b8>
 80069ce:	bf00      	nop
 80069d0:	7fefffff 	.word	0x7fefffff
 80069d4:	0800a8e8 	.word	0x0800a8e8
 80069d8:	0800a8ec 	.word	0x0800a8ec
 80069dc:	0800a8f4 	.word	0x0800a8f4
 80069e0:	0800a8f0 	.word	0x0800a8f0
 80069e4:	0800a8f8 	.word	0x0800a8f8
 80069e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069ec:	429a      	cmp	r2, r3
 80069ee:	bfa8      	it	ge
 80069f0:	461a      	movge	r2, r3
 80069f2:	2a00      	cmp	r2, #0
 80069f4:	4691      	mov	r9, r2
 80069f6:	dc37      	bgt.n	8006a68 <_printf_float+0x374>
 80069f8:	f04f 0b00 	mov.w	fp, #0
 80069fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a00:	f104 021a 	add.w	r2, r4, #26
 8006a04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a06:	9305      	str	r3, [sp, #20]
 8006a08:	eba3 0309 	sub.w	r3, r3, r9
 8006a0c:	455b      	cmp	r3, fp
 8006a0e:	dc33      	bgt.n	8006a78 <_printf_float+0x384>
 8006a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a14:	429a      	cmp	r2, r3
 8006a16:	db3b      	blt.n	8006a90 <_printf_float+0x39c>
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	07da      	lsls	r2, r3, #31
 8006a1c:	d438      	bmi.n	8006a90 <_printf_float+0x39c>
 8006a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a20:	9a05      	ldr	r2, [sp, #20]
 8006a22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a24:	1a9a      	subs	r2, r3, r2
 8006a26:	eba3 0901 	sub.w	r9, r3, r1
 8006a2a:	4591      	cmp	r9, r2
 8006a2c:	bfa8      	it	ge
 8006a2e:	4691      	movge	r9, r2
 8006a30:	f1b9 0f00 	cmp.w	r9, #0
 8006a34:	dc35      	bgt.n	8006aa2 <_printf_float+0x3ae>
 8006a36:	f04f 0800 	mov.w	r8, #0
 8006a3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a3e:	f104 0a1a 	add.w	sl, r4, #26
 8006a42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a46:	1a9b      	subs	r3, r3, r2
 8006a48:	eba3 0309 	sub.w	r3, r3, r9
 8006a4c:	4543      	cmp	r3, r8
 8006a4e:	f77f af79 	ble.w	8006944 <_printf_float+0x250>
 8006a52:	2301      	movs	r3, #1
 8006a54:	4652      	mov	r2, sl
 8006a56:	4631      	mov	r1, r6
 8006a58:	4628      	mov	r0, r5
 8006a5a:	47b8      	blx	r7
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	f43f aeaa 	beq.w	80067b6 <_printf_float+0xc2>
 8006a62:	f108 0801 	add.w	r8, r8, #1
 8006a66:	e7ec      	b.n	8006a42 <_printf_float+0x34e>
 8006a68:	4613      	mov	r3, r2
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	4628      	mov	r0, r5
 8006a70:	47b8      	blx	r7
 8006a72:	3001      	adds	r0, #1
 8006a74:	d1c0      	bne.n	80069f8 <_printf_float+0x304>
 8006a76:	e69e      	b.n	80067b6 <_printf_float+0xc2>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	9205      	str	r2, [sp, #20]
 8006a80:	47b8      	blx	r7
 8006a82:	3001      	adds	r0, #1
 8006a84:	f43f ae97 	beq.w	80067b6 <_printf_float+0xc2>
 8006a88:	9a05      	ldr	r2, [sp, #20]
 8006a8a:	f10b 0b01 	add.w	fp, fp, #1
 8006a8e:	e7b9      	b.n	8006a04 <_printf_float+0x310>
 8006a90:	ee18 3a10 	vmov	r3, s16
 8006a94:	4652      	mov	r2, sl
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d1be      	bne.n	8006a1e <_printf_float+0x32a>
 8006aa0:	e689      	b.n	80067b6 <_printf_float+0xc2>
 8006aa2:	9a05      	ldr	r2, [sp, #20]
 8006aa4:	464b      	mov	r3, r9
 8006aa6:	4442      	add	r2, r8
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b8      	blx	r7
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d1c1      	bne.n	8006a36 <_printf_float+0x342>
 8006ab2:	e680      	b.n	80067b6 <_printf_float+0xc2>
 8006ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ab6:	2a01      	cmp	r2, #1
 8006ab8:	dc01      	bgt.n	8006abe <_printf_float+0x3ca>
 8006aba:	07db      	lsls	r3, r3, #31
 8006abc:	d538      	bpl.n	8006b30 <_printf_float+0x43c>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4642      	mov	r2, r8
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	f43f ae74 	beq.w	80067b6 <_printf_float+0xc2>
 8006ace:	ee18 3a10 	vmov	r3, s16
 8006ad2:	4652      	mov	r2, sl
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	47b8      	blx	r7
 8006ada:	3001      	adds	r0, #1
 8006adc:	f43f ae6b 	beq.w	80067b6 <_printf_float+0xc2>
 8006ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f7fa f80e 	bl	8000b08 <__aeabi_dcmpeq>
 8006aec:	b9d8      	cbnz	r0, 8006b26 <_printf_float+0x432>
 8006aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af0:	f108 0201 	add.w	r2, r8, #1
 8006af4:	3b01      	subs	r3, #1
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	d10e      	bne.n	8006b1e <_printf_float+0x42a>
 8006b00:	e659      	b.n	80067b6 <_printf_float+0xc2>
 8006b02:	2301      	movs	r3, #1
 8006b04:	4652      	mov	r2, sl
 8006b06:	4631      	mov	r1, r6
 8006b08:	4628      	mov	r0, r5
 8006b0a:	47b8      	blx	r7
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	f43f ae52 	beq.w	80067b6 <_printf_float+0xc2>
 8006b12:	f108 0801 	add.w	r8, r8, #1
 8006b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	4543      	cmp	r3, r8
 8006b1c:	dcf1      	bgt.n	8006b02 <_printf_float+0x40e>
 8006b1e:	464b      	mov	r3, r9
 8006b20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b24:	e6dc      	b.n	80068e0 <_printf_float+0x1ec>
 8006b26:	f04f 0800 	mov.w	r8, #0
 8006b2a:	f104 0a1a 	add.w	sl, r4, #26
 8006b2e:	e7f2      	b.n	8006b16 <_printf_float+0x422>
 8006b30:	2301      	movs	r3, #1
 8006b32:	4642      	mov	r2, r8
 8006b34:	e7df      	b.n	8006af6 <_printf_float+0x402>
 8006b36:	2301      	movs	r3, #1
 8006b38:	464a      	mov	r2, r9
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	47b8      	blx	r7
 8006b40:	3001      	adds	r0, #1
 8006b42:	f43f ae38 	beq.w	80067b6 <_printf_float+0xc2>
 8006b46:	f108 0801 	add.w	r8, r8, #1
 8006b4a:	68e3      	ldr	r3, [r4, #12]
 8006b4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b4e:	1a5b      	subs	r3, r3, r1
 8006b50:	4543      	cmp	r3, r8
 8006b52:	dcf0      	bgt.n	8006b36 <_printf_float+0x442>
 8006b54:	e6fa      	b.n	800694c <_printf_float+0x258>
 8006b56:	f04f 0800 	mov.w	r8, #0
 8006b5a:	f104 0919 	add.w	r9, r4, #25
 8006b5e:	e7f4      	b.n	8006b4a <_printf_float+0x456>

08006b60 <_printf_common>:
 8006b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b64:	4616      	mov	r6, r2
 8006b66:	4699      	mov	r9, r3
 8006b68:	688a      	ldr	r2, [r1, #8]
 8006b6a:	690b      	ldr	r3, [r1, #16]
 8006b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b70:	4293      	cmp	r3, r2
 8006b72:	bfb8      	it	lt
 8006b74:	4613      	movlt	r3, r2
 8006b76:	6033      	str	r3, [r6, #0]
 8006b78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b7c:	4607      	mov	r7, r0
 8006b7e:	460c      	mov	r4, r1
 8006b80:	b10a      	cbz	r2, 8006b86 <_printf_common+0x26>
 8006b82:	3301      	adds	r3, #1
 8006b84:	6033      	str	r3, [r6, #0]
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	0699      	lsls	r1, r3, #26
 8006b8a:	bf42      	ittt	mi
 8006b8c:	6833      	ldrmi	r3, [r6, #0]
 8006b8e:	3302      	addmi	r3, #2
 8006b90:	6033      	strmi	r3, [r6, #0]
 8006b92:	6825      	ldr	r5, [r4, #0]
 8006b94:	f015 0506 	ands.w	r5, r5, #6
 8006b98:	d106      	bne.n	8006ba8 <_printf_common+0x48>
 8006b9a:	f104 0a19 	add.w	sl, r4, #25
 8006b9e:	68e3      	ldr	r3, [r4, #12]
 8006ba0:	6832      	ldr	r2, [r6, #0]
 8006ba2:	1a9b      	subs	r3, r3, r2
 8006ba4:	42ab      	cmp	r3, r5
 8006ba6:	dc26      	bgt.n	8006bf6 <_printf_common+0x96>
 8006ba8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bac:	1e13      	subs	r3, r2, #0
 8006bae:	6822      	ldr	r2, [r4, #0]
 8006bb0:	bf18      	it	ne
 8006bb2:	2301      	movne	r3, #1
 8006bb4:	0692      	lsls	r2, r2, #26
 8006bb6:	d42b      	bmi.n	8006c10 <_printf_common+0xb0>
 8006bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	47c0      	blx	r8
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	d01e      	beq.n	8006c04 <_printf_common+0xa4>
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	68e5      	ldr	r5, [r4, #12]
 8006bca:	6832      	ldr	r2, [r6, #0]
 8006bcc:	f003 0306 	and.w	r3, r3, #6
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	bf08      	it	eq
 8006bd4:	1aad      	subeq	r5, r5, r2
 8006bd6:	68a3      	ldr	r3, [r4, #8]
 8006bd8:	6922      	ldr	r2, [r4, #16]
 8006bda:	bf0c      	ite	eq
 8006bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006be0:	2500      	movne	r5, #0
 8006be2:	4293      	cmp	r3, r2
 8006be4:	bfc4      	itt	gt
 8006be6:	1a9b      	subgt	r3, r3, r2
 8006be8:	18ed      	addgt	r5, r5, r3
 8006bea:	2600      	movs	r6, #0
 8006bec:	341a      	adds	r4, #26
 8006bee:	42b5      	cmp	r5, r6
 8006bf0:	d11a      	bne.n	8006c28 <_printf_common+0xc8>
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	e008      	b.n	8006c08 <_printf_common+0xa8>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	4652      	mov	r2, sl
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	4638      	mov	r0, r7
 8006bfe:	47c0      	blx	r8
 8006c00:	3001      	adds	r0, #1
 8006c02:	d103      	bne.n	8006c0c <_printf_common+0xac>
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295
 8006c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c0c:	3501      	adds	r5, #1
 8006c0e:	e7c6      	b.n	8006b9e <_printf_common+0x3e>
 8006c10:	18e1      	adds	r1, r4, r3
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	2030      	movs	r0, #48	; 0x30
 8006c16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c1a:	4422      	add	r2, r4
 8006c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c24:	3302      	adds	r3, #2
 8006c26:	e7c7      	b.n	8006bb8 <_printf_common+0x58>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	4622      	mov	r2, r4
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	4638      	mov	r0, r7
 8006c30:	47c0      	blx	r8
 8006c32:	3001      	adds	r0, #1
 8006c34:	d0e6      	beq.n	8006c04 <_printf_common+0xa4>
 8006c36:	3601      	adds	r6, #1
 8006c38:	e7d9      	b.n	8006bee <_printf_common+0x8e>
	...

08006c3c <_printf_i>:
 8006c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c40:	7e0f      	ldrb	r7, [r1, #24]
 8006c42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c44:	2f78      	cmp	r7, #120	; 0x78
 8006c46:	4691      	mov	r9, r2
 8006c48:	4680      	mov	r8, r0
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	469a      	mov	sl, r3
 8006c4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c52:	d807      	bhi.n	8006c64 <_printf_i+0x28>
 8006c54:	2f62      	cmp	r7, #98	; 0x62
 8006c56:	d80a      	bhi.n	8006c6e <_printf_i+0x32>
 8006c58:	2f00      	cmp	r7, #0
 8006c5a:	f000 80d8 	beq.w	8006e0e <_printf_i+0x1d2>
 8006c5e:	2f58      	cmp	r7, #88	; 0x58
 8006c60:	f000 80a3 	beq.w	8006daa <_printf_i+0x16e>
 8006c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c6c:	e03a      	b.n	8006ce4 <_printf_i+0xa8>
 8006c6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c72:	2b15      	cmp	r3, #21
 8006c74:	d8f6      	bhi.n	8006c64 <_printf_i+0x28>
 8006c76:	a101      	add	r1, pc, #4	; (adr r1, 8006c7c <_printf_i+0x40>)
 8006c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c7c:	08006cd5 	.word	0x08006cd5
 8006c80:	08006ce9 	.word	0x08006ce9
 8006c84:	08006c65 	.word	0x08006c65
 8006c88:	08006c65 	.word	0x08006c65
 8006c8c:	08006c65 	.word	0x08006c65
 8006c90:	08006c65 	.word	0x08006c65
 8006c94:	08006ce9 	.word	0x08006ce9
 8006c98:	08006c65 	.word	0x08006c65
 8006c9c:	08006c65 	.word	0x08006c65
 8006ca0:	08006c65 	.word	0x08006c65
 8006ca4:	08006c65 	.word	0x08006c65
 8006ca8:	08006df5 	.word	0x08006df5
 8006cac:	08006d19 	.word	0x08006d19
 8006cb0:	08006dd7 	.word	0x08006dd7
 8006cb4:	08006c65 	.word	0x08006c65
 8006cb8:	08006c65 	.word	0x08006c65
 8006cbc:	08006e17 	.word	0x08006e17
 8006cc0:	08006c65 	.word	0x08006c65
 8006cc4:	08006d19 	.word	0x08006d19
 8006cc8:	08006c65 	.word	0x08006c65
 8006ccc:	08006c65 	.word	0x08006c65
 8006cd0:	08006ddf 	.word	0x08006ddf
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	1d1a      	adds	r2, r3, #4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	602a      	str	r2, [r5, #0]
 8006cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0a3      	b.n	8006e30 <_printf_i+0x1f4>
 8006ce8:	6820      	ldr	r0, [r4, #0]
 8006cea:	6829      	ldr	r1, [r5, #0]
 8006cec:	0606      	lsls	r6, r0, #24
 8006cee:	f101 0304 	add.w	r3, r1, #4
 8006cf2:	d50a      	bpl.n	8006d0a <_printf_i+0xce>
 8006cf4:	680e      	ldr	r6, [r1, #0]
 8006cf6:	602b      	str	r3, [r5, #0]
 8006cf8:	2e00      	cmp	r6, #0
 8006cfa:	da03      	bge.n	8006d04 <_printf_i+0xc8>
 8006cfc:	232d      	movs	r3, #45	; 0x2d
 8006cfe:	4276      	negs	r6, r6
 8006d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d04:	485e      	ldr	r0, [pc, #376]	; (8006e80 <_printf_i+0x244>)
 8006d06:	230a      	movs	r3, #10
 8006d08:	e019      	b.n	8006d3e <_printf_i+0x102>
 8006d0a:	680e      	ldr	r6, [r1, #0]
 8006d0c:	602b      	str	r3, [r5, #0]
 8006d0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d12:	bf18      	it	ne
 8006d14:	b236      	sxthne	r6, r6
 8006d16:	e7ef      	b.n	8006cf8 <_printf_i+0xbc>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	6820      	ldr	r0, [r4, #0]
 8006d1c:	1d19      	adds	r1, r3, #4
 8006d1e:	6029      	str	r1, [r5, #0]
 8006d20:	0601      	lsls	r1, r0, #24
 8006d22:	d501      	bpl.n	8006d28 <_printf_i+0xec>
 8006d24:	681e      	ldr	r6, [r3, #0]
 8006d26:	e002      	b.n	8006d2e <_printf_i+0xf2>
 8006d28:	0646      	lsls	r6, r0, #25
 8006d2a:	d5fb      	bpl.n	8006d24 <_printf_i+0xe8>
 8006d2c:	881e      	ldrh	r6, [r3, #0]
 8006d2e:	4854      	ldr	r0, [pc, #336]	; (8006e80 <_printf_i+0x244>)
 8006d30:	2f6f      	cmp	r7, #111	; 0x6f
 8006d32:	bf0c      	ite	eq
 8006d34:	2308      	moveq	r3, #8
 8006d36:	230a      	movne	r3, #10
 8006d38:	2100      	movs	r1, #0
 8006d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d3e:	6865      	ldr	r5, [r4, #4]
 8006d40:	60a5      	str	r5, [r4, #8]
 8006d42:	2d00      	cmp	r5, #0
 8006d44:	bfa2      	ittt	ge
 8006d46:	6821      	ldrge	r1, [r4, #0]
 8006d48:	f021 0104 	bicge.w	r1, r1, #4
 8006d4c:	6021      	strge	r1, [r4, #0]
 8006d4e:	b90e      	cbnz	r6, 8006d54 <_printf_i+0x118>
 8006d50:	2d00      	cmp	r5, #0
 8006d52:	d04d      	beq.n	8006df0 <_printf_i+0x1b4>
 8006d54:	4615      	mov	r5, r2
 8006d56:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d5a:	fb03 6711 	mls	r7, r3, r1, r6
 8006d5e:	5dc7      	ldrb	r7, [r0, r7]
 8006d60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d64:	4637      	mov	r7, r6
 8006d66:	42bb      	cmp	r3, r7
 8006d68:	460e      	mov	r6, r1
 8006d6a:	d9f4      	bls.n	8006d56 <_printf_i+0x11a>
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d10b      	bne.n	8006d88 <_printf_i+0x14c>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	07de      	lsls	r6, r3, #31
 8006d74:	d508      	bpl.n	8006d88 <_printf_i+0x14c>
 8006d76:	6923      	ldr	r3, [r4, #16]
 8006d78:	6861      	ldr	r1, [r4, #4]
 8006d7a:	4299      	cmp	r1, r3
 8006d7c:	bfde      	ittt	le
 8006d7e:	2330      	movle	r3, #48	; 0x30
 8006d80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d88:	1b52      	subs	r2, r2, r5
 8006d8a:	6122      	str	r2, [r4, #16]
 8006d8c:	f8cd a000 	str.w	sl, [sp]
 8006d90:	464b      	mov	r3, r9
 8006d92:	aa03      	add	r2, sp, #12
 8006d94:	4621      	mov	r1, r4
 8006d96:	4640      	mov	r0, r8
 8006d98:	f7ff fee2 	bl	8006b60 <_printf_common>
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	d14c      	bne.n	8006e3a <_printf_i+0x1fe>
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295
 8006da4:	b004      	add	sp, #16
 8006da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006daa:	4835      	ldr	r0, [pc, #212]	; (8006e80 <_printf_i+0x244>)
 8006dac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006db0:	6829      	ldr	r1, [r5, #0]
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006db8:	6029      	str	r1, [r5, #0]
 8006dba:	061d      	lsls	r5, r3, #24
 8006dbc:	d514      	bpl.n	8006de8 <_printf_i+0x1ac>
 8006dbe:	07df      	lsls	r7, r3, #31
 8006dc0:	bf44      	itt	mi
 8006dc2:	f043 0320 	orrmi.w	r3, r3, #32
 8006dc6:	6023      	strmi	r3, [r4, #0]
 8006dc8:	b91e      	cbnz	r6, 8006dd2 <_printf_i+0x196>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	f023 0320 	bic.w	r3, r3, #32
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	2310      	movs	r3, #16
 8006dd4:	e7b0      	b.n	8006d38 <_printf_i+0xfc>
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	f043 0320 	orr.w	r3, r3, #32
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	2378      	movs	r3, #120	; 0x78
 8006de0:	4828      	ldr	r0, [pc, #160]	; (8006e84 <_printf_i+0x248>)
 8006de2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006de6:	e7e3      	b.n	8006db0 <_printf_i+0x174>
 8006de8:	0659      	lsls	r1, r3, #25
 8006dea:	bf48      	it	mi
 8006dec:	b2b6      	uxthmi	r6, r6
 8006dee:	e7e6      	b.n	8006dbe <_printf_i+0x182>
 8006df0:	4615      	mov	r5, r2
 8006df2:	e7bb      	b.n	8006d6c <_printf_i+0x130>
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	6826      	ldr	r6, [r4, #0]
 8006df8:	6961      	ldr	r1, [r4, #20]
 8006dfa:	1d18      	adds	r0, r3, #4
 8006dfc:	6028      	str	r0, [r5, #0]
 8006dfe:	0635      	lsls	r5, r6, #24
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	d501      	bpl.n	8006e08 <_printf_i+0x1cc>
 8006e04:	6019      	str	r1, [r3, #0]
 8006e06:	e002      	b.n	8006e0e <_printf_i+0x1d2>
 8006e08:	0670      	lsls	r0, r6, #25
 8006e0a:	d5fb      	bpl.n	8006e04 <_printf_i+0x1c8>
 8006e0c:	8019      	strh	r1, [r3, #0]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	6123      	str	r3, [r4, #16]
 8006e12:	4615      	mov	r5, r2
 8006e14:	e7ba      	b.n	8006d8c <_printf_i+0x150>
 8006e16:	682b      	ldr	r3, [r5, #0]
 8006e18:	1d1a      	adds	r2, r3, #4
 8006e1a:	602a      	str	r2, [r5, #0]
 8006e1c:	681d      	ldr	r5, [r3, #0]
 8006e1e:	6862      	ldr	r2, [r4, #4]
 8006e20:	2100      	movs	r1, #0
 8006e22:	4628      	mov	r0, r5
 8006e24:	f7f9 f9fc 	bl	8000220 <memchr>
 8006e28:	b108      	cbz	r0, 8006e2e <_printf_i+0x1f2>
 8006e2a:	1b40      	subs	r0, r0, r5
 8006e2c:	6060      	str	r0, [r4, #4]
 8006e2e:	6863      	ldr	r3, [r4, #4]
 8006e30:	6123      	str	r3, [r4, #16]
 8006e32:	2300      	movs	r3, #0
 8006e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e38:	e7a8      	b.n	8006d8c <_printf_i+0x150>
 8006e3a:	6923      	ldr	r3, [r4, #16]
 8006e3c:	462a      	mov	r2, r5
 8006e3e:	4649      	mov	r1, r9
 8006e40:	4640      	mov	r0, r8
 8006e42:	47d0      	blx	sl
 8006e44:	3001      	adds	r0, #1
 8006e46:	d0ab      	beq.n	8006da0 <_printf_i+0x164>
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	079b      	lsls	r3, r3, #30
 8006e4c:	d413      	bmi.n	8006e76 <_printf_i+0x23a>
 8006e4e:	68e0      	ldr	r0, [r4, #12]
 8006e50:	9b03      	ldr	r3, [sp, #12]
 8006e52:	4298      	cmp	r0, r3
 8006e54:	bfb8      	it	lt
 8006e56:	4618      	movlt	r0, r3
 8006e58:	e7a4      	b.n	8006da4 <_printf_i+0x168>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	4632      	mov	r2, r6
 8006e5e:	4649      	mov	r1, r9
 8006e60:	4640      	mov	r0, r8
 8006e62:	47d0      	blx	sl
 8006e64:	3001      	adds	r0, #1
 8006e66:	d09b      	beq.n	8006da0 <_printf_i+0x164>
 8006e68:	3501      	adds	r5, #1
 8006e6a:	68e3      	ldr	r3, [r4, #12]
 8006e6c:	9903      	ldr	r1, [sp, #12]
 8006e6e:	1a5b      	subs	r3, r3, r1
 8006e70:	42ab      	cmp	r3, r5
 8006e72:	dcf2      	bgt.n	8006e5a <_printf_i+0x21e>
 8006e74:	e7eb      	b.n	8006e4e <_printf_i+0x212>
 8006e76:	2500      	movs	r5, #0
 8006e78:	f104 0619 	add.w	r6, r4, #25
 8006e7c:	e7f5      	b.n	8006e6a <_printf_i+0x22e>
 8006e7e:	bf00      	nop
 8006e80:	0800a8fa 	.word	0x0800a8fa
 8006e84:	0800a90b 	.word	0x0800a90b

08006e88 <sniprintf>:
 8006e88:	b40c      	push	{r2, r3}
 8006e8a:	b530      	push	{r4, r5, lr}
 8006e8c:	4b17      	ldr	r3, [pc, #92]	; (8006eec <sniprintf+0x64>)
 8006e8e:	1e0c      	subs	r4, r1, #0
 8006e90:	681d      	ldr	r5, [r3, #0]
 8006e92:	b09d      	sub	sp, #116	; 0x74
 8006e94:	da08      	bge.n	8006ea8 <sniprintf+0x20>
 8006e96:	238b      	movs	r3, #139	; 0x8b
 8006e98:	602b      	str	r3, [r5, #0]
 8006e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9e:	b01d      	add	sp, #116	; 0x74
 8006ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ea4:	b002      	add	sp, #8
 8006ea6:	4770      	bx	lr
 8006ea8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006eac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006eb0:	bf14      	ite	ne
 8006eb2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006eb6:	4623      	moveq	r3, r4
 8006eb8:	9304      	str	r3, [sp, #16]
 8006eba:	9307      	str	r3, [sp, #28]
 8006ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ec0:	9002      	str	r0, [sp, #8]
 8006ec2:	9006      	str	r0, [sp, #24]
 8006ec4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ec8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006eca:	ab21      	add	r3, sp, #132	; 0x84
 8006ecc:	a902      	add	r1, sp, #8
 8006ece:	4628      	mov	r0, r5
 8006ed0:	9301      	str	r3, [sp, #4]
 8006ed2:	f001 fb77 	bl	80085c4 <_svfiprintf_r>
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	bfbc      	itt	lt
 8006eda:	238b      	movlt	r3, #139	; 0x8b
 8006edc:	602b      	strlt	r3, [r5, #0]
 8006ede:	2c00      	cmp	r4, #0
 8006ee0:	d0dd      	beq.n	8006e9e <sniprintf+0x16>
 8006ee2:	9b02      	ldr	r3, [sp, #8]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	e7d9      	b.n	8006e9e <sniprintf+0x16>
 8006eea:	bf00      	nop
 8006eec:	20000024 	.word	0x20000024

08006ef0 <quorem>:
 8006ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	6903      	ldr	r3, [r0, #16]
 8006ef6:	690c      	ldr	r4, [r1, #16]
 8006ef8:	42a3      	cmp	r3, r4
 8006efa:	4607      	mov	r7, r0
 8006efc:	f2c0 8081 	blt.w	8007002 <quorem+0x112>
 8006f00:	3c01      	subs	r4, #1
 8006f02:	f101 0814 	add.w	r8, r1, #20
 8006f06:	f100 0514 	add.w	r5, r0, #20
 8006f0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f0e:	9301      	str	r3, [sp, #4]
 8006f10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f24:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f28:	d331      	bcc.n	8006f8e <quorem+0x9e>
 8006f2a:	f04f 0e00 	mov.w	lr, #0
 8006f2e:	4640      	mov	r0, r8
 8006f30:	46ac      	mov	ip, r5
 8006f32:	46f2      	mov	sl, lr
 8006f34:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f38:	b293      	uxth	r3, r2
 8006f3a:	fb06 e303 	mla	r3, r6, r3, lr
 8006f3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	ebaa 0303 	sub.w	r3, sl, r3
 8006f48:	f8dc a000 	ldr.w	sl, [ip]
 8006f4c:	0c12      	lsrs	r2, r2, #16
 8006f4e:	fa13 f38a 	uxtah	r3, r3, sl
 8006f52:	fb06 e202 	mla	r2, r6, r2, lr
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	9b00      	ldr	r3, [sp, #0]
 8006f5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f5e:	b292      	uxth	r2, r2
 8006f60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f68:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f6c:	4581      	cmp	r9, r0
 8006f6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f72:	f84c 3b04 	str.w	r3, [ip], #4
 8006f76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f7a:	d2db      	bcs.n	8006f34 <quorem+0x44>
 8006f7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f80:	b92b      	cbnz	r3, 8006f8e <quorem+0x9e>
 8006f82:	9b01      	ldr	r3, [sp, #4]
 8006f84:	3b04      	subs	r3, #4
 8006f86:	429d      	cmp	r5, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	d32e      	bcc.n	8006fea <quorem+0xfa>
 8006f8c:	613c      	str	r4, [r7, #16]
 8006f8e:	4638      	mov	r0, r7
 8006f90:	f001 f8c4 	bl	800811c <__mcmp>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	db24      	blt.n	8006fe2 <quorem+0xf2>
 8006f98:	3601      	adds	r6, #1
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f04f 0c00 	mov.w	ip, #0
 8006fa0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fa4:	f8d0 e000 	ldr.w	lr, [r0]
 8006fa8:	b293      	uxth	r3, r2
 8006faa:	ebac 0303 	sub.w	r3, ip, r3
 8006fae:	0c12      	lsrs	r2, r2, #16
 8006fb0:	fa13 f38e 	uxtah	r3, r3, lr
 8006fb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006fb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fc2:	45c1      	cmp	r9, r8
 8006fc4:	f840 3b04 	str.w	r3, [r0], #4
 8006fc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fcc:	d2e8      	bcs.n	8006fa0 <quorem+0xb0>
 8006fce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fd6:	b922      	cbnz	r2, 8006fe2 <quorem+0xf2>
 8006fd8:	3b04      	subs	r3, #4
 8006fda:	429d      	cmp	r5, r3
 8006fdc:	461a      	mov	r2, r3
 8006fde:	d30a      	bcc.n	8006ff6 <quorem+0x106>
 8006fe0:	613c      	str	r4, [r7, #16]
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	b003      	add	sp, #12
 8006fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fea:	6812      	ldr	r2, [r2, #0]
 8006fec:	3b04      	subs	r3, #4
 8006fee:	2a00      	cmp	r2, #0
 8006ff0:	d1cc      	bne.n	8006f8c <quorem+0x9c>
 8006ff2:	3c01      	subs	r4, #1
 8006ff4:	e7c7      	b.n	8006f86 <quorem+0x96>
 8006ff6:	6812      	ldr	r2, [r2, #0]
 8006ff8:	3b04      	subs	r3, #4
 8006ffa:	2a00      	cmp	r2, #0
 8006ffc:	d1f0      	bne.n	8006fe0 <quorem+0xf0>
 8006ffe:	3c01      	subs	r4, #1
 8007000:	e7eb      	b.n	8006fda <quorem+0xea>
 8007002:	2000      	movs	r0, #0
 8007004:	e7ee      	b.n	8006fe4 <quorem+0xf4>
	...

08007008 <_dtoa_r>:
 8007008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700c:	ed2d 8b04 	vpush	{d8-d9}
 8007010:	ec57 6b10 	vmov	r6, r7, d0
 8007014:	b093      	sub	sp, #76	; 0x4c
 8007016:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007018:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800701c:	9106      	str	r1, [sp, #24]
 800701e:	ee10 aa10 	vmov	sl, s0
 8007022:	4604      	mov	r4, r0
 8007024:	9209      	str	r2, [sp, #36]	; 0x24
 8007026:	930c      	str	r3, [sp, #48]	; 0x30
 8007028:	46bb      	mov	fp, r7
 800702a:	b975      	cbnz	r5, 800704a <_dtoa_r+0x42>
 800702c:	2010      	movs	r0, #16
 800702e:	f000 fddd 	bl	8007bec <malloc>
 8007032:	4602      	mov	r2, r0
 8007034:	6260      	str	r0, [r4, #36]	; 0x24
 8007036:	b920      	cbnz	r0, 8007042 <_dtoa_r+0x3a>
 8007038:	4ba7      	ldr	r3, [pc, #668]	; (80072d8 <_dtoa_r+0x2d0>)
 800703a:	21ea      	movs	r1, #234	; 0xea
 800703c:	48a7      	ldr	r0, [pc, #668]	; (80072dc <_dtoa_r+0x2d4>)
 800703e:	f001 fbd1 	bl	80087e4 <__assert_func>
 8007042:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007046:	6005      	str	r5, [r0, #0]
 8007048:	60c5      	str	r5, [r0, #12]
 800704a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800704c:	6819      	ldr	r1, [r3, #0]
 800704e:	b151      	cbz	r1, 8007066 <_dtoa_r+0x5e>
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	604a      	str	r2, [r1, #4]
 8007054:	2301      	movs	r3, #1
 8007056:	4093      	lsls	r3, r2
 8007058:	608b      	str	r3, [r1, #8]
 800705a:	4620      	mov	r0, r4
 800705c:	f000 fe1c 	bl	8007c98 <_Bfree>
 8007060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	1e3b      	subs	r3, r7, #0
 8007068:	bfaa      	itet	ge
 800706a:	2300      	movge	r3, #0
 800706c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007070:	f8c8 3000 	strge.w	r3, [r8]
 8007074:	4b9a      	ldr	r3, [pc, #616]	; (80072e0 <_dtoa_r+0x2d8>)
 8007076:	bfbc      	itt	lt
 8007078:	2201      	movlt	r2, #1
 800707a:	f8c8 2000 	strlt.w	r2, [r8]
 800707e:	ea33 030b 	bics.w	r3, r3, fp
 8007082:	d11b      	bne.n	80070bc <_dtoa_r+0xb4>
 8007084:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007086:	f242 730f 	movw	r3, #9999	; 0x270f
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007090:	4333      	orrs	r3, r6
 8007092:	f000 8592 	beq.w	8007bba <_dtoa_r+0xbb2>
 8007096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007098:	b963      	cbnz	r3, 80070b4 <_dtoa_r+0xac>
 800709a:	4b92      	ldr	r3, [pc, #584]	; (80072e4 <_dtoa_r+0x2dc>)
 800709c:	e022      	b.n	80070e4 <_dtoa_r+0xdc>
 800709e:	4b92      	ldr	r3, [pc, #584]	; (80072e8 <_dtoa_r+0x2e0>)
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	3308      	adds	r3, #8
 80070a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070a6:	6013      	str	r3, [r2, #0]
 80070a8:	9801      	ldr	r0, [sp, #4]
 80070aa:	b013      	add	sp, #76	; 0x4c
 80070ac:	ecbd 8b04 	vpop	{d8-d9}
 80070b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b4:	4b8b      	ldr	r3, [pc, #556]	; (80072e4 <_dtoa_r+0x2dc>)
 80070b6:	9301      	str	r3, [sp, #4]
 80070b8:	3303      	adds	r3, #3
 80070ba:	e7f3      	b.n	80070a4 <_dtoa_r+0x9c>
 80070bc:	2200      	movs	r2, #0
 80070be:	2300      	movs	r3, #0
 80070c0:	4650      	mov	r0, sl
 80070c2:	4659      	mov	r1, fp
 80070c4:	f7f9 fd20 	bl	8000b08 <__aeabi_dcmpeq>
 80070c8:	ec4b ab19 	vmov	d9, sl, fp
 80070cc:	4680      	mov	r8, r0
 80070ce:	b158      	cbz	r0, 80070e8 <_dtoa_r+0xe0>
 80070d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070d2:	2301      	movs	r3, #1
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 856b 	beq.w	8007bb4 <_dtoa_r+0xbac>
 80070de:	4883      	ldr	r0, [pc, #524]	; (80072ec <_dtoa_r+0x2e4>)
 80070e0:	6018      	str	r0, [r3, #0]
 80070e2:	1e43      	subs	r3, r0, #1
 80070e4:	9301      	str	r3, [sp, #4]
 80070e6:	e7df      	b.n	80070a8 <_dtoa_r+0xa0>
 80070e8:	ec4b ab10 	vmov	d0, sl, fp
 80070ec:	aa10      	add	r2, sp, #64	; 0x40
 80070ee:	a911      	add	r1, sp, #68	; 0x44
 80070f0:	4620      	mov	r0, r4
 80070f2:	f001 f8b9 	bl	8008268 <__d2b>
 80070f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80070fa:	ee08 0a10 	vmov	s16, r0
 80070fe:	2d00      	cmp	r5, #0
 8007100:	f000 8084 	beq.w	800720c <_dtoa_r+0x204>
 8007104:	ee19 3a90 	vmov	r3, s19
 8007108:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800710c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007110:	4656      	mov	r6, sl
 8007112:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007116:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800711a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800711e:	4b74      	ldr	r3, [pc, #464]	; (80072f0 <_dtoa_r+0x2e8>)
 8007120:	2200      	movs	r2, #0
 8007122:	4630      	mov	r0, r6
 8007124:	4639      	mov	r1, r7
 8007126:	f7f9 f8cf 	bl	80002c8 <__aeabi_dsub>
 800712a:	a365      	add	r3, pc, #404	; (adr r3, 80072c0 <_dtoa_r+0x2b8>)
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	f7f9 fa82 	bl	8000638 <__aeabi_dmul>
 8007134:	a364      	add	r3, pc, #400	; (adr r3, 80072c8 <_dtoa_r+0x2c0>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f7f9 f8c7 	bl	80002cc <__adddf3>
 800713e:	4606      	mov	r6, r0
 8007140:	4628      	mov	r0, r5
 8007142:	460f      	mov	r7, r1
 8007144:	f7f9 fa0e 	bl	8000564 <__aeabi_i2d>
 8007148:	a361      	add	r3, pc, #388	; (adr r3, 80072d0 <_dtoa_r+0x2c8>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f7f9 fa73 	bl	8000638 <__aeabi_dmul>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4630      	mov	r0, r6
 8007158:	4639      	mov	r1, r7
 800715a:	f7f9 f8b7 	bl	80002cc <__adddf3>
 800715e:	4606      	mov	r6, r0
 8007160:	460f      	mov	r7, r1
 8007162:	f7f9 fd19 	bl	8000b98 <__aeabi_d2iz>
 8007166:	2200      	movs	r2, #0
 8007168:	9000      	str	r0, [sp, #0]
 800716a:	2300      	movs	r3, #0
 800716c:	4630      	mov	r0, r6
 800716e:	4639      	mov	r1, r7
 8007170:	f7f9 fcd4 	bl	8000b1c <__aeabi_dcmplt>
 8007174:	b150      	cbz	r0, 800718c <_dtoa_r+0x184>
 8007176:	9800      	ldr	r0, [sp, #0]
 8007178:	f7f9 f9f4 	bl	8000564 <__aeabi_i2d>
 800717c:	4632      	mov	r2, r6
 800717e:	463b      	mov	r3, r7
 8007180:	f7f9 fcc2 	bl	8000b08 <__aeabi_dcmpeq>
 8007184:	b910      	cbnz	r0, 800718c <_dtoa_r+0x184>
 8007186:	9b00      	ldr	r3, [sp, #0]
 8007188:	3b01      	subs	r3, #1
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	9b00      	ldr	r3, [sp, #0]
 800718e:	2b16      	cmp	r3, #22
 8007190:	d85a      	bhi.n	8007248 <_dtoa_r+0x240>
 8007192:	9a00      	ldr	r2, [sp, #0]
 8007194:	4b57      	ldr	r3, [pc, #348]	; (80072f4 <_dtoa_r+0x2ec>)
 8007196:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	ec51 0b19 	vmov	r0, r1, d9
 80071a2:	f7f9 fcbb 	bl	8000b1c <__aeabi_dcmplt>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d050      	beq.n	800724c <_dtoa_r+0x244>
 80071aa:	9b00      	ldr	r3, [sp, #0]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	2300      	movs	r3, #0
 80071b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80071b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071b6:	1b5d      	subs	r5, r3, r5
 80071b8:	1e6b      	subs	r3, r5, #1
 80071ba:	9305      	str	r3, [sp, #20]
 80071bc:	bf45      	ittet	mi
 80071be:	f1c5 0301 	rsbmi	r3, r5, #1
 80071c2:	9304      	strmi	r3, [sp, #16]
 80071c4:	2300      	movpl	r3, #0
 80071c6:	2300      	movmi	r3, #0
 80071c8:	bf4c      	ite	mi
 80071ca:	9305      	strmi	r3, [sp, #20]
 80071cc:	9304      	strpl	r3, [sp, #16]
 80071ce:	9b00      	ldr	r3, [sp, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	db3d      	blt.n	8007250 <_dtoa_r+0x248>
 80071d4:	9b05      	ldr	r3, [sp, #20]
 80071d6:	9a00      	ldr	r2, [sp, #0]
 80071d8:	920a      	str	r2, [sp, #40]	; 0x28
 80071da:	4413      	add	r3, r2
 80071dc:	9305      	str	r3, [sp, #20]
 80071de:	2300      	movs	r3, #0
 80071e0:	9307      	str	r3, [sp, #28]
 80071e2:	9b06      	ldr	r3, [sp, #24]
 80071e4:	2b09      	cmp	r3, #9
 80071e6:	f200 8089 	bhi.w	80072fc <_dtoa_r+0x2f4>
 80071ea:	2b05      	cmp	r3, #5
 80071ec:	bfc4      	itt	gt
 80071ee:	3b04      	subgt	r3, #4
 80071f0:	9306      	strgt	r3, [sp, #24]
 80071f2:	9b06      	ldr	r3, [sp, #24]
 80071f4:	f1a3 0302 	sub.w	r3, r3, #2
 80071f8:	bfcc      	ite	gt
 80071fa:	2500      	movgt	r5, #0
 80071fc:	2501      	movle	r5, #1
 80071fe:	2b03      	cmp	r3, #3
 8007200:	f200 8087 	bhi.w	8007312 <_dtoa_r+0x30a>
 8007204:	e8df f003 	tbb	[pc, r3]
 8007208:	59383a2d 	.word	0x59383a2d
 800720c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007210:	441d      	add	r5, r3
 8007212:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007216:	2b20      	cmp	r3, #32
 8007218:	bfc1      	itttt	gt
 800721a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800721e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007222:	fa0b f303 	lslgt.w	r3, fp, r3
 8007226:	fa26 f000 	lsrgt.w	r0, r6, r0
 800722a:	bfda      	itte	le
 800722c:	f1c3 0320 	rsble	r3, r3, #32
 8007230:	fa06 f003 	lslle.w	r0, r6, r3
 8007234:	4318      	orrgt	r0, r3
 8007236:	f7f9 f985 	bl	8000544 <__aeabi_ui2d>
 800723a:	2301      	movs	r3, #1
 800723c:	4606      	mov	r6, r0
 800723e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007242:	3d01      	subs	r5, #1
 8007244:	930e      	str	r3, [sp, #56]	; 0x38
 8007246:	e76a      	b.n	800711e <_dtoa_r+0x116>
 8007248:	2301      	movs	r3, #1
 800724a:	e7b2      	b.n	80071b2 <_dtoa_r+0x1aa>
 800724c:	900b      	str	r0, [sp, #44]	; 0x2c
 800724e:	e7b1      	b.n	80071b4 <_dtoa_r+0x1ac>
 8007250:	9b04      	ldr	r3, [sp, #16]
 8007252:	9a00      	ldr	r2, [sp, #0]
 8007254:	1a9b      	subs	r3, r3, r2
 8007256:	9304      	str	r3, [sp, #16]
 8007258:	4253      	negs	r3, r2
 800725a:	9307      	str	r3, [sp, #28]
 800725c:	2300      	movs	r3, #0
 800725e:	930a      	str	r3, [sp, #40]	; 0x28
 8007260:	e7bf      	b.n	80071e2 <_dtoa_r+0x1da>
 8007262:	2300      	movs	r3, #0
 8007264:	9308      	str	r3, [sp, #32]
 8007266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007268:	2b00      	cmp	r3, #0
 800726a:	dc55      	bgt.n	8007318 <_dtoa_r+0x310>
 800726c:	2301      	movs	r3, #1
 800726e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007272:	461a      	mov	r2, r3
 8007274:	9209      	str	r2, [sp, #36]	; 0x24
 8007276:	e00c      	b.n	8007292 <_dtoa_r+0x28a>
 8007278:	2301      	movs	r3, #1
 800727a:	e7f3      	b.n	8007264 <_dtoa_r+0x25c>
 800727c:	2300      	movs	r3, #0
 800727e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007280:	9308      	str	r3, [sp, #32]
 8007282:	9b00      	ldr	r3, [sp, #0]
 8007284:	4413      	add	r3, r2
 8007286:	9302      	str	r3, [sp, #8]
 8007288:	3301      	adds	r3, #1
 800728a:	2b01      	cmp	r3, #1
 800728c:	9303      	str	r3, [sp, #12]
 800728e:	bfb8      	it	lt
 8007290:	2301      	movlt	r3, #1
 8007292:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007294:	2200      	movs	r2, #0
 8007296:	6042      	str	r2, [r0, #4]
 8007298:	2204      	movs	r2, #4
 800729a:	f102 0614 	add.w	r6, r2, #20
 800729e:	429e      	cmp	r6, r3
 80072a0:	6841      	ldr	r1, [r0, #4]
 80072a2:	d93d      	bls.n	8007320 <_dtoa_r+0x318>
 80072a4:	4620      	mov	r0, r4
 80072a6:	f000 fcb7 	bl	8007c18 <_Balloc>
 80072aa:	9001      	str	r0, [sp, #4]
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d13b      	bne.n	8007328 <_dtoa_r+0x320>
 80072b0:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <_dtoa_r+0x2f0>)
 80072b2:	4602      	mov	r2, r0
 80072b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072b8:	e6c0      	b.n	800703c <_dtoa_r+0x34>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e7df      	b.n	800727e <_dtoa_r+0x276>
 80072be:	bf00      	nop
 80072c0:	636f4361 	.word	0x636f4361
 80072c4:	3fd287a7 	.word	0x3fd287a7
 80072c8:	8b60c8b3 	.word	0x8b60c8b3
 80072cc:	3fc68a28 	.word	0x3fc68a28
 80072d0:	509f79fb 	.word	0x509f79fb
 80072d4:	3fd34413 	.word	0x3fd34413
 80072d8:	0800a929 	.word	0x0800a929
 80072dc:	0800a940 	.word	0x0800a940
 80072e0:	7ff00000 	.word	0x7ff00000
 80072e4:	0800a925 	.word	0x0800a925
 80072e8:	0800a91c 	.word	0x0800a91c
 80072ec:	0800a8f9 	.word	0x0800a8f9
 80072f0:	3ff80000 	.word	0x3ff80000
 80072f4:	0800aa30 	.word	0x0800aa30
 80072f8:	0800a99b 	.word	0x0800a99b
 80072fc:	2501      	movs	r5, #1
 80072fe:	2300      	movs	r3, #0
 8007300:	9306      	str	r3, [sp, #24]
 8007302:	9508      	str	r5, [sp, #32]
 8007304:	f04f 33ff 	mov.w	r3, #4294967295
 8007308:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800730c:	2200      	movs	r2, #0
 800730e:	2312      	movs	r3, #18
 8007310:	e7b0      	b.n	8007274 <_dtoa_r+0x26c>
 8007312:	2301      	movs	r3, #1
 8007314:	9308      	str	r3, [sp, #32]
 8007316:	e7f5      	b.n	8007304 <_dtoa_r+0x2fc>
 8007318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800731a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800731e:	e7b8      	b.n	8007292 <_dtoa_r+0x28a>
 8007320:	3101      	adds	r1, #1
 8007322:	6041      	str	r1, [r0, #4]
 8007324:	0052      	lsls	r2, r2, #1
 8007326:	e7b8      	b.n	800729a <_dtoa_r+0x292>
 8007328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800732a:	9a01      	ldr	r2, [sp, #4]
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	9b03      	ldr	r3, [sp, #12]
 8007330:	2b0e      	cmp	r3, #14
 8007332:	f200 809d 	bhi.w	8007470 <_dtoa_r+0x468>
 8007336:	2d00      	cmp	r5, #0
 8007338:	f000 809a 	beq.w	8007470 <_dtoa_r+0x468>
 800733c:	9b00      	ldr	r3, [sp, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	dd32      	ble.n	80073a8 <_dtoa_r+0x3a0>
 8007342:	4ab7      	ldr	r2, [pc, #732]	; (8007620 <_dtoa_r+0x618>)
 8007344:	f003 030f 	and.w	r3, r3, #15
 8007348:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800734c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007350:	9b00      	ldr	r3, [sp, #0]
 8007352:	05d8      	lsls	r0, r3, #23
 8007354:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007358:	d516      	bpl.n	8007388 <_dtoa_r+0x380>
 800735a:	4bb2      	ldr	r3, [pc, #712]	; (8007624 <_dtoa_r+0x61c>)
 800735c:	ec51 0b19 	vmov	r0, r1, d9
 8007360:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007364:	f7f9 fa92 	bl	800088c <__aeabi_ddiv>
 8007368:	f007 070f 	and.w	r7, r7, #15
 800736c:	4682      	mov	sl, r0
 800736e:	468b      	mov	fp, r1
 8007370:	2503      	movs	r5, #3
 8007372:	4eac      	ldr	r6, [pc, #688]	; (8007624 <_dtoa_r+0x61c>)
 8007374:	b957      	cbnz	r7, 800738c <_dtoa_r+0x384>
 8007376:	4642      	mov	r2, r8
 8007378:	464b      	mov	r3, r9
 800737a:	4650      	mov	r0, sl
 800737c:	4659      	mov	r1, fp
 800737e:	f7f9 fa85 	bl	800088c <__aeabi_ddiv>
 8007382:	4682      	mov	sl, r0
 8007384:	468b      	mov	fp, r1
 8007386:	e028      	b.n	80073da <_dtoa_r+0x3d2>
 8007388:	2502      	movs	r5, #2
 800738a:	e7f2      	b.n	8007372 <_dtoa_r+0x36a>
 800738c:	07f9      	lsls	r1, r7, #31
 800738e:	d508      	bpl.n	80073a2 <_dtoa_r+0x39a>
 8007390:	4640      	mov	r0, r8
 8007392:	4649      	mov	r1, r9
 8007394:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007398:	f7f9 f94e 	bl	8000638 <__aeabi_dmul>
 800739c:	3501      	adds	r5, #1
 800739e:	4680      	mov	r8, r0
 80073a0:	4689      	mov	r9, r1
 80073a2:	107f      	asrs	r7, r7, #1
 80073a4:	3608      	adds	r6, #8
 80073a6:	e7e5      	b.n	8007374 <_dtoa_r+0x36c>
 80073a8:	f000 809b 	beq.w	80074e2 <_dtoa_r+0x4da>
 80073ac:	9b00      	ldr	r3, [sp, #0]
 80073ae:	4f9d      	ldr	r7, [pc, #628]	; (8007624 <_dtoa_r+0x61c>)
 80073b0:	425e      	negs	r6, r3
 80073b2:	4b9b      	ldr	r3, [pc, #620]	; (8007620 <_dtoa_r+0x618>)
 80073b4:	f006 020f 	and.w	r2, r6, #15
 80073b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	ec51 0b19 	vmov	r0, r1, d9
 80073c4:	f7f9 f938 	bl	8000638 <__aeabi_dmul>
 80073c8:	1136      	asrs	r6, r6, #4
 80073ca:	4682      	mov	sl, r0
 80073cc:	468b      	mov	fp, r1
 80073ce:	2300      	movs	r3, #0
 80073d0:	2502      	movs	r5, #2
 80073d2:	2e00      	cmp	r6, #0
 80073d4:	d17a      	bne.n	80074cc <_dtoa_r+0x4c4>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1d3      	bne.n	8007382 <_dtoa_r+0x37a>
 80073da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8082 	beq.w	80074e6 <_dtoa_r+0x4de>
 80073e2:	4b91      	ldr	r3, [pc, #580]	; (8007628 <_dtoa_r+0x620>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	4650      	mov	r0, sl
 80073e8:	4659      	mov	r1, fp
 80073ea:	f7f9 fb97 	bl	8000b1c <__aeabi_dcmplt>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d079      	beq.n	80074e6 <_dtoa_r+0x4de>
 80073f2:	9b03      	ldr	r3, [sp, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d076      	beq.n	80074e6 <_dtoa_r+0x4de>
 80073f8:	9b02      	ldr	r3, [sp, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	dd36      	ble.n	800746c <_dtoa_r+0x464>
 80073fe:	9b00      	ldr	r3, [sp, #0]
 8007400:	4650      	mov	r0, sl
 8007402:	4659      	mov	r1, fp
 8007404:	1e5f      	subs	r7, r3, #1
 8007406:	2200      	movs	r2, #0
 8007408:	4b88      	ldr	r3, [pc, #544]	; (800762c <_dtoa_r+0x624>)
 800740a:	f7f9 f915 	bl	8000638 <__aeabi_dmul>
 800740e:	9e02      	ldr	r6, [sp, #8]
 8007410:	4682      	mov	sl, r0
 8007412:	468b      	mov	fp, r1
 8007414:	3501      	adds	r5, #1
 8007416:	4628      	mov	r0, r5
 8007418:	f7f9 f8a4 	bl	8000564 <__aeabi_i2d>
 800741c:	4652      	mov	r2, sl
 800741e:	465b      	mov	r3, fp
 8007420:	f7f9 f90a 	bl	8000638 <__aeabi_dmul>
 8007424:	4b82      	ldr	r3, [pc, #520]	; (8007630 <_dtoa_r+0x628>)
 8007426:	2200      	movs	r2, #0
 8007428:	f7f8 ff50 	bl	80002cc <__adddf3>
 800742c:	46d0      	mov	r8, sl
 800742e:	46d9      	mov	r9, fp
 8007430:	4682      	mov	sl, r0
 8007432:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007436:	2e00      	cmp	r6, #0
 8007438:	d158      	bne.n	80074ec <_dtoa_r+0x4e4>
 800743a:	4b7e      	ldr	r3, [pc, #504]	; (8007634 <_dtoa_r+0x62c>)
 800743c:	2200      	movs	r2, #0
 800743e:	4640      	mov	r0, r8
 8007440:	4649      	mov	r1, r9
 8007442:	f7f8 ff41 	bl	80002c8 <__aeabi_dsub>
 8007446:	4652      	mov	r2, sl
 8007448:	465b      	mov	r3, fp
 800744a:	4680      	mov	r8, r0
 800744c:	4689      	mov	r9, r1
 800744e:	f7f9 fb83 	bl	8000b58 <__aeabi_dcmpgt>
 8007452:	2800      	cmp	r0, #0
 8007454:	f040 8295 	bne.w	8007982 <_dtoa_r+0x97a>
 8007458:	4652      	mov	r2, sl
 800745a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800745e:	4640      	mov	r0, r8
 8007460:	4649      	mov	r1, r9
 8007462:	f7f9 fb5b 	bl	8000b1c <__aeabi_dcmplt>
 8007466:	2800      	cmp	r0, #0
 8007468:	f040 8289 	bne.w	800797e <_dtoa_r+0x976>
 800746c:	ec5b ab19 	vmov	sl, fp, d9
 8007470:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007472:	2b00      	cmp	r3, #0
 8007474:	f2c0 8148 	blt.w	8007708 <_dtoa_r+0x700>
 8007478:	9a00      	ldr	r2, [sp, #0]
 800747a:	2a0e      	cmp	r2, #14
 800747c:	f300 8144 	bgt.w	8007708 <_dtoa_r+0x700>
 8007480:	4b67      	ldr	r3, [pc, #412]	; (8007620 <_dtoa_r+0x618>)
 8007482:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007486:	e9d3 8900 	ldrd	r8, r9, [r3]
 800748a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800748c:	2b00      	cmp	r3, #0
 800748e:	f280 80d5 	bge.w	800763c <_dtoa_r+0x634>
 8007492:	9b03      	ldr	r3, [sp, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	f300 80d1 	bgt.w	800763c <_dtoa_r+0x634>
 800749a:	f040 826f 	bne.w	800797c <_dtoa_r+0x974>
 800749e:	4b65      	ldr	r3, [pc, #404]	; (8007634 <_dtoa_r+0x62c>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	4640      	mov	r0, r8
 80074a4:	4649      	mov	r1, r9
 80074a6:	f7f9 f8c7 	bl	8000638 <__aeabi_dmul>
 80074aa:	4652      	mov	r2, sl
 80074ac:	465b      	mov	r3, fp
 80074ae:	f7f9 fb49 	bl	8000b44 <__aeabi_dcmpge>
 80074b2:	9e03      	ldr	r6, [sp, #12]
 80074b4:	4637      	mov	r7, r6
 80074b6:	2800      	cmp	r0, #0
 80074b8:	f040 8245 	bne.w	8007946 <_dtoa_r+0x93e>
 80074bc:	9d01      	ldr	r5, [sp, #4]
 80074be:	2331      	movs	r3, #49	; 0x31
 80074c0:	f805 3b01 	strb.w	r3, [r5], #1
 80074c4:	9b00      	ldr	r3, [sp, #0]
 80074c6:	3301      	adds	r3, #1
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	e240      	b.n	800794e <_dtoa_r+0x946>
 80074cc:	07f2      	lsls	r2, r6, #31
 80074ce:	d505      	bpl.n	80074dc <_dtoa_r+0x4d4>
 80074d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d4:	f7f9 f8b0 	bl	8000638 <__aeabi_dmul>
 80074d8:	3501      	adds	r5, #1
 80074da:	2301      	movs	r3, #1
 80074dc:	1076      	asrs	r6, r6, #1
 80074de:	3708      	adds	r7, #8
 80074e0:	e777      	b.n	80073d2 <_dtoa_r+0x3ca>
 80074e2:	2502      	movs	r5, #2
 80074e4:	e779      	b.n	80073da <_dtoa_r+0x3d2>
 80074e6:	9f00      	ldr	r7, [sp, #0]
 80074e8:	9e03      	ldr	r6, [sp, #12]
 80074ea:	e794      	b.n	8007416 <_dtoa_r+0x40e>
 80074ec:	9901      	ldr	r1, [sp, #4]
 80074ee:	4b4c      	ldr	r3, [pc, #304]	; (8007620 <_dtoa_r+0x618>)
 80074f0:	4431      	add	r1, r6
 80074f2:	910d      	str	r1, [sp, #52]	; 0x34
 80074f4:	9908      	ldr	r1, [sp, #32]
 80074f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80074fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074fe:	2900      	cmp	r1, #0
 8007500:	d043      	beq.n	800758a <_dtoa_r+0x582>
 8007502:	494d      	ldr	r1, [pc, #308]	; (8007638 <_dtoa_r+0x630>)
 8007504:	2000      	movs	r0, #0
 8007506:	f7f9 f9c1 	bl	800088c <__aeabi_ddiv>
 800750a:	4652      	mov	r2, sl
 800750c:	465b      	mov	r3, fp
 800750e:	f7f8 fedb 	bl	80002c8 <__aeabi_dsub>
 8007512:	9d01      	ldr	r5, [sp, #4]
 8007514:	4682      	mov	sl, r0
 8007516:	468b      	mov	fp, r1
 8007518:	4649      	mov	r1, r9
 800751a:	4640      	mov	r0, r8
 800751c:	f7f9 fb3c 	bl	8000b98 <__aeabi_d2iz>
 8007520:	4606      	mov	r6, r0
 8007522:	f7f9 f81f 	bl	8000564 <__aeabi_i2d>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	4640      	mov	r0, r8
 800752c:	4649      	mov	r1, r9
 800752e:	f7f8 fecb 	bl	80002c8 <__aeabi_dsub>
 8007532:	3630      	adds	r6, #48	; 0x30
 8007534:	f805 6b01 	strb.w	r6, [r5], #1
 8007538:	4652      	mov	r2, sl
 800753a:	465b      	mov	r3, fp
 800753c:	4680      	mov	r8, r0
 800753e:	4689      	mov	r9, r1
 8007540:	f7f9 faec 	bl	8000b1c <__aeabi_dcmplt>
 8007544:	2800      	cmp	r0, #0
 8007546:	d163      	bne.n	8007610 <_dtoa_r+0x608>
 8007548:	4642      	mov	r2, r8
 800754a:	464b      	mov	r3, r9
 800754c:	4936      	ldr	r1, [pc, #216]	; (8007628 <_dtoa_r+0x620>)
 800754e:	2000      	movs	r0, #0
 8007550:	f7f8 feba 	bl	80002c8 <__aeabi_dsub>
 8007554:	4652      	mov	r2, sl
 8007556:	465b      	mov	r3, fp
 8007558:	f7f9 fae0 	bl	8000b1c <__aeabi_dcmplt>
 800755c:	2800      	cmp	r0, #0
 800755e:	f040 80b5 	bne.w	80076cc <_dtoa_r+0x6c4>
 8007562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007564:	429d      	cmp	r5, r3
 8007566:	d081      	beq.n	800746c <_dtoa_r+0x464>
 8007568:	4b30      	ldr	r3, [pc, #192]	; (800762c <_dtoa_r+0x624>)
 800756a:	2200      	movs	r2, #0
 800756c:	4650      	mov	r0, sl
 800756e:	4659      	mov	r1, fp
 8007570:	f7f9 f862 	bl	8000638 <__aeabi_dmul>
 8007574:	4b2d      	ldr	r3, [pc, #180]	; (800762c <_dtoa_r+0x624>)
 8007576:	4682      	mov	sl, r0
 8007578:	468b      	mov	fp, r1
 800757a:	4640      	mov	r0, r8
 800757c:	4649      	mov	r1, r9
 800757e:	2200      	movs	r2, #0
 8007580:	f7f9 f85a 	bl	8000638 <__aeabi_dmul>
 8007584:	4680      	mov	r8, r0
 8007586:	4689      	mov	r9, r1
 8007588:	e7c6      	b.n	8007518 <_dtoa_r+0x510>
 800758a:	4650      	mov	r0, sl
 800758c:	4659      	mov	r1, fp
 800758e:	f7f9 f853 	bl	8000638 <__aeabi_dmul>
 8007592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007594:	9d01      	ldr	r5, [sp, #4]
 8007596:	930f      	str	r3, [sp, #60]	; 0x3c
 8007598:	4682      	mov	sl, r0
 800759a:	468b      	mov	fp, r1
 800759c:	4649      	mov	r1, r9
 800759e:	4640      	mov	r0, r8
 80075a0:	f7f9 fafa 	bl	8000b98 <__aeabi_d2iz>
 80075a4:	4606      	mov	r6, r0
 80075a6:	f7f8 ffdd 	bl	8000564 <__aeabi_i2d>
 80075aa:	3630      	adds	r6, #48	; 0x30
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4640      	mov	r0, r8
 80075b2:	4649      	mov	r1, r9
 80075b4:	f7f8 fe88 	bl	80002c8 <__aeabi_dsub>
 80075b8:	f805 6b01 	strb.w	r6, [r5], #1
 80075bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075be:	429d      	cmp	r5, r3
 80075c0:	4680      	mov	r8, r0
 80075c2:	4689      	mov	r9, r1
 80075c4:	f04f 0200 	mov.w	r2, #0
 80075c8:	d124      	bne.n	8007614 <_dtoa_r+0x60c>
 80075ca:	4b1b      	ldr	r3, [pc, #108]	; (8007638 <_dtoa_r+0x630>)
 80075cc:	4650      	mov	r0, sl
 80075ce:	4659      	mov	r1, fp
 80075d0:	f7f8 fe7c 	bl	80002cc <__adddf3>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4640      	mov	r0, r8
 80075da:	4649      	mov	r1, r9
 80075dc:	f7f9 fabc 	bl	8000b58 <__aeabi_dcmpgt>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d173      	bne.n	80076cc <_dtoa_r+0x6c4>
 80075e4:	4652      	mov	r2, sl
 80075e6:	465b      	mov	r3, fp
 80075e8:	4913      	ldr	r1, [pc, #76]	; (8007638 <_dtoa_r+0x630>)
 80075ea:	2000      	movs	r0, #0
 80075ec:	f7f8 fe6c 	bl	80002c8 <__aeabi_dsub>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4640      	mov	r0, r8
 80075f6:	4649      	mov	r1, r9
 80075f8:	f7f9 fa90 	bl	8000b1c <__aeabi_dcmplt>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	f43f af35 	beq.w	800746c <_dtoa_r+0x464>
 8007602:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007604:	1e6b      	subs	r3, r5, #1
 8007606:	930f      	str	r3, [sp, #60]	; 0x3c
 8007608:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800760c:	2b30      	cmp	r3, #48	; 0x30
 800760e:	d0f8      	beq.n	8007602 <_dtoa_r+0x5fa>
 8007610:	9700      	str	r7, [sp, #0]
 8007612:	e049      	b.n	80076a8 <_dtoa_r+0x6a0>
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <_dtoa_r+0x624>)
 8007616:	f7f9 f80f 	bl	8000638 <__aeabi_dmul>
 800761a:	4680      	mov	r8, r0
 800761c:	4689      	mov	r9, r1
 800761e:	e7bd      	b.n	800759c <_dtoa_r+0x594>
 8007620:	0800aa30 	.word	0x0800aa30
 8007624:	0800aa08 	.word	0x0800aa08
 8007628:	3ff00000 	.word	0x3ff00000
 800762c:	40240000 	.word	0x40240000
 8007630:	401c0000 	.word	0x401c0000
 8007634:	40140000 	.word	0x40140000
 8007638:	3fe00000 	.word	0x3fe00000
 800763c:	9d01      	ldr	r5, [sp, #4]
 800763e:	4656      	mov	r6, sl
 8007640:	465f      	mov	r7, fp
 8007642:	4642      	mov	r2, r8
 8007644:	464b      	mov	r3, r9
 8007646:	4630      	mov	r0, r6
 8007648:	4639      	mov	r1, r7
 800764a:	f7f9 f91f 	bl	800088c <__aeabi_ddiv>
 800764e:	f7f9 faa3 	bl	8000b98 <__aeabi_d2iz>
 8007652:	4682      	mov	sl, r0
 8007654:	f7f8 ff86 	bl	8000564 <__aeabi_i2d>
 8007658:	4642      	mov	r2, r8
 800765a:	464b      	mov	r3, r9
 800765c:	f7f8 ffec 	bl	8000638 <__aeabi_dmul>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	4630      	mov	r0, r6
 8007666:	4639      	mov	r1, r7
 8007668:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800766c:	f7f8 fe2c 	bl	80002c8 <__aeabi_dsub>
 8007670:	f805 6b01 	strb.w	r6, [r5], #1
 8007674:	9e01      	ldr	r6, [sp, #4]
 8007676:	9f03      	ldr	r7, [sp, #12]
 8007678:	1bae      	subs	r6, r5, r6
 800767a:	42b7      	cmp	r7, r6
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	d135      	bne.n	80076ee <_dtoa_r+0x6e6>
 8007682:	f7f8 fe23 	bl	80002cc <__adddf3>
 8007686:	4642      	mov	r2, r8
 8007688:	464b      	mov	r3, r9
 800768a:	4606      	mov	r6, r0
 800768c:	460f      	mov	r7, r1
 800768e:	f7f9 fa63 	bl	8000b58 <__aeabi_dcmpgt>
 8007692:	b9d0      	cbnz	r0, 80076ca <_dtoa_r+0x6c2>
 8007694:	4642      	mov	r2, r8
 8007696:	464b      	mov	r3, r9
 8007698:	4630      	mov	r0, r6
 800769a:	4639      	mov	r1, r7
 800769c:	f7f9 fa34 	bl	8000b08 <__aeabi_dcmpeq>
 80076a0:	b110      	cbz	r0, 80076a8 <_dtoa_r+0x6a0>
 80076a2:	f01a 0f01 	tst.w	sl, #1
 80076a6:	d110      	bne.n	80076ca <_dtoa_r+0x6c2>
 80076a8:	4620      	mov	r0, r4
 80076aa:	ee18 1a10 	vmov	r1, s16
 80076ae:	f000 faf3 	bl	8007c98 <_Bfree>
 80076b2:	2300      	movs	r3, #0
 80076b4:	9800      	ldr	r0, [sp, #0]
 80076b6:	702b      	strb	r3, [r5, #0]
 80076b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076ba:	3001      	adds	r0, #1
 80076bc:	6018      	str	r0, [r3, #0]
 80076be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f43f acf1 	beq.w	80070a8 <_dtoa_r+0xa0>
 80076c6:	601d      	str	r5, [r3, #0]
 80076c8:	e4ee      	b.n	80070a8 <_dtoa_r+0xa0>
 80076ca:	9f00      	ldr	r7, [sp, #0]
 80076cc:	462b      	mov	r3, r5
 80076ce:	461d      	mov	r5, r3
 80076d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076d4:	2a39      	cmp	r2, #57	; 0x39
 80076d6:	d106      	bne.n	80076e6 <_dtoa_r+0x6de>
 80076d8:	9a01      	ldr	r2, [sp, #4]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d1f7      	bne.n	80076ce <_dtoa_r+0x6c6>
 80076de:	9901      	ldr	r1, [sp, #4]
 80076e0:	2230      	movs	r2, #48	; 0x30
 80076e2:	3701      	adds	r7, #1
 80076e4:	700a      	strb	r2, [r1, #0]
 80076e6:	781a      	ldrb	r2, [r3, #0]
 80076e8:	3201      	adds	r2, #1
 80076ea:	701a      	strb	r2, [r3, #0]
 80076ec:	e790      	b.n	8007610 <_dtoa_r+0x608>
 80076ee:	4ba6      	ldr	r3, [pc, #664]	; (8007988 <_dtoa_r+0x980>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	f7f8 ffa1 	bl	8000638 <__aeabi_dmul>
 80076f6:	2200      	movs	r2, #0
 80076f8:	2300      	movs	r3, #0
 80076fa:	4606      	mov	r6, r0
 80076fc:	460f      	mov	r7, r1
 80076fe:	f7f9 fa03 	bl	8000b08 <__aeabi_dcmpeq>
 8007702:	2800      	cmp	r0, #0
 8007704:	d09d      	beq.n	8007642 <_dtoa_r+0x63a>
 8007706:	e7cf      	b.n	80076a8 <_dtoa_r+0x6a0>
 8007708:	9a08      	ldr	r2, [sp, #32]
 800770a:	2a00      	cmp	r2, #0
 800770c:	f000 80d7 	beq.w	80078be <_dtoa_r+0x8b6>
 8007710:	9a06      	ldr	r2, [sp, #24]
 8007712:	2a01      	cmp	r2, #1
 8007714:	f300 80ba 	bgt.w	800788c <_dtoa_r+0x884>
 8007718:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800771a:	2a00      	cmp	r2, #0
 800771c:	f000 80b2 	beq.w	8007884 <_dtoa_r+0x87c>
 8007720:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007724:	9e07      	ldr	r6, [sp, #28]
 8007726:	9d04      	ldr	r5, [sp, #16]
 8007728:	9a04      	ldr	r2, [sp, #16]
 800772a:	441a      	add	r2, r3
 800772c:	9204      	str	r2, [sp, #16]
 800772e:	9a05      	ldr	r2, [sp, #20]
 8007730:	2101      	movs	r1, #1
 8007732:	441a      	add	r2, r3
 8007734:	4620      	mov	r0, r4
 8007736:	9205      	str	r2, [sp, #20]
 8007738:	f000 fb66 	bl	8007e08 <__i2b>
 800773c:	4607      	mov	r7, r0
 800773e:	2d00      	cmp	r5, #0
 8007740:	dd0c      	ble.n	800775c <_dtoa_r+0x754>
 8007742:	9b05      	ldr	r3, [sp, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	dd09      	ble.n	800775c <_dtoa_r+0x754>
 8007748:	42ab      	cmp	r3, r5
 800774a:	9a04      	ldr	r2, [sp, #16]
 800774c:	bfa8      	it	ge
 800774e:	462b      	movge	r3, r5
 8007750:	1ad2      	subs	r2, r2, r3
 8007752:	9204      	str	r2, [sp, #16]
 8007754:	9a05      	ldr	r2, [sp, #20]
 8007756:	1aed      	subs	r5, r5, r3
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	9305      	str	r3, [sp, #20]
 800775c:	9b07      	ldr	r3, [sp, #28]
 800775e:	b31b      	cbz	r3, 80077a8 <_dtoa_r+0x7a0>
 8007760:	9b08      	ldr	r3, [sp, #32]
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 80af 	beq.w	80078c6 <_dtoa_r+0x8be>
 8007768:	2e00      	cmp	r6, #0
 800776a:	dd13      	ble.n	8007794 <_dtoa_r+0x78c>
 800776c:	4639      	mov	r1, r7
 800776e:	4632      	mov	r2, r6
 8007770:	4620      	mov	r0, r4
 8007772:	f000 fc09 	bl	8007f88 <__pow5mult>
 8007776:	ee18 2a10 	vmov	r2, s16
 800777a:	4601      	mov	r1, r0
 800777c:	4607      	mov	r7, r0
 800777e:	4620      	mov	r0, r4
 8007780:	f000 fb58 	bl	8007e34 <__multiply>
 8007784:	ee18 1a10 	vmov	r1, s16
 8007788:	4680      	mov	r8, r0
 800778a:	4620      	mov	r0, r4
 800778c:	f000 fa84 	bl	8007c98 <_Bfree>
 8007790:	ee08 8a10 	vmov	s16, r8
 8007794:	9b07      	ldr	r3, [sp, #28]
 8007796:	1b9a      	subs	r2, r3, r6
 8007798:	d006      	beq.n	80077a8 <_dtoa_r+0x7a0>
 800779a:	ee18 1a10 	vmov	r1, s16
 800779e:	4620      	mov	r0, r4
 80077a0:	f000 fbf2 	bl	8007f88 <__pow5mult>
 80077a4:	ee08 0a10 	vmov	s16, r0
 80077a8:	2101      	movs	r1, #1
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 fb2c 	bl	8007e08 <__i2b>
 80077b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	4606      	mov	r6, r0
 80077b6:	f340 8088 	ble.w	80078ca <_dtoa_r+0x8c2>
 80077ba:	461a      	mov	r2, r3
 80077bc:	4601      	mov	r1, r0
 80077be:	4620      	mov	r0, r4
 80077c0:	f000 fbe2 	bl	8007f88 <__pow5mult>
 80077c4:	9b06      	ldr	r3, [sp, #24]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	4606      	mov	r6, r0
 80077ca:	f340 8081 	ble.w	80078d0 <_dtoa_r+0x8c8>
 80077ce:	f04f 0800 	mov.w	r8, #0
 80077d2:	6933      	ldr	r3, [r6, #16]
 80077d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077d8:	6918      	ldr	r0, [r3, #16]
 80077da:	f000 fac5 	bl	8007d68 <__hi0bits>
 80077de:	f1c0 0020 	rsb	r0, r0, #32
 80077e2:	9b05      	ldr	r3, [sp, #20]
 80077e4:	4418      	add	r0, r3
 80077e6:	f010 001f 	ands.w	r0, r0, #31
 80077ea:	f000 8092 	beq.w	8007912 <_dtoa_r+0x90a>
 80077ee:	f1c0 0320 	rsb	r3, r0, #32
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	f340 808a 	ble.w	800790c <_dtoa_r+0x904>
 80077f8:	f1c0 001c 	rsb	r0, r0, #28
 80077fc:	9b04      	ldr	r3, [sp, #16]
 80077fe:	4403      	add	r3, r0
 8007800:	9304      	str	r3, [sp, #16]
 8007802:	9b05      	ldr	r3, [sp, #20]
 8007804:	4403      	add	r3, r0
 8007806:	4405      	add	r5, r0
 8007808:	9305      	str	r3, [sp, #20]
 800780a:	9b04      	ldr	r3, [sp, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	dd07      	ble.n	8007820 <_dtoa_r+0x818>
 8007810:	ee18 1a10 	vmov	r1, s16
 8007814:	461a      	mov	r2, r3
 8007816:	4620      	mov	r0, r4
 8007818:	f000 fc10 	bl	800803c <__lshift>
 800781c:	ee08 0a10 	vmov	s16, r0
 8007820:	9b05      	ldr	r3, [sp, #20]
 8007822:	2b00      	cmp	r3, #0
 8007824:	dd05      	ble.n	8007832 <_dtoa_r+0x82a>
 8007826:	4631      	mov	r1, r6
 8007828:	461a      	mov	r2, r3
 800782a:	4620      	mov	r0, r4
 800782c:	f000 fc06 	bl	800803c <__lshift>
 8007830:	4606      	mov	r6, r0
 8007832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007834:	2b00      	cmp	r3, #0
 8007836:	d06e      	beq.n	8007916 <_dtoa_r+0x90e>
 8007838:	ee18 0a10 	vmov	r0, s16
 800783c:	4631      	mov	r1, r6
 800783e:	f000 fc6d 	bl	800811c <__mcmp>
 8007842:	2800      	cmp	r0, #0
 8007844:	da67      	bge.n	8007916 <_dtoa_r+0x90e>
 8007846:	9b00      	ldr	r3, [sp, #0]
 8007848:	3b01      	subs	r3, #1
 800784a:	ee18 1a10 	vmov	r1, s16
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	220a      	movs	r2, #10
 8007852:	2300      	movs	r3, #0
 8007854:	4620      	mov	r0, r4
 8007856:	f000 fa41 	bl	8007cdc <__multadd>
 800785a:	9b08      	ldr	r3, [sp, #32]
 800785c:	ee08 0a10 	vmov	s16, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 81b1 	beq.w	8007bc8 <_dtoa_r+0xbc0>
 8007866:	2300      	movs	r3, #0
 8007868:	4639      	mov	r1, r7
 800786a:	220a      	movs	r2, #10
 800786c:	4620      	mov	r0, r4
 800786e:	f000 fa35 	bl	8007cdc <__multadd>
 8007872:	9b02      	ldr	r3, [sp, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	4607      	mov	r7, r0
 8007878:	f300 808e 	bgt.w	8007998 <_dtoa_r+0x990>
 800787c:	9b06      	ldr	r3, [sp, #24]
 800787e:	2b02      	cmp	r3, #2
 8007880:	dc51      	bgt.n	8007926 <_dtoa_r+0x91e>
 8007882:	e089      	b.n	8007998 <_dtoa_r+0x990>
 8007884:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007886:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800788a:	e74b      	b.n	8007724 <_dtoa_r+0x71c>
 800788c:	9b03      	ldr	r3, [sp, #12]
 800788e:	1e5e      	subs	r6, r3, #1
 8007890:	9b07      	ldr	r3, [sp, #28]
 8007892:	42b3      	cmp	r3, r6
 8007894:	bfbf      	itttt	lt
 8007896:	9b07      	ldrlt	r3, [sp, #28]
 8007898:	9607      	strlt	r6, [sp, #28]
 800789a:	1af2      	sublt	r2, r6, r3
 800789c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800789e:	bfb6      	itet	lt
 80078a0:	189b      	addlt	r3, r3, r2
 80078a2:	1b9e      	subge	r6, r3, r6
 80078a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80078a6:	9b03      	ldr	r3, [sp, #12]
 80078a8:	bfb8      	it	lt
 80078aa:	2600      	movlt	r6, #0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	bfb7      	itett	lt
 80078b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80078b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80078b8:	1a9d      	sublt	r5, r3, r2
 80078ba:	2300      	movlt	r3, #0
 80078bc:	e734      	b.n	8007728 <_dtoa_r+0x720>
 80078be:	9e07      	ldr	r6, [sp, #28]
 80078c0:	9d04      	ldr	r5, [sp, #16]
 80078c2:	9f08      	ldr	r7, [sp, #32]
 80078c4:	e73b      	b.n	800773e <_dtoa_r+0x736>
 80078c6:	9a07      	ldr	r2, [sp, #28]
 80078c8:	e767      	b.n	800779a <_dtoa_r+0x792>
 80078ca:	9b06      	ldr	r3, [sp, #24]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	dc18      	bgt.n	8007902 <_dtoa_r+0x8fa>
 80078d0:	f1ba 0f00 	cmp.w	sl, #0
 80078d4:	d115      	bne.n	8007902 <_dtoa_r+0x8fa>
 80078d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078da:	b993      	cbnz	r3, 8007902 <_dtoa_r+0x8fa>
 80078dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078e0:	0d1b      	lsrs	r3, r3, #20
 80078e2:	051b      	lsls	r3, r3, #20
 80078e4:	b183      	cbz	r3, 8007908 <_dtoa_r+0x900>
 80078e6:	9b04      	ldr	r3, [sp, #16]
 80078e8:	3301      	adds	r3, #1
 80078ea:	9304      	str	r3, [sp, #16]
 80078ec:	9b05      	ldr	r3, [sp, #20]
 80078ee:	3301      	adds	r3, #1
 80078f0:	9305      	str	r3, [sp, #20]
 80078f2:	f04f 0801 	mov.w	r8, #1
 80078f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f47f af6a 	bne.w	80077d2 <_dtoa_r+0x7ca>
 80078fe:	2001      	movs	r0, #1
 8007900:	e76f      	b.n	80077e2 <_dtoa_r+0x7da>
 8007902:	f04f 0800 	mov.w	r8, #0
 8007906:	e7f6      	b.n	80078f6 <_dtoa_r+0x8ee>
 8007908:	4698      	mov	r8, r3
 800790a:	e7f4      	b.n	80078f6 <_dtoa_r+0x8ee>
 800790c:	f43f af7d 	beq.w	800780a <_dtoa_r+0x802>
 8007910:	4618      	mov	r0, r3
 8007912:	301c      	adds	r0, #28
 8007914:	e772      	b.n	80077fc <_dtoa_r+0x7f4>
 8007916:	9b03      	ldr	r3, [sp, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	dc37      	bgt.n	800798c <_dtoa_r+0x984>
 800791c:	9b06      	ldr	r3, [sp, #24]
 800791e:	2b02      	cmp	r3, #2
 8007920:	dd34      	ble.n	800798c <_dtoa_r+0x984>
 8007922:	9b03      	ldr	r3, [sp, #12]
 8007924:	9302      	str	r3, [sp, #8]
 8007926:	9b02      	ldr	r3, [sp, #8]
 8007928:	b96b      	cbnz	r3, 8007946 <_dtoa_r+0x93e>
 800792a:	4631      	mov	r1, r6
 800792c:	2205      	movs	r2, #5
 800792e:	4620      	mov	r0, r4
 8007930:	f000 f9d4 	bl	8007cdc <__multadd>
 8007934:	4601      	mov	r1, r0
 8007936:	4606      	mov	r6, r0
 8007938:	ee18 0a10 	vmov	r0, s16
 800793c:	f000 fbee 	bl	800811c <__mcmp>
 8007940:	2800      	cmp	r0, #0
 8007942:	f73f adbb 	bgt.w	80074bc <_dtoa_r+0x4b4>
 8007946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007948:	9d01      	ldr	r5, [sp, #4]
 800794a:	43db      	mvns	r3, r3
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	f04f 0800 	mov.w	r8, #0
 8007952:	4631      	mov	r1, r6
 8007954:	4620      	mov	r0, r4
 8007956:	f000 f99f 	bl	8007c98 <_Bfree>
 800795a:	2f00      	cmp	r7, #0
 800795c:	f43f aea4 	beq.w	80076a8 <_dtoa_r+0x6a0>
 8007960:	f1b8 0f00 	cmp.w	r8, #0
 8007964:	d005      	beq.n	8007972 <_dtoa_r+0x96a>
 8007966:	45b8      	cmp	r8, r7
 8007968:	d003      	beq.n	8007972 <_dtoa_r+0x96a>
 800796a:	4641      	mov	r1, r8
 800796c:	4620      	mov	r0, r4
 800796e:	f000 f993 	bl	8007c98 <_Bfree>
 8007972:	4639      	mov	r1, r7
 8007974:	4620      	mov	r0, r4
 8007976:	f000 f98f 	bl	8007c98 <_Bfree>
 800797a:	e695      	b.n	80076a8 <_dtoa_r+0x6a0>
 800797c:	2600      	movs	r6, #0
 800797e:	4637      	mov	r7, r6
 8007980:	e7e1      	b.n	8007946 <_dtoa_r+0x93e>
 8007982:	9700      	str	r7, [sp, #0]
 8007984:	4637      	mov	r7, r6
 8007986:	e599      	b.n	80074bc <_dtoa_r+0x4b4>
 8007988:	40240000 	.word	0x40240000
 800798c:	9b08      	ldr	r3, [sp, #32]
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 80ca 	beq.w	8007b28 <_dtoa_r+0xb20>
 8007994:	9b03      	ldr	r3, [sp, #12]
 8007996:	9302      	str	r3, [sp, #8]
 8007998:	2d00      	cmp	r5, #0
 800799a:	dd05      	ble.n	80079a8 <_dtoa_r+0x9a0>
 800799c:	4639      	mov	r1, r7
 800799e:	462a      	mov	r2, r5
 80079a0:	4620      	mov	r0, r4
 80079a2:	f000 fb4b 	bl	800803c <__lshift>
 80079a6:	4607      	mov	r7, r0
 80079a8:	f1b8 0f00 	cmp.w	r8, #0
 80079ac:	d05b      	beq.n	8007a66 <_dtoa_r+0xa5e>
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	4620      	mov	r0, r4
 80079b2:	f000 f931 	bl	8007c18 <_Balloc>
 80079b6:	4605      	mov	r5, r0
 80079b8:	b928      	cbnz	r0, 80079c6 <_dtoa_r+0x9be>
 80079ba:	4b87      	ldr	r3, [pc, #540]	; (8007bd8 <_dtoa_r+0xbd0>)
 80079bc:	4602      	mov	r2, r0
 80079be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079c2:	f7ff bb3b 	b.w	800703c <_dtoa_r+0x34>
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	3202      	adds	r2, #2
 80079ca:	0092      	lsls	r2, r2, #2
 80079cc:	f107 010c 	add.w	r1, r7, #12
 80079d0:	300c      	adds	r0, #12
 80079d2:	f000 f913 	bl	8007bfc <memcpy>
 80079d6:	2201      	movs	r2, #1
 80079d8:	4629      	mov	r1, r5
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 fb2e 	bl	800803c <__lshift>
 80079e0:	9b01      	ldr	r3, [sp, #4]
 80079e2:	f103 0901 	add.w	r9, r3, #1
 80079e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80079ea:	4413      	add	r3, r2
 80079ec:	9305      	str	r3, [sp, #20]
 80079ee:	f00a 0301 	and.w	r3, sl, #1
 80079f2:	46b8      	mov	r8, r7
 80079f4:	9304      	str	r3, [sp, #16]
 80079f6:	4607      	mov	r7, r0
 80079f8:	4631      	mov	r1, r6
 80079fa:	ee18 0a10 	vmov	r0, s16
 80079fe:	f7ff fa77 	bl	8006ef0 <quorem>
 8007a02:	4641      	mov	r1, r8
 8007a04:	9002      	str	r0, [sp, #8]
 8007a06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a0a:	ee18 0a10 	vmov	r0, s16
 8007a0e:	f000 fb85 	bl	800811c <__mcmp>
 8007a12:	463a      	mov	r2, r7
 8007a14:	9003      	str	r0, [sp, #12]
 8007a16:	4631      	mov	r1, r6
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 fb9b 	bl	8008154 <__mdiff>
 8007a1e:	68c2      	ldr	r2, [r0, #12]
 8007a20:	f109 3bff 	add.w	fp, r9, #4294967295
 8007a24:	4605      	mov	r5, r0
 8007a26:	bb02      	cbnz	r2, 8007a6a <_dtoa_r+0xa62>
 8007a28:	4601      	mov	r1, r0
 8007a2a:	ee18 0a10 	vmov	r0, s16
 8007a2e:	f000 fb75 	bl	800811c <__mcmp>
 8007a32:	4602      	mov	r2, r0
 8007a34:	4629      	mov	r1, r5
 8007a36:	4620      	mov	r0, r4
 8007a38:	9207      	str	r2, [sp, #28]
 8007a3a:	f000 f92d 	bl	8007c98 <_Bfree>
 8007a3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007a42:	ea43 0102 	orr.w	r1, r3, r2
 8007a46:	9b04      	ldr	r3, [sp, #16]
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	464d      	mov	r5, r9
 8007a4c:	d10f      	bne.n	8007a6e <_dtoa_r+0xa66>
 8007a4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a52:	d02a      	beq.n	8007aaa <_dtoa_r+0xaa2>
 8007a54:	9b03      	ldr	r3, [sp, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	dd02      	ble.n	8007a60 <_dtoa_r+0xa58>
 8007a5a:	9b02      	ldr	r3, [sp, #8]
 8007a5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007a60:	f88b a000 	strb.w	sl, [fp]
 8007a64:	e775      	b.n	8007952 <_dtoa_r+0x94a>
 8007a66:	4638      	mov	r0, r7
 8007a68:	e7ba      	b.n	80079e0 <_dtoa_r+0x9d8>
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	e7e2      	b.n	8007a34 <_dtoa_r+0xa2c>
 8007a6e:	9b03      	ldr	r3, [sp, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	db04      	blt.n	8007a7e <_dtoa_r+0xa76>
 8007a74:	9906      	ldr	r1, [sp, #24]
 8007a76:	430b      	orrs	r3, r1
 8007a78:	9904      	ldr	r1, [sp, #16]
 8007a7a:	430b      	orrs	r3, r1
 8007a7c:	d122      	bne.n	8007ac4 <_dtoa_r+0xabc>
 8007a7e:	2a00      	cmp	r2, #0
 8007a80:	ddee      	ble.n	8007a60 <_dtoa_r+0xa58>
 8007a82:	ee18 1a10 	vmov	r1, s16
 8007a86:	2201      	movs	r2, #1
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 fad7 	bl	800803c <__lshift>
 8007a8e:	4631      	mov	r1, r6
 8007a90:	ee08 0a10 	vmov	s16, r0
 8007a94:	f000 fb42 	bl	800811c <__mcmp>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	dc03      	bgt.n	8007aa4 <_dtoa_r+0xa9c>
 8007a9c:	d1e0      	bne.n	8007a60 <_dtoa_r+0xa58>
 8007a9e:	f01a 0f01 	tst.w	sl, #1
 8007aa2:	d0dd      	beq.n	8007a60 <_dtoa_r+0xa58>
 8007aa4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007aa8:	d1d7      	bne.n	8007a5a <_dtoa_r+0xa52>
 8007aaa:	2339      	movs	r3, #57	; 0x39
 8007aac:	f88b 3000 	strb.w	r3, [fp]
 8007ab0:	462b      	mov	r3, r5
 8007ab2:	461d      	mov	r5, r3
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007aba:	2a39      	cmp	r2, #57	; 0x39
 8007abc:	d071      	beq.n	8007ba2 <_dtoa_r+0xb9a>
 8007abe:	3201      	adds	r2, #1
 8007ac0:	701a      	strb	r2, [r3, #0]
 8007ac2:	e746      	b.n	8007952 <_dtoa_r+0x94a>
 8007ac4:	2a00      	cmp	r2, #0
 8007ac6:	dd07      	ble.n	8007ad8 <_dtoa_r+0xad0>
 8007ac8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007acc:	d0ed      	beq.n	8007aaa <_dtoa_r+0xaa2>
 8007ace:	f10a 0301 	add.w	r3, sl, #1
 8007ad2:	f88b 3000 	strb.w	r3, [fp]
 8007ad6:	e73c      	b.n	8007952 <_dtoa_r+0x94a>
 8007ad8:	9b05      	ldr	r3, [sp, #20]
 8007ada:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007ade:	4599      	cmp	r9, r3
 8007ae0:	d047      	beq.n	8007b72 <_dtoa_r+0xb6a>
 8007ae2:	ee18 1a10 	vmov	r1, s16
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	220a      	movs	r2, #10
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 f8f6 	bl	8007cdc <__multadd>
 8007af0:	45b8      	cmp	r8, r7
 8007af2:	ee08 0a10 	vmov	s16, r0
 8007af6:	f04f 0300 	mov.w	r3, #0
 8007afa:	f04f 020a 	mov.w	r2, #10
 8007afe:	4641      	mov	r1, r8
 8007b00:	4620      	mov	r0, r4
 8007b02:	d106      	bne.n	8007b12 <_dtoa_r+0xb0a>
 8007b04:	f000 f8ea 	bl	8007cdc <__multadd>
 8007b08:	4680      	mov	r8, r0
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	f109 0901 	add.w	r9, r9, #1
 8007b10:	e772      	b.n	80079f8 <_dtoa_r+0x9f0>
 8007b12:	f000 f8e3 	bl	8007cdc <__multadd>
 8007b16:	4639      	mov	r1, r7
 8007b18:	4680      	mov	r8, r0
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	220a      	movs	r2, #10
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f000 f8dc 	bl	8007cdc <__multadd>
 8007b24:	4607      	mov	r7, r0
 8007b26:	e7f1      	b.n	8007b0c <_dtoa_r+0xb04>
 8007b28:	9b03      	ldr	r3, [sp, #12]
 8007b2a:	9302      	str	r3, [sp, #8]
 8007b2c:	9d01      	ldr	r5, [sp, #4]
 8007b2e:	ee18 0a10 	vmov	r0, s16
 8007b32:	4631      	mov	r1, r6
 8007b34:	f7ff f9dc 	bl	8006ef0 <quorem>
 8007b38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b3c:	9b01      	ldr	r3, [sp, #4]
 8007b3e:	f805 ab01 	strb.w	sl, [r5], #1
 8007b42:	1aea      	subs	r2, r5, r3
 8007b44:	9b02      	ldr	r3, [sp, #8]
 8007b46:	4293      	cmp	r3, r2
 8007b48:	dd09      	ble.n	8007b5e <_dtoa_r+0xb56>
 8007b4a:	ee18 1a10 	vmov	r1, s16
 8007b4e:	2300      	movs	r3, #0
 8007b50:	220a      	movs	r2, #10
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 f8c2 	bl	8007cdc <__multadd>
 8007b58:	ee08 0a10 	vmov	s16, r0
 8007b5c:	e7e7      	b.n	8007b2e <_dtoa_r+0xb26>
 8007b5e:	9b02      	ldr	r3, [sp, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bfc8      	it	gt
 8007b64:	461d      	movgt	r5, r3
 8007b66:	9b01      	ldr	r3, [sp, #4]
 8007b68:	bfd8      	it	le
 8007b6a:	2501      	movle	r5, #1
 8007b6c:	441d      	add	r5, r3
 8007b6e:	f04f 0800 	mov.w	r8, #0
 8007b72:	ee18 1a10 	vmov	r1, s16
 8007b76:	2201      	movs	r2, #1
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f000 fa5f 	bl	800803c <__lshift>
 8007b7e:	4631      	mov	r1, r6
 8007b80:	ee08 0a10 	vmov	s16, r0
 8007b84:	f000 faca 	bl	800811c <__mcmp>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	dc91      	bgt.n	8007ab0 <_dtoa_r+0xaa8>
 8007b8c:	d102      	bne.n	8007b94 <_dtoa_r+0xb8c>
 8007b8e:	f01a 0f01 	tst.w	sl, #1
 8007b92:	d18d      	bne.n	8007ab0 <_dtoa_r+0xaa8>
 8007b94:	462b      	mov	r3, r5
 8007b96:	461d      	mov	r5, r3
 8007b98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b9c:	2a30      	cmp	r2, #48	; 0x30
 8007b9e:	d0fa      	beq.n	8007b96 <_dtoa_r+0xb8e>
 8007ba0:	e6d7      	b.n	8007952 <_dtoa_r+0x94a>
 8007ba2:	9a01      	ldr	r2, [sp, #4]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d184      	bne.n	8007ab2 <_dtoa_r+0xaaa>
 8007ba8:	9b00      	ldr	r3, [sp, #0]
 8007baa:	3301      	adds	r3, #1
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	2331      	movs	r3, #49	; 0x31
 8007bb0:	7013      	strb	r3, [r2, #0]
 8007bb2:	e6ce      	b.n	8007952 <_dtoa_r+0x94a>
 8007bb4:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <_dtoa_r+0xbd4>)
 8007bb6:	f7ff ba95 	b.w	80070e4 <_dtoa_r+0xdc>
 8007bba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f47f aa6e 	bne.w	800709e <_dtoa_r+0x96>
 8007bc2:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <_dtoa_r+0xbd8>)
 8007bc4:	f7ff ba8e 	b.w	80070e4 <_dtoa_r+0xdc>
 8007bc8:	9b02      	ldr	r3, [sp, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	dcae      	bgt.n	8007b2c <_dtoa_r+0xb24>
 8007bce:	9b06      	ldr	r3, [sp, #24]
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	f73f aea8 	bgt.w	8007926 <_dtoa_r+0x91e>
 8007bd6:	e7a9      	b.n	8007b2c <_dtoa_r+0xb24>
 8007bd8:	0800a99b 	.word	0x0800a99b
 8007bdc:	0800a8f8 	.word	0x0800a8f8
 8007be0:	0800a91c 	.word	0x0800a91c

08007be4 <_localeconv_r>:
 8007be4:	4800      	ldr	r0, [pc, #0]	; (8007be8 <_localeconv_r+0x4>)
 8007be6:	4770      	bx	lr
 8007be8:	20000178 	.word	0x20000178

08007bec <malloc>:
 8007bec:	4b02      	ldr	r3, [pc, #8]	; (8007bf8 <malloc+0xc>)
 8007bee:	4601      	mov	r1, r0
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	f000 bc17 	b.w	8008424 <_malloc_r>
 8007bf6:	bf00      	nop
 8007bf8:	20000024 	.word	0x20000024

08007bfc <memcpy>:
 8007bfc:	440a      	add	r2, r1
 8007bfe:	4291      	cmp	r1, r2
 8007c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c04:	d100      	bne.n	8007c08 <memcpy+0xc>
 8007c06:	4770      	bx	lr
 8007c08:	b510      	push	{r4, lr}
 8007c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c12:	4291      	cmp	r1, r2
 8007c14:	d1f9      	bne.n	8007c0a <memcpy+0xe>
 8007c16:	bd10      	pop	{r4, pc}

08007c18 <_Balloc>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	460d      	mov	r5, r1
 8007c20:	b976      	cbnz	r6, 8007c40 <_Balloc+0x28>
 8007c22:	2010      	movs	r0, #16
 8007c24:	f7ff ffe2 	bl	8007bec <malloc>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	6260      	str	r0, [r4, #36]	; 0x24
 8007c2c:	b920      	cbnz	r0, 8007c38 <_Balloc+0x20>
 8007c2e:	4b18      	ldr	r3, [pc, #96]	; (8007c90 <_Balloc+0x78>)
 8007c30:	4818      	ldr	r0, [pc, #96]	; (8007c94 <_Balloc+0x7c>)
 8007c32:	2166      	movs	r1, #102	; 0x66
 8007c34:	f000 fdd6 	bl	80087e4 <__assert_func>
 8007c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c3c:	6006      	str	r6, [r0, #0]
 8007c3e:	60c6      	str	r6, [r0, #12]
 8007c40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c42:	68f3      	ldr	r3, [r6, #12]
 8007c44:	b183      	cbz	r3, 8007c68 <_Balloc+0x50>
 8007c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c4e:	b9b8      	cbnz	r0, 8007c80 <_Balloc+0x68>
 8007c50:	2101      	movs	r1, #1
 8007c52:	fa01 f605 	lsl.w	r6, r1, r5
 8007c56:	1d72      	adds	r2, r6, #5
 8007c58:	0092      	lsls	r2, r2, #2
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f000 fb60 	bl	8008320 <_calloc_r>
 8007c60:	b160      	cbz	r0, 8007c7c <_Balloc+0x64>
 8007c62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c66:	e00e      	b.n	8007c86 <_Balloc+0x6e>
 8007c68:	2221      	movs	r2, #33	; 0x21
 8007c6a:	2104      	movs	r1, #4
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f000 fb57 	bl	8008320 <_calloc_r>
 8007c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c74:	60f0      	str	r0, [r6, #12]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e4      	bne.n	8007c46 <_Balloc+0x2e>
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
 8007c80:	6802      	ldr	r2, [r0, #0]
 8007c82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c86:	2300      	movs	r3, #0
 8007c88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c8c:	e7f7      	b.n	8007c7e <_Balloc+0x66>
 8007c8e:	bf00      	nop
 8007c90:	0800a929 	.word	0x0800a929
 8007c94:	0800a9ac 	.word	0x0800a9ac

08007c98 <_Bfree>:
 8007c98:	b570      	push	{r4, r5, r6, lr}
 8007c9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	b976      	cbnz	r6, 8007cc0 <_Bfree+0x28>
 8007ca2:	2010      	movs	r0, #16
 8007ca4:	f7ff ffa2 	bl	8007bec <malloc>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	6268      	str	r0, [r5, #36]	; 0x24
 8007cac:	b920      	cbnz	r0, 8007cb8 <_Bfree+0x20>
 8007cae:	4b09      	ldr	r3, [pc, #36]	; (8007cd4 <_Bfree+0x3c>)
 8007cb0:	4809      	ldr	r0, [pc, #36]	; (8007cd8 <_Bfree+0x40>)
 8007cb2:	218a      	movs	r1, #138	; 0x8a
 8007cb4:	f000 fd96 	bl	80087e4 <__assert_func>
 8007cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cbc:	6006      	str	r6, [r0, #0]
 8007cbe:	60c6      	str	r6, [r0, #12]
 8007cc0:	b13c      	cbz	r4, 8007cd2 <_Bfree+0x3a>
 8007cc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007cc4:	6862      	ldr	r2, [r4, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ccc:	6021      	str	r1, [r4, #0]
 8007cce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	0800a929 	.word	0x0800a929
 8007cd8:	0800a9ac 	.word	0x0800a9ac

08007cdc <__multadd>:
 8007cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce0:	690d      	ldr	r5, [r1, #16]
 8007ce2:	4607      	mov	r7, r0
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	461e      	mov	r6, r3
 8007ce8:	f101 0c14 	add.w	ip, r1, #20
 8007cec:	2000      	movs	r0, #0
 8007cee:	f8dc 3000 	ldr.w	r3, [ip]
 8007cf2:	b299      	uxth	r1, r3
 8007cf4:	fb02 6101 	mla	r1, r2, r1, r6
 8007cf8:	0c1e      	lsrs	r6, r3, #16
 8007cfa:	0c0b      	lsrs	r3, r1, #16
 8007cfc:	fb02 3306 	mla	r3, r2, r6, r3
 8007d00:	b289      	uxth	r1, r1
 8007d02:	3001      	adds	r0, #1
 8007d04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d08:	4285      	cmp	r5, r0
 8007d0a:	f84c 1b04 	str.w	r1, [ip], #4
 8007d0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d12:	dcec      	bgt.n	8007cee <__multadd+0x12>
 8007d14:	b30e      	cbz	r6, 8007d5a <__multadd+0x7e>
 8007d16:	68a3      	ldr	r3, [r4, #8]
 8007d18:	42ab      	cmp	r3, r5
 8007d1a:	dc19      	bgt.n	8007d50 <__multadd+0x74>
 8007d1c:	6861      	ldr	r1, [r4, #4]
 8007d1e:	4638      	mov	r0, r7
 8007d20:	3101      	adds	r1, #1
 8007d22:	f7ff ff79 	bl	8007c18 <_Balloc>
 8007d26:	4680      	mov	r8, r0
 8007d28:	b928      	cbnz	r0, 8007d36 <__multadd+0x5a>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <__multadd+0x84>)
 8007d2e:	480d      	ldr	r0, [pc, #52]	; (8007d64 <__multadd+0x88>)
 8007d30:	21b5      	movs	r1, #181	; 0xb5
 8007d32:	f000 fd57 	bl	80087e4 <__assert_func>
 8007d36:	6922      	ldr	r2, [r4, #16]
 8007d38:	3202      	adds	r2, #2
 8007d3a:	f104 010c 	add.w	r1, r4, #12
 8007d3e:	0092      	lsls	r2, r2, #2
 8007d40:	300c      	adds	r0, #12
 8007d42:	f7ff ff5b 	bl	8007bfc <memcpy>
 8007d46:	4621      	mov	r1, r4
 8007d48:	4638      	mov	r0, r7
 8007d4a:	f7ff ffa5 	bl	8007c98 <_Bfree>
 8007d4e:	4644      	mov	r4, r8
 8007d50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d54:	3501      	adds	r5, #1
 8007d56:	615e      	str	r6, [r3, #20]
 8007d58:	6125      	str	r5, [r4, #16]
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d60:	0800a99b 	.word	0x0800a99b
 8007d64:	0800a9ac 	.word	0x0800a9ac

08007d68 <__hi0bits>:
 8007d68:	0c03      	lsrs	r3, r0, #16
 8007d6a:	041b      	lsls	r3, r3, #16
 8007d6c:	b9d3      	cbnz	r3, 8007da4 <__hi0bits+0x3c>
 8007d6e:	0400      	lsls	r0, r0, #16
 8007d70:	2310      	movs	r3, #16
 8007d72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d76:	bf04      	itt	eq
 8007d78:	0200      	lsleq	r0, r0, #8
 8007d7a:	3308      	addeq	r3, #8
 8007d7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d80:	bf04      	itt	eq
 8007d82:	0100      	lsleq	r0, r0, #4
 8007d84:	3304      	addeq	r3, #4
 8007d86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d8a:	bf04      	itt	eq
 8007d8c:	0080      	lsleq	r0, r0, #2
 8007d8e:	3302      	addeq	r3, #2
 8007d90:	2800      	cmp	r0, #0
 8007d92:	db05      	blt.n	8007da0 <__hi0bits+0x38>
 8007d94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d98:	f103 0301 	add.w	r3, r3, #1
 8007d9c:	bf08      	it	eq
 8007d9e:	2320      	moveq	r3, #32
 8007da0:	4618      	mov	r0, r3
 8007da2:	4770      	bx	lr
 8007da4:	2300      	movs	r3, #0
 8007da6:	e7e4      	b.n	8007d72 <__hi0bits+0xa>

08007da8 <__lo0bits>:
 8007da8:	6803      	ldr	r3, [r0, #0]
 8007daa:	f013 0207 	ands.w	r2, r3, #7
 8007dae:	4601      	mov	r1, r0
 8007db0:	d00b      	beq.n	8007dca <__lo0bits+0x22>
 8007db2:	07da      	lsls	r2, r3, #31
 8007db4:	d423      	bmi.n	8007dfe <__lo0bits+0x56>
 8007db6:	0798      	lsls	r0, r3, #30
 8007db8:	bf49      	itett	mi
 8007dba:	085b      	lsrmi	r3, r3, #1
 8007dbc:	089b      	lsrpl	r3, r3, #2
 8007dbe:	2001      	movmi	r0, #1
 8007dc0:	600b      	strmi	r3, [r1, #0]
 8007dc2:	bf5c      	itt	pl
 8007dc4:	600b      	strpl	r3, [r1, #0]
 8007dc6:	2002      	movpl	r0, #2
 8007dc8:	4770      	bx	lr
 8007dca:	b298      	uxth	r0, r3
 8007dcc:	b9a8      	cbnz	r0, 8007dfa <__lo0bits+0x52>
 8007dce:	0c1b      	lsrs	r3, r3, #16
 8007dd0:	2010      	movs	r0, #16
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	b90a      	cbnz	r2, 8007dda <__lo0bits+0x32>
 8007dd6:	3008      	adds	r0, #8
 8007dd8:	0a1b      	lsrs	r3, r3, #8
 8007dda:	071a      	lsls	r2, r3, #28
 8007ddc:	bf04      	itt	eq
 8007dde:	091b      	lsreq	r3, r3, #4
 8007de0:	3004      	addeq	r0, #4
 8007de2:	079a      	lsls	r2, r3, #30
 8007de4:	bf04      	itt	eq
 8007de6:	089b      	lsreq	r3, r3, #2
 8007de8:	3002      	addeq	r0, #2
 8007dea:	07da      	lsls	r2, r3, #31
 8007dec:	d403      	bmi.n	8007df6 <__lo0bits+0x4e>
 8007dee:	085b      	lsrs	r3, r3, #1
 8007df0:	f100 0001 	add.w	r0, r0, #1
 8007df4:	d005      	beq.n	8007e02 <__lo0bits+0x5a>
 8007df6:	600b      	str	r3, [r1, #0]
 8007df8:	4770      	bx	lr
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	e7e9      	b.n	8007dd2 <__lo0bits+0x2a>
 8007dfe:	2000      	movs	r0, #0
 8007e00:	4770      	bx	lr
 8007e02:	2020      	movs	r0, #32
 8007e04:	4770      	bx	lr
	...

08007e08 <__i2b>:
 8007e08:	b510      	push	{r4, lr}
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	f7ff ff03 	bl	8007c18 <_Balloc>
 8007e12:	4602      	mov	r2, r0
 8007e14:	b928      	cbnz	r0, 8007e22 <__i2b+0x1a>
 8007e16:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <__i2b+0x24>)
 8007e18:	4805      	ldr	r0, [pc, #20]	; (8007e30 <__i2b+0x28>)
 8007e1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e1e:	f000 fce1 	bl	80087e4 <__assert_func>
 8007e22:	2301      	movs	r3, #1
 8007e24:	6144      	str	r4, [r0, #20]
 8007e26:	6103      	str	r3, [r0, #16]
 8007e28:	bd10      	pop	{r4, pc}
 8007e2a:	bf00      	nop
 8007e2c:	0800a99b 	.word	0x0800a99b
 8007e30:	0800a9ac 	.word	0x0800a9ac

08007e34 <__multiply>:
 8007e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e38:	4691      	mov	r9, r2
 8007e3a:	690a      	ldr	r2, [r1, #16]
 8007e3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	bfb8      	it	lt
 8007e44:	460b      	movlt	r3, r1
 8007e46:	460c      	mov	r4, r1
 8007e48:	bfbc      	itt	lt
 8007e4a:	464c      	movlt	r4, r9
 8007e4c:	4699      	movlt	r9, r3
 8007e4e:	6927      	ldr	r7, [r4, #16]
 8007e50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e54:	68a3      	ldr	r3, [r4, #8]
 8007e56:	6861      	ldr	r1, [r4, #4]
 8007e58:	eb07 060a 	add.w	r6, r7, sl
 8007e5c:	42b3      	cmp	r3, r6
 8007e5e:	b085      	sub	sp, #20
 8007e60:	bfb8      	it	lt
 8007e62:	3101      	addlt	r1, #1
 8007e64:	f7ff fed8 	bl	8007c18 <_Balloc>
 8007e68:	b930      	cbnz	r0, 8007e78 <__multiply+0x44>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	4b44      	ldr	r3, [pc, #272]	; (8007f80 <__multiply+0x14c>)
 8007e6e:	4845      	ldr	r0, [pc, #276]	; (8007f84 <__multiply+0x150>)
 8007e70:	f240 115d 	movw	r1, #349	; 0x15d
 8007e74:	f000 fcb6 	bl	80087e4 <__assert_func>
 8007e78:	f100 0514 	add.w	r5, r0, #20
 8007e7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e80:	462b      	mov	r3, r5
 8007e82:	2200      	movs	r2, #0
 8007e84:	4543      	cmp	r3, r8
 8007e86:	d321      	bcc.n	8007ecc <__multiply+0x98>
 8007e88:	f104 0314 	add.w	r3, r4, #20
 8007e8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e90:	f109 0314 	add.w	r3, r9, #20
 8007e94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007e98:	9202      	str	r2, [sp, #8]
 8007e9a:	1b3a      	subs	r2, r7, r4
 8007e9c:	3a15      	subs	r2, #21
 8007e9e:	f022 0203 	bic.w	r2, r2, #3
 8007ea2:	3204      	adds	r2, #4
 8007ea4:	f104 0115 	add.w	r1, r4, #21
 8007ea8:	428f      	cmp	r7, r1
 8007eaa:	bf38      	it	cc
 8007eac:	2204      	movcc	r2, #4
 8007eae:	9201      	str	r2, [sp, #4]
 8007eb0:	9a02      	ldr	r2, [sp, #8]
 8007eb2:	9303      	str	r3, [sp, #12]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d80c      	bhi.n	8007ed2 <__multiply+0x9e>
 8007eb8:	2e00      	cmp	r6, #0
 8007eba:	dd03      	ble.n	8007ec4 <__multiply+0x90>
 8007ebc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d05a      	beq.n	8007f7a <__multiply+0x146>
 8007ec4:	6106      	str	r6, [r0, #16]
 8007ec6:	b005      	add	sp, #20
 8007ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ecc:	f843 2b04 	str.w	r2, [r3], #4
 8007ed0:	e7d8      	b.n	8007e84 <__multiply+0x50>
 8007ed2:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ed6:	f1ba 0f00 	cmp.w	sl, #0
 8007eda:	d024      	beq.n	8007f26 <__multiply+0xf2>
 8007edc:	f104 0e14 	add.w	lr, r4, #20
 8007ee0:	46a9      	mov	r9, r5
 8007ee2:	f04f 0c00 	mov.w	ip, #0
 8007ee6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007eea:	f8d9 1000 	ldr.w	r1, [r9]
 8007eee:	fa1f fb82 	uxth.w	fp, r2
 8007ef2:	b289      	uxth	r1, r1
 8007ef4:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ef8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007efc:	f8d9 2000 	ldr.w	r2, [r9]
 8007f00:	4461      	add	r1, ip
 8007f02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f06:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f0e:	b289      	uxth	r1, r1
 8007f10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f14:	4577      	cmp	r7, lr
 8007f16:	f849 1b04 	str.w	r1, [r9], #4
 8007f1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f1e:	d8e2      	bhi.n	8007ee6 <__multiply+0xb2>
 8007f20:	9a01      	ldr	r2, [sp, #4]
 8007f22:	f845 c002 	str.w	ip, [r5, r2]
 8007f26:	9a03      	ldr	r2, [sp, #12]
 8007f28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	f1b9 0f00 	cmp.w	r9, #0
 8007f32:	d020      	beq.n	8007f76 <__multiply+0x142>
 8007f34:	6829      	ldr	r1, [r5, #0]
 8007f36:	f104 0c14 	add.w	ip, r4, #20
 8007f3a:	46ae      	mov	lr, r5
 8007f3c:	f04f 0a00 	mov.w	sl, #0
 8007f40:	f8bc b000 	ldrh.w	fp, [ip]
 8007f44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f48:	fb09 220b 	mla	r2, r9, fp, r2
 8007f4c:	4492      	add	sl, r2
 8007f4e:	b289      	uxth	r1, r1
 8007f50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f54:	f84e 1b04 	str.w	r1, [lr], #4
 8007f58:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f5c:	f8be 1000 	ldrh.w	r1, [lr]
 8007f60:	0c12      	lsrs	r2, r2, #16
 8007f62:	fb09 1102 	mla	r1, r9, r2, r1
 8007f66:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f6a:	4567      	cmp	r7, ip
 8007f6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f70:	d8e6      	bhi.n	8007f40 <__multiply+0x10c>
 8007f72:	9a01      	ldr	r2, [sp, #4]
 8007f74:	50a9      	str	r1, [r5, r2]
 8007f76:	3504      	adds	r5, #4
 8007f78:	e79a      	b.n	8007eb0 <__multiply+0x7c>
 8007f7a:	3e01      	subs	r6, #1
 8007f7c:	e79c      	b.n	8007eb8 <__multiply+0x84>
 8007f7e:	bf00      	nop
 8007f80:	0800a99b 	.word	0x0800a99b
 8007f84:	0800a9ac 	.word	0x0800a9ac

08007f88 <__pow5mult>:
 8007f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f8c:	4615      	mov	r5, r2
 8007f8e:	f012 0203 	ands.w	r2, r2, #3
 8007f92:	4606      	mov	r6, r0
 8007f94:	460f      	mov	r7, r1
 8007f96:	d007      	beq.n	8007fa8 <__pow5mult+0x20>
 8007f98:	4c25      	ldr	r4, [pc, #148]	; (8008030 <__pow5mult+0xa8>)
 8007f9a:	3a01      	subs	r2, #1
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fa2:	f7ff fe9b 	bl	8007cdc <__multadd>
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	10ad      	asrs	r5, r5, #2
 8007faa:	d03d      	beq.n	8008028 <__pow5mult+0xa0>
 8007fac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007fae:	b97c      	cbnz	r4, 8007fd0 <__pow5mult+0x48>
 8007fb0:	2010      	movs	r0, #16
 8007fb2:	f7ff fe1b 	bl	8007bec <malloc>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	6270      	str	r0, [r6, #36]	; 0x24
 8007fba:	b928      	cbnz	r0, 8007fc8 <__pow5mult+0x40>
 8007fbc:	4b1d      	ldr	r3, [pc, #116]	; (8008034 <__pow5mult+0xac>)
 8007fbe:	481e      	ldr	r0, [pc, #120]	; (8008038 <__pow5mult+0xb0>)
 8007fc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007fc4:	f000 fc0e 	bl	80087e4 <__assert_func>
 8007fc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fcc:	6004      	str	r4, [r0, #0]
 8007fce:	60c4      	str	r4, [r0, #12]
 8007fd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fd8:	b94c      	cbnz	r4, 8007fee <__pow5mult+0x66>
 8007fda:	f240 2171 	movw	r1, #625	; 0x271
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f7ff ff12 	bl	8007e08 <__i2b>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fea:	4604      	mov	r4, r0
 8007fec:	6003      	str	r3, [r0, #0]
 8007fee:	f04f 0900 	mov.w	r9, #0
 8007ff2:	07eb      	lsls	r3, r5, #31
 8007ff4:	d50a      	bpl.n	800800c <__pow5mult+0x84>
 8007ff6:	4639      	mov	r1, r7
 8007ff8:	4622      	mov	r2, r4
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f7ff ff1a 	bl	8007e34 <__multiply>
 8008000:	4639      	mov	r1, r7
 8008002:	4680      	mov	r8, r0
 8008004:	4630      	mov	r0, r6
 8008006:	f7ff fe47 	bl	8007c98 <_Bfree>
 800800a:	4647      	mov	r7, r8
 800800c:	106d      	asrs	r5, r5, #1
 800800e:	d00b      	beq.n	8008028 <__pow5mult+0xa0>
 8008010:	6820      	ldr	r0, [r4, #0]
 8008012:	b938      	cbnz	r0, 8008024 <__pow5mult+0x9c>
 8008014:	4622      	mov	r2, r4
 8008016:	4621      	mov	r1, r4
 8008018:	4630      	mov	r0, r6
 800801a:	f7ff ff0b 	bl	8007e34 <__multiply>
 800801e:	6020      	str	r0, [r4, #0]
 8008020:	f8c0 9000 	str.w	r9, [r0]
 8008024:	4604      	mov	r4, r0
 8008026:	e7e4      	b.n	8007ff2 <__pow5mult+0x6a>
 8008028:	4638      	mov	r0, r7
 800802a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800802e:	bf00      	nop
 8008030:	0800aaf8 	.word	0x0800aaf8
 8008034:	0800a929 	.word	0x0800a929
 8008038:	0800a9ac 	.word	0x0800a9ac

0800803c <__lshift>:
 800803c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008040:	460c      	mov	r4, r1
 8008042:	6849      	ldr	r1, [r1, #4]
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800804a:	68a3      	ldr	r3, [r4, #8]
 800804c:	4607      	mov	r7, r0
 800804e:	4691      	mov	r9, r2
 8008050:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008054:	f108 0601 	add.w	r6, r8, #1
 8008058:	42b3      	cmp	r3, r6
 800805a:	db0b      	blt.n	8008074 <__lshift+0x38>
 800805c:	4638      	mov	r0, r7
 800805e:	f7ff fddb 	bl	8007c18 <_Balloc>
 8008062:	4605      	mov	r5, r0
 8008064:	b948      	cbnz	r0, 800807a <__lshift+0x3e>
 8008066:	4602      	mov	r2, r0
 8008068:	4b2a      	ldr	r3, [pc, #168]	; (8008114 <__lshift+0xd8>)
 800806a:	482b      	ldr	r0, [pc, #172]	; (8008118 <__lshift+0xdc>)
 800806c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008070:	f000 fbb8 	bl	80087e4 <__assert_func>
 8008074:	3101      	adds	r1, #1
 8008076:	005b      	lsls	r3, r3, #1
 8008078:	e7ee      	b.n	8008058 <__lshift+0x1c>
 800807a:	2300      	movs	r3, #0
 800807c:	f100 0114 	add.w	r1, r0, #20
 8008080:	f100 0210 	add.w	r2, r0, #16
 8008084:	4618      	mov	r0, r3
 8008086:	4553      	cmp	r3, sl
 8008088:	db37      	blt.n	80080fa <__lshift+0xbe>
 800808a:	6920      	ldr	r0, [r4, #16]
 800808c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008090:	f104 0314 	add.w	r3, r4, #20
 8008094:	f019 091f 	ands.w	r9, r9, #31
 8008098:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800809c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80080a0:	d02f      	beq.n	8008102 <__lshift+0xc6>
 80080a2:	f1c9 0e20 	rsb	lr, r9, #32
 80080a6:	468a      	mov	sl, r1
 80080a8:	f04f 0c00 	mov.w	ip, #0
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	fa02 f209 	lsl.w	r2, r2, r9
 80080b2:	ea42 020c 	orr.w	r2, r2, ip
 80080b6:	f84a 2b04 	str.w	r2, [sl], #4
 80080ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80080be:	4298      	cmp	r0, r3
 80080c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80080c4:	d8f2      	bhi.n	80080ac <__lshift+0x70>
 80080c6:	1b03      	subs	r3, r0, r4
 80080c8:	3b15      	subs	r3, #21
 80080ca:	f023 0303 	bic.w	r3, r3, #3
 80080ce:	3304      	adds	r3, #4
 80080d0:	f104 0215 	add.w	r2, r4, #21
 80080d4:	4290      	cmp	r0, r2
 80080d6:	bf38      	it	cc
 80080d8:	2304      	movcc	r3, #4
 80080da:	f841 c003 	str.w	ip, [r1, r3]
 80080de:	f1bc 0f00 	cmp.w	ip, #0
 80080e2:	d001      	beq.n	80080e8 <__lshift+0xac>
 80080e4:	f108 0602 	add.w	r6, r8, #2
 80080e8:	3e01      	subs	r6, #1
 80080ea:	4638      	mov	r0, r7
 80080ec:	612e      	str	r6, [r5, #16]
 80080ee:	4621      	mov	r1, r4
 80080f0:	f7ff fdd2 	bl	8007c98 <_Bfree>
 80080f4:	4628      	mov	r0, r5
 80080f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80080fe:	3301      	adds	r3, #1
 8008100:	e7c1      	b.n	8008086 <__lshift+0x4a>
 8008102:	3904      	subs	r1, #4
 8008104:	f853 2b04 	ldr.w	r2, [r3], #4
 8008108:	f841 2f04 	str.w	r2, [r1, #4]!
 800810c:	4298      	cmp	r0, r3
 800810e:	d8f9      	bhi.n	8008104 <__lshift+0xc8>
 8008110:	e7ea      	b.n	80080e8 <__lshift+0xac>
 8008112:	bf00      	nop
 8008114:	0800a99b 	.word	0x0800a99b
 8008118:	0800a9ac 	.word	0x0800a9ac

0800811c <__mcmp>:
 800811c:	b530      	push	{r4, r5, lr}
 800811e:	6902      	ldr	r2, [r0, #16]
 8008120:	690c      	ldr	r4, [r1, #16]
 8008122:	1b12      	subs	r2, r2, r4
 8008124:	d10e      	bne.n	8008144 <__mcmp+0x28>
 8008126:	f100 0314 	add.w	r3, r0, #20
 800812a:	3114      	adds	r1, #20
 800812c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008130:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008134:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008138:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800813c:	42a5      	cmp	r5, r4
 800813e:	d003      	beq.n	8008148 <__mcmp+0x2c>
 8008140:	d305      	bcc.n	800814e <__mcmp+0x32>
 8008142:	2201      	movs	r2, #1
 8008144:	4610      	mov	r0, r2
 8008146:	bd30      	pop	{r4, r5, pc}
 8008148:	4283      	cmp	r3, r0
 800814a:	d3f3      	bcc.n	8008134 <__mcmp+0x18>
 800814c:	e7fa      	b.n	8008144 <__mcmp+0x28>
 800814e:	f04f 32ff 	mov.w	r2, #4294967295
 8008152:	e7f7      	b.n	8008144 <__mcmp+0x28>

08008154 <__mdiff>:
 8008154:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008158:	460c      	mov	r4, r1
 800815a:	4606      	mov	r6, r0
 800815c:	4611      	mov	r1, r2
 800815e:	4620      	mov	r0, r4
 8008160:	4690      	mov	r8, r2
 8008162:	f7ff ffdb 	bl	800811c <__mcmp>
 8008166:	1e05      	subs	r5, r0, #0
 8008168:	d110      	bne.n	800818c <__mdiff+0x38>
 800816a:	4629      	mov	r1, r5
 800816c:	4630      	mov	r0, r6
 800816e:	f7ff fd53 	bl	8007c18 <_Balloc>
 8008172:	b930      	cbnz	r0, 8008182 <__mdiff+0x2e>
 8008174:	4b3a      	ldr	r3, [pc, #232]	; (8008260 <__mdiff+0x10c>)
 8008176:	4602      	mov	r2, r0
 8008178:	f240 2132 	movw	r1, #562	; 0x232
 800817c:	4839      	ldr	r0, [pc, #228]	; (8008264 <__mdiff+0x110>)
 800817e:	f000 fb31 	bl	80087e4 <__assert_func>
 8008182:	2301      	movs	r3, #1
 8008184:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818c:	bfa4      	itt	ge
 800818e:	4643      	movge	r3, r8
 8008190:	46a0      	movge	r8, r4
 8008192:	4630      	mov	r0, r6
 8008194:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008198:	bfa6      	itte	ge
 800819a:	461c      	movge	r4, r3
 800819c:	2500      	movge	r5, #0
 800819e:	2501      	movlt	r5, #1
 80081a0:	f7ff fd3a 	bl	8007c18 <_Balloc>
 80081a4:	b920      	cbnz	r0, 80081b0 <__mdiff+0x5c>
 80081a6:	4b2e      	ldr	r3, [pc, #184]	; (8008260 <__mdiff+0x10c>)
 80081a8:	4602      	mov	r2, r0
 80081aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80081ae:	e7e5      	b.n	800817c <__mdiff+0x28>
 80081b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80081b4:	6926      	ldr	r6, [r4, #16]
 80081b6:	60c5      	str	r5, [r0, #12]
 80081b8:	f104 0914 	add.w	r9, r4, #20
 80081bc:	f108 0514 	add.w	r5, r8, #20
 80081c0:	f100 0e14 	add.w	lr, r0, #20
 80081c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80081c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081cc:	f108 0210 	add.w	r2, r8, #16
 80081d0:	46f2      	mov	sl, lr
 80081d2:	2100      	movs	r1, #0
 80081d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80081d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80081dc:	fa1f f883 	uxth.w	r8, r3
 80081e0:	fa11 f18b 	uxtah	r1, r1, fp
 80081e4:	0c1b      	lsrs	r3, r3, #16
 80081e6:	eba1 0808 	sub.w	r8, r1, r8
 80081ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80081f2:	fa1f f888 	uxth.w	r8, r8
 80081f6:	1419      	asrs	r1, r3, #16
 80081f8:	454e      	cmp	r6, r9
 80081fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80081fe:	f84a 3b04 	str.w	r3, [sl], #4
 8008202:	d8e7      	bhi.n	80081d4 <__mdiff+0x80>
 8008204:	1b33      	subs	r3, r6, r4
 8008206:	3b15      	subs	r3, #21
 8008208:	f023 0303 	bic.w	r3, r3, #3
 800820c:	3304      	adds	r3, #4
 800820e:	3415      	adds	r4, #21
 8008210:	42a6      	cmp	r6, r4
 8008212:	bf38      	it	cc
 8008214:	2304      	movcc	r3, #4
 8008216:	441d      	add	r5, r3
 8008218:	4473      	add	r3, lr
 800821a:	469e      	mov	lr, r3
 800821c:	462e      	mov	r6, r5
 800821e:	4566      	cmp	r6, ip
 8008220:	d30e      	bcc.n	8008240 <__mdiff+0xec>
 8008222:	f10c 0203 	add.w	r2, ip, #3
 8008226:	1b52      	subs	r2, r2, r5
 8008228:	f022 0203 	bic.w	r2, r2, #3
 800822c:	3d03      	subs	r5, #3
 800822e:	45ac      	cmp	ip, r5
 8008230:	bf38      	it	cc
 8008232:	2200      	movcc	r2, #0
 8008234:	441a      	add	r2, r3
 8008236:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800823a:	b17b      	cbz	r3, 800825c <__mdiff+0x108>
 800823c:	6107      	str	r7, [r0, #16]
 800823e:	e7a3      	b.n	8008188 <__mdiff+0x34>
 8008240:	f856 8b04 	ldr.w	r8, [r6], #4
 8008244:	fa11 f288 	uxtah	r2, r1, r8
 8008248:	1414      	asrs	r4, r2, #16
 800824a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800824e:	b292      	uxth	r2, r2
 8008250:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008254:	f84e 2b04 	str.w	r2, [lr], #4
 8008258:	1421      	asrs	r1, r4, #16
 800825a:	e7e0      	b.n	800821e <__mdiff+0xca>
 800825c:	3f01      	subs	r7, #1
 800825e:	e7ea      	b.n	8008236 <__mdiff+0xe2>
 8008260:	0800a99b 	.word	0x0800a99b
 8008264:	0800a9ac 	.word	0x0800a9ac

08008268 <__d2b>:
 8008268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800826c:	4689      	mov	r9, r1
 800826e:	2101      	movs	r1, #1
 8008270:	ec57 6b10 	vmov	r6, r7, d0
 8008274:	4690      	mov	r8, r2
 8008276:	f7ff fccf 	bl	8007c18 <_Balloc>
 800827a:	4604      	mov	r4, r0
 800827c:	b930      	cbnz	r0, 800828c <__d2b+0x24>
 800827e:	4602      	mov	r2, r0
 8008280:	4b25      	ldr	r3, [pc, #148]	; (8008318 <__d2b+0xb0>)
 8008282:	4826      	ldr	r0, [pc, #152]	; (800831c <__d2b+0xb4>)
 8008284:	f240 310a 	movw	r1, #778	; 0x30a
 8008288:	f000 faac 	bl	80087e4 <__assert_func>
 800828c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008290:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008294:	bb35      	cbnz	r5, 80082e4 <__d2b+0x7c>
 8008296:	2e00      	cmp	r6, #0
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	d028      	beq.n	80082ee <__d2b+0x86>
 800829c:	4668      	mov	r0, sp
 800829e:	9600      	str	r6, [sp, #0]
 80082a0:	f7ff fd82 	bl	8007da8 <__lo0bits>
 80082a4:	9900      	ldr	r1, [sp, #0]
 80082a6:	b300      	cbz	r0, 80082ea <__d2b+0x82>
 80082a8:	9a01      	ldr	r2, [sp, #4]
 80082aa:	f1c0 0320 	rsb	r3, r0, #32
 80082ae:	fa02 f303 	lsl.w	r3, r2, r3
 80082b2:	430b      	orrs	r3, r1
 80082b4:	40c2      	lsrs	r2, r0
 80082b6:	6163      	str	r3, [r4, #20]
 80082b8:	9201      	str	r2, [sp, #4]
 80082ba:	9b01      	ldr	r3, [sp, #4]
 80082bc:	61a3      	str	r3, [r4, #24]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bf14      	ite	ne
 80082c2:	2202      	movne	r2, #2
 80082c4:	2201      	moveq	r2, #1
 80082c6:	6122      	str	r2, [r4, #16]
 80082c8:	b1d5      	cbz	r5, 8008300 <__d2b+0x98>
 80082ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80082ce:	4405      	add	r5, r0
 80082d0:	f8c9 5000 	str.w	r5, [r9]
 80082d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082d8:	f8c8 0000 	str.w	r0, [r8]
 80082dc:	4620      	mov	r0, r4
 80082de:	b003      	add	sp, #12
 80082e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082e8:	e7d5      	b.n	8008296 <__d2b+0x2e>
 80082ea:	6161      	str	r1, [r4, #20]
 80082ec:	e7e5      	b.n	80082ba <__d2b+0x52>
 80082ee:	a801      	add	r0, sp, #4
 80082f0:	f7ff fd5a 	bl	8007da8 <__lo0bits>
 80082f4:	9b01      	ldr	r3, [sp, #4]
 80082f6:	6163      	str	r3, [r4, #20]
 80082f8:	2201      	movs	r2, #1
 80082fa:	6122      	str	r2, [r4, #16]
 80082fc:	3020      	adds	r0, #32
 80082fe:	e7e3      	b.n	80082c8 <__d2b+0x60>
 8008300:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008304:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008308:	f8c9 0000 	str.w	r0, [r9]
 800830c:	6918      	ldr	r0, [r3, #16]
 800830e:	f7ff fd2b 	bl	8007d68 <__hi0bits>
 8008312:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008316:	e7df      	b.n	80082d8 <__d2b+0x70>
 8008318:	0800a99b 	.word	0x0800a99b
 800831c:	0800a9ac 	.word	0x0800a9ac

08008320 <_calloc_r>:
 8008320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008322:	fba1 2402 	umull	r2, r4, r1, r2
 8008326:	b94c      	cbnz	r4, 800833c <_calloc_r+0x1c>
 8008328:	4611      	mov	r1, r2
 800832a:	9201      	str	r2, [sp, #4]
 800832c:	f000 f87a 	bl	8008424 <_malloc_r>
 8008330:	9a01      	ldr	r2, [sp, #4]
 8008332:	4605      	mov	r5, r0
 8008334:	b930      	cbnz	r0, 8008344 <_calloc_r+0x24>
 8008336:	4628      	mov	r0, r5
 8008338:	b003      	add	sp, #12
 800833a:	bd30      	pop	{r4, r5, pc}
 800833c:	220c      	movs	r2, #12
 800833e:	6002      	str	r2, [r0, #0]
 8008340:	2500      	movs	r5, #0
 8008342:	e7f8      	b.n	8008336 <_calloc_r+0x16>
 8008344:	4621      	mov	r1, r4
 8008346:	f7fe f92d 	bl	80065a4 <memset>
 800834a:	e7f4      	b.n	8008336 <_calloc_r+0x16>

0800834c <_free_r>:
 800834c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800834e:	2900      	cmp	r1, #0
 8008350:	d044      	beq.n	80083dc <_free_r+0x90>
 8008352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008356:	9001      	str	r0, [sp, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	f1a1 0404 	sub.w	r4, r1, #4
 800835e:	bfb8      	it	lt
 8008360:	18e4      	addlt	r4, r4, r3
 8008362:	f000 fa9b 	bl	800889c <__malloc_lock>
 8008366:	4a1e      	ldr	r2, [pc, #120]	; (80083e0 <_free_r+0x94>)
 8008368:	9801      	ldr	r0, [sp, #4]
 800836a:	6813      	ldr	r3, [r2, #0]
 800836c:	b933      	cbnz	r3, 800837c <_free_r+0x30>
 800836e:	6063      	str	r3, [r4, #4]
 8008370:	6014      	str	r4, [r2, #0]
 8008372:	b003      	add	sp, #12
 8008374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008378:	f000 ba96 	b.w	80088a8 <__malloc_unlock>
 800837c:	42a3      	cmp	r3, r4
 800837e:	d908      	bls.n	8008392 <_free_r+0x46>
 8008380:	6825      	ldr	r5, [r4, #0]
 8008382:	1961      	adds	r1, r4, r5
 8008384:	428b      	cmp	r3, r1
 8008386:	bf01      	itttt	eq
 8008388:	6819      	ldreq	r1, [r3, #0]
 800838a:	685b      	ldreq	r3, [r3, #4]
 800838c:	1949      	addeq	r1, r1, r5
 800838e:	6021      	streq	r1, [r4, #0]
 8008390:	e7ed      	b.n	800836e <_free_r+0x22>
 8008392:	461a      	mov	r2, r3
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	b10b      	cbz	r3, 800839c <_free_r+0x50>
 8008398:	42a3      	cmp	r3, r4
 800839a:	d9fa      	bls.n	8008392 <_free_r+0x46>
 800839c:	6811      	ldr	r1, [r2, #0]
 800839e:	1855      	adds	r5, r2, r1
 80083a0:	42a5      	cmp	r5, r4
 80083a2:	d10b      	bne.n	80083bc <_free_r+0x70>
 80083a4:	6824      	ldr	r4, [r4, #0]
 80083a6:	4421      	add	r1, r4
 80083a8:	1854      	adds	r4, r2, r1
 80083aa:	42a3      	cmp	r3, r4
 80083ac:	6011      	str	r1, [r2, #0]
 80083ae:	d1e0      	bne.n	8008372 <_free_r+0x26>
 80083b0:	681c      	ldr	r4, [r3, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	6053      	str	r3, [r2, #4]
 80083b6:	4421      	add	r1, r4
 80083b8:	6011      	str	r1, [r2, #0]
 80083ba:	e7da      	b.n	8008372 <_free_r+0x26>
 80083bc:	d902      	bls.n	80083c4 <_free_r+0x78>
 80083be:	230c      	movs	r3, #12
 80083c0:	6003      	str	r3, [r0, #0]
 80083c2:	e7d6      	b.n	8008372 <_free_r+0x26>
 80083c4:	6825      	ldr	r5, [r4, #0]
 80083c6:	1961      	adds	r1, r4, r5
 80083c8:	428b      	cmp	r3, r1
 80083ca:	bf04      	itt	eq
 80083cc:	6819      	ldreq	r1, [r3, #0]
 80083ce:	685b      	ldreq	r3, [r3, #4]
 80083d0:	6063      	str	r3, [r4, #4]
 80083d2:	bf04      	itt	eq
 80083d4:	1949      	addeq	r1, r1, r5
 80083d6:	6021      	streq	r1, [r4, #0]
 80083d8:	6054      	str	r4, [r2, #4]
 80083da:	e7ca      	b.n	8008372 <_free_r+0x26>
 80083dc:	b003      	add	sp, #12
 80083de:	bd30      	pop	{r4, r5, pc}
 80083e0:	200003a4 	.word	0x200003a4

080083e4 <sbrk_aligned>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	4e0e      	ldr	r6, [pc, #56]	; (8008420 <sbrk_aligned+0x3c>)
 80083e8:	460c      	mov	r4, r1
 80083ea:	6831      	ldr	r1, [r6, #0]
 80083ec:	4605      	mov	r5, r0
 80083ee:	b911      	cbnz	r1, 80083f6 <sbrk_aligned+0x12>
 80083f0:	f000 f9e8 	bl	80087c4 <_sbrk_r>
 80083f4:	6030      	str	r0, [r6, #0]
 80083f6:	4621      	mov	r1, r4
 80083f8:	4628      	mov	r0, r5
 80083fa:	f000 f9e3 	bl	80087c4 <_sbrk_r>
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	d00a      	beq.n	8008418 <sbrk_aligned+0x34>
 8008402:	1cc4      	adds	r4, r0, #3
 8008404:	f024 0403 	bic.w	r4, r4, #3
 8008408:	42a0      	cmp	r0, r4
 800840a:	d007      	beq.n	800841c <sbrk_aligned+0x38>
 800840c:	1a21      	subs	r1, r4, r0
 800840e:	4628      	mov	r0, r5
 8008410:	f000 f9d8 	bl	80087c4 <_sbrk_r>
 8008414:	3001      	adds	r0, #1
 8008416:	d101      	bne.n	800841c <sbrk_aligned+0x38>
 8008418:	f04f 34ff 	mov.w	r4, #4294967295
 800841c:	4620      	mov	r0, r4
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	200003a8 	.word	0x200003a8

08008424 <_malloc_r>:
 8008424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008428:	1ccd      	adds	r5, r1, #3
 800842a:	f025 0503 	bic.w	r5, r5, #3
 800842e:	3508      	adds	r5, #8
 8008430:	2d0c      	cmp	r5, #12
 8008432:	bf38      	it	cc
 8008434:	250c      	movcc	r5, #12
 8008436:	2d00      	cmp	r5, #0
 8008438:	4607      	mov	r7, r0
 800843a:	db01      	blt.n	8008440 <_malloc_r+0x1c>
 800843c:	42a9      	cmp	r1, r5
 800843e:	d905      	bls.n	800844c <_malloc_r+0x28>
 8008440:	230c      	movs	r3, #12
 8008442:	603b      	str	r3, [r7, #0]
 8008444:	2600      	movs	r6, #0
 8008446:	4630      	mov	r0, r6
 8008448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800844c:	4e2e      	ldr	r6, [pc, #184]	; (8008508 <_malloc_r+0xe4>)
 800844e:	f000 fa25 	bl	800889c <__malloc_lock>
 8008452:	6833      	ldr	r3, [r6, #0]
 8008454:	461c      	mov	r4, r3
 8008456:	bb34      	cbnz	r4, 80084a6 <_malloc_r+0x82>
 8008458:	4629      	mov	r1, r5
 800845a:	4638      	mov	r0, r7
 800845c:	f7ff ffc2 	bl	80083e4 <sbrk_aligned>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	4604      	mov	r4, r0
 8008464:	d14d      	bne.n	8008502 <_malloc_r+0xde>
 8008466:	6834      	ldr	r4, [r6, #0]
 8008468:	4626      	mov	r6, r4
 800846a:	2e00      	cmp	r6, #0
 800846c:	d140      	bne.n	80084f0 <_malloc_r+0xcc>
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	4631      	mov	r1, r6
 8008472:	4638      	mov	r0, r7
 8008474:	eb04 0803 	add.w	r8, r4, r3
 8008478:	f000 f9a4 	bl	80087c4 <_sbrk_r>
 800847c:	4580      	cmp	r8, r0
 800847e:	d13a      	bne.n	80084f6 <_malloc_r+0xd2>
 8008480:	6821      	ldr	r1, [r4, #0]
 8008482:	3503      	adds	r5, #3
 8008484:	1a6d      	subs	r5, r5, r1
 8008486:	f025 0503 	bic.w	r5, r5, #3
 800848a:	3508      	adds	r5, #8
 800848c:	2d0c      	cmp	r5, #12
 800848e:	bf38      	it	cc
 8008490:	250c      	movcc	r5, #12
 8008492:	4629      	mov	r1, r5
 8008494:	4638      	mov	r0, r7
 8008496:	f7ff ffa5 	bl	80083e4 <sbrk_aligned>
 800849a:	3001      	adds	r0, #1
 800849c:	d02b      	beq.n	80084f6 <_malloc_r+0xd2>
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	442b      	add	r3, r5
 80084a2:	6023      	str	r3, [r4, #0]
 80084a4:	e00e      	b.n	80084c4 <_malloc_r+0xa0>
 80084a6:	6822      	ldr	r2, [r4, #0]
 80084a8:	1b52      	subs	r2, r2, r5
 80084aa:	d41e      	bmi.n	80084ea <_malloc_r+0xc6>
 80084ac:	2a0b      	cmp	r2, #11
 80084ae:	d916      	bls.n	80084de <_malloc_r+0xba>
 80084b0:	1961      	adds	r1, r4, r5
 80084b2:	42a3      	cmp	r3, r4
 80084b4:	6025      	str	r5, [r4, #0]
 80084b6:	bf18      	it	ne
 80084b8:	6059      	strne	r1, [r3, #4]
 80084ba:	6863      	ldr	r3, [r4, #4]
 80084bc:	bf08      	it	eq
 80084be:	6031      	streq	r1, [r6, #0]
 80084c0:	5162      	str	r2, [r4, r5]
 80084c2:	604b      	str	r3, [r1, #4]
 80084c4:	4638      	mov	r0, r7
 80084c6:	f104 060b 	add.w	r6, r4, #11
 80084ca:	f000 f9ed 	bl	80088a8 <__malloc_unlock>
 80084ce:	f026 0607 	bic.w	r6, r6, #7
 80084d2:	1d23      	adds	r3, r4, #4
 80084d4:	1af2      	subs	r2, r6, r3
 80084d6:	d0b6      	beq.n	8008446 <_malloc_r+0x22>
 80084d8:	1b9b      	subs	r3, r3, r6
 80084da:	50a3      	str	r3, [r4, r2]
 80084dc:	e7b3      	b.n	8008446 <_malloc_r+0x22>
 80084de:	6862      	ldr	r2, [r4, #4]
 80084e0:	42a3      	cmp	r3, r4
 80084e2:	bf0c      	ite	eq
 80084e4:	6032      	streq	r2, [r6, #0]
 80084e6:	605a      	strne	r2, [r3, #4]
 80084e8:	e7ec      	b.n	80084c4 <_malloc_r+0xa0>
 80084ea:	4623      	mov	r3, r4
 80084ec:	6864      	ldr	r4, [r4, #4]
 80084ee:	e7b2      	b.n	8008456 <_malloc_r+0x32>
 80084f0:	4634      	mov	r4, r6
 80084f2:	6876      	ldr	r6, [r6, #4]
 80084f4:	e7b9      	b.n	800846a <_malloc_r+0x46>
 80084f6:	230c      	movs	r3, #12
 80084f8:	603b      	str	r3, [r7, #0]
 80084fa:	4638      	mov	r0, r7
 80084fc:	f000 f9d4 	bl	80088a8 <__malloc_unlock>
 8008500:	e7a1      	b.n	8008446 <_malloc_r+0x22>
 8008502:	6025      	str	r5, [r4, #0]
 8008504:	e7de      	b.n	80084c4 <_malloc_r+0xa0>
 8008506:	bf00      	nop
 8008508:	200003a4 	.word	0x200003a4

0800850c <__ssputs_r>:
 800850c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008510:	688e      	ldr	r6, [r1, #8]
 8008512:	429e      	cmp	r6, r3
 8008514:	4682      	mov	sl, r0
 8008516:	460c      	mov	r4, r1
 8008518:	4690      	mov	r8, r2
 800851a:	461f      	mov	r7, r3
 800851c:	d838      	bhi.n	8008590 <__ssputs_r+0x84>
 800851e:	898a      	ldrh	r2, [r1, #12]
 8008520:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008524:	d032      	beq.n	800858c <__ssputs_r+0x80>
 8008526:	6825      	ldr	r5, [r4, #0]
 8008528:	6909      	ldr	r1, [r1, #16]
 800852a:	eba5 0901 	sub.w	r9, r5, r1
 800852e:	6965      	ldr	r5, [r4, #20]
 8008530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008534:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008538:	3301      	adds	r3, #1
 800853a:	444b      	add	r3, r9
 800853c:	106d      	asrs	r5, r5, #1
 800853e:	429d      	cmp	r5, r3
 8008540:	bf38      	it	cc
 8008542:	461d      	movcc	r5, r3
 8008544:	0553      	lsls	r3, r2, #21
 8008546:	d531      	bpl.n	80085ac <__ssputs_r+0xa0>
 8008548:	4629      	mov	r1, r5
 800854a:	f7ff ff6b 	bl	8008424 <_malloc_r>
 800854e:	4606      	mov	r6, r0
 8008550:	b950      	cbnz	r0, 8008568 <__ssputs_r+0x5c>
 8008552:	230c      	movs	r3, #12
 8008554:	f8ca 3000 	str.w	r3, [sl]
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800855e:	81a3      	strh	r3, [r4, #12]
 8008560:	f04f 30ff 	mov.w	r0, #4294967295
 8008564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008568:	6921      	ldr	r1, [r4, #16]
 800856a:	464a      	mov	r2, r9
 800856c:	f7ff fb46 	bl	8007bfc <memcpy>
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800857a:	81a3      	strh	r3, [r4, #12]
 800857c:	6126      	str	r6, [r4, #16]
 800857e:	6165      	str	r5, [r4, #20]
 8008580:	444e      	add	r6, r9
 8008582:	eba5 0509 	sub.w	r5, r5, r9
 8008586:	6026      	str	r6, [r4, #0]
 8008588:	60a5      	str	r5, [r4, #8]
 800858a:	463e      	mov	r6, r7
 800858c:	42be      	cmp	r6, r7
 800858e:	d900      	bls.n	8008592 <__ssputs_r+0x86>
 8008590:	463e      	mov	r6, r7
 8008592:	6820      	ldr	r0, [r4, #0]
 8008594:	4632      	mov	r2, r6
 8008596:	4641      	mov	r1, r8
 8008598:	f000 f966 	bl	8008868 <memmove>
 800859c:	68a3      	ldr	r3, [r4, #8]
 800859e:	1b9b      	subs	r3, r3, r6
 80085a0:	60a3      	str	r3, [r4, #8]
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	4433      	add	r3, r6
 80085a6:	6023      	str	r3, [r4, #0]
 80085a8:	2000      	movs	r0, #0
 80085aa:	e7db      	b.n	8008564 <__ssputs_r+0x58>
 80085ac:	462a      	mov	r2, r5
 80085ae:	f000 f981 	bl	80088b4 <_realloc_r>
 80085b2:	4606      	mov	r6, r0
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d1e1      	bne.n	800857c <__ssputs_r+0x70>
 80085b8:	6921      	ldr	r1, [r4, #16]
 80085ba:	4650      	mov	r0, sl
 80085bc:	f7ff fec6 	bl	800834c <_free_r>
 80085c0:	e7c7      	b.n	8008552 <__ssputs_r+0x46>
	...

080085c4 <_svfiprintf_r>:
 80085c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c8:	4698      	mov	r8, r3
 80085ca:	898b      	ldrh	r3, [r1, #12]
 80085cc:	061b      	lsls	r3, r3, #24
 80085ce:	b09d      	sub	sp, #116	; 0x74
 80085d0:	4607      	mov	r7, r0
 80085d2:	460d      	mov	r5, r1
 80085d4:	4614      	mov	r4, r2
 80085d6:	d50e      	bpl.n	80085f6 <_svfiprintf_r+0x32>
 80085d8:	690b      	ldr	r3, [r1, #16]
 80085da:	b963      	cbnz	r3, 80085f6 <_svfiprintf_r+0x32>
 80085dc:	2140      	movs	r1, #64	; 0x40
 80085de:	f7ff ff21 	bl	8008424 <_malloc_r>
 80085e2:	6028      	str	r0, [r5, #0]
 80085e4:	6128      	str	r0, [r5, #16]
 80085e6:	b920      	cbnz	r0, 80085f2 <_svfiprintf_r+0x2e>
 80085e8:	230c      	movs	r3, #12
 80085ea:	603b      	str	r3, [r7, #0]
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295
 80085f0:	e0d1      	b.n	8008796 <_svfiprintf_r+0x1d2>
 80085f2:	2340      	movs	r3, #64	; 0x40
 80085f4:	616b      	str	r3, [r5, #20]
 80085f6:	2300      	movs	r3, #0
 80085f8:	9309      	str	r3, [sp, #36]	; 0x24
 80085fa:	2320      	movs	r3, #32
 80085fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008600:	f8cd 800c 	str.w	r8, [sp, #12]
 8008604:	2330      	movs	r3, #48	; 0x30
 8008606:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80087b0 <_svfiprintf_r+0x1ec>
 800860a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800860e:	f04f 0901 	mov.w	r9, #1
 8008612:	4623      	mov	r3, r4
 8008614:	469a      	mov	sl, r3
 8008616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800861a:	b10a      	cbz	r2, 8008620 <_svfiprintf_r+0x5c>
 800861c:	2a25      	cmp	r2, #37	; 0x25
 800861e:	d1f9      	bne.n	8008614 <_svfiprintf_r+0x50>
 8008620:	ebba 0b04 	subs.w	fp, sl, r4
 8008624:	d00b      	beq.n	800863e <_svfiprintf_r+0x7a>
 8008626:	465b      	mov	r3, fp
 8008628:	4622      	mov	r2, r4
 800862a:	4629      	mov	r1, r5
 800862c:	4638      	mov	r0, r7
 800862e:	f7ff ff6d 	bl	800850c <__ssputs_r>
 8008632:	3001      	adds	r0, #1
 8008634:	f000 80aa 	beq.w	800878c <_svfiprintf_r+0x1c8>
 8008638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800863a:	445a      	add	r2, fp
 800863c:	9209      	str	r2, [sp, #36]	; 0x24
 800863e:	f89a 3000 	ldrb.w	r3, [sl]
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 80a2 	beq.w	800878c <_svfiprintf_r+0x1c8>
 8008648:	2300      	movs	r3, #0
 800864a:	f04f 32ff 	mov.w	r2, #4294967295
 800864e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008652:	f10a 0a01 	add.w	sl, sl, #1
 8008656:	9304      	str	r3, [sp, #16]
 8008658:	9307      	str	r3, [sp, #28]
 800865a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800865e:	931a      	str	r3, [sp, #104]	; 0x68
 8008660:	4654      	mov	r4, sl
 8008662:	2205      	movs	r2, #5
 8008664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008668:	4851      	ldr	r0, [pc, #324]	; (80087b0 <_svfiprintf_r+0x1ec>)
 800866a:	f7f7 fdd9 	bl	8000220 <memchr>
 800866e:	9a04      	ldr	r2, [sp, #16]
 8008670:	b9d8      	cbnz	r0, 80086aa <_svfiprintf_r+0xe6>
 8008672:	06d0      	lsls	r0, r2, #27
 8008674:	bf44      	itt	mi
 8008676:	2320      	movmi	r3, #32
 8008678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800867c:	0711      	lsls	r1, r2, #28
 800867e:	bf44      	itt	mi
 8008680:	232b      	movmi	r3, #43	; 0x2b
 8008682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008686:	f89a 3000 	ldrb.w	r3, [sl]
 800868a:	2b2a      	cmp	r3, #42	; 0x2a
 800868c:	d015      	beq.n	80086ba <_svfiprintf_r+0xf6>
 800868e:	9a07      	ldr	r2, [sp, #28]
 8008690:	4654      	mov	r4, sl
 8008692:	2000      	movs	r0, #0
 8008694:	f04f 0c0a 	mov.w	ip, #10
 8008698:	4621      	mov	r1, r4
 800869a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800869e:	3b30      	subs	r3, #48	; 0x30
 80086a0:	2b09      	cmp	r3, #9
 80086a2:	d94e      	bls.n	8008742 <_svfiprintf_r+0x17e>
 80086a4:	b1b0      	cbz	r0, 80086d4 <_svfiprintf_r+0x110>
 80086a6:	9207      	str	r2, [sp, #28]
 80086a8:	e014      	b.n	80086d4 <_svfiprintf_r+0x110>
 80086aa:	eba0 0308 	sub.w	r3, r0, r8
 80086ae:	fa09 f303 	lsl.w	r3, r9, r3
 80086b2:	4313      	orrs	r3, r2
 80086b4:	9304      	str	r3, [sp, #16]
 80086b6:	46a2      	mov	sl, r4
 80086b8:	e7d2      	b.n	8008660 <_svfiprintf_r+0x9c>
 80086ba:	9b03      	ldr	r3, [sp, #12]
 80086bc:	1d19      	adds	r1, r3, #4
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	9103      	str	r1, [sp, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	bfbb      	ittet	lt
 80086c6:	425b      	neglt	r3, r3
 80086c8:	f042 0202 	orrlt.w	r2, r2, #2
 80086cc:	9307      	strge	r3, [sp, #28]
 80086ce:	9307      	strlt	r3, [sp, #28]
 80086d0:	bfb8      	it	lt
 80086d2:	9204      	strlt	r2, [sp, #16]
 80086d4:	7823      	ldrb	r3, [r4, #0]
 80086d6:	2b2e      	cmp	r3, #46	; 0x2e
 80086d8:	d10c      	bne.n	80086f4 <_svfiprintf_r+0x130>
 80086da:	7863      	ldrb	r3, [r4, #1]
 80086dc:	2b2a      	cmp	r3, #42	; 0x2a
 80086de:	d135      	bne.n	800874c <_svfiprintf_r+0x188>
 80086e0:	9b03      	ldr	r3, [sp, #12]
 80086e2:	1d1a      	adds	r2, r3, #4
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	9203      	str	r2, [sp, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	bfb8      	it	lt
 80086ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80086f0:	3402      	adds	r4, #2
 80086f2:	9305      	str	r3, [sp, #20]
 80086f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80087c0 <_svfiprintf_r+0x1fc>
 80086f8:	7821      	ldrb	r1, [r4, #0]
 80086fa:	2203      	movs	r2, #3
 80086fc:	4650      	mov	r0, sl
 80086fe:	f7f7 fd8f 	bl	8000220 <memchr>
 8008702:	b140      	cbz	r0, 8008716 <_svfiprintf_r+0x152>
 8008704:	2340      	movs	r3, #64	; 0x40
 8008706:	eba0 000a 	sub.w	r0, r0, sl
 800870a:	fa03 f000 	lsl.w	r0, r3, r0
 800870e:	9b04      	ldr	r3, [sp, #16]
 8008710:	4303      	orrs	r3, r0
 8008712:	3401      	adds	r4, #1
 8008714:	9304      	str	r3, [sp, #16]
 8008716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800871a:	4826      	ldr	r0, [pc, #152]	; (80087b4 <_svfiprintf_r+0x1f0>)
 800871c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008720:	2206      	movs	r2, #6
 8008722:	f7f7 fd7d 	bl	8000220 <memchr>
 8008726:	2800      	cmp	r0, #0
 8008728:	d038      	beq.n	800879c <_svfiprintf_r+0x1d8>
 800872a:	4b23      	ldr	r3, [pc, #140]	; (80087b8 <_svfiprintf_r+0x1f4>)
 800872c:	bb1b      	cbnz	r3, 8008776 <_svfiprintf_r+0x1b2>
 800872e:	9b03      	ldr	r3, [sp, #12]
 8008730:	3307      	adds	r3, #7
 8008732:	f023 0307 	bic.w	r3, r3, #7
 8008736:	3308      	adds	r3, #8
 8008738:	9303      	str	r3, [sp, #12]
 800873a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800873c:	4433      	add	r3, r6
 800873e:	9309      	str	r3, [sp, #36]	; 0x24
 8008740:	e767      	b.n	8008612 <_svfiprintf_r+0x4e>
 8008742:	fb0c 3202 	mla	r2, ip, r2, r3
 8008746:	460c      	mov	r4, r1
 8008748:	2001      	movs	r0, #1
 800874a:	e7a5      	b.n	8008698 <_svfiprintf_r+0xd4>
 800874c:	2300      	movs	r3, #0
 800874e:	3401      	adds	r4, #1
 8008750:	9305      	str	r3, [sp, #20]
 8008752:	4619      	mov	r1, r3
 8008754:	f04f 0c0a 	mov.w	ip, #10
 8008758:	4620      	mov	r0, r4
 800875a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800875e:	3a30      	subs	r2, #48	; 0x30
 8008760:	2a09      	cmp	r2, #9
 8008762:	d903      	bls.n	800876c <_svfiprintf_r+0x1a8>
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0c5      	beq.n	80086f4 <_svfiprintf_r+0x130>
 8008768:	9105      	str	r1, [sp, #20]
 800876a:	e7c3      	b.n	80086f4 <_svfiprintf_r+0x130>
 800876c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008770:	4604      	mov	r4, r0
 8008772:	2301      	movs	r3, #1
 8008774:	e7f0      	b.n	8008758 <_svfiprintf_r+0x194>
 8008776:	ab03      	add	r3, sp, #12
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	462a      	mov	r2, r5
 800877c:	4b0f      	ldr	r3, [pc, #60]	; (80087bc <_svfiprintf_r+0x1f8>)
 800877e:	a904      	add	r1, sp, #16
 8008780:	4638      	mov	r0, r7
 8008782:	f7fd ffb7 	bl	80066f4 <_printf_float>
 8008786:	1c42      	adds	r2, r0, #1
 8008788:	4606      	mov	r6, r0
 800878a:	d1d6      	bne.n	800873a <_svfiprintf_r+0x176>
 800878c:	89ab      	ldrh	r3, [r5, #12]
 800878e:	065b      	lsls	r3, r3, #25
 8008790:	f53f af2c 	bmi.w	80085ec <_svfiprintf_r+0x28>
 8008794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008796:	b01d      	add	sp, #116	; 0x74
 8008798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879c:	ab03      	add	r3, sp, #12
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	462a      	mov	r2, r5
 80087a2:	4b06      	ldr	r3, [pc, #24]	; (80087bc <_svfiprintf_r+0x1f8>)
 80087a4:	a904      	add	r1, sp, #16
 80087a6:	4638      	mov	r0, r7
 80087a8:	f7fe fa48 	bl	8006c3c <_printf_i>
 80087ac:	e7eb      	b.n	8008786 <_svfiprintf_r+0x1c2>
 80087ae:	bf00      	nop
 80087b0:	0800ab04 	.word	0x0800ab04
 80087b4:	0800ab0e 	.word	0x0800ab0e
 80087b8:	080066f5 	.word	0x080066f5
 80087bc:	0800850d 	.word	0x0800850d
 80087c0:	0800ab0a 	.word	0x0800ab0a

080087c4 <_sbrk_r>:
 80087c4:	b538      	push	{r3, r4, r5, lr}
 80087c6:	4d06      	ldr	r5, [pc, #24]	; (80087e0 <_sbrk_r+0x1c>)
 80087c8:	2300      	movs	r3, #0
 80087ca:	4604      	mov	r4, r0
 80087cc:	4608      	mov	r0, r1
 80087ce:	602b      	str	r3, [r5, #0]
 80087d0:	f7fa f886 	bl	80028e0 <_sbrk>
 80087d4:	1c43      	adds	r3, r0, #1
 80087d6:	d102      	bne.n	80087de <_sbrk_r+0x1a>
 80087d8:	682b      	ldr	r3, [r5, #0]
 80087da:	b103      	cbz	r3, 80087de <_sbrk_r+0x1a>
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	bd38      	pop	{r3, r4, r5, pc}
 80087e0:	200003ac 	.word	0x200003ac

080087e4 <__assert_func>:
 80087e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087e6:	4614      	mov	r4, r2
 80087e8:	461a      	mov	r2, r3
 80087ea:	4b09      	ldr	r3, [pc, #36]	; (8008810 <__assert_func+0x2c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4605      	mov	r5, r0
 80087f0:	68d8      	ldr	r0, [r3, #12]
 80087f2:	b14c      	cbz	r4, 8008808 <__assert_func+0x24>
 80087f4:	4b07      	ldr	r3, [pc, #28]	; (8008814 <__assert_func+0x30>)
 80087f6:	9100      	str	r1, [sp, #0]
 80087f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087fc:	4906      	ldr	r1, [pc, #24]	; (8008818 <__assert_func+0x34>)
 80087fe:	462b      	mov	r3, r5
 8008800:	f000 f80e 	bl	8008820 <fiprintf>
 8008804:	f000 faac 	bl	8008d60 <abort>
 8008808:	4b04      	ldr	r3, [pc, #16]	; (800881c <__assert_func+0x38>)
 800880a:	461c      	mov	r4, r3
 800880c:	e7f3      	b.n	80087f6 <__assert_func+0x12>
 800880e:	bf00      	nop
 8008810:	20000024 	.word	0x20000024
 8008814:	0800ab15 	.word	0x0800ab15
 8008818:	0800ab22 	.word	0x0800ab22
 800881c:	0800ab50 	.word	0x0800ab50

08008820 <fiprintf>:
 8008820:	b40e      	push	{r1, r2, r3}
 8008822:	b503      	push	{r0, r1, lr}
 8008824:	4601      	mov	r1, r0
 8008826:	ab03      	add	r3, sp, #12
 8008828:	4805      	ldr	r0, [pc, #20]	; (8008840 <fiprintf+0x20>)
 800882a:	f853 2b04 	ldr.w	r2, [r3], #4
 800882e:	6800      	ldr	r0, [r0, #0]
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	f000 f897 	bl	8008964 <_vfiprintf_r>
 8008836:	b002      	add	sp, #8
 8008838:	f85d eb04 	ldr.w	lr, [sp], #4
 800883c:	b003      	add	sp, #12
 800883e:	4770      	bx	lr
 8008840:	20000024 	.word	0x20000024

08008844 <__ascii_mbtowc>:
 8008844:	b082      	sub	sp, #8
 8008846:	b901      	cbnz	r1, 800884a <__ascii_mbtowc+0x6>
 8008848:	a901      	add	r1, sp, #4
 800884a:	b142      	cbz	r2, 800885e <__ascii_mbtowc+0x1a>
 800884c:	b14b      	cbz	r3, 8008862 <__ascii_mbtowc+0x1e>
 800884e:	7813      	ldrb	r3, [r2, #0]
 8008850:	600b      	str	r3, [r1, #0]
 8008852:	7812      	ldrb	r2, [r2, #0]
 8008854:	1e10      	subs	r0, r2, #0
 8008856:	bf18      	it	ne
 8008858:	2001      	movne	r0, #1
 800885a:	b002      	add	sp, #8
 800885c:	4770      	bx	lr
 800885e:	4610      	mov	r0, r2
 8008860:	e7fb      	b.n	800885a <__ascii_mbtowc+0x16>
 8008862:	f06f 0001 	mvn.w	r0, #1
 8008866:	e7f8      	b.n	800885a <__ascii_mbtowc+0x16>

08008868 <memmove>:
 8008868:	4288      	cmp	r0, r1
 800886a:	b510      	push	{r4, lr}
 800886c:	eb01 0402 	add.w	r4, r1, r2
 8008870:	d902      	bls.n	8008878 <memmove+0x10>
 8008872:	4284      	cmp	r4, r0
 8008874:	4623      	mov	r3, r4
 8008876:	d807      	bhi.n	8008888 <memmove+0x20>
 8008878:	1e43      	subs	r3, r0, #1
 800887a:	42a1      	cmp	r1, r4
 800887c:	d008      	beq.n	8008890 <memmove+0x28>
 800887e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008882:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008886:	e7f8      	b.n	800887a <memmove+0x12>
 8008888:	4402      	add	r2, r0
 800888a:	4601      	mov	r1, r0
 800888c:	428a      	cmp	r2, r1
 800888e:	d100      	bne.n	8008892 <memmove+0x2a>
 8008890:	bd10      	pop	{r4, pc}
 8008892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800889a:	e7f7      	b.n	800888c <memmove+0x24>

0800889c <__malloc_lock>:
 800889c:	4801      	ldr	r0, [pc, #4]	; (80088a4 <__malloc_lock+0x8>)
 800889e:	f000 bc1f 	b.w	80090e0 <__retarget_lock_acquire_recursive>
 80088a2:	bf00      	nop
 80088a4:	200003b0 	.word	0x200003b0

080088a8 <__malloc_unlock>:
 80088a8:	4801      	ldr	r0, [pc, #4]	; (80088b0 <__malloc_unlock+0x8>)
 80088aa:	f000 bc1a 	b.w	80090e2 <__retarget_lock_release_recursive>
 80088ae:	bf00      	nop
 80088b0:	200003b0 	.word	0x200003b0

080088b4 <_realloc_r>:
 80088b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b8:	4680      	mov	r8, r0
 80088ba:	4614      	mov	r4, r2
 80088bc:	460e      	mov	r6, r1
 80088be:	b921      	cbnz	r1, 80088ca <_realloc_r+0x16>
 80088c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088c4:	4611      	mov	r1, r2
 80088c6:	f7ff bdad 	b.w	8008424 <_malloc_r>
 80088ca:	b92a      	cbnz	r2, 80088d8 <_realloc_r+0x24>
 80088cc:	f7ff fd3e 	bl	800834c <_free_r>
 80088d0:	4625      	mov	r5, r4
 80088d2:	4628      	mov	r0, r5
 80088d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d8:	f000 fc6a 	bl	80091b0 <_malloc_usable_size_r>
 80088dc:	4284      	cmp	r4, r0
 80088de:	4607      	mov	r7, r0
 80088e0:	d802      	bhi.n	80088e8 <_realloc_r+0x34>
 80088e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088e6:	d812      	bhi.n	800890e <_realloc_r+0x5a>
 80088e8:	4621      	mov	r1, r4
 80088ea:	4640      	mov	r0, r8
 80088ec:	f7ff fd9a 	bl	8008424 <_malloc_r>
 80088f0:	4605      	mov	r5, r0
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d0ed      	beq.n	80088d2 <_realloc_r+0x1e>
 80088f6:	42bc      	cmp	r4, r7
 80088f8:	4622      	mov	r2, r4
 80088fa:	4631      	mov	r1, r6
 80088fc:	bf28      	it	cs
 80088fe:	463a      	movcs	r2, r7
 8008900:	f7ff f97c 	bl	8007bfc <memcpy>
 8008904:	4631      	mov	r1, r6
 8008906:	4640      	mov	r0, r8
 8008908:	f7ff fd20 	bl	800834c <_free_r>
 800890c:	e7e1      	b.n	80088d2 <_realloc_r+0x1e>
 800890e:	4635      	mov	r5, r6
 8008910:	e7df      	b.n	80088d2 <_realloc_r+0x1e>

08008912 <__sfputc_r>:
 8008912:	6893      	ldr	r3, [r2, #8]
 8008914:	3b01      	subs	r3, #1
 8008916:	2b00      	cmp	r3, #0
 8008918:	b410      	push	{r4}
 800891a:	6093      	str	r3, [r2, #8]
 800891c:	da08      	bge.n	8008930 <__sfputc_r+0x1e>
 800891e:	6994      	ldr	r4, [r2, #24]
 8008920:	42a3      	cmp	r3, r4
 8008922:	db01      	blt.n	8008928 <__sfputc_r+0x16>
 8008924:	290a      	cmp	r1, #10
 8008926:	d103      	bne.n	8008930 <__sfputc_r+0x1e>
 8008928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800892c:	f000 b94a 	b.w	8008bc4 <__swbuf_r>
 8008930:	6813      	ldr	r3, [r2, #0]
 8008932:	1c58      	adds	r0, r3, #1
 8008934:	6010      	str	r0, [r2, #0]
 8008936:	7019      	strb	r1, [r3, #0]
 8008938:	4608      	mov	r0, r1
 800893a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800893e:	4770      	bx	lr

08008940 <__sfputs_r>:
 8008940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008942:	4606      	mov	r6, r0
 8008944:	460f      	mov	r7, r1
 8008946:	4614      	mov	r4, r2
 8008948:	18d5      	adds	r5, r2, r3
 800894a:	42ac      	cmp	r4, r5
 800894c:	d101      	bne.n	8008952 <__sfputs_r+0x12>
 800894e:	2000      	movs	r0, #0
 8008950:	e007      	b.n	8008962 <__sfputs_r+0x22>
 8008952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008956:	463a      	mov	r2, r7
 8008958:	4630      	mov	r0, r6
 800895a:	f7ff ffda 	bl	8008912 <__sfputc_r>
 800895e:	1c43      	adds	r3, r0, #1
 8008960:	d1f3      	bne.n	800894a <__sfputs_r+0xa>
 8008962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008964 <_vfiprintf_r>:
 8008964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008968:	460d      	mov	r5, r1
 800896a:	b09d      	sub	sp, #116	; 0x74
 800896c:	4614      	mov	r4, r2
 800896e:	4698      	mov	r8, r3
 8008970:	4606      	mov	r6, r0
 8008972:	b118      	cbz	r0, 800897c <_vfiprintf_r+0x18>
 8008974:	6983      	ldr	r3, [r0, #24]
 8008976:	b90b      	cbnz	r3, 800897c <_vfiprintf_r+0x18>
 8008978:	f000 fb14 	bl	8008fa4 <__sinit>
 800897c:	4b89      	ldr	r3, [pc, #548]	; (8008ba4 <_vfiprintf_r+0x240>)
 800897e:	429d      	cmp	r5, r3
 8008980:	d11b      	bne.n	80089ba <_vfiprintf_r+0x56>
 8008982:	6875      	ldr	r5, [r6, #4]
 8008984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008986:	07d9      	lsls	r1, r3, #31
 8008988:	d405      	bmi.n	8008996 <_vfiprintf_r+0x32>
 800898a:	89ab      	ldrh	r3, [r5, #12]
 800898c:	059a      	lsls	r2, r3, #22
 800898e:	d402      	bmi.n	8008996 <_vfiprintf_r+0x32>
 8008990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008992:	f000 fba5 	bl	80090e0 <__retarget_lock_acquire_recursive>
 8008996:	89ab      	ldrh	r3, [r5, #12]
 8008998:	071b      	lsls	r3, r3, #28
 800899a:	d501      	bpl.n	80089a0 <_vfiprintf_r+0x3c>
 800899c:	692b      	ldr	r3, [r5, #16]
 800899e:	b9eb      	cbnz	r3, 80089dc <_vfiprintf_r+0x78>
 80089a0:	4629      	mov	r1, r5
 80089a2:	4630      	mov	r0, r6
 80089a4:	f000 f96e 	bl	8008c84 <__swsetup_r>
 80089a8:	b1c0      	cbz	r0, 80089dc <_vfiprintf_r+0x78>
 80089aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089ac:	07dc      	lsls	r4, r3, #31
 80089ae:	d50e      	bpl.n	80089ce <_vfiprintf_r+0x6a>
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
 80089b4:	b01d      	add	sp, #116	; 0x74
 80089b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ba:	4b7b      	ldr	r3, [pc, #492]	; (8008ba8 <_vfiprintf_r+0x244>)
 80089bc:	429d      	cmp	r5, r3
 80089be:	d101      	bne.n	80089c4 <_vfiprintf_r+0x60>
 80089c0:	68b5      	ldr	r5, [r6, #8]
 80089c2:	e7df      	b.n	8008984 <_vfiprintf_r+0x20>
 80089c4:	4b79      	ldr	r3, [pc, #484]	; (8008bac <_vfiprintf_r+0x248>)
 80089c6:	429d      	cmp	r5, r3
 80089c8:	bf08      	it	eq
 80089ca:	68f5      	ldreq	r5, [r6, #12]
 80089cc:	e7da      	b.n	8008984 <_vfiprintf_r+0x20>
 80089ce:	89ab      	ldrh	r3, [r5, #12]
 80089d0:	0598      	lsls	r0, r3, #22
 80089d2:	d4ed      	bmi.n	80089b0 <_vfiprintf_r+0x4c>
 80089d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089d6:	f000 fb84 	bl	80090e2 <__retarget_lock_release_recursive>
 80089da:	e7e9      	b.n	80089b0 <_vfiprintf_r+0x4c>
 80089dc:	2300      	movs	r3, #0
 80089de:	9309      	str	r3, [sp, #36]	; 0x24
 80089e0:	2320      	movs	r3, #32
 80089e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80089ea:	2330      	movs	r3, #48	; 0x30
 80089ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008bb0 <_vfiprintf_r+0x24c>
 80089f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089f4:	f04f 0901 	mov.w	r9, #1
 80089f8:	4623      	mov	r3, r4
 80089fa:	469a      	mov	sl, r3
 80089fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a00:	b10a      	cbz	r2, 8008a06 <_vfiprintf_r+0xa2>
 8008a02:	2a25      	cmp	r2, #37	; 0x25
 8008a04:	d1f9      	bne.n	80089fa <_vfiprintf_r+0x96>
 8008a06:	ebba 0b04 	subs.w	fp, sl, r4
 8008a0a:	d00b      	beq.n	8008a24 <_vfiprintf_r+0xc0>
 8008a0c:	465b      	mov	r3, fp
 8008a0e:	4622      	mov	r2, r4
 8008a10:	4629      	mov	r1, r5
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7ff ff94 	bl	8008940 <__sfputs_r>
 8008a18:	3001      	adds	r0, #1
 8008a1a:	f000 80aa 	beq.w	8008b72 <_vfiprintf_r+0x20e>
 8008a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a20:	445a      	add	r2, fp
 8008a22:	9209      	str	r2, [sp, #36]	; 0x24
 8008a24:	f89a 3000 	ldrb.w	r3, [sl]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 80a2 	beq.w	8008b72 <_vfiprintf_r+0x20e>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f04f 32ff 	mov.w	r2, #4294967295
 8008a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a38:	f10a 0a01 	add.w	sl, sl, #1
 8008a3c:	9304      	str	r3, [sp, #16]
 8008a3e:	9307      	str	r3, [sp, #28]
 8008a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a44:	931a      	str	r3, [sp, #104]	; 0x68
 8008a46:	4654      	mov	r4, sl
 8008a48:	2205      	movs	r2, #5
 8008a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4e:	4858      	ldr	r0, [pc, #352]	; (8008bb0 <_vfiprintf_r+0x24c>)
 8008a50:	f7f7 fbe6 	bl	8000220 <memchr>
 8008a54:	9a04      	ldr	r2, [sp, #16]
 8008a56:	b9d8      	cbnz	r0, 8008a90 <_vfiprintf_r+0x12c>
 8008a58:	06d1      	lsls	r1, r2, #27
 8008a5a:	bf44      	itt	mi
 8008a5c:	2320      	movmi	r3, #32
 8008a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a62:	0713      	lsls	r3, r2, #28
 8008a64:	bf44      	itt	mi
 8008a66:	232b      	movmi	r3, #43	; 0x2b
 8008a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a70:	2b2a      	cmp	r3, #42	; 0x2a
 8008a72:	d015      	beq.n	8008aa0 <_vfiprintf_r+0x13c>
 8008a74:	9a07      	ldr	r2, [sp, #28]
 8008a76:	4654      	mov	r4, sl
 8008a78:	2000      	movs	r0, #0
 8008a7a:	f04f 0c0a 	mov.w	ip, #10
 8008a7e:	4621      	mov	r1, r4
 8008a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a84:	3b30      	subs	r3, #48	; 0x30
 8008a86:	2b09      	cmp	r3, #9
 8008a88:	d94e      	bls.n	8008b28 <_vfiprintf_r+0x1c4>
 8008a8a:	b1b0      	cbz	r0, 8008aba <_vfiprintf_r+0x156>
 8008a8c:	9207      	str	r2, [sp, #28]
 8008a8e:	e014      	b.n	8008aba <_vfiprintf_r+0x156>
 8008a90:	eba0 0308 	sub.w	r3, r0, r8
 8008a94:	fa09 f303 	lsl.w	r3, r9, r3
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	9304      	str	r3, [sp, #16]
 8008a9c:	46a2      	mov	sl, r4
 8008a9e:	e7d2      	b.n	8008a46 <_vfiprintf_r+0xe2>
 8008aa0:	9b03      	ldr	r3, [sp, #12]
 8008aa2:	1d19      	adds	r1, r3, #4
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	9103      	str	r1, [sp, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	bfbb      	ittet	lt
 8008aac:	425b      	neglt	r3, r3
 8008aae:	f042 0202 	orrlt.w	r2, r2, #2
 8008ab2:	9307      	strge	r3, [sp, #28]
 8008ab4:	9307      	strlt	r3, [sp, #28]
 8008ab6:	bfb8      	it	lt
 8008ab8:	9204      	strlt	r2, [sp, #16]
 8008aba:	7823      	ldrb	r3, [r4, #0]
 8008abc:	2b2e      	cmp	r3, #46	; 0x2e
 8008abe:	d10c      	bne.n	8008ada <_vfiprintf_r+0x176>
 8008ac0:	7863      	ldrb	r3, [r4, #1]
 8008ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ac4:	d135      	bne.n	8008b32 <_vfiprintf_r+0x1ce>
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	1d1a      	adds	r2, r3, #4
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	9203      	str	r2, [sp, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	bfb8      	it	lt
 8008ad2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ad6:	3402      	adds	r4, #2
 8008ad8:	9305      	str	r3, [sp, #20]
 8008ada:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008bc0 <_vfiprintf_r+0x25c>
 8008ade:	7821      	ldrb	r1, [r4, #0]
 8008ae0:	2203      	movs	r2, #3
 8008ae2:	4650      	mov	r0, sl
 8008ae4:	f7f7 fb9c 	bl	8000220 <memchr>
 8008ae8:	b140      	cbz	r0, 8008afc <_vfiprintf_r+0x198>
 8008aea:	2340      	movs	r3, #64	; 0x40
 8008aec:	eba0 000a 	sub.w	r0, r0, sl
 8008af0:	fa03 f000 	lsl.w	r0, r3, r0
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	4303      	orrs	r3, r0
 8008af8:	3401      	adds	r4, #1
 8008afa:	9304      	str	r3, [sp, #16]
 8008afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b00:	482c      	ldr	r0, [pc, #176]	; (8008bb4 <_vfiprintf_r+0x250>)
 8008b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b06:	2206      	movs	r2, #6
 8008b08:	f7f7 fb8a 	bl	8000220 <memchr>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d03f      	beq.n	8008b90 <_vfiprintf_r+0x22c>
 8008b10:	4b29      	ldr	r3, [pc, #164]	; (8008bb8 <_vfiprintf_r+0x254>)
 8008b12:	bb1b      	cbnz	r3, 8008b5c <_vfiprintf_r+0x1f8>
 8008b14:	9b03      	ldr	r3, [sp, #12]
 8008b16:	3307      	adds	r3, #7
 8008b18:	f023 0307 	bic.w	r3, r3, #7
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	9303      	str	r3, [sp, #12]
 8008b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b22:	443b      	add	r3, r7
 8008b24:	9309      	str	r3, [sp, #36]	; 0x24
 8008b26:	e767      	b.n	80089f8 <_vfiprintf_r+0x94>
 8008b28:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	2001      	movs	r0, #1
 8008b30:	e7a5      	b.n	8008a7e <_vfiprintf_r+0x11a>
 8008b32:	2300      	movs	r3, #0
 8008b34:	3401      	adds	r4, #1
 8008b36:	9305      	str	r3, [sp, #20]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	f04f 0c0a 	mov.w	ip, #10
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b44:	3a30      	subs	r2, #48	; 0x30
 8008b46:	2a09      	cmp	r2, #9
 8008b48:	d903      	bls.n	8008b52 <_vfiprintf_r+0x1ee>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0c5      	beq.n	8008ada <_vfiprintf_r+0x176>
 8008b4e:	9105      	str	r1, [sp, #20]
 8008b50:	e7c3      	b.n	8008ada <_vfiprintf_r+0x176>
 8008b52:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b56:	4604      	mov	r4, r0
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e7f0      	b.n	8008b3e <_vfiprintf_r+0x1da>
 8008b5c:	ab03      	add	r3, sp, #12
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	462a      	mov	r2, r5
 8008b62:	4b16      	ldr	r3, [pc, #88]	; (8008bbc <_vfiprintf_r+0x258>)
 8008b64:	a904      	add	r1, sp, #16
 8008b66:	4630      	mov	r0, r6
 8008b68:	f7fd fdc4 	bl	80066f4 <_printf_float>
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	1c78      	adds	r0, r7, #1
 8008b70:	d1d6      	bne.n	8008b20 <_vfiprintf_r+0x1bc>
 8008b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b74:	07d9      	lsls	r1, r3, #31
 8008b76:	d405      	bmi.n	8008b84 <_vfiprintf_r+0x220>
 8008b78:	89ab      	ldrh	r3, [r5, #12]
 8008b7a:	059a      	lsls	r2, r3, #22
 8008b7c:	d402      	bmi.n	8008b84 <_vfiprintf_r+0x220>
 8008b7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b80:	f000 faaf 	bl	80090e2 <__retarget_lock_release_recursive>
 8008b84:	89ab      	ldrh	r3, [r5, #12]
 8008b86:	065b      	lsls	r3, r3, #25
 8008b88:	f53f af12 	bmi.w	80089b0 <_vfiprintf_r+0x4c>
 8008b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b8e:	e711      	b.n	80089b4 <_vfiprintf_r+0x50>
 8008b90:	ab03      	add	r3, sp, #12
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	462a      	mov	r2, r5
 8008b96:	4b09      	ldr	r3, [pc, #36]	; (8008bbc <_vfiprintf_r+0x258>)
 8008b98:	a904      	add	r1, sp, #16
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7fe f84e 	bl	8006c3c <_printf_i>
 8008ba0:	e7e4      	b.n	8008b6c <_vfiprintf_r+0x208>
 8008ba2:	bf00      	nop
 8008ba4:	0800ac7c 	.word	0x0800ac7c
 8008ba8:	0800ac9c 	.word	0x0800ac9c
 8008bac:	0800ac5c 	.word	0x0800ac5c
 8008bb0:	0800ab04 	.word	0x0800ab04
 8008bb4:	0800ab0e 	.word	0x0800ab0e
 8008bb8:	080066f5 	.word	0x080066f5
 8008bbc:	08008941 	.word	0x08008941
 8008bc0:	0800ab0a 	.word	0x0800ab0a

08008bc4 <__swbuf_r>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	460e      	mov	r6, r1
 8008bc8:	4614      	mov	r4, r2
 8008bca:	4605      	mov	r5, r0
 8008bcc:	b118      	cbz	r0, 8008bd6 <__swbuf_r+0x12>
 8008bce:	6983      	ldr	r3, [r0, #24]
 8008bd0:	b90b      	cbnz	r3, 8008bd6 <__swbuf_r+0x12>
 8008bd2:	f000 f9e7 	bl	8008fa4 <__sinit>
 8008bd6:	4b21      	ldr	r3, [pc, #132]	; (8008c5c <__swbuf_r+0x98>)
 8008bd8:	429c      	cmp	r4, r3
 8008bda:	d12b      	bne.n	8008c34 <__swbuf_r+0x70>
 8008bdc:	686c      	ldr	r4, [r5, #4]
 8008bde:	69a3      	ldr	r3, [r4, #24]
 8008be0:	60a3      	str	r3, [r4, #8]
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	071a      	lsls	r2, r3, #28
 8008be6:	d52f      	bpl.n	8008c48 <__swbuf_r+0x84>
 8008be8:	6923      	ldr	r3, [r4, #16]
 8008bea:	b36b      	cbz	r3, 8008c48 <__swbuf_r+0x84>
 8008bec:	6923      	ldr	r3, [r4, #16]
 8008bee:	6820      	ldr	r0, [r4, #0]
 8008bf0:	1ac0      	subs	r0, r0, r3
 8008bf2:	6963      	ldr	r3, [r4, #20]
 8008bf4:	b2f6      	uxtb	r6, r6
 8008bf6:	4283      	cmp	r3, r0
 8008bf8:	4637      	mov	r7, r6
 8008bfa:	dc04      	bgt.n	8008c06 <__swbuf_r+0x42>
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	4628      	mov	r0, r5
 8008c00:	f000 f93c 	bl	8008e7c <_fflush_r>
 8008c04:	bb30      	cbnz	r0, 8008c54 <__swbuf_r+0x90>
 8008c06:	68a3      	ldr	r3, [r4, #8]
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	60a3      	str	r3, [r4, #8]
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	6022      	str	r2, [r4, #0]
 8008c12:	701e      	strb	r6, [r3, #0]
 8008c14:	6963      	ldr	r3, [r4, #20]
 8008c16:	3001      	adds	r0, #1
 8008c18:	4283      	cmp	r3, r0
 8008c1a:	d004      	beq.n	8008c26 <__swbuf_r+0x62>
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	07db      	lsls	r3, r3, #31
 8008c20:	d506      	bpl.n	8008c30 <__swbuf_r+0x6c>
 8008c22:	2e0a      	cmp	r6, #10
 8008c24:	d104      	bne.n	8008c30 <__swbuf_r+0x6c>
 8008c26:	4621      	mov	r1, r4
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f000 f927 	bl	8008e7c <_fflush_r>
 8008c2e:	b988      	cbnz	r0, 8008c54 <__swbuf_r+0x90>
 8008c30:	4638      	mov	r0, r7
 8008c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c34:	4b0a      	ldr	r3, [pc, #40]	; (8008c60 <__swbuf_r+0x9c>)
 8008c36:	429c      	cmp	r4, r3
 8008c38:	d101      	bne.n	8008c3e <__swbuf_r+0x7a>
 8008c3a:	68ac      	ldr	r4, [r5, #8]
 8008c3c:	e7cf      	b.n	8008bde <__swbuf_r+0x1a>
 8008c3e:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <__swbuf_r+0xa0>)
 8008c40:	429c      	cmp	r4, r3
 8008c42:	bf08      	it	eq
 8008c44:	68ec      	ldreq	r4, [r5, #12]
 8008c46:	e7ca      	b.n	8008bde <__swbuf_r+0x1a>
 8008c48:	4621      	mov	r1, r4
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f000 f81a 	bl	8008c84 <__swsetup_r>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d0cb      	beq.n	8008bec <__swbuf_r+0x28>
 8008c54:	f04f 37ff 	mov.w	r7, #4294967295
 8008c58:	e7ea      	b.n	8008c30 <__swbuf_r+0x6c>
 8008c5a:	bf00      	nop
 8008c5c:	0800ac7c 	.word	0x0800ac7c
 8008c60:	0800ac9c 	.word	0x0800ac9c
 8008c64:	0800ac5c 	.word	0x0800ac5c

08008c68 <__ascii_wctomb>:
 8008c68:	b149      	cbz	r1, 8008c7e <__ascii_wctomb+0x16>
 8008c6a:	2aff      	cmp	r2, #255	; 0xff
 8008c6c:	bf85      	ittet	hi
 8008c6e:	238a      	movhi	r3, #138	; 0x8a
 8008c70:	6003      	strhi	r3, [r0, #0]
 8008c72:	700a      	strbls	r2, [r1, #0]
 8008c74:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c78:	bf98      	it	ls
 8008c7a:	2001      	movls	r0, #1
 8008c7c:	4770      	bx	lr
 8008c7e:	4608      	mov	r0, r1
 8008c80:	4770      	bx	lr
	...

08008c84 <__swsetup_r>:
 8008c84:	4b32      	ldr	r3, [pc, #200]	; (8008d50 <__swsetup_r+0xcc>)
 8008c86:	b570      	push	{r4, r5, r6, lr}
 8008c88:	681d      	ldr	r5, [r3, #0]
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	b125      	cbz	r5, 8008c9a <__swsetup_r+0x16>
 8008c90:	69ab      	ldr	r3, [r5, #24]
 8008c92:	b913      	cbnz	r3, 8008c9a <__swsetup_r+0x16>
 8008c94:	4628      	mov	r0, r5
 8008c96:	f000 f985 	bl	8008fa4 <__sinit>
 8008c9a:	4b2e      	ldr	r3, [pc, #184]	; (8008d54 <__swsetup_r+0xd0>)
 8008c9c:	429c      	cmp	r4, r3
 8008c9e:	d10f      	bne.n	8008cc0 <__swsetup_r+0x3c>
 8008ca0:	686c      	ldr	r4, [r5, #4]
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ca8:	0719      	lsls	r1, r3, #28
 8008caa:	d42c      	bmi.n	8008d06 <__swsetup_r+0x82>
 8008cac:	06dd      	lsls	r5, r3, #27
 8008cae:	d411      	bmi.n	8008cd4 <__swsetup_r+0x50>
 8008cb0:	2309      	movs	r3, #9
 8008cb2:	6033      	str	r3, [r6, #0]
 8008cb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008cb8:	81a3      	strh	r3, [r4, #12]
 8008cba:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbe:	e03e      	b.n	8008d3e <__swsetup_r+0xba>
 8008cc0:	4b25      	ldr	r3, [pc, #148]	; (8008d58 <__swsetup_r+0xd4>)
 8008cc2:	429c      	cmp	r4, r3
 8008cc4:	d101      	bne.n	8008cca <__swsetup_r+0x46>
 8008cc6:	68ac      	ldr	r4, [r5, #8]
 8008cc8:	e7eb      	b.n	8008ca2 <__swsetup_r+0x1e>
 8008cca:	4b24      	ldr	r3, [pc, #144]	; (8008d5c <__swsetup_r+0xd8>)
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	bf08      	it	eq
 8008cd0:	68ec      	ldreq	r4, [r5, #12]
 8008cd2:	e7e6      	b.n	8008ca2 <__swsetup_r+0x1e>
 8008cd4:	0758      	lsls	r0, r3, #29
 8008cd6:	d512      	bpl.n	8008cfe <__swsetup_r+0x7a>
 8008cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cda:	b141      	cbz	r1, 8008cee <__swsetup_r+0x6a>
 8008cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ce0:	4299      	cmp	r1, r3
 8008ce2:	d002      	beq.n	8008cea <__swsetup_r+0x66>
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f7ff fb31 	bl	800834c <_free_r>
 8008cea:	2300      	movs	r3, #0
 8008cec:	6363      	str	r3, [r4, #52]	; 0x34
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	6063      	str	r3, [r4, #4]
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	89a3      	ldrh	r3, [r4, #12]
 8008d00:	f043 0308 	orr.w	r3, r3, #8
 8008d04:	81a3      	strh	r3, [r4, #12]
 8008d06:	6923      	ldr	r3, [r4, #16]
 8008d08:	b94b      	cbnz	r3, 8008d1e <__swsetup_r+0x9a>
 8008d0a:	89a3      	ldrh	r3, [r4, #12]
 8008d0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d14:	d003      	beq.n	8008d1e <__swsetup_r+0x9a>
 8008d16:	4621      	mov	r1, r4
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f000 fa09 	bl	8009130 <__smakebuf_r>
 8008d1e:	89a0      	ldrh	r0, [r4, #12]
 8008d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d24:	f010 0301 	ands.w	r3, r0, #1
 8008d28:	d00a      	beq.n	8008d40 <__swsetup_r+0xbc>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	60a3      	str	r3, [r4, #8]
 8008d2e:	6963      	ldr	r3, [r4, #20]
 8008d30:	425b      	negs	r3, r3
 8008d32:	61a3      	str	r3, [r4, #24]
 8008d34:	6923      	ldr	r3, [r4, #16]
 8008d36:	b943      	cbnz	r3, 8008d4a <__swsetup_r+0xc6>
 8008d38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d3c:	d1ba      	bne.n	8008cb4 <__swsetup_r+0x30>
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
 8008d40:	0781      	lsls	r1, r0, #30
 8008d42:	bf58      	it	pl
 8008d44:	6963      	ldrpl	r3, [r4, #20]
 8008d46:	60a3      	str	r3, [r4, #8]
 8008d48:	e7f4      	b.n	8008d34 <__swsetup_r+0xb0>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	e7f7      	b.n	8008d3e <__swsetup_r+0xba>
 8008d4e:	bf00      	nop
 8008d50:	20000024 	.word	0x20000024
 8008d54:	0800ac7c 	.word	0x0800ac7c
 8008d58:	0800ac9c 	.word	0x0800ac9c
 8008d5c:	0800ac5c 	.word	0x0800ac5c

08008d60 <abort>:
 8008d60:	b508      	push	{r3, lr}
 8008d62:	2006      	movs	r0, #6
 8008d64:	f000 fa54 	bl	8009210 <raise>
 8008d68:	2001      	movs	r0, #1
 8008d6a:	f7f9 fd41 	bl	80027f0 <_exit>
	...

08008d70 <__sflush_r>:
 8008d70:	898a      	ldrh	r2, [r1, #12]
 8008d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d76:	4605      	mov	r5, r0
 8008d78:	0710      	lsls	r0, r2, #28
 8008d7a:	460c      	mov	r4, r1
 8008d7c:	d458      	bmi.n	8008e30 <__sflush_r+0xc0>
 8008d7e:	684b      	ldr	r3, [r1, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	dc05      	bgt.n	8008d90 <__sflush_r+0x20>
 8008d84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	dc02      	bgt.n	8008d90 <__sflush_r+0x20>
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d92:	2e00      	cmp	r6, #0
 8008d94:	d0f9      	beq.n	8008d8a <__sflush_r+0x1a>
 8008d96:	2300      	movs	r3, #0
 8008d98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d9c:	682f      	ldr	r7, [r5, #0]
 8008d9e:	602b      	str	r3, [r5, #0]
 8008da0:	d032      	beq.n	8008e08 <__sflush_r+0x98>
 8008da2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	075a      	lsls	r2, r3, #29
 8008da8:	d505      	bpl.n	8008db6 <__sflush_r+0x46>
 8008daa:	6863      	ldr	r3, [r4, #4]
 8008dac:	1ac0      	subs	r0, r0, r3
 8008dae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008db0:	b10b      	cbz	r3, 8008db6 <__sflush_r+0x46>
 8008db2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008db4:	1ac0      	subs	r0, r0, r3
 8008db6:	2300      	movs	r3, #0
 8008db8:	4602      	mov	r2, r0
 8008dba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dbc:	6a21      	ldr	r1, [r4, #32]
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	47b0      	blx	r6
 8008dc2:	1c43      	adds	r3, r0, #1
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	d106      	bne.n	8008dd6 <__sflush_r+0x66>
 8008dc8:	6829      	ldr	r1, [r5, #0]
 8008dca:	291d      	cmp	r1, #29
 8008dcc:	d82c      	bhi.n	8008e28 <__sflush_r+0xb8>
 8008dce:	4a2a      	ldr	r2, [pc, #168]	; (8008e78 <__sflush_r+0x108>)
 8008dd0:	40ca      	lsrs	r2, r1
 8008dd2:	07d6      	lsls	r6, r2, #31
 8008dd4:	d528      	bpl.n	8008e28 <__sflush_r+0xb8>
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	6062      	str	r2, [r4, #4]
 8008dda:	04d9      	lsls	r1, r3, #19
 8008ddc:	6922      	ldr	r2, [r4, #16]
 8008dde:	6022      	str	r2, [r4, #0]
 8008de0:	d504      	bpl.n	8008dec <__sflush_r+0x7c>
 8008de2:	1c42      	adds	r2, r0, #1
 8008de4:	d101      	bne.n	8008dea <__sflush_r+0x7a>
 8008de6:	682b      	ldr	r3, [r5, #0]
 8008de8:	b903      	cbnz	r3, 8008dec <__sflush_r+0x7c>
 8008dea:	6560      	str	r0, [r4, #84]	; 0x54
 8008dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dee:	602f      	str	r7, [r5, #0]
 8008df0:	2900      	cmp	r1, #0
 8008df2:	d0ca      	beq.n	8008d8a <__sflush_r+0x1a>
 8008df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008df8:	4299      	cmp	r1, r3
 8008dfa:	d002      	beq.n	8008e02 <__sflush_r+0x92>
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	f7ff faa5 	bl	800834c <_free_r>
 8008e02:	2000      	movs	r0, #0
 8008e04:	6360      	str	r0, [r4, #52]	; 0x34
 8008e06:	e7c1      	b.n	8008d8c <__sflush_r+0x1c>
 8008e08:	6a21      	ldr	r1, [r4, #32]
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	47b0      	blx	r6
 8008e10:	1c41      	adds	r1, r0, #1
 8008e12:	d1c7      	bne.n	8008da4 <__sflush_r+0x34>
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d0c4      	beq.n	8008da4 <__sflush_r+0x34>
 8008e1a:	2b1d      	cmp	r3, #29
 8008e1c:	d001      	beq.n	8008e22 <__sflush_r+0xb2>
 8008e1e:	2b16      	cmp	r3, #22
 8008e20:	d101      	bne.n	8008e26 <__sflush_r+0xb6>
 8008e22:	602f      	str	r7, [r5, #0]
 8008e24:	e7b1      	b.n	8008d8a <__sflush_r+0x1a>
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e2c:	81a3      	strh	r3, [r4, #12]
 8008e2e:	e7ad      	b.n	8008d8c <__sflush_r+0x1c>
 8008e30:	690f      	ldr	r7, [r1, #16]
 8008e32:	2f00      	cmp	r7, #0
 8008e34:	d0a9      	beq.n	8008d8a <__sflush_r+0x1a>
 8008e36:	0793      	lsls	r3, r2, #30
 8008e38:	680e      	ldr	r6, [r1, #0]
 8008e3a:	bf08      	it	eq
 8008e3c:	694b      	ldreq	r3, [r1, #20]
 8008e3e:	600f      	str	r7, [r1, #0]
 8008e40:	bf18      	it	ne
 8008e42:	2300      	movne	r3, #0
 8008e44:	eba6 0807 	sub.w	r8, r6, r7
 8008e48:	608b      	str	r3, [r1, #8]
 8008e4a:	f1b8 0f00 	cmp.w	r8, #0
 8008e4e:	dd9c      	ble.n	8008d8a <__sflush_r+0x1a>
 8008e50:	6a21      	ldr	r1, [r4, #32]
 8008e52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e54:	4643      	mov	r3, r8
 8008e56:	463a      	mov	r2, r7
 8008e58:	4628      	mov	r0, r5
 8008e5a:	47b0      	blx	r6
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	dc06      	bgt.n	8008e6e <__sflush_r+0xfe>
 8008e60:	89a3      	ldrh	r3, [r4, #12]
 8008e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e66:	81a3      	strh	r3, [r4, #12]
 8008e68:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6c:	e78e      	b.n	8008d8c <__sflush_r+0x1c>
 8008e6e:	4407      	add	r7, r0
 8008e70:	eba8 0800 	sub.w	r8, r8, r0
 8008e74:	e7e9      	b.n	8008e4a <__sflush_r+0xda>
 8008e76:	bf00      	nop
 8008e78:	20400001 	.word	0x20400001

08008e7c <_fflush_r>:
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	690b      	ldr	r3, [r1, #16]
 8008e80:	4605      	mov	r5, r0
 8008e82:	460c      	mov	r4, r1
 8008e84:	b913      	cbnz	r3, 8008e8c <_fflush_r+0x10>
 8008e86:	2500      	movs	r5, #0
 8008e88:	4628      	mov	r0, r5
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	b118      	cbz	r0, 8008e96 <_fflush_r+0x1a>
 8008e8e:	6983      	ldr	r3, [r0, #24]
 8008e90:	b90b      	cbnz	r3, 8008e96 <_fflush_r+0x1a>
 8008e92:	f000 f887 	bl	8008fa4 <__sinit>
 8008e96:	4b14      	ldr	r3, [pc, #80]	; (8008ee8 <_fflush_r+0x6c>)
 8008e98:	429c      	cmp	r4, r3
 8008e9a:	d11b      	bne.n	8008ed4 <_fflush_r+0x58>
 8008e9c:	686c      	ldr	r4, [r5, #4]
 8008e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0ef      	beq.n	8008e86 <_fflush_r+0xa>
 8008ea6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ea8:	07d0      	lsls	r0, r2, #31
 8008eaa:	d404      	bmi.n	8008eb6 <_fflush_r+0x3a>
 8008eac:	0599      	lsls	r1, r3, #22
 8008eae:	d402      	bmi.n	8008eb6 <_fflush_r+0x3a>
 8008eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eb2:	f000 f915 	bl	80090e0 <__retarget_lock_acquire_recursive>
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	4621      	mov	r1, r4
 8008eba:	f7ff ff59 	bl	8008d70 <__sflush_r>
 8008ebe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ec0:	07da      	lsls	r2, r3, #31
 8008ec2:	4605      	mov	r5, r0
 8008ec4:	d4e0      	bmi.n	8008e88 <_fflush_r+0xc>
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	059b      	lsls	r3, r3, #22
 8008eca:	d4dd      	bmi.n	8008e88 <_fflush_r+0xc>
 8008ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ece:	f000 f908 	bl	80090e2 <__retarget_lock_release_recursive>
 8008ed2:	e7d9      	b.n	8008e88 <_fflush_r+0xc>
 8008ed4:	4b05      	ldr	r3, [pc, #20]	; (8008eec <_fflush_r+0x70>)
 8008ed6:	429c      	cmp	r4, r3
 8008ed8:	d101      	bne.n	8008ede <_fflush_r+0x62>
 8008eda:	68ac      	ldr	r4, [r5, #8]
 8008edc:	e7df      	b.n	8008e9e <_fflush_r+0x22>
 8008ede:	4b04      	ldr	r3, [pc, #16]	; (8008ef0 <_fflush_r+0x74>)
 8008ee0:	429c      	cmp	r4, r3
 8008ee2:	bf08      	it	eq
 8008ee4:	68ec      	ldreq	r4, [r5, #12]
 8008ee6:	e7da      	b.n	8008e9e <_fflush_r+0x22>
 8008ee8:	0800ac7c 	.word	0x0800ac7c
 8008eec:	0800ac9c 	.word	0x0800ac9c
 8008ef0:	0800ac5c 	.word	0x0800ac5c

08008ef4 <std>:
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	b510      	push	{r4, lr}
 8008ef8:	4604      	mov	r4, r0
 8008efa:	e9c0 3300 	strd	r3, r3, [r0]
 8008efe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f02:	6083      	str	r3, [r0, #8]
 8008f04:	8181      	strh	r1, [r0, #12]
 8008f06:	6643      	str	r3, [r0, #100]	; 0x64
 8008f08:	81c2      	strh	r2, [r0, #14]
 8008f0a:	6183      	str	r3, [r0, #24]
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	2208      	movs	r2, #8
 8008f10:	305c      	adds	r0, #92	; 0x5c
 8008f12:	f7fd fb47 	bl	80065a4 <memset>
 8008f16:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <std+0x38>)
 8008f18:	6263      	str	r3, [r4, #36]	; 0x24
 8008f1a:	4b05      	ldr	r3, [pc, #20]	; (8008f30 <std+0x3c>)
 8008f1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f1e:	4b05      	ldr	r3, [pc, #20]	; (8008f34 <std+0x40>)
 8008f20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f22:	4b05      	ldr	r3, [pc, #20]	; (8008f38 <std+0x44>)
 8008f24:	6224      	str	r4, [r4, #32]
 8008f26:	6323      	str	r3, [r4, #48]	; 0x30
 8008f28:	bd10      	pop	{r4, pc}
 8008f2a:	bf00      	nop
 8008f2c:	08009249 	.word	0x08009249
 8008f30:	0800926b 	.word	0x0800926b
 8008f34:	080092a3 	.word	0x080092a3
 8008f38:	080092c7 	.word	0x080092c7

08008f3c <_cleanup_r>:
 8008f3c:	4901      	ldr	r1, [pc, #4]	; (8008f44 <_cleanup_r+0x8>)
 8008f3e:	f000 b8af 	b.w	80090a0 <_fwalk_reent>
 8008f42:	bf00      	nop
 8008f44:	08008e7d 	.word	0x08008e7d

08008f48 <__sfmoreglue>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	2268      	movs	r2, #104	; 0x68
 8008f4c:	1e4d      	subs	r5, r1, #1
 8008f4e:	4355      	muls	r5, r2
 8008f50:	460e      	mov	r6, r1
 8008f52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f56:	f7ff fa65 	bl	8008424 <_malloc_r>
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	b140      	cbz	r0, 8008f70 <__sfmoreglue+0x28>
 8008f5e:	2100      	movs	r1, #0
 8008f60:	e9c0 1600 	strd	r1, r6, [r0]
 8008f64:	300c      	adds	r0, #12
 8008f66:	60a0      	str	r0, [r4, #8]
 8008f68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f6c:	f7fd fb1a 	bl	80065a4 <memset>
 8008f70:	4620      	mov	r0, r4
 8008f72:	bd70      	pop	{r4, r5, r6, pc}

08008f74 <__sfp_lock_acquire>:
 8008f74:	4801      	ldr	r0, [pc, #4]	; (8008f7c <__sfp_lock_acquire+0x8>)
 8008f76:	f000 b8b3 	b.w	80090e0 <__retarget_lock_acquire_recursive>
 8008f7a:	bf00      	nop
 8008f7c:	200003b1 	.word	0x200003b1

08008f80 <__sfp_lock_release>:
 8008f80:	4801      	ldr	r0, [pc, #4]	; (8008f88 <__sfp_lock_release+0x8>)
 8008f82:	f000 b8ae 	b.w	80090e2 <__retarget_lock_release_recursive>
 8008f86:	bf00      	nop
 8008f88:	200003b1 	.word	0x200003b1

08008f8c <__sinit_lock_acquire>:
 8008f8c:	4801      	ldr	r0, [pc, #4]	; (8008f94 <__sinit_lock_acquire+0x8>)
 8008f8e:	f000 b8a7 	b.w	80090e0 <__retarget_lock_acquire_recursive>
 8008f92:	bf00      	nop
 8008f94:	200003b2 	.word	0x200003b2

08008f98 <__sinit_lock_release>:
 8008f98:	4801      	ldr	r0, [pc, #4]	; (8008fa0 <__sinit_lock_release+0x8>)
 8008f9a:	f000 b8a2 	b.w	80090e2 <__retarget_lock_release_recursive>
 8008f9e:	bf00      	nop
 8008fa0:	200003b2 	.word	0x200003b2

08008fa4 <__sinit>:
 8008fa4:	b510      	push	{r4, lr}
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	f7ff fff0 	bl	8008f8c <__sinit_lock_acquire>
 8008fac:	69a3      	ldr	r3, [r4, #24]
 8008fae:	b11b      	cbz	r3, 8008fb8 <__sinit+0x14>
 8008fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fb4:	f7ff bff0 	b.w	8008f98 <__sinit_lock_release>
 8008fb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fbc:	6523      	str	r3, [r4, #80]	; 0x50
 8008fbe:	4b13      	ldr	r3, [pc, #76]	; (800900c <__sinit+0x68>)
 8008fc0:	4a13      	ldr	r2, [pc, #76]	; (8009010 <__sinit+0x6c>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fc6:	42a3      	cmp	r3, r4
 8008fc8:	bf04      	itt	eq
 8008fca:	2301      	moveq	r3, #1
 8008fcc:	61a3      	streq	r3, [r4, #24]
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f000 f820 	bl	8009014 <__sfp>
 8008fd4:	6060      	str	r0, [r4, #4]
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f000 f81c 	bl	8009014 <__sfp>
 8008fdc:	60a0      	str	r0, [r4, #8]
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f000 f818 	bl	8009014 <__sfp>
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	60e0      	str	r0, [r4, #12]
 8008fe8:	2104      	movs	r1, #4
 8008fea:	6860      	ldr	r0, [r4, #4]
 8008fec:	f7ff ff82 	bl	8008ef4 <std>
 8008ff0:	68a0      	ldr	r0, [r4, #8]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	2109      	movs	r1, #9
 8008ff6:	f7ff ff7d 	bl	8008ef4 <std>
 8008ffa:	68e0      	ldr	r0, [r4, #12]
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	2112      	movs	r1, #18
 8009000:	f7ff ff78 	bl	8008ef4 <std>
 8009004:	2301      	movs	r3, #1
 8009006:	61a3      	str	r3, [r4, #24]
 8009008:	e7d2      	b.n	8008fb0 <__sinit+0xc>
 800900a:	bf00      	nop
 800900c:	0800a8e4 	.word	0x0800a8e4
 8009010:	08008f3d 	.word	0x08008f3d

08009014 <__sfp>:
 8009014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009016:	4607      	mov	r7, r0
 8009018:	f7ff ffac 	bl	8008f74 <__sfp_lock_acquire>
 800901c:	4b1e      	ldr	r3, [pc, #120]	; (8009098 <__sfp+0x84>)
 800901e:	681e      	ldr	r6, [r3, #0]
 8009020:	69b3      	ldr	r3, [r6, #24]
 8009022:	b913      	cbnz	r3, 800902a <__sfp+0x16>
 8009024:	4630      	mov	r0, r6
 8009026:	f7ff ffbd 	bl	8008fa4 <__sinit>
 800902a:	3648      	adds	r6, #72	; 0x48
 800902c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009030:	3b01      	subs	r3, #1
 8009032:	d503      	bpl.n	800903c <__sfp+0x28>
 8009034:	6833      	ldr	r3, [r6, #0]
 8009036:	b30b      	cbz	r3, 800907c <__sfp+0x68>
 8009038:	6836      	ldr	r6, [r6, #0]
 800903a:	e7f7      	b.n	800902c <__sfp+0x18>
 800903c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009040:	b9d5      	cbnz	r5, 8009078 <__sfp+0x64>
 8009042:	4b16      	ldr	r3, [pc, #88]	; (800909c <__sfp+0x88>)
 8009044:	60e3      	str	r3, [r4, #12]
 8009046:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800904a:	6665      	str	r5, [r4, #100]	; 0x64
 800904c:	f000 f847 	bl	80090de <__retarget_lock_init_recursive>
 8009050:	f7ff ff96 	bl	8008f80 <__sfp_lock_release>
 8009054:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009058:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800905c:	6025      	str	r5, [r4, #0]
 800905e:	61a5      	str	r5, [r4, #24]
 8009060:	2208      	movs	r2, #8
 8009062:	4629      	mov	r1, r5
 8009064:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009068:	f7fd fa9c 	bl	80065a4 <memset>
 800906c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009070:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009074:	4620      	mov	r0, r4
 8009076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009078:	3468      	adds	r4, #104	; 0x68
 800907a:	e7d9      	b.n	8009030 <__sfp+0x1c>
 800907c:	2104      	movs	r1, #4
 800907e:	4638      	mov	r0, r7
 8009080:	f7ff ff62 	bl	8008f48 <__sfmoreglue>
 8009084:	4604      	mov	r4, r0
 8009086:	6030      	str	r0, [r6, #0]
 8009088:	2800      	cmp	r0, #0
 800908a:	d1d5      	bne.n	8009038 <__sfp+0x24>
 800908c:	f7ff ff78 	bl	8008f80 <__sfp_lock_release>
 8009090:	230c      	movs	r3, #12
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	e7ee      	b.n	8009074 <__sfp+0x60>
 8009096:	bf00      	nop
 8009098:	0800a8e4 	.word	0x0800a8e4
 800909c:	ffff0001 	.word	0xffff0001

080090a0 <_fwalk_reent>:
 80090a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090a4:	4606      	mov	r6, r0
 80090a6:	4688      	mov	r8, r1
 80090a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090ac:	2700      	movs	r7, #0
 80090ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090b2:	f1b9 0901 	subs.w	r9, r9, #1
 80090b6:	d505      	bpl.n	80090c4 <_fwalk_reent+0x24>
 80090b8:	6824      	ldr	r4, [r4, #0]
 80090ba:	2c00      	cmp	r4, #0
 80090bc:	d1f7      	bne.n	80090ae <_fwalk_reent+0xe>
 80090be:	4638      	mov	r0, r7
 80090c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090c4:	89ab      	ldrh	r3, [r5, #12]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d907      	bls.n	80090da <_fwalk_reent+0x3a>
 80090ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090ce:	3301      	adds	r3, #1
 80090d0:	d003      	beq.n	80090da <_fwalk_reent+0x3a>
 80090d2:	4629      	mov	r1, r5
 80090d4:	4630      	mov	r0, r6
 80090d6:	47c0      	blx	r8
 80090d8:	4307      	orrs	r7, r0
 80090da:	3568      	adds	r5, #104	; 0x68
 80090dc:	e7e9      	b.n	80090b2 <_fwalk_reent+0x12>

080090de <__retarget_lock_init_recursive>:
 80090de:	4770      	bx	lr

080090e0 <__retarget_lock_acquire_recursive>:
 80090e0:	4770      	bx	lr

080090e2 <__retarget_lock_release_recursive>:
 80090e2:	4770      	bx	lr

080090e4 <__swhatbuf_r>:
 80090e4:	b570      	push	{r4, r5, r6, lr}
 80090e6:	460e      	mov	r6, r1
 80090e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ec:	2900      	cmp	r1, #0
 80090ee:	b096      	sub	sp, #88	; 0x58
 80090f0:	4614      	mov	r4, r2
 80090f2:	461d      	mov	r5, r3
 80090f4:	da08      	bge.n	8009108 <__swhatbuf_r+0x24>
 80090f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	602a      	str	r2, [r5, #0]
 80090fe:	061a      	lsls	r2, r3, #24
 8009100:	d410      	bmi.n	8009124 <__swhatbuf_r+0x40>
 8009102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009106:	e00e      	b.n	8009126 <__swhatbuf_r+0x42>
 8009108:	466a      	mov	r2, sp
 800910a:	f000 f903 	bl	8009314 <_fstat_r>
 800910e:	2800      	cmp	r0, #0
 8009110:	dbf1      	blt.n	80090f6 <__swhatbuf_r+0x12>
 8009112:	9a01      	ldr	r2, [sp, #4]
 8009114:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009118:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800911c:	425a      	negs	r2, r3
 800911e:	415a      	adcs	r2, r3
 8009120:	602a      	str	r2, [r5, #0]
 8009122:	e7ee      	b.n	8009102 <__swhatbuf_r+0x1e>
 8009124:	2340      	movs	r3, #64	; 0x40
 8009126:	2000      	movs	r0, #0
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	b016      	add	sp, #88	; 0x58
 800912c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009130 <__smakebuf_r>:
 8009130:	898b      	ldrh	r3, [r1, #12]
 8009132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009134:	079d      	lsls	r5, r3, #30
 8009136:	4606      	mov	r6, r0
 8009138:	460c      	mov	r4, r1
 800913a:	d507      	bpl.n	800914c <__smakebuf_r+0x1c>
 800913c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	6123      	str	r3, [r4, #16]
 8009144:	2301      	movs	r3, #1
 8009146:	6163      	str	r3, [r4, #20]
 8009148:	b002      	add	sp, #8
 800914a:	bd70      	pop	{r4, r5, r6, pc}
 800914c:	ab01      	add	r3, sp, #4
 800914e:	466a      	mov	r2, sp
 8009150:	f7ff ffc8 	bl	80090e4 <__swhatbuf_r>
 8009154:	9900      	ldr	r1, [sp, #0]
 8009156:	4605      	mov	r5, r0
 8009158:	4630      	mov	r0, r6
 800915a:	f7ff f963 	bl	8008424 <_malloc_r>
 800915e:	b948      	cbnz	r0, 8009174 <__smakebuf_r+0x44>
 8009160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009164:	059a      	lsls	r2, r3, #22
 8009166:	d4ef      	bmi.n	8009148 <__smakebuf_r+0x18>
 8009168:	f023 0303 	bic.w	r3, r3, #3
 800916c:	f043 0302 	orr.w	r3, r3, #2
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	e7e3      	b.n	800913c <__smakebuf_r+0xc>
 8009174:	4b0d      	ldr	r3, [pc, #52]	; (80091ac <__smakebuf_r+0x7c>)
 8009176:	62b3      	str	r3, [r6, #40]	; 0x28
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	6020      	str	r0, [r4, #0]
 800917c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009180:	81a3      	strh	r3, [r4, #12]
 8009182:	9b00      	ldr	r3, [sp, #0]
 8009184:	6163      	str	r3, [r4, #20]
 8009186:	9b01      	ldr	r3, [sp, #4]
 8009188:	6120      	str	r0, [r4, #16]
 800918a:	b15b      	cbz	r3, 80091a4 <__smakebuf_r+0x74>
 800918c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009190:	4630      	mov	r0, r6
 8009192:	f000 f8d1 	bl	8009338 <_isatty_r>
 8009196:	b128      	cbz	r0, 80091a4 <__smakebuf_r+0x74>
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	f023 0303 	bic.w	r3, r3, #3
 800919e:	f043 0301 	orr.w	r3, r3, #1
 80091a2:	81a3      	strh	r3, [r4, #12]
 80091a4:	89a0      	ldrh	r0, [r4, #12]
 80091a6:	4305      	orrs	r5, r0
 80091a8:	81a5      	strh	r5, [r4, #12]
 80091aa:	e7cd      	b.n	8009148 <__smakebuf_r+0x18>
 80091ac:	08008f3d 	.word	0x08008f3d

080091b0 <_malloc_usable_size_r>:
 80091b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b4:	1f18      	subs	r0, r3, #4
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	bfbc      	itt	lt
 80091ba:	580b      	ldrlt	r3, [r1, r0]
 80091bc:	18c0      	addlt	r0, r0, r3
 80091be:	4770      	bx	lr

080091c0 <_raise_r>:
 80091c0:	291f      	cmp	r1, #31
 80091c2:	b538      	push	{r3, r4, r5, lr}
 80091c4:	4604      	mov	r4, r0
 80091c6:	460d      	mov	r5, r1
 80091c8:	d904      	bls.n	80091d4 <_raise_r+0x14>
 80091ca:	2316      	movs	r3, #22
 80091cc:	6003      	str	r3, [r0, #0]
 80091ce:	f04f 30ff 	mov.w	r0, #4294967295
 80091d2:	bd38      	pop	{r3, r4, r5, pc}
 80091d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80091d6:	b112      	cbz	r2, 80091de <_raise_r+0x1e>
 80091d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091dc:	b94b      	cbnz	r3, 80091f2 <_raise_r+0x32>
 80091de:	4620      	mov	r0, r4
 80091e0:	f000 f830 	bl	8009244 <_getpid_r>
 80091e4:	462a      	mov	r2, r5
 80091e6:	4601      	mov	r1, r0
 80091e8:	4620      	mov	r0, r4
 80091ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ee:	f000 b817 	b.w	8009220 <_kill_r>
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d00a      	beq.n	800920c <_raise_r+0x4c>
 80091f6:	1c59      	adds	r1, r3, #1
 80091f8:	d103      	bne.n	8009202 <_raise_r+0x42>
 80091fa:	2316      	movs	r3, #22
 80091fc:	6003      	str	r3, [r0, #0]
 80091fe:	2001      	movs	r0, #1
 8009200:	e7e7      	b.n	80091d2 <_raise_r+0x12>
 8009202:	2400      	movs	r4, #0
 8009204:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009208:	4628      	mov	r0, r5
 800920a:	4798      	blx	r3
 800920c:	2000      	movs	r0, #0
 800920e:	e7e0      	b.n	80091d2 <_raise_r+0x12>

08009210 <raise>:
 8009210:	4b02      	ldr	r3, [pc, #8]	; (800921c <raise+0xc>)
 8009212:	4601      	mov	r1, r0
 8009214:	6818      	ldr	r0, [r3, #0]
 8009216:	f7ff bfd3 	b.w	80091c0 <_raise_r>
 800921a:	bf00      	nop
 800921c:	20000024 	.word	0x20000024

08009220 <_kill_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4d07      	ldr	r5, [pc, #28]	; (8009240 <_kill_r+0x20>)
 8009224:	2300      	movs	r3, #0
 8009226:	4604      	mov	r4, r0
 8009228:	4608      	mov	r0, r1
 800922a:	4611      	mov	r1, r2
 800922c:	602b      	str	r3, [r5, #0]
 800922e:	f7f9 facf 	bl	80027d0 <_kill>
 8009232:	1c43      	adds	r3, r0, #1
 8009234:	d102      	bne.n	800923c <_kill_r+0x1c>
 8009236:	682b      	ldr	r3, [r5, #0]
 8009238:	b103      	cbz	r3, 800923c <_kill_r+0x1c>
 800923a:	6023      	str	r3, [r4, #0]
 800923c:	bd38      	pop	{r3, r4, r5, pc}
 800923e:	bf00      	nop
 8009240:	200003ac 	.word	0x200003ac

08009244 <_getpid_r>:
 8009244:	f7f9 babc 	b.w	80027c0 <_getpid>

08009248 <__sread>:
 8009248:	b510      	push	{r4, lr}
 800924a:	460c      	mov	r4, r1
 800924c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009250:	f000 f894 	bl	800937c <_read_r>
 8009254:	2800      	cmp	r0, #0
 8009256:	bfab      	itete	ge
 8009258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800925a:	89a3      	ldrhlt	r3, [r4, #12]
 800925c:	181b      	addge	r3, r3, r0
 800925e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009262:	bfac      	ite	ge
 8009264:	6563      	strge	r3, [r4, #84]	; 0x54
 8009266:	81a3      	strhlt	r3, [r4, #12]
 8009268:	bd10      	pop	{r4, pc}

0800926a <__swrite>:
 800926a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800926e:	461f      	mov	r7, r3
 8009270:	898b      	ldrh	r3, [r1, #12]
 8009272:	05db      	lsls	r3, r3, #23
 8009274:	4605      	mov	r5, r0
 8009276:	460c      	mov	r4, r1
 8009278:	4616      	mov	r6, r2
 800927a:	d505      	bpl.n	8009288 <__swrite+0x1e>
 800927c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009280:	2302      	movs	r3, #2
 8009282:	2200      	movs	r2, #0
 8009284:	f000 f868 	bl	8009358 <_lseek_r>
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800928e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009292:	81a3      	strh	r3, [r4, #12]
 8009294:	4632      	mov	r2, r6
 8009296:	463b      	mov	r3, r7
 8009298:	4628      	mov	r0, r5
 800929a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800929e:	f000 b817 	b.w	80092d0 <_write_r>

080092a2 <__sseek>:
 80092a2:	b510      	push	{r4, lr}
 80092a4:	460c      	mov	r4, r1
 80092a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092aa:	f000 f855 	bl	8009358 <_lseek_r>
 80092ae:	1c43      	adds	r3, r0, #1
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	bf15      	itete	ne
 80092b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80092b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092be:	81a3      	strheq	r3, [r4, #12]
 80092c0:	bf18      	it	ne
 80092c2:	81a3      	strhne	r3, [r4, #12]
 80092c4:	bd10      	pop	{r4, pc}

080092c6 <__sclose>:
 80092c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ca:	f000 b813 	b.w	80092f4 <_close_r>
	...

080092d0 <_write_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4d07      	ldr	r5, [pc, #28]	; (80092f0 <_write_r+0x20>)
 80092d4:	4604      	mov	r4, r0
 80092d6:	4608      	mov	r0, r1
 80092d8:	4611      	mov	r1, r2
 80092da:	2200      	movs	r2, #0
 80092dc:	602a      	str	r2, [r5, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	f7f9 faad 	bl	800283e <_write>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d102      	bne.n	80092ee <_write_r+0x1e>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	b103      	cbz	r3, 80092ee <_write_r+0x1e>
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	200003ac 	.word	0x200003ac

080092f4 <_close_r>:
 80092f4:	b538      	push	{r3, r4, r5, lr}
 80092f6:	4d06      	ldr	r5, [pc, #24]	; (8009310 <_close_r+0x1c>)
 80092f8:	2300      	movs	r3, #0
 80092fa:	4604      	mov	r4, r0
 80092fc:	4608      	mov	r0, r1
 80092fe:	602b      	str	r3, [r5, #0]
 8009300:	f7f9 fab9 	bl	8002876 <_close>
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	d102      	bne.n	800930e <_close_r+0x1a>
 8009308:	682b      	ldr	r3, [r5, #0]
 800930a:	b103      	cbz	r3, 800930e <_close_r+0x1a>
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	bd38      	pop	{r3, r4, r5, pc}
 8009310:	200003ac 	.word	0x200003ac

08009314 <_fstat_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4d07      	ldr	r5, [pc, #28]	; (8009334 <_fstat_r+0x20>)
 8009318:	2300      	movs	r3, #0
 800931a:	4604      	mov	r4, r0
 800931c:	4608      	mov	r0, r1
 800931e:	4611      	mov	r1, r2
 8009320:	602b      	str	r3, [r5, #0]
 8009322:	f7f9 fab4 	bl	800288e <_fstat>
 8009326:	1c43      	adds	r3, r0, #1
 8009328:	d102      	bne.n	8009330 <_fstat_r+0x1c>
 800932a:	682b      	ldr	r3, [r5, #0]
 800932c:	b103      	cbz	r3, 8009330 <_fstat_r+0x1c>
 800932e:	6023      	str	r3, [r4, #0]
 8009330:	bd38      	pop	{r3, r4, r5, pc}
 8009332:	bf00      	nop
 8009334:	200003ac 	.word	0x200003ac

08009338 <_isatty_r>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4d06      	ldr	r5, [pc, #24]	; (8009354 <_isatty_r+0x1c>)
 800933c:	2300      	movs	r3, #0
 800933e:	4604      	mov	r4, r0
 8009340:	4608      	mov	r0, r1
 8009342:	602b      	str	r3, [r5, #0]
 8009344:	f7f9 fab3 	bl	80028ae <_isatty>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d102      	bne.n	8009352 <_isatty_r+0x1a>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	b103      	cbz	r3, 8009352 <_isatty_r+0x1a>
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	200003ac 	.word	0x200003ac

08009358 <_lseek_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	4d07      	ldr	r5, [pc, #28]	; (8009378 <_lseek_r+0x20>)
 800935c:	4604      	mov	r4, r0
 800935e:	4608      	mov	r0, r1
 8009360:	4611      	mov	r1, r2
 8009362:	2200      	movs	r2, #0
 8009364:	602a      	str	r2, [r5, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	f7f9 faac 	bl	80028c4 <_lseek>
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	d102      	bne.n	8009376 <_lseek_r+0x1e>
 8009370:	682b      	ldr	r3, [r5, #0]
 8009372:	b103      	cbz	r3, 8009376 <_lseek_r+0x1e>
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	bd38      	pop	{r3, r4, r5, pc}
 8009378:	200003ac 	.word	0x200003ac

0800937c <_read_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4d07      	ldr	r5, [pc, #28]	; (800939c <_read_r+0x20>)
 8009380:	4604      	mov	r4, r0
 8009382:	4608      	mov	r0, r1
 8009384:	4611      	mov	r1, r2
 8009386:	2200      	movs	r2, #0
 8009388:	602a      	str	r2, [r5, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	f7f9 fa3a 	bl	8002804 <_read>
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	d102      	bne.n	800939a <_read_r+0x1e>
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	b103      	cbz	r3, 800939a <_read_r+0x1e>
 8009398:	6023      	str	r3, [r4, #0]
 800939a:	bd38      	pop	{r3, r4, r5, pc}
 800939c:	200003ac 	.word	0x200003ac

080093a0 <_init>:
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	bf00      	nop
 80093a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a6:	bc08      	pop	{r3}
 80093a8:	469e      	mov	lr, r3
 80093aa:	4770      	bx	lr

080093ac <_fini>:
 80093ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ae:	bf00      	nop
 80093b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b2:	bc08      	pop	{r3}
 80093b4:	469e      	mov	lr, r3
 80093b6:	4770      	bx	lr
